
STM32L010RBT6_I2C_Scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ec  080047ec  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047ec  080047ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f4  080047f4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000057f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047f8  080047f8  000057f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004858  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004858  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b496  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c14  00000000  00000000  0001151a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b0  00000000  00000000  00013b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112e0  00000000  00000000  000142b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2f0  00000000  00000000  00025598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000670fc  00000000  00000000  00032888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099984  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  000999c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0009c14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004684 	.word	0x08004684

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004684 	.word	0x08004684

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <I2C_Scan_Bus>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan_Bus(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b097      	sub	sp, #92	@ 0x5c
 8000474:	af02      	add	r7, sp, #8
    char msg[64];
    int device_count = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t start_time = HAL_GetTick();  // Record start time
 800047a:	f000 fb45 	bl	8000b08 <HAL_GetTick>
 800047e:	0003      	movs	r3, r0
 8000480:	647b      	str	r3, [r7, #68]	@ 0x44

    snprintf(msg, sizeof(msg), "Scanning I2C bus...\r\n");
 8000482:	4a34      	ldr	r2, [pc, #208]	@ (8000554 <I2C_Scan_Bus+0xe4>)
 8000484:	003b      	movs	r3, r7
 8000486:	2140      	movs	r1, #64	@ 0x40
 8000488:	0018      	movs	r0, r3
 800048a:	f003 fc4b 	bl	8003d24 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800048e:	003b      	movs	r3, r7
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff fe39 	bl	8000108 <strlen>
 8000496:	0003      	movs	r3, r0
 8000498:	b29a      	uxth	r2, r3
 800049a:	2301      	movs	r3, #1
 800049c:	425b      	negs	r3, r3
 800049e:	0039      	movs	r1, r7
 80004a0:	482d      	ldr	r0, [pc, #180]	@ (8000558 <I2C_Scan_Bus+0xe8>)
 80004a2:	f002 ff25 	bl	80032f0 <HAL_UART_Transmit>

    for (uint8_t addr = 1; addr < 128; addr++) {
 80004a6:	234b      	movs	r3, #75	@ 0x4b
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e02b      	b.n	8000508 <I2C_Scan_Bus+0x98>
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 80004b0:	244b      	movs	r4, #75	@ 0x4b
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	18db      	adds	r3, r3, r3
 80004ba:	b299      	uxth	r1, r3
 80004bc:	4827      	ldr	r0, [pc, #156]	@ (800055c <I2C_Scan_Bus+0xec>)
 80004be:	230a      	movs	r3, #10
 80004c0:	2201      	movs	r2, #1
 80004c2:	f000 fea5 	bl	8001210 <HAL_I2C_IsDeviceReady>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d115      	bne.n	80004f6 <I2C_Scan_Bus+0x86>
            snprintf(msg, sizeof(msg), "I2C device found at 0x%02X\r\n", addr);
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4a24      	ldr	r2, [pc, #144]	@ (8000560 <I2C_Scan_Bus+0xf0>)
 80004d0:	0038      	movs	r0, r7
 80004d2:	2140      	movs	r1, #64	@ 0x40
 80004d4:	f003 fc26 	bl	8003d24 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004d8:	003b      	movs	r3, r7
 80004da:	0018      	movs	r0, r3
 80004dc:	f7ff fe14 	bl	8000108 <strlen>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	2301      	movs	r3, #1
 80004e6:	425b      	negs	r3, r3
 80004e8:	0039      	movs	r1, r7
 80004ea:	481b      	ldr	r0, [pc, #108]	@ (8000558 <I2C_Scan_Bus+0xe8>)
 80004ec:	f002 ff00 	bl	80032f0 <HAL_UART_Transmit>
            device_count++;
 80004f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004f2:	3301      	adds	r3, #1
 80004f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        HAL_Delay(10);  // Delay between address checks
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 fb10 	bl	8000b1c <HAL_Delay>
    for (uint8_t addr = 1; addr < 128; addr++) {
 80004fc:	214b      	movs	r1, #75	@ 0x4b
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	187b      	adds	r3, r7, r1
 8000504:	3201      	adds	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	234b      	movs	r3, #75	@ 0x4b
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b25b      	sxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	dacd      	bge.n	80004b0 <I2C_Scan_Bus+0x40>
    }

    uint32_t scan_duration = HAL_GetTick() - start_time;
 8000514:	f000 faf8 	bl	8000b08 <HAL_GetTick>
 8000518:	0002      	movs	r2, r0
 800051a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	643b      	str	r3, [r7, #64]	@ 0x40

    snprintf(msg, sizeof(msg), "Scan complete. Found %d device(s). Time: %lu ms\r\n", device_count, scan_duration);
 8000520:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000522:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <I2C_Scan_Bus+0xf4>)
 8000524:	0038      	movs	r0, r7
 8000526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	000b      	movs	r3, r1
 800052c:	2140      	movs	r1, #64	@ 0x40
 800052e:	f003 fbf9 	bl	8003d24 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	f7ff fde7 	bl	8000108 <strlen>
 800053a:	0003      	movs	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	425b      	negs	r3, r3
 8000542:	0039      	movs	r1, r7
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <I2C_Scan_Bus+0xe8>)
 8000546:	f002 fed3 	bl	80032f0 <HAL_UART_Transmit>
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b015      	add	sp, #84	@ 0x54
 8000550:	bd90      	pop	{r4, r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	0800469c 	.word	0x0800469c
 8000558:	200000cc 	.word	0x200000cc
 800055c:	20000078 	.word	0x20000078
 8000560:	080046b4 	.word	0x080046b4
 8000564:	080046d4 	.word	0x080046d4

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa66 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f816 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8f2 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000578:	f000 f880 	bl	800067c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8be 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Call I2C scanner once after init
  HAL_Delay(100); // Small delay before scanning
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 facb 	bl	8000b1c <HAL_Delay>
  I2C_Scan_Bus();
 8000586:	f7ff ff73 	bl	8000470 <I2C_Scan_Bus>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  I2C_Scan_Bus();
 800058a:	f7ff ff71 	bl	8000470 <I2C_Scan_Bus>
	     HAL_Delay(3000); // Scan every 3 seconds
 800058e:	4b03      	ldr	r3, [pc, #12]	@ (800059c <main+0x34>)
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fac3 	bl	8000b1c <HAL_Delay>
	  I2C_Scan_Bus();
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	e7f7      	b.n	800058a <main+0x22>
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	00000bb8 	.word	0x00000bb8

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b099      	sub	sp, #100	@ 0x64
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	242c      	movs	r4, #44	@ 0x2c
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2334      	movs	r3, #52	@ 0x34
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f003 fbed 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	2318      	movs	r3, #24
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fbe5 	bl	8003d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2318      	movs	r3, #24
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f003 fbde 	bl	8003d90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a27      	ldr	r2, [pc, #156]	@ (8000678 <SystemClock_Config+0xd8>)
 80005da:	401a      	ands	r2, r3
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SystemClock_Config+0xd4>)
 80005de:	2180      	movs	r1, #128	@ 0x80
 80005e0:	0109      	lsls	r1, r1, #4
 80005e2:	430a      	orrs	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2210      	movs	r2, #16
 80005ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	22a0      	movs	r2, #160	@ 0xa0
 80005fe:	0212      	lsls	r2, r2, #8
 8000600:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	187b      	adds	r3, r7, r1
 800060a:	0018      	movs	r0, r3
 800060c:	f001 ff70 	bl	80024f0 <HAL_RCC_OscConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000614:	f000 f8b8 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	2118      	movs	r1, #24
 800061a:	187b      	adds	r3, r7, r1
 800061c:	220f      	movs	r2, #15
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fad3 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000646:	f000 f89f 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800064a:	003b      	movs	r3, r7
 800064c:	220a      	movs	r2, #10
 800064e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	003b      	movs	r3, r7
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fcc6 	bl	8002ff0 <HAL_RCCEx_PeriphCLKConfig>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000668:	f000 f88e 	bl	8000788 <Error_Handler>
  }
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b019      	add	sp, #100	@ 0x64
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40007000 	.word	0x40007000
 8000678:	ffffe7ff 	.word	0xffffe7ff

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_I2C1_Init+0x78>)
 8000682:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_I2C1_Init+0x7c>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_I2C1_Init+0x78>)
 8000688:	22c1      	movs	r2, #193	@ 0xc1
 800068a:	00d2      	lsls	r2, r2, #3
 800068c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_I2C1_Init+0x78>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_I2C1_Init+0x78>)
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_I2C1_Init+0x78>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd02 	bl	80010c4 <HAL_I2C_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f860 	bl	8000788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fe77 	bl	80023c0 <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f857 	bl	8000788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_I2C1_Init+0x78>)
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 feba 	bl	8002458 <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 f84e 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000078 	.word	0x20000078
 80006f8:	40005400 	.word	0x40005400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	22e1      	movs	r2, #225	@ 0xe1
 800070a:	0252      	lsls	r2, r2, #9
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fd81 	bl	8003248 <HAL_UART_Init>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f81d 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000cc 	.word	0x200000cc
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_GPIO_Init+0x28>)
 8000764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_GPIO_Init+0x28>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <MX_GPIO_Init+0x28>)
 8000770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <HAL_MspInit+0x24>)
 800079a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x24>)
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <HAL_MspInit+0x24>)
 80007a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_MspInit+0x24>)
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	0549      	lsls	r1, r1, #21
 80007ae:	430a      	orrs	r2, r1
 80007b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b089      	sub	sp, #36	@ 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	240c      	movs	r4, #12
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f003 fade 	bl	8003d90 <memset>
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <HAL_I2C_MspInit+0x90>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d132      	bne.n	8000844 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <HAL_I2C_MspInit+0x94>)
 80007e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HAL_I2C_MspInit+0x94>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_I2C_MspInit+0x94>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	22c0      	movs	r2, #192	@ 0xc0
 80007fa:	00d2      	lsls	r2, r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fe:	0021      	movs	r1, r4
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2212      	movs	r2, #18
 8000804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2203      	movs	r2, #3
 8000810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2206      	movs	r2, #6
 8000816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	187a      	adds	r2, r7, r1
 800081a:	23a0      	movs	r3, #160	@ 0xa0
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fad1 	bl	8000dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_I2C_MspInit+0x94>)
 8000828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_I2C_MspInit+0x94>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0389      	lsls	r1, r1, #14
 8000830:	430a      	orrs	r2, r1
 8000832:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2017      	movs	r0, #23
 800083a:	f000 fa3f 	bl	8000cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800083e:	2017      	movs	r0, #23
 8000840:	f000 fa51 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b009      	add	sp, #36	@ 0x24
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	40005400 	.word	0x40005400
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	240c      	movs	r4, #12
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f003 fa92 	bl	8003d90 <memset>
  if(huart->Instance==USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a18      	ldr	r2, [pc, #96]	@ (80008d4 <HAL_UART_MspInit+0x80>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d129      	bne.n	80008ca <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 8000878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0289      	lsls	r1, r1, #10
 8000880:	430a      	orrs	r2, r1
 8000882:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 8000886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 800088a:	2101      	movs	r1, #1
 800088c:	430a      	orrs	r2, r1
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_UART_MspInit+0x84>)
 8000892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000894:	2201      	movs	r2, #1
 8000896:	4013      	ands	r3, r2
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	220c      	movs	r2, #12
 80008a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2202      	movs	r2, #2
 80008a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2203      	movs	r2, #3
 80008b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2204      	movs	r2, #4
 80008ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	187a      	adds	r2, r7, r1
 80008be:	23a0      	movs	r3, #160	@ 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fa7f 	bl	8000dc8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b009      	add	sp, #36	@ 0x24
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8ee 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <I2C1_IRQHandler+0x2c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	23e0      	movs	r3, #224	@ 0xe0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4013      	ands	r3, r2
 8000920:	d004      	beq.n	800092c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <I2C1_IRQHandler+0x2c>)
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fd89 	bl	800143c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800092a:	e003      	b.n	8000934 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <I2C1_IRQHandler+0x2c>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fd6a 	bl	8001408 <HAL_I2C_EV_IRQHandler>
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	20000078 	.word	0x20000078

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f003 fa16 	bl	8003da0 <__errno>
 8000974:	0003      	movs	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	2301      	movs	r3, #1
 800097c:	425b      	negs	r3, r3
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	18d2      	adds	r2, r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <_sbrk+0x64>)
 8000990:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b006      	add	sp, #24
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20005000 	.word	0x20005000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000154 	.word	0x20000154
 80009a8:	200002a8 	.word	0x200002a8

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f7ff fff6 	bl	80009ac <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80009c0:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <LoopForever+0x6>)
    LDR R1, [R0]
 80009c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <LoopForever+0xa>)
    CMP R1, R2
 80009c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009ca:	d105      	bne.n	80009d8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009ce:	4912      	ldr	r1, [pc, #72]	@ (8000a18 <LoopForever+0x12>)
    STR R1, [R0]
 80009d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009d2:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009d4:	4912      	ldr	r1, [pc, #72]	@ (8000a20 <LoopForever+0x1a>)
    STR R1, [R0]
 80009d6:	6001      	str	r1, [r0, #0]

080009d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009da:	4913      	ldr	r1, [pc, #76]	@ (8000a28 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <LoopForever+0x26>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009f0:	4c10      	ldr	r4, [pc, #64]	@ (8000a34 <LoopForever+0x2e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f003 f9d5 	bl	8003dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fdb1 	bl	8000568 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
   ldr   r0, =_estack
 8000a08:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a14:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a20:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a2c:	080047fc 	.word	0x080047fc
  ldr r2, =_sbss
 8000a30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a34:	200002a4 	.word	0x200002a4

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>
	...

08000a3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_Init+0x3c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Init+0x3c>)
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f811 	bl	8000a7c <HAL_InitTick>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e001      	b.n	8000a6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a66:	f7ff fe95 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_InitTick+0x5c>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_InitTick+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	23fa      	movs	r3, #250	@ 0xfa
 8000a90:	0098      	lsls	r0, r3, #2
 8000a92:	f7ff fb4b 	bl	800012c <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f7ff fb46 	bl	800012c <__udivsi3>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f92f 	bl	8000d06 <HAL_SYSTICK_Config>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e00f      	b.n	8000ad0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d80b      	bhi.n	8000ace <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f8fc 	bl	8000cbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_InitTick+0x64>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000158 	.word	0x20000158

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	@ (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	20000158 	.word	0x20000158

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	0002      	movs	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b76:	d809      	bhi.n	8000b8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	231f      	movs	r3, #31
 8000b80:	401a      	ands	r2, r3
 8000b82:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_EnableIRQ+0x30>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	4091      	lsls	r1, r2
 8000b88:	000a      	movs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
  }
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bac:	d828      	bhi.n	8000c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bae:	4a2f      	ldr	r2, [pc, #188]	@ (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	33c0      	adds	r3, #192	@ 0xc0
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	589b      	ldr	r3, [r3, r2]
 8000bbe:	1dfa      	adds	r2, r7, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	00d2      	lsls	r2, r2, #3
 8000bca:	21ff      	movs	r1, #255	@ 0xff
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	22ff      	movs	r2, #255	@ 0xff
 8000bdc:	401a      	ands	r2, r3
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0018      	movs	r0, r3
 8000be4:	2303      	movs	r3, #3
 8000be6:	4003      	ands	r3, r0
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <__NVIC_SetPriority+0xd4>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	33c0      	adds	r3, #192	@ 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfe:	e031      	b.n	8000c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0019      	movs	r1, r3
 8000c08:	230f      	movs	r3, #15
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3306      	adds	r3, #6
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	3304      	adds	r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	@ 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	@ 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001c      	movs	r4, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	4023      	ands	r3, r4
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	3306      	adds	r3, #6
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	18c3      	adds	r3, r0, r3
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	045b      	lsls	r3, r3, #17
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d301      	bcc.n	8000c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e010      	b.n	8000cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <SysTick_Config+0x44>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	3a01      	subs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2103      	movs	r1, #3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ff7c 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <SysTick_Config+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <SysTick_Config+0x44>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	0002      	movs	r2, r0
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff33 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ffaf 	bl	8000c74 <SysTick_Config>
 8000d16:	0003      	movs	r3, r0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	210f      	movs	r1, #15
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2225      	movs	r2, #37	@ 0x25
 8000d34:	5c9b      	ldrb	r3, [r3, r2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d006      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e02a      	b.n	8000da0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	210e      	movs	r1, #14
 8000d56:	438a      	bics	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	438a      	bics	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	221c      	movs	r2, #28
 8000d70:	401a      	ands	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	2101      	movs	r1, #1
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2225      	movs	r2, #37	@ 0x25
 8000d82:	2101      	movs	r1, #1
 8000d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2224      	movs	r2, #36	@ 0x24
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	4798      	blx	r3
    }
  }
  return status;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2225      	movs	r2, #37	@ 0x25
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	b2db      	uxtb	r3, r3
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dde:	e155      	b.n	800108c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x30>
 8000df6:	e146      	b.n	8001086 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2207      	movs	r2, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	23c0      	movs	r3, #192	@ 0xc0
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x17c>
 8000f42:	e0a0      	b.n	8001086 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b57      	ldr	r3, [pc, #348]	@ (80010a4 <HAL_GPIO_Init+0x2dc>)
 8000f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f48:	4b56      	ldr	r3, [pc, #344]	@ (80010a4 <HAL_GPIO_Init+0x2dc>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f50:	4a55      	ldr	r2, [pc, #340]	@ (80010a8 <HAL_GPIO_Init+0x2e0>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	589b      	ldr	r3, [r3, r2]
 8000f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	23a0      	movs	r3, #160	@ 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x1f6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4a      	ldr	r2, [pc, #296]	@ (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x1f2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a49      	ldr	r2, [pc, #292]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1ee>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a48      	ldr	r2, [pc, #288]	@ (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1ea>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a47      	ldr	r2, [pc, #284]	@ (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1e6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	@ (80010bc <HAL_GPIO_Init+0x2f4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1e2>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e00a      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	4935      	ldr	r1, [pc, #212]	@ (80010a8 <HAL_GPIO_Init+0x2e0>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	035b      	lsls	r3, r3, #13
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	4013      	ands	r3, r2
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	40da      	lsrs	r2, r3
 8001094:	1e13      	subs	r3, r2, #0
 8001096:	d000      	beq.n	800109a <HAL_GPIO_Init+0x2d2>
 8001098:	e6a2      	b.n	8000de0 <HAL_GPIO_Init+0x18>
  }
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b006      	add	sp, #24
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	50000400 	.word	0x50000400
 80010b0:	50000800 	.word	0x50000800
 80010b4:	50000c00 	.word	0x50000c00
 80010b8:	50001000 	.word	0x50001000
 80010bc:	50001c00 	.word	0x50001c00
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e08f      	b.n	80011f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2241      	movs	r2, #65	@ 0x41
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fb65 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2241      	movs	r2, #65	@ 0x41
 80010f6:	2124      	movs	r1, #36	@ 0x24
 80010f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	438a      	bics	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	493b      	ldr	r1, [pc, #236]	@ (8001200 <HAL_I2C_Init+0x13c>)
 8001114:	400a      	ands	r2, r1
 8001116:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4938      	ldr	r1, [pc, #224]	@ (8001204 <HAL_I2C_Init+0x140>)
 8001124:	400a      	ands	r2, r1
 8001126:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	0209      	lsls	r1, r1, #8
 800113c:	430a      	orrs	r2, r1
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e007      	b.n	8001152 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2184      	movs	r1, #132	@ 0x84
 800114c:	0209      	lsls	r1, r1, #8
 800114e:	430a      	orrs	r2, r1
 8001150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d109      	bne.n	800116e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	0109      	lsls	r1, r1, #4
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	e007      	b.n	800117e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4923      	ldr	r1, [pc, #140]	@ (8001208 <HAL_I2C_Init+0x144>)
 800117a:	400a      	ands	r2, r1
 800117c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4920      	ldr	r1, [pc, #128]	@ (800120c <HAL_I2C_Init+0x148>)
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	491a      	ldr	r1, [pc, #104]	@ (8001204 <HAL_I2C_Init+0x140>)
 800119a:	400a      	ands	r2, r1
 800119c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2241      	movs	r2, #65	@ 0x41
 80011e2:	2120      	movs	r1, #32
 80011e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2242      	movs	r2, #66	@ 0x42
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	f0ffffff 	.word	0xf0ffffff
 8001204:	ffff7fff 	.word	0xffff7fff
 8001208:	fffff7ff 	.word	0xfffff7ff
 800120c:	02008000 	.word	0x02008000

08001210 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	230a      	movs	r3, #10
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	1c0a      	adds	r2, r1, #0
 8001222:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2241      	movs	r2, #65	@ 0x41
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b20      	cmp	r3, #32
 8001232:	d000      	beq.n	8001236 <HAL_I2C_IsDeviceReady+0x26>
 8001234:	e0df      	b.n	80013f6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	401a      	ands	r2, r3
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	e0d4      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2240      	movs	r2, #64	@ 0x40
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_I2C_IsDeviceReady+0x4c>
 8001258:	2302      	movs	r3, #2
 800125a:	e0cd      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2240      	movs	r2, #64	@ 0x40
 8001260:	2101      	movs	r1, #1
 8001262:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2241      	movs	r2, #65	@ 0x41
 8001268:	2124      	movs	r1, #36	@ 0x24
 800126a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_I2C_IsDeviceReady+0x7a>
 800127a:	230a      	movs	r3, #10
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	059b      	lsls	r3, r3, #22
 8001282:	0d9b      	lsrs	r3, r3, #22
 8001284:	4a5e      	ldr	r2, [pc, #376]	@ (8001400 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001286:	431a      	orrs	r2, r3
 8001288:	e006      	b.n	8001298 <HAL_I2C_IsDeviceReady+0x88>
 800128a:	230a      	movs	r3, #10
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	059b      	lsls	r3, r3, #22
 8001292:	0d9b      	lsrs	r3, r3, #22
 8001294:	4a5b      	ldr	r2, [pc, #364]	@ (8001404 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001296:	431a      	orrs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fc33 	bl	8000b08 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2220      	movs	r2, #32
 80012ae:	4013      	ands	r3, r2
 80012b0:	3b20      	subs	r3, #32
 80012b2:	425a      	negs	r2, r3
 80012b4:	4153      	adcs	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	231f      	movs	r3, #31
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2210      	movs	r2, #16
 80012c6:	4013      	ands	r3, r2
 80012c8:	3b10      	subs	r3, #16
 80012ca:	425a      	negs	r2, r3
 80012cc:	4153      	adcs	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	231e      	movs	r3, #30
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012d6:	e035      	b.n	8001344 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	d01a      	beq.n	8001314 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012de:	f7ff fc13 	bl	8000b08 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d302      	bcc.n	80012f4 <HAL_I2C_IsDeviceReady+0xe4>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10f      	bne.n	8001314 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2241      	movs	r2, #65	@ 0x41
 80012f8:	2120      	movs	r1, #32
 80012fa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	2220      	movs	r2, #32
 8001302:	431a      	orrs	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2240      	movs	r2, #64	@ 0x40
 800130c:	2100      	movs	r1, #0
 800130e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e071      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2220      	movs	r2, #32
 800131c:	4013      	ands	r3, r2
 800131e:	3b20      	subs	r3, #32
 8001320:	425a      	negs	r2, r3
 8001322:	4153      	adcs	r3, r2
 8001324:	b2da      	uxtb	r2, r3
 8001326:	231f      	movs	r3, #31
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2210      	movs	r2, #16
 8001334:	4013      	ands	r3, r2
 8001336:	3b10      	subs	r3, #16
 8001338:	425a      	negs	r2, r3
 800133a:	4153      	adcs	r3, r2
 800133c:	b2da      	uxtb	r2, r3
 800133e:	231e      	movs	r3, #30
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001344:	231f      	movs	r3, #31
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d104      	bne.n	8001358 <HAL_I2C_IsDeviceReady+0x148>
 800134e:	231e      	movs	r3, #30
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0bf      	beq.n	80012d8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2210      	movs	r2, #16
 8001360:	4013      	ands	r3, r2
 8001362:	2b10      	cmp	r3, #16
 8001364:	d01a      	beq.n	800139c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	0013      	movs	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	f000 fe70 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e03b      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2220      	movs	r2, #32
 8001386:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2241      	movs	r2, #65	@ 0x41
 800138c:	2120      	movs	r1, #32
 800138e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2240      	movs	r2, #64	@ 0x40
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e02d      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	0013      	movs	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	f000 fe55 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e020      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2210      	movs	r2, #16
 80013bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2220      	movs	r2, #32
 80013c4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d900      	bls.n	80013d6 <HAL_I2C_IsDeviceReady+0x1c6>
 80013d4:	e74d      	b.n	8001272 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2241      	movs	r2, #65	@ 0x41
 80013da:	2120      	movs	r1, #32
 80013dc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	2220      	movs	r2, #32
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2240      	movs	r2, #64	@ 0x40
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80013f6:	2302      	movs	r3, #2
  }
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b008      	add	sp, #32
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	02002000 	.word	0x02002000
 8001404:	02002800 	.word	0x02002800

08001408 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
  }
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	001a      	movs	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d010      	beq.n	8001482 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	09db      	lsrs	r3, r3, #7
 8001464:	001a      	movs	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800146a:	d00a      	beq.n	8001482 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	2201      	movs	r2, #1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	0052      	lsls	r2, r2, #1
 8001480:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	0a9b      	lsrs	r3, r3, #10
 8001486:	001a      	movs	r2, r3
 8001488:	2301      	movs	r3, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d010      	beq.n	80014b0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	09db      	lsrs	r3, r3, #7
 8001492:	001a      	movs	r2, r3
 8001494:	2301      	movs	r3, #1
 8001496:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001498:	d00a      	beq.n	80014b0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	2208      	movs	r2, #8
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	0a5b      	lsrs	r3, r3, #9
 80014b4:	001a      	movs	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	4013      	ands	r3, r2
 80014ba:	d010      	beq.n	80014de <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	09db      	lsrs	r3, r3, #7
 80014c0:	001a      	movs	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014c6:	d00a      	beq.n	80014de <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	2202      	movs	r2, #2
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	220b      	movs	r2, #11
 80014e8:	4013      	ands	r3, r2
 80014ea:	d005      	beq.n	80014f8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fc44 	bl	8001d80 <I2C_ITError>
  }
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b006      	add	sp, #24
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	0008      	movs	r0, r1
 800152a:	0011      	movs	r1, r2
 800152c:	1cfb      	adds	r3, r7, #3
 800152e:	1c02      	adds	r2, r0, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	003b      	movs	r3, r7
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <I2C_Slave_ISR_IT+0x24>
 8001590:	2302      	movs	r3, #2
 8001592:	e0fb      	b.n	800178c <I2C_Slave_ISR_IT+0x21c>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	001a      	movs	r2, r3
 80015a2:	2301      	movs	r3, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d00c      	beq.n	80015c2 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	001a      	movs	r2, r3
 80015ae:	2301      	movs	r3, #1
 80015b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015b2:	d006      	beq.n	80015c2 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	0011      	movs	r1, r2
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f9f6 	bl	80019ac <I2C_ITSlaveCplt>
 80015c0:	e0df      	b.n	8001782 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	001a      	movs	r2, r3
 80015c8:	2301      	movs	r3, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d054      	beq.n	8001678 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	001a      	movs	r2, r3
 80015d4:	2301      	movs	r3, #1
 80015d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015d8:	d04e      	beq.n	8001678 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d12d      	bne.n	8001640 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2241      	movs	r2, #65	@ 0x41
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b28      	cmp	r3, #40	@ 0x28
 80015ee:	d10b      	bne.n	8001608 <I2C_Slave_ISR_IT+0x98>
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	049b      	lsls	r3, r3, #18
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d106      	bne.n	8001608 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0011      	movs	r1, r2
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fb63 	bl	8001ccc <I2C_ITListenCplt>
 8001606:	e036      	b.n	8001676 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2241      	movs	r2, #65	@ 0x41
 800160c:	5c9b      	ldrb	r3, [r3, r2]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b29      	cmp	r3, #41	@ 0x29
 8001612:	d110      	bne.n	8001636 <I2C_Slave_ISR_IT+0xc6>
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <I2C_Slave_ISR_IT+0x224>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00c      	beq.n	8001636 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fcd5 	bl	8001fd6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f956 	bl	80018e0 <I2C_ITSlaveSeqCplt>
 8001634:	e01f      	b.n	8001676 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2210      	movs	r2, #16
 800163c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800163e:	e09d      	b.n	800177c <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	2204      	movs	r2, #4
 800164e:	431a      	orrs	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <I2C_Slave_ISR_IT+0xf6>
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	045b      	lsls	r3, r3, #17
 8001660:	429a      	cmp	r2, r3
 8001662:	d000      	beq.n	8001666 <I2C_Slave_ISR_IT+0xf6>
 8001664:	e08a      	b.n	800177c <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f000 fb86 	bl	8001d80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001674:	e082      	b.n	800177c <I2C_Slave_ISR_IT+0x20c>
 8001676:	e081      	b.n	800177c <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	001a      	movs	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d031      	beq.n	80016e8 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	001a      	movs	r2, r3
 800168a:	2301      	movs	r3, #1
 800168c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800168e:	d02b      	beq.n	80016e8 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d018      	beq.n	80016cc <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d154      	bne.n	8001780 <I2C_Slave_ISR_IT+0x210>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001794 <I2C_Slave_ISR_IT+0x224>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d050      	beq.n	8001780 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 f8fd 	bl	80018e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80016e6:	e04b      	b.n	8001780 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	001a      	movs	r2, r3
 80016ee:	2301      	movs	r3, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	d00c      	beq.n	800170e <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	001a      	movs	r2, r3
 80016fa:	2301      	movs	r3, #1
 80016fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016fe:	d006      	beq.n	800170e <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f000 f846 	bl	8001798 <I2C_ITAddrCplt>
 800170c:	e039      	b.n	8001782 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	001a      	movs	r2, r3
 8001714:	2301      	movs	r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d033      	beq.n	8001782 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	001a      	movs	r2, r3
 8001720:	2301      	movs	r3, #1
 8001722:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001724:	d02d      	beq.n	8001782 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d018      	beq.n	8001762 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001760:	e00f      	b.n	8001782 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	045b      	lsls	r3, r3, #17
 8001768:	429a      	cmp	r2, r3
 800176a:	d002      	beq.n	8001772 <I2C_Slave_ISR_IT+0x202>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 f8b3 	bl	80018e0 <I2C_ITSlaveSeqCplt>
 800177a:	e002      	b.n	8001782 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	e000      	b.n	8001782 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8001780:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2240      	movs	r2, #64	@ 0x40
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}
 8001794:	ffff0000 	.word	0xffff0000

08001798 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2241      	movs	r2, #65	@ 0x41
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	001a      	movs	r2, r3
 80017ac:	2328      	movs	r3, #40	@ 0x28
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b28      	cmp	r3, #40	@ 0x28
 80017b2:	d000      	beq.n	80017b6 <I2C_ITAddrCplt+0x1e>
 80017b4:	e088      	b.n	80018c8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	250f      	movs	r5, #15
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	2101      	movs	r1, #1
 80017c6:	400a      	ands	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	200c      	movs	r0, #12
 80017d6:	183b      	adds	r3, r7, r0
 80017d8:	21fe      	movs	r1, #254	@ 0xfe
 80017da:	400a      	ands	r2, r1
 80017dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	240a      	movs	r4, #10
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	0592      	lsls	r2, r2, #22
 80017ec:	0d92      	lsrs	r2, r2, #22
 80017ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2308      	movs	r3, #8
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	21fe      	movs	r1, #254	@ 0xfe
 80017fe:	400a      	ands	r2, r1
 8001800:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d148      	bne.n	800189c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800180a:	0021      	movs	r1, r4
 800180c:	187b      	adds	r3, r7, r1
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	09db      	lsrs	r3, r3, #7
 8001812:	b29a      	uxth	r2, r3
 8001814:	183b      	adds	r3, r7, r0
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	4053      	eors	r3, r2
 800181a:	b29b      	uxth	r3, r3
 800181c:	001a      	movs	r2, r3
 800181e:	2306      	movs	r3, #6
 8001820:	4013      	ands	r3, r2
 8001822:	d120      	bne.n	8001866 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001824:	183b      	adds	r3, r7, r0
 8001826:	187a      	adds	r2, r7, r1
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	2b02      	cmp	r3, #2
 800183c:	d14c      	bne.n	80018d8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2208      	movs	r2, #8
 800184a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2240      	movs	r2, #64	@ 0x40
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001854:	183b      	adds	r3, r7, r0
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	197b      	adds	r3, r7, r5
 800185a:	7819      	ldrb	r1, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff fe5e 	bl	8001520 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001864:	e038      	b.n	80018d8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001866:	240c      	movs	r4, #12
 8001868:	193b      	adds	r3, r7, r4
 800186a:	2208      	movs	r2, #8
 800186c:	18ba      	adds	r2, r7, r2
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fd3c 	bl	80022f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001888:	193b      	adds	r3, r7, r4
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fe43 	bl	8001520 <HAL_I2C_AddrCallback>
}
 800189a:	e01d      	b.n	80018d8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	021a      	lsls	r2, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f000 fd27 	bl	80022f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2240      	movs	r2, #64	@ 0x40
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80018b2:	230c      	movs	r3, #12
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	230f      	movs	r3, #15
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	7819      	ldrb	r1, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fe2d 	bl	8001520 <HAL_I2C_AddrCallback>
}
 80018c6:	e007      	b.n	80018d8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2208      	movs	r2, #8
 80018ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2240      	movs	r2, #64	@ 0x40
 80018d4:	2100      	movs	r1, #0
 80018d6:	5499      	strb	r1, [r3, r2]
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bdb0      	pop	{r4, r5, r7, pc}

080018e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2242      	movs	r2, #66	@ 0x42
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	0b9b      	lsrs	r3, r3, #14
 80018fc:	001a      	movs	r2, r3
 80018fe:	2301      	movs	r3, #1
 8001900:	4013      	ands	r3, r2
 8001902:	d008      	beq.n	8001916 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4925      	ldr	r1, [pc, #148]	@ (80019a4 <I2C_ITSlaveSeqCplt+0xc4>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e00d      	b.n	8001932 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0bdb      	lsrs	r3, r3, #15
 800191a:	001a      	movs	r2, r3
 800191c:	2301      	movs	r3, #1
 800191e:	4013      	ands	r3, r2
 8001920:	d007      	beq.n	8001932 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	491e      	ldr	r1, [pc, #120]	@ (80019a8 <I2C_ITSlaveSeqCplt+0xc8>)
 800192e:	400a      	ands	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2241      	movs	r2, #65	@ 0x41
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b29      	cmp	r3, #41	@ 0x29
 800193c:	d114      	bne.n	8001968 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2241      	movs	r2, #65	@ 0x41
 8001942:	2128      	movs	r1, #40	@ 0x28
 8001944:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2221      	movs	r2, #33	@ 0x21
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2101      	movs	r1, #1
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fcd1 	bl	80022f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2240      	movs	r2, #64	@ 0x40
 800195a:	2100      	movs	r1, #0
 800195c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fdcd 	bl	8001500 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001966:	e019      	b.n	800199c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2241      	movs	r2, #65	@ 0x41
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b2a      	cmp	r3, #42	@ 0x2a
 8001972:	d113      	bne.n	800199c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2241      	movs	r2, #65	@ 0x41
 8001978:	2128      	movs	r1, #40	@ 0x28
 800197a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2222      	movs	r2, #34	@ 0x22
 8001980:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2102      	movs	r1, #2
 8001986:	0018      	movs	r0, r3
 8001988:	f000 fcb6 	bl	80022f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2240      	movs	r2, #64	@ 0x40
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fdba 	bl	8001510 <HAL_I2C_SlaveRxCpltCallback>
}
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	ffffbfff 	.word	0xffffbfff
 80019a8:	ffff7fff 	.word	0xffff7fff

080019ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80019c8:	200b      	movs	r0, #11
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	2141      	movs	r1, #65	@ 0x41
 80019d0:	5c52      	ldrb	r2, [r2, r1]
 80019d2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2220      	movs	r2, #32
 80019da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b21      	cmp	r3, #33	@ 0x21
 80019e2:	d003      	beq.n	80019ec <I2C_ITSlaveCplt+0x40>
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b29      	cmp	r3, #41	@ 0x29
 80019ea:	d109      	bne.n	8001a00 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80019ec:	4ab0      	ldr	r2, [pc, #704]	@ (8001cb0 <I2C_ITSlaveCplt+0x304>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fc80 	bl	80022f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2221      	movs	r2, #33	@ 0x21
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80019fe:	e020      	b.n	8001a42 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a00:	220b      	movs	r2, #11
 8001a02:	18bb      	adds	r3, r7, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b22      	cmp	r3, #34	@ 0x22
 8001a08:	d003      	beq.n	8001a12 <I2C_ITSlaveCplt+0x66>
 8001a0a:	18bb      	adds	r3, r7, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a10:	d109      	bne.n	8001a26 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001a12:	4aa8      	ldr	r2, [pc, #672]	@ (8001cb4 <I2C_ITSlaveCplt+0x308>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fc6d 	bl	80022f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2222      	movs	r2, #34	@ 0x22
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a24:	e00d      	b.n	8001a42 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001a26:	230b      	movs	r3, #11
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b28      	cmp	r3, #40	@ 0x28
 8001a2e:	d108      	bne.n	8001a42 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001a30:	4aa1      	ldr	r2, [pc, #644]	@ (8001cb8 <I2C_ITSlaveCplt+0x30c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fc5e 	bl	80022f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0209      	lsls	r1, r1, #8
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4997      	ldr	r1, [pc, #604]	@ (8001cbc <I2C_ITSlaveCplt+0x310>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 fab5 	bl	8001fd6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	0b9b      	lsrs	r3, r3, #14
 8001a70:	001a      	movs	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	498f      	ldr	r1, [pc, #572]	@ (8001cc0 <I2C_ITSlaveCplt+0x314>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a9e:	e018      	b.n	8001ad2 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	0bdb      	lsrs	r3, r3, #15
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d012      	beq.n	8001ad2 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4983      	ldr	r1, [pc, #524]	@ (8001cc4 <I2C_ITSlaveCplt+0x318>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d020      	beq.n	8001b20 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	2204      	movs	r2, #4
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d051      	beq.n	8001be6 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	001a      	movs	r2, r3
 8001b48:	2301      	movs	r3, #1
 8001b4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b4c:	d04b      	beq.n	8001be6 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12d      	bne.n	8001bb4 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2241      	movs	r2, #65	@ 0x41
 8001b5c:	5c9b      	ldrb	r3, [r3, r2]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b28      	cmp	r3, #40	@ 0x28
 8001b62:	d10b      	bne.n	8001b7c <I2C_ITSlaveCplt+0x1d0>
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	049b      	lsls	r3, r3, #18
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d106      	bne.n	8001b7c <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 f8a9 	bl	8001ccc <I2C_ITListenCplt>
 8001b7a:	e034      	b.n	8001be6 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2241      	movs	r2, #65	@ 0x41
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b29      	cmp	r3, #41	@ 0x29
 8001b86:	d110      	bne.n	8001baa <I2C_ITSlaveCplt+0x1fe>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc8 <I2C_ITSlaveCplt+0x31c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00c      	beq.n	8001baa <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2210      	movs	r2, #16
 8001b96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fa1b 	bl	8001fd6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff fe9c 	bl	80018e0 <I2C_ITSlaveSeqCplt>
 8001ba8:	e01d      	b.n	8001be6 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	61da      	str	r2, [r3, #28]
 8001bb2:	e018      	b.n	8001be6 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <I2C_ITSlaveCplt+0x22c>
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f8cd 	bl	8001d80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2242      	movs	r2, #66	@ 0x42
 8001bea:	2100      	movs	r1, #0
 8001bec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0011      	movs	r1, r2
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f8bb 	bl	8001d80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2241      	movs	r2, #65	@ 0x41
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b28      	cmp	r3, #40	@ 0x28
 8001c14:	d147      	bne.n	8001ca6 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 f855 	bl	8001ccc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c22:	e040      	b.n	8001ca6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <I2C_ITSlaveCplt+0x31c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d016      	beq.n	8001c5c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fe55 	bl	80018e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <I2C_ITSlaveCplt+0x31c>)
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2241      	movs	r2, #65	@ 0x41
 8001c40:	2120      	movs	r1, #32
 8001c42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	@ 0x40
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff fc73 	bl	8001540 <HAL_I2C_ListenCpltCallback>
}
 8001c5a:	e024      	b.n	8001ca6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2241      	movs	r2, #65	@ 0x41
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b22      	cmp	r3, #34	@ 0x22
 8001c66:	d10f      	bne.n	8001c88 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2241      	movs	r2, #65	@ 0x41
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2240      	movs	r2, #64	@ 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff fc45 	bl	8001510 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c86:	e00e      	b.n	8001ca6 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2241      	movs	r2, #65	@ 0x41
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2240      	movs	r2, #64	@ 0x40
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff fc2d 	bl	8001500 <HAL_I2C_SlaveTxCpltCallback>
}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b006      	add	sp, #24
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	00008001 	.word	0x00008001
 8001cb4:	00008002 	.word	0x00008002
 8001cb8:	00008003 	.word	0x00008003
 8001cbc:	fe00e800 	.word	0xfe00e800
 8001cc0:	ffffbfff 	.word	0xffffbfff
 8001cc4:	ffff7fff 	.word	0xffff7fff
 8001cc8:	ffff0000 	.word	0xffff0000

08001ccc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a27      	ldr	r2, [pc, #156]	@ (8001d78 <I2C_ITListenCplt+0xac>)
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	@ 0x41
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2242      	movs	r2, #66	@ 0x42
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d022      	beq.n	8001d4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	2204      	movs	r2, #4
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <I2C_ITListenCplt+0xb0>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fad1 	bl	80022f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2240      	movs	r2, #64	@ 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fbe9 	bl	8001540 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	ffff0000 	.word	0xffff0000
 8001d7c:	00008003 	.word	0x00008003

08001d80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	183b      	adds	r3, r7, r0
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	2141      	movs	r1, #65	@ 0x41
 8001d92:	5c52      	ldrb	r2, [r2, r1]
 8001d94:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2242      	movs	r2, #66	@ 0x42
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a72      	ldr	r2, [pc, #456]	@ (8001f6c <I2C_ITError+0x1ec>)
 8001da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b28      	cmp	r3, #40	@ 0x28
 8001dbc:	d007      	beq.n	8001dce <I2C_ITError+0x4e>
 8001dbe:	183b      	adds	r3, r7, r0
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b29      	cmp	r3, #41	@ 0x29
 8001dc4:	d003      	beq.n	8001dce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dcc:	d10c      	bne.n	8001de8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fa90 	bl	80022f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2241      	movs	r2, #65	@ 0x41
 8001ddc:	2128      	movs	r1, #40	@ 0x28
 8001dde:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a63      	ldr	r2, [pc, #396]	@ (8001f70 <I2C_ITError+0x1f0>)
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de6:	e032      	b.n	8001e4e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001de8:	4a62      	ldr	r2, [pc, #392]	@ (8001f74 <I2C_ITError+0x1f4>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fa82 	bl	80022f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8ed 	bl	8001fd6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2241      	movs	r2, #65	@ 0x41
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b60      	cmp	r3, #96	@ 0x60
 8001e06:	d01f      	beq.n	8001e48 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2241      	movs	r2, #65	@ 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d114      	bne.n	8001e48 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2210      	movs	r2, #16
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d109      	bne.n	8001e40 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	2204      	movs	r2, #4
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2220      	movs	r2, #32
 8001e46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03b      	beq.n	8001ed4 <I2C_ITError+0x154>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b11      	cmp	r3, #17
 8001e60:	d002      	beq.n	8001e68 <I2C_ITError+0xe8>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b21      	cmp	r3, #33	@ 0x21
 8001e66:	d135      	bne.n	8001ed4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	401a      	ands	r2, r3
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	01db      	lsls	r3, r3, #7
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	493c      	ldr	r1, [pc, #240]	@ (8001f78 <I2C_ITError+0x1f8>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe ff8c 	bl	8000dae <HAL_DMA_GetState>
 8001e96:	0003      	movs	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d016      	beq.n	8001eca <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	4a36      	ldr	r2, [pc, #216]	@ (8001f7c <I2C_ITError+0x1fc>)
 8001ea2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe ff35 	bl	8000d20 <HAL_DMA_Abort_IT>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d051      	beq.n	8001f5e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ec8:	e049      	b.n	8001f5e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f859 	bl	8001f84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ed2:	e044      	b.n	8001f5e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03b      	beq.n	8001f54 <I2C_ITError+0x1d4>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d002      	beq.n	8001ee8 <I2C_ITError+0x168>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b22      	cmp	r3, #34	@ 0x22
 8001ee6:	d135      	bne.n	8001f54 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	491e      	ldr	r1, [pc, #120]	@ (8001f80 <I2C_ITError+0x200>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe ff4c 	bl	8000dae <HAL_DMA_GetState>
 8001f16:	0003      	movs	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d016      	beq.n	8001f4a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f20:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <I2C_ITError+0x1fc>)
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe fef5 	bl	8000d20 <HAL_DMA_Abort_IT>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d013      	beq.n	8001f62 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	0018      	movs	r0, r3
 8001f46:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f48:	e00b      	b.n	8001f62 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 f819 	bl	8001f84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f52:	e006      	b.n	8001f62 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f814 	bl	8001f84 <I2C_TreatErrorCallback>
  }
}
 8001f5c:	e002      	b.n	8001f64 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	e000      	b.n	8001f64 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f62:	46c0      	nop			@ (mov r8, r8)
}
 8001f64:	46c0      	nop			@ (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	ffff0000 	.word	0xffff0000
 8001f70:	08001571 	.word	0x08001571
 8001f74:	00008003 	.word	0x00008003
 8001f78:	ffffbfff 	.word	0xffffbfff
 8001f7c:	0800201b 	.word	0x0800201b
 8001f80:	ffff7fff 	.word	0xffff7fff

08001f84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2241      	movs	r2, #65	@ 0x41
 8001f90:	5c9b      	ldrb	r3, [r3, r2]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b60      	cmp	r3, #96	@ 0x60
 8001f96:	d10f      	bne.n	8001fb8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2241      	movs	r2, #65	@ 0x41
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2240      	movs	r2, #64	@ 0x40
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fad5 	bl	8001560 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fb6:	e00a      	b.n	8001fce <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2240      	movs	r2, #64	@ 0x40
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff fac1 	bl	8001550 <HAL_I2C_ErrorCallback>
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d103      	bne.n	8001ff4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	619a      	str	r2, [r3, #24]
  }
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}

0800201a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	0018      	movs	r0, r3
 800204c:	f7ff ff9a 	bl	8001f84 <I2C_TreatErrorCallback>
}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002068:	e03a      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f849 	bl	8002108 <I2C_IsErrorOccurred>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d001      	beq.n	800207e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e040      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	d02d      	beq.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002084:	f7fe fd40 	bl	8000b08 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d302      	bcc.n	800209a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d122      	bne.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	425a      	negs	r2, r3
 80020aa:	4153      	adcs	r3, r2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	001a      	movs	r2, r3
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d113      	bne.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020bc:	2220      	movs	r2, #32
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2241      	movs	r2, #65	@ 0x41
 80020c8:	2120      	movs	r1, #32
 80020ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2242      	movs	r2, #66	@ 0x42
 80020d0:	2100      	movs	r1, #0
 80020d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	2100      	movs	r1, #0
 80020da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e00f      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	425a      	negs	r2, r3
 80020f0:	4153      	adcs	r3, r2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	001a      	movs	r2, r3
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d0b5      	beq.n	800206a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2327      	movs	r3, #39	@ 0x27
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2210      	movs	r2, #16
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <I2C_IsErrorOccurred+0x2e>
 8002134:	e079      	b.n	800222a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800213e:	e057      	b.n	80021f0 <I2C_IsErrorOccurred+0xe8>
 8002140:	2227      	movs	r2, #39	@ 0x27
 8002142:	18bb      	adds	r3, r7, r2
 8002144:	18ba      	adds	r2, r7, r2
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	d04f      	beq.n	80021f0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7fe fcda 	bl	8000b08 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <I2C_IsErrorOccurred+0x5e>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d144      	bne.n	80021f0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	01db      	lsls	r3, r3, #7
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002174:	2013      	movs	r0, #19
 8002176:	183b      	adds	r3, r7, r0
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	2142      	movs	r1, #66	@ 0x42
 800217c:	5c52      	ldrb	r2, [r2, r1]
 800217e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	429a      	cmp	r2, r3
 8002192:	d126      	bne.n	80021e2 <I2C_IsErrorOccurred+0xda>
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	429a      	cmp	r2, r3
 800219c:	d021      	beq.n	80021e2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d01d      	beq.n	80021e2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2180      	movs	r1, #128	@ 0x80
 80021b2:	01c9      	lsls	r1, r1, #7
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021b8:	f7fe fca6 	bl	8000b08 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c0:	e00f      	b.n	80021e2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021c2:	f7fe fca1 	bl	8000b08 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b19      	cmp	r3, #25
 80021ce:	d908      	bls.n	80021e2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2220      	movs	r2, #32
 80021d4:	4313      	orrs	r3, r2
 80021d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021d8:	2327      	movs	r3, #39	@ 0x27
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]

              break;
 80021e0:	e006      	b.n	80021f0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2220      	movs	r2, #32
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d1e8      	bne.n	80021c2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d004      	beq.n	8002208 <I2C_IsErrorOccurred+0x100>
 80021fe:	2327      	movs	r3, #39	@ 0x27
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d09b      	beq.n	8002140 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002208:	2327      	movs	r3, #39	@ 0x27
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2204      	movs	r2, #4
 800221e:	4313      	orrs	r3, r2
 8002220:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002222:	2327      	movs	r3, #39	@ 0x27
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4013      	ands	r3, r2
 800223a:	d00c      	beq.n	8002256 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2201      	movs	r2, #1
 8002240:	4313      	orrs	r3, r2
 8002242:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0052      	lsls	r2, r2, #1
 800224c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800224e:	2327      	movs	r3, #39	@ 0x27
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4013      	ands	r3, r2
 800225e:	d00c      	beq.n	800227a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2208      	movs	r2, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	00d2      	lsls	r2, r2, #3
 8002270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002272:	2327      	movs	r3, #39	@ 0x27
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d00c      	beq.n	800229e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2202      	movs	r2, #2
 8002288:	4313      	orrs	r3, r2
 800228a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002296:	2327      	movs	r3, #39	@ 0x27
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800229e:	2327      	movs	r3, #39	@ 0x27
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01d      	beq.n	80022e4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff fe93 	bl	8001fd6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <I2C_IsErrorOccurred+0x1ec>)
 80022bc:	400a      	ands	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2241      	movs	r2, #65	@ 0x41
 80022d0:	2120      	movs	r1, #32
 80022d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2242      	movs	r2, #66	@ 0x42
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80022e4:	2327      	movs	r3, #39	@ 0x27
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	781b      	ldrb	r3, [r3, #0]
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00a      	add	sp, #40	@ 0x28
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	fe00e800 	.word	0xfe00e800

080022f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	000a      	movs	r2, r1
 8002302:	1cbb      	adds	r3, r7, #2
 8002304:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800230a:	1cbb      	adds	r3, r7, #2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d010      	beq.n	8002336 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2242      	movs	r2, #66	@ 0x42
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2241      	movs	r2, #65	@ 0x41
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	001a      	movs	r2, r3
 8002326:	2328      	movs	r3, #40	@ 0x28
 8002328:	4013      	ands	r3, r2
 800232a:	2b28      	cmp	r3, #40	@ 0x28
 800232c:	d003      	beq.n	8002336 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22b0      	movs	r2, #176	@ 0xb0
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002336:	1cbb      	adds	r3, r7, #2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	d010      	beq.n	8002362 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2244      	movs	r2, #68	@ 0x44
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2241      	movs	r2, #65	@ 0x41
 800234c:	5c9b      	ldrb	r3, [r3, r2]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	001a      	movs	r2, r3
 8002352:	2328      	movs	r3, #40	@ 0x28
 8002354:	4013      	ands	r3, r2
 8002356:	2b28      	cmp	r3, #40	@ 0x28
 8002358:	d003      	beq.n	8002362 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22b0      	movs	r2, #176	@ 0xb0
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	2200      	movs	r2, #0
 8002366:	5e9b      	ldrsh	r3, [r3, r2]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da03      	bge.n	8002374 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22b8      	movs	r2, #184	@ 0xb8
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002374:	1cbb      	adds	r3, r7, #2
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b10      	cmp	r3, #16
 800237a:	d103      	bne.n	8002384 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2290      	movs	r2, #144	@ 0x90
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002384:	1cbb      	adds	r3, r7, #2
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b20      	cmp	r3, #32
 800238a:	d103      	bne.n	8002394 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002394:	1cbb      	adds	r3, r7, #2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	2b40      	cmp	r3, #64	@ 0x40
 800239a:	d103      	bne.n	80023a4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2240      	movs	r2, #64	@ 0x40
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43d9      	mvns	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	400a      	ands	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2241      	movs	r2, #65	@ 0x41
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d138      	bne.n	8002448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	5c9b      	ldrb	r3, [r3, r2]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e032      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	@ 0x40
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2241      	movs	r2, #65	@ 0x41
 80023f0:	2124      	movs	r1, #36	@ 0x24
 80023f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	438a      	bics	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4911      	ldr	r1, [pc, #68]	@ (8002454 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002410:	400a      	ands	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2241      	movs	r2, #65	@ 0x41
 8002438:	2120      	movs	r1, #32
 800243a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	ffffefff 	.word	0xffffefff

08002458 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	@ 0x41
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d139      	bne.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	@ 0x40
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002478:	2302      	movs	r3, #2
 800247a:	e033      	b.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	@ 0x40
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	@ 0x41
 8002488:	2124      	movs	r1, #36	@ 0x24
 800248a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2241      	movs	r2, #65	@ 0x41
 80024d2:	2120      	movs	r1, #32
 80024d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b004      	add	sp, #16
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	fffff0ff 	.word	0xfffff0ff

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f000 fb6c 	bl	8002bdc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002504:	4bc8      	ldr	r3, [pc, #800]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	220c      	movs	r2, #12
 800250a:	4013      	ands	r3, r2
 800250c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250e:	4bc6      	ldr	r3, [pc, #792]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x36>
 8002524:	e07d      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d007      	beq.n	800253c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d112      	bne.n	8002558 <HAL_RCC_OscConfig+0x68>
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	429a      	cmp	r2, r3
 800253a:	d10d      	bne.n	8002558 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4bba      	ldr	r3, [pc, #744]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4013      	ands	r3, r2
 8002546:	d100      	bne.n	800254a <HAL_RCC_OscConfig+0x5a>
 8002548:	e06a      	b.n	8002620 <HAL_RCC_OscConfig+0x130>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d166      	bne.n	8002620 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f000 fb42 	bl	8002bdc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x84>
 8002564:	4bb0      	ldr	r3, [pc, #704]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4baf      	ldr	r3, [pc, #700]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e027      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	23a0      	movs	r3, #160	@ 0xa0
 800257a:	02db      	lsls	r3, r3, #11
 800257c:	429a      	cmp	r2, r3
 800257e:	d10e      	bne.n	800259e <HAL_RCC_OscConfig+0xae>
 8002580:	4ba9      	ldr	r3, [pc, #676]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4ba8      	ldr	r3, [pc, #672]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002586:	2180      	movs	r1, #128	@ 0x80
 8002588:	02c9      	lsls	r1, r1, #11
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4ba6      	ldr	r3, [pc, #664]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4ba5      	ldr	r3, [pc, #660]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	0249      	lsls	r1, r1, #9
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e012      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 800259e:	4ba2      	ldr	r3, [pc, #648]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025a4:	49a1      	ldr	r1, [pc, #644]	@ (800282c <HAL_RCC_OscConfig+0x33c>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	4b9f      	ldr	r3, [pc, #636]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025be:	499c      	ldr	r1, [pc, #624]	@ (8002830 <HAL_RCC_OscConfig+0x340>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fa9c 	bl	8000b08 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d6:	f7fe fa97 	bl	8000b08 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	@ 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2f9      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0xe6>
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fa87 	bl	8000b08 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fa82 	bl	8000b08 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2e4      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002612:	4b85      	ldr	r3, [pc, #532]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	4013      	ands	r3, r2
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x110>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x13e>
 800262c:	e099      	b.n	8002762 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800263c:	4b7a      	ldr	r3, [pc, #488]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b79      	ldr	r3, [pc, #484]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002642:	2120      	movs	r1, #32
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2220      	movs	r2, #32
 800264c:	4393      	bics	r3, r2
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d13e      	bne.n	80026da <HAL_RCC_OscConfig+0x1ea>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13b      	bne.n	80026da <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002662:	4b71      	ldr	r3, [pc, #452]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2204      	movs	r2, #4
 8002668:	4013      	ands	r3, r2
 800266a:	d004      	beq.n	8002676 <HAL_RCC_OscConfig+0x186>
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e2b2      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b6c      	ldr	r3, [pc, #432]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x344>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	021a      	lsls	r2, r3, #8
 8002686:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800268c:	4b66      	ldr	r3, [pc, #408]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2209      	movs	r2, #9
 8002692:	4393      	bics	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	4b64      	ldr	r3, [pc, #400]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 fbeb 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 80026a2:	0001      	movs	r1, r0
 80026a4:	4b60      	ldr	r3, [pc, #384]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	220f      	movs	r2, #15
 80026ac:	4013      	ands	r3, r2
 80026ae:	4a62      	ldr	r2, [pc, #392]	@ (8002838 <HAL_RCC_OscConfig+0x348>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	000a      	movs	r2, r1
 80026b4:	40da      	lsrs	r2, r3
 80026b6:	4b61      	ldr	r3, [pc, #388]	@ (800283c <HAL_RCC_OscConfig+0x34c>)
 80026b8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80026ba:	4b61      	ldr	r3, [pc, #388]	@ (8002840 <HAL_RCC_OscConfig+0x350>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2513      	movs	r5, #19
 80026c0:	197c      	adds	r4, r7, r5
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7fe f9da 	bl	8000a7c <HAL_InitTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80026cc:	197b      	adds	r3, r7, r5
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d046      	beq.n	8002762 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80026d4:	197b      	adds	r3, r7, r5
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	e280      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d027      	beq.n	8002730 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026e0:	4b51      	ldr	r3, [pc, #324]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2209      	movs	r2, #9
 80026e6:	4393      	bics	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80026ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fa09 	bl	8000b08 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fa04 	bl	8000b08 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e266      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b46      	ldr	r3, [pc, #280]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	d0f1      	beq.n	80026fc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b43      	ldr	r3, [pc, #268]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a45      	ldr	r2, [pc, #276]	@ (8002834 <HAL_RCC_OscConfig+0x344>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	021a      	lsls	r2, r3, #8
 8002728:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002730:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b3c      	ldr	r3, [pc, #240]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002736:	2101      	movs	r1, #1
 8002738:	438a      	bics	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe f9e4 	bl	8000b08 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe f9df 	bl	8000b08 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e241      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002758:	4b33      	ldr	r3, [pc, #204]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d1f1      	bne.n	8002746 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	4013      	ands	r3, r2
 800276a:	d100      	bne.n	800276e <HAL_RCC_OscConfig+0x27e>
 800276c:	e0a1      	b.n	80028b2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d140      	bne.n	80027f6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002774:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x29c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e227      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <HAL_RCC_OscConfig+0x354>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	0a19      	lsrs	r1, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	0b5b      	lsrs	r3, r3, #13
 80027ba:	3301      	adds	r3, #1
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	0212      	lsls	r2, r2, #8
 80027c0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027c2:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	210f      	movs	r1, #15
 80027ca:	400b      	ands	r3, r1
 80027cc:	491a      	ldr	r1, [pc, #104]	@ (8002838 <HAL_RCC_OscConfig+0x348>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027d2:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_RCC_OscConfig+0x34c>)
 80027d4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_RCC_OscConfig+0x350>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2513      	movs	r5, #19
 80027dc:	197c      	adds	r4, r7, r5
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fe f94c 	bl	8000a7c <HAL_InitTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80027e8:	197b      	adds	r3, r7, r5
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d060      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80027f0:	197b      	adds	r3, r7, r5
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	e1f2      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03f      	beq.n	800287e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_RCC_OscConfig+0x338>)
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	0049      	lsls	r1, r1, #1
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe f97c 	bl	8000b08 <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002816:	f7fe f977 	bl	8000b08 <HAL_GetTick>
 800281a:	0002      	movs	r2, r0
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d911      	bls.n	8002848 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1d9      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
 8002828:	40021000 	.word	0x40021000
 800282c:	fffeffff 	.word	0xfffeffff
 8002830:	fffbffff 	.word	0xfffbffff
 8002834:	ffffe0ff 	.word	0xffffe0ff
 8002838:	0800474c 	.word	0x0800474c
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004
 8002844:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002848:	4bc9      	ldr	r3, [pc, #804]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4013      	ands	r3, r2
 8002852:	d0e0      	beq.n	8002816 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4bc6      	ldr	r3, [pc, #792]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4ac6      	ldr	r2, [pc, #792]	@ (8002b74 <HAL_RCC_OscConfig+0x684>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	4bc3      	ldr	r3, [pc, #780]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002868:	4bc1      	ldr	r3, [pc, #772]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	0a19      	lsrs	r1, r3, #8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	061a      	lsls	r2, r3, #24
 8002876:	4bbe      	ldr	r3, [pc, #760]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	e019      	b.n	80028b2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800287e:	4bbc      	ldr	r3, [pc, #752]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4bbb      	ldr	r3, [pc, #748]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002884:	49bc      	ldr	r1, [pc, #752]	@ (8002b78 <HAL_RCC_OscConfig+0x688>)
 8002886:	400a      	ands	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7fe f93d 	bl	8000b08 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002894:	f7fe f938 	bl	8000b08 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e19a      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028a6:	4bb2      	ldr	r3, [pc, #712]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2208      	movs	r2, #8
 80028b8:	4013      	ands	r3, r2
 80028ba:	d036      	beq.n	800292a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d019      	beq.n	80028f8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c4:	4baa      	ldr	r3, [pc, #680]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028c8:	4ba9      	ldr	r3, [pc, #676]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7fe f91a 	bl	8000b08 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe f915 	bl	8000b08 <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e177      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f0:	2202      	movs	r2, #2
 80028f2:	4013      	ands	r3, r2
 80028f4:	d0f1      	beq.n	80028da <HAL_RCC_OscConfig+0x3ea>
 80028f6:	e018      	b.n	800292a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80028fe:	2101      	movs	r1, #1
 8002900:	438a      	bics	r2, r1
 8002902:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe f900 	bl	8000b08 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe f8fb 	bl	8000b08 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e15d      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002920:	4b93      	ldr	r3, [pc, #588]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d1f1      	bne.n	800290e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2204      	movs	r2, #4
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x446>
 8002934:	e0ae      	b.n	8002a94 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2023      	movs	r0, #35	@ 0x23
 8002938:	183b      	adds	r3, r7, r0
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b8c      	ldr	r3, [pc, #560]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	055b      	lsls	r3, r3, #21
 8002946:	4013      	ands	r3, r2
 8002948:	d109      	bne.n	800295e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b89      	ldr	r3, [pc, #548]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 800294c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800294e:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002950:	2180      	movs	r1, #128	@ 0x80
 8002952:	0549      	lsls	r1, r1, #21
 8002954:	430a      	orrs	r2, r1
 8002956:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002958:	183b      	adds	r3, r7, r0
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b87      	ldr	r3, [pc, #540]	@ (8002b7c <HAL_RCC_OscConfig+0x68c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4013      	ands	r3, r2
 8002968:	d11a      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b84      	ldr	r3, [pc, #528]	@ (8002b7c <HAL_RCC_OscConfig+0x68c>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b83      	ldr	r3, [pc, #524]	@ (8002b7c <HAL_RCC_OscConfig+0x68c>)
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	0049      	lsls	r1, r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002978:	f7fe f8c6 	bl	8000b08 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe f8c1 	bl	8000b08 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	@ 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e123      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b79      	ldr	r3, [pc, #484]	@ (8002b7c <HAL_RCC_OscConfig+0x68c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4013      	ands	r3, r2
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4cc>
 80029ac:	4b70      	ldr	r3, [pc, #448]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	0049      	lsls	r1, r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80029ba:	e031      	b.n	8002a20 <HAL_RCC_OscConfig+0x530>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x4ee>
 80029c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029ca:	496b      	ldr	r1, [pc, #428]	@ (8002b78 <HAL_RCC_OscConfig+0x688>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80029d0:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029d6:	496a      	ldr	r1, [pc, #424]	@ (8002b80 <HAL_RCC_OscConfig+0x690>)
 80029d8:	400a      	ands	r2, r1
 80029da:	651a      	str	r2, [r3, #80]	@ 0x50
 80029dc:	e020      	b.n	8002a20 <HAL_RCC_OscConfig+0x530>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	23a0      	movs	r3, #160	@ 0xa0
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d10e      	bne.n	8002a08 <HAL_RCC_OscConfig+0x518>
 80029ea:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ee:	4b60      	ldr	r3, [pc, #384]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029f0:	2180      	movs	r1, #128	@ 0x80
 80029f2:	00c9      	lsls	r1, r1, #3
 80029f4:	430a      	orrs	r2, r1
 80029f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80029f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 80029fe:	2180      	movs	r1, #128	@ 0x80
 8002a00:	0049      	lsls	r1, r1, #1
 8002a02:	430a      	orrs	r2, r1
 8002a04:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0x530>
 8002a08:	4b59      	ldr	r3, [pc, #356]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a0c:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a0e:	495a      	ldr	r1, [pc, #360]	@ (8002b78 <HAL_RCC_OscConfig+0x688>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a14:	4b56      	ldr	r3, [pc, #344]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a18:	4b55      	ldr	r3, [pc, #340]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a1a:	4959      	ldr	r1, [pc, #356]	@ (8002b80 <HAL_RCC_OscConfig+0x690>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe f86e 	bl	8000b08 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe f869 	bl	8000b08 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a51      	ldr	r2, [pc, #324]	@ (8002b84 <HAL_RCC_OscConfig+0x694>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0ca      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d0ef      	beq.n	8002a32 <HAL_RCC_OscConfig+0x542>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f858 	bl	8000b08 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a5c:	e009      	b.n	8002a72 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe f853 	bl	8000b08 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	4a46      	ldr	r2, [pc, #280]	@ (8002b84 <HAL_RCC_OscConfig+0x694>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0b4      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a72:	4b3f      	ldr	r3, [pc, #252]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d1ef      	bne.n	8002a5e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a7e:	2323      	movs	r3, #35	@ 0x23
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a8c:	4b38      	ldr	r3, [pc, #224]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002a8e:	493e      	ldr	r1, [pc, #248]	@ (8002b88 <HAL_RCC_OscConfig+0x698>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5ae>
 8002a9c:	e09d      	b.n	8002bda <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5b6>
 8002aa4:	e076      	b.n	8002b94 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d145      	bne.n	8002b3a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002ab4:	4935      	ldr	r1, [pc, #212]	@ (8002b8c <HAL_RCC_OscConfig+0x69c>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe f825 	bl	8000b08 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe f820 	bl	8000b08 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e082      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ad6:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	049b      	lsls	r3, r3, #18
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b90 <HAL_RCC_OscConfig+0x6a0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	431a      	orrs	r2, r3
 8002afc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002afe:	430a      	orrs	r2, r1
 8002b00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0449      	lsls	r1, r1, #17
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fd fffa 	bl	8000b08 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fd fff5 	bl	8000b08 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e057      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	049b      	lsls	r3, r3, #18
 8002b34:	4013      	ands	r3, r2
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x62a>
 8002b38:	e04f      	b.n	8002bda <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b40:	4912      	ldr	r1, [pc, #72]	@ (8002b8c <HAL_RCC_OscConfig+0x69c>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fd ffdf 	bl	8000b08 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fd ffda 	bl	8000b08 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e03c      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b62:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_RCC_OscConfig+0x680>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	049b      	lsls	r3, r3, #18
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x660>
 8002b6e:	e034      	b.n	8002bda <HAL_RCC_OscConfig+0x6ea>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	ffff1fff 	.word	0xffff1fff
 8002b78:	fffffeff 	.word	0xfffffeff
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	fffffbff 	.word	0xfffffbff
 8002b84:	00001388 	.word	0x00001388
 8002b88:	efffffff 	.word	0xefffffff
 8002b8c:	feffffff 	.word	0xfeffffff
 8002b90:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <HAL_RCC_OscConfig+0x6f4>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	025b      	lsls	r3, r3, #9
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	23f0      	movs	r3, #240	@ 0xf0
 8002bba:	039b      	lsls	r3, r3, #14
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	23c0      	movs	r3, #192	@ 0xc0
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b00a      	add	sp, #40	@ 0x28
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e128      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b96      	ldr	r3, [pc, #600]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d91e      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b93      	ldr	r3, [pc, #588]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b90      	ldr	r3, [pc, #576]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c1c:	f7fd ff74 	bl	8000b08 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fd ff6f 	bl	8000b08 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a8a      	ldr	r2, [pc, #552]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e109      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b87      	ldr	r3, [pc, #540]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c52:	4b83      	ldr	r3, [pc, #524]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	22f0      	movs	r2, #240	@ 0xf0
 8002c58:	4393      	bics	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b7f      	ldr	r3, [pc, #508]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
 8002c70:	e089      	b.n	8002d86 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c7a:	4b79      	ldr	r3, [pc, #484]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4013      	ands	r3, r2
 8002c84:	d120      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0e1      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c92:	4b73      	ldr	r3, [pc, #460]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	049b      	lsls	r3, r3, #18
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d114      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0d5      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0ca      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cb8:	4b69      	ldr	r3, [pc, #420]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0c2      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc8:	4b65      	ldr	r3, [pc, #404]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	4393      	bics	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b62      	ldr	r3, [pc, #392]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fd ff14 	bl	8000b08 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d111      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fd ff0b 	bl	8000b08 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a58      	ldr	r2, [pc, #352]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0a5      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d02:	4b57      	ldr	r3, [pc, #348]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	220c      	movs	r2, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_ClockConfig+0x106>
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d111      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	e009      	b.n	8002d2e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fd fef5 	bl	8000b08 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	4a4d      	ldr	r2, [pc, #308]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e08f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	220c      	movs	r2, #12
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d1ef      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x132>
 8002d3a:	e024      	b.n	8002d86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d11b      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7fd fedf 	bl	8000b08 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a42      	ldr	r2, [pc, #264]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e079      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5a:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	220c      	movs	r2, #12
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d1ef      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x15e>
 8002d66:	e00e      	b.n	8002d86 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fd fece 	bl	8000b08 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	4a3a      	ldr	r2, [pc, #232]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e068      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d7c:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	220c      	movs	r2, #12
 8002d82:	4013      	ands	r3, r2
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d86:	4b34      	ldr	r3, [pc, #208]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d21e      	bcs.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d94:	4b30      	ldr	r3, [pc, #192]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002da6:	f7fd feaf 	bl	8000b08 <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	e009      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fd feaa 	bl	8000b08 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <HAL_RCC_ClockConfig+0x274>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e044      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc4:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_ClockConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a20      	ldr	r2, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x27c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2208      	movs	r2, #8
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_RCC_ClockConfig+0x280>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00da      	lsls	r2, r3, #3
 8002e0a:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e10:	f000 f832 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e14:	0001      	movs	r1, r0
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCC_ClockConfig+0x278>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	4013      	ands	r3, r2
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <HAL_RCC_ClockConfig+0x284>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	000a      	movs	r2, r1
 8002e26:	40da      	lsrs	r2, r3
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCC_ClockConfig+0x288>)
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_ClockConfig+0x28c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	250b      	movs	r5, #11
 8002e32:	197c      	adds	r4, r7, r5
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fd fe21 	bl	8000a7c <HAL_InitTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e3e:	197b      	adds	r3, r7, r5
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e46:	197b      	adds	r3, r7, r5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bdb0      	pop	{r4, r5, r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	00001388 	.word	0x00001388
 8002e60:	40021000 	.word	0x40021000
 8002e64:	fffff8ff 	.word	0xfffff8ff
 8002e68:	ffffc7ff 	.word	0xffffc7ff
 8002e6c:	0800474c 	.word	0x0800474c
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	220c      	movs	r2, #12
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d013      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002e8e:	d85c      	bhi.n	8002f4a <HAL_RCC_GetSysClockFreq+0xd2>
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d002      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x22>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x38>
 8002e98:	e057      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e9a:	4b35      	ldr	r3, [pc, #212]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d002      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ea4:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ea6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ea8:	e05d      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002eaa:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x100>)
 8002eac:	613b      	str	r3, [r7, #16]
      break;
 8002eae:	e05a      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb0:	4b32      	ldr	r3, [pc, #200]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002eb2:	613b      	str	r3, [r7, #16]
      break;
 8002eb4:	e057      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0c9b      	lsrs	r3, r3, #18
 8002eba:	220f      	movs	r2, #15
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	4a30      	ldr	r2, [pc, #192]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	0d9b      	lsrs	r3, r3, #22
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	3301      	adds	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	025b      	lsls	r3, r3, #9
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00f      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	000a      	movs	r2, r1
 8002ee0:	0152      	lsls	r2, r2, #5
 8002ee2:	1a52      	subs	r2, r2, r1
 8002ee4:	0193      	lsls	r3, r2, #6
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	185b      	adds	r3, r3, r1
 8002eec:	025b      	lsls	r3, r3, #9
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd f91b 	bl	800012c <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e023      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002efc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	000a      	movs	r2, r1
 8002f0a:	0152      	lsls	r2, r2, #5
 8002f0c:	1a52      	subs	r2, r2, r1
 8002f0e:	0193      	lsls	r3, r2, #6
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	185b      	adds	r3, r3, r1
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fd f906 	bl	800012c <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e00e      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	000a      	movs	r2, r1
 8002f2a:	0152      	lsls	r2, r2, #5
 8002f2c:	1a52      	subs	r2, r2, r1
 8002f2e:	0193      	lsls	r3, r2, #6
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	185b      	adds	r3, r3, r1
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7fd f8f6 	bl	800012c <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
      break;
 8002f48:	e00d      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	2207      	movs	r2, #7
 8002f52:	4013      	ands	r3, r2
 8002f54:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	0212      	lsls	r2, r2, #8
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	0013      	movs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      break;
 8002f64:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f66:	693b      	ldr	r3, [r7, #16]
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b006      	add	sp, #24
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	003d0900 	.word	0x003d0900
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200
 8002f80:	08004764 	.word	0x08004764

08002f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f88:	4b02      	ldr	r3, [pc, #8]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f9c:	f7ff fff2 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fa0:	0001      	movs	r1, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	2207      	movs	r2, #7
 8002faa:	4013      	ands	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	40d9      	lsrs	r1, r3
 8002fb2:	000b      	movs	r3, r1
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	0800475c 	.word	0x0800475c

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc8:	f7ff ffdc 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fcc:	0001      	movs	r1, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	0adb      	lsrs	r3, r3, #11
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fda:	5cd3      	ldrb	r3, [r2, r3]
 8002fdc:	40d9      	lsrs	r1, r3
 8002fde:	000b      	movs	r3, r1
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	0800475c 	.word	0x0800475c

08002ff0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ff8:	2017      	movs	r0, #23
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2220      	movs	r2, #32
 8003006:	4013      	ands	r3, r2
 8003008:	d100      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800300a:	e0c7      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b84      	ldr	r3, [pc, #528]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800300e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	055b      	lsls	r3, r3, #21
 8003014:	4013      	ands	r3, r2
 8003016:	d109      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b81      	ldr	r3, [pc, #516]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800301a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301c:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0549      	lsls	r1, r1, #21
 8003022:	430a      	orrs	r2, r1
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003026:	183b      	adds	r3, r7, r0
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b7d      	ldr	r3, [pc, #500]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d11a      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003038:	4b7a      	ldr	r3, [pc, #488]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b79      	ldr	r3, [pc, #484]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800303e:	2180      	movs	r1, #128	@ 0x80
 8003040:	0049      	lsls	r1, r1, #1
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003046:	f7fd fd5f 	bl	8000b08 <HAL_GetTick>
 800304a:	0003      	movs	r3, r0
 800304c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	e008      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fd fd5a 	bl	8000b08 <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0d9      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d0f0      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800306e:	4b6c      	ldr	r3, [pc, #432]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	23c0      	movs	r3, #192	@ 0xc0
 8003074:	039b      	lsls	r3, r3, #14
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	23c0      	movs	r3, #192	@ 0xc0
 8003080:	039b      	lsls	r3, r3, #14
 8003082:	4013      	ands	r3, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	429a      	cmp	r2, r3
 8003088:	d013      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	23c0      	movs	r3, #192	@ 0xc0
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	401a      	ands	r2, r3
 8003094:	23c0      	movs	r3, #192	@ 0xc0
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	429a      	cmp	r2, r3
 800309a:	d10a      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800309c:	4b60      	ldr	r3, [pc, #384]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	401a      	ands	r2, r3
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d101      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0b1      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80030b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b6:	23c0      	movs	r3, #192	@ 0xc0
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d03b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	23c0      	movs	r3, #192	@ 0xc0
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	4013      	ands	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d033      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2220      	movs	r2, #32
 80030da:	4013      	ands	r3, r2
 80030dc:	d02e      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030de:	4b50      	ldr	r3, [pc, #320]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e2:	4a51      	ldr	r2, [pc, #324]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ee:	2180      	movs	r1, #128	@ 0x80
 80030f0:	0309      	lsls	r1, r1, #12
 80030f2:	430a      	orrs	r2, r1
 80030f4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030fa:	4b49      	ldr	r3, [pc, #292]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030fc:	494b      	ldr	r1, [pc, #300]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030fe:	400a      	ands	r2, r1
 8003100:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4013      	ands	r3, r2
 8003110:	d014      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fd fcf9 	bl	8000b08 <HAL_GetTick>
 8003116:	0003      	movs	r3, r0
 8003118:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311a:	e009      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fd fcf4 	bl	8000b08 <HAL_GetTick>
 8003120:	0002      	movs	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	4a42      	ldr	r2, [pc, #264]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e072      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003130:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d0ef      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d01f      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	23c0      	movs	r3, #192	@ 0xc0
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	401a      	ands	r2, r3
 8003150:	23c0      	movs	r3, #192	@ 0xc0
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	429a      	cmp	r2, r3
 8003156:	d10c      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003158:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a35      	ldr	r2, [pc, #212]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	23c0      	movs	r3, #192	@ 0xc0
 8003168:	039b      	lsls	r3, r3, #14
 800316a:	401a      	ands	r2, r3
 800316c:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003174:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	23c0      	movs	r3, #192	@ 0xc0
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	401a      	ands	r2, r3
 8003180:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003182:	430a      	orrs	r2, r1
 8003184:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4b23      	ldr	r3, [pc, #140]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003194:	4b22      	ldr	r3, [pc, #136]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003196:	4928      	ldr	r1, [pc, #160]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003198:	400a      	ands	r2, r1
 800319a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	220c      	movs	r2, #12
 80031ac:	4393      	bics	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c4:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2208      	movs	r2, #8
 80031de:	4013      	ands	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031f2:	430a      	orrs	r2, r1
 80031f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2280      	movs	r2, #128	@ 0x80
 80031fc:	4013      	ands	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003200:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003204:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003210:	430a      	orrs	r2, r1
 8003212:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
 8003228:	fffcffff 	.word	0xfffcffff
 800322c:	fff7ffff 	.word	0xfff7ffff
 8003230:	00001388 	.word	0x00001388
 8003234:	ffcfffff 	.word	0xffcfffff
 8003238:	efffffff 	.word	0xefffffff
 800323c:	fffff3ff 	.word	0xfffff3ff
 8003240:	ffffcfff 	.word	0xffffcfff
 8003244:	fff3ffff 	.word	0xfff3ffff

08003248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e044      	b.n	80032e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2278      	movs	r2, #120	@ 0x78
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd faf1 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0018      	movs	r0, r3
 8003294:	f000 fb16 	bl	80038c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f8c8 	bl	8003430 <UART_SetConfig>
 80032a0:	0003      	movs	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01c      	b.n	80032e4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	490d      	ldr	r1, [pc, #52]	@ (80032ec <HAL_UART_Init+0xa4>)
 80032b6:	400a      	ands	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	212a      	movs	r1, #42	@ 0x2a
 80032c6:	438a      	bics	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fba5 	bl	8003a2c <UART_CheckIdleState>
 80032e2:	0003      	movs	r3, r0
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffffb7ff 	.word	0xffffb7ff

080032f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003304:	2b20      	cmp	r3, #32
 8003306:	d000      	beq.n	800330a <HAL_UART_Transmit+0x1a>
 8003308:	e08c      	b.n	8003424 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_UART_Transmit+0x28>
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e084      	b.n	8003426 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	429a      	cmp	r2, r3
 8003326:	d109      	bne.n	800333c <HAL_UART_Transmit+0x4c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e074      	b.n	8003426 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2284      	movs	r2, #132	@ 0x84
 8003340:	2100      	movs	r1, #0
 8003342:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	@ 0x21
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fd fbdd 	bl	8000b08 <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1dba      	adds	r2, r7, #6
 8003356:	2150      	movs	r1, #80	@ 0x50
 8003358:	8812      	ldrh	r2, [r2, #0]
 800335a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1dba      	adds	r2, r7, #6
 8003360:	2152      	movs	r1, #82	@ 0x52
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	429a      	cmp	r2, r3
 8003370:	d108      	bne.n	8003384 <HAL_UART_Transmit+0x94>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e003      	b.n	800338c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800338c:	e02f      	b.n	80033ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	0013      	movs	r3, r2
 8003398:	2200      	movs	r2, #0
 800339a:	2180      	movs	r1, #128	@ 0x80
 800339c:	f000 fbee 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d004      	beq.n	80033ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e03b      	b.n	8003426 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	001a      	movs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	05d2      	lsls	r2, r2, #23
 80033c0:	0dd2      	lsrs	r2, r2, #23
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3302      	adds	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e007      	b.n	80033dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2252      	movs	r2, #82	@ 0x52
 80033e0:	5a9b      	ldrh	r3, [r3, r2]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b299      	uxth	r1, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2252      	movs	r2, #82	@ 0x52
 80033ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2252      	movs	r2, #82	@ 0x52
 80033f2:	5a9b      	ldrh	r3, [r3, r2]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1c9      	bne.n	800338e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	0013      	movs	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	2140      	movs	r1, #64	@ 0x40
 8003408:	f000 fbb8 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d004      	beq.n	800341a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e005      	b.n	8003426 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b008      	add	sp, #32
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	b5b0      	push	{r4, r5, r7, lr}
 8003432:	b08e      	sub	sp, #56	@ 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003438:	231a      	movs	r3, #26
 800343a:	2218      	movs	r2, #24
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	431a      	orrs	r2, r3
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	431a      	orrs	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4313      	orrs	r3, r2
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4ab4      	ldr	r2, [pc, #720]	@ (8003734 <UART_SetConfig+0x304>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4aaf      	ldr	r2, [pc, #700]	@ (8003738 <UART_SetConfig+0x308>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4aa9      	ldr	r2, [pc, #676]	@ (800373c <UART_SetConfig+0x30c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034a0:	4313      	orrs	r3, r2
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4aa5      	ldr	r2, [pc, #660]	@ (8003740 <UART_SetConfig+0x310>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4aa1      	ldr	r2, [pc, #644]	@ (8003744 <UART_SetConfig+0x314>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d131      	bne.n	8003528 <UART_SetConfig+0xf8>
 80034c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003748 <UART_SetConfig+0x318>)
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c8:	220c      	movs	r2, #12
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d01d      	beq.n	800350c <UART_SetConfig+0xdc>
 80034d0:	d823      	bhi.n	800351a <UART_SetConfig+0xea>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d00c      	beq.n	80034f0 <UART_SetConfig+0xc0>
 80034d6:	d820      	bhi.n	800351a <UART_SetConfig+0xea>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <UART_SetConfig+0xb2>
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00e      	beq.n	80034fe <UART_SetConfig+0xce>
 80034e0:	e01b      	b.n	800351a <UART_SetConfig+0xea>
 80034e2:	231b      	movs	r3, #27
 80034e4:	2218      	movs	r2, #24
 80034e6:	189b      	adds	r3, r3, r2
 80034e8:	19db      	adds	r3, r3, r7
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e065      	b.n	80035bc <UART_SetConfig+0x18c>
 80034f0:	231b      	movs	r3, #27
 80034f2:	2218      	movs	r2, #24
 80034f4:	189b      	adds	r3, r3, r2
 80034f6:	19db      	adds	r3, r3, r7
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e05e      	b.n	80035bc <UART_SetConfig+0x18c>
 80034fe:	231b      	movs	r3, #27
 8003500:	2218      	movs	r2, #24
 8003502:	189b      	adds	r3, r3, r2
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e057      	b.n	80035bc <UART_SetConfig+0x18c>
 800350c:	231b      	movs	r3, #27
 800350e:	2218      	movs	r2, #24
 8003510:	189b      	adds	r3, r3, r2
 8003512:	19db      	adds	r3, r3, r7
 8003514:	2208      	movs	r2, #8
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e050      	b.n	80035bc <UART_SetConfig+0x18c>
 800351a:	231b      	movs	r3, #27
 800351c:	2218      	movs	r2, #24
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e049      	b.n	80035bc <UART_SetConfig+0x18c>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	@ (800373c <UART_SetConfig+0x30c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d13e      	bne.n	80035b0 <UART_SetConfig+0x180>
 8003532:	4b85      	ldr	r3, [pc, #532]	@ (8003748 <UART_SetConfig+0x318>)
 8003534:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003536:	23c0      	movs	r3, #192	@ 0xc0
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4013      	ands	r3, r2
 800353c:	22c0      	movs	r2, #192	@ 0xc0
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	4293      	cmp	r3, r2
 8003542:	d027      	beq.n	8003594 <UART_SetConfig+0x164>
 8003544:	22c0      	movs	r2, #192	@ 0xc0
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	4293      	cmp	r3, r2
 800354a:	d82a      	bhi.n	80035a2 <UART_SetConfig+0x172>
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	4293      	cmp	r3, r2
 8003552:	d011      	beq.n	8003578 <UART_SetConfig+0x148>
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	4293      	cmp	r3, r2
 800355a:	d822      	bhi.n	80035a2 <UART_SetConfig+0x172>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <UART_SetConfig+0x13a>
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	00d2      	lsls	r2, r2, #3
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <UART_SetConfig+0x156>
 8003568:	e01b      	b.n	80035a2 <UART_SetConfig+0x172>
 800356a:	231b      	movs	r3, #27
 800356c:	2218      	movs	r2, #24
 800356e:	189b      	adds	r3, r3, r2
 8003570:	19db      	adds	r3, r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e021      	b.n	80035bc <UART_SetConfig+0x18c>
 8003578:	231b      	movs	r3, #27
 800357a:	2218      	movs	r2, #24
 800357c:	189b      	adds	r3, r3, r2
 800357e:	19db      	adds	r3, r3, r7
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e01a      	b.n	80035bc <UART_SetConfig+0x18c>
 8003586:	231b      	movs	r3, #27
 8003588:	2218      	movs	r2, #24
 800358a:	189b      	adds	r3, r3, r2
 800358c:	19db      	adds	r3, r3, r7
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e013      	b.n	80035bc <UART_SetConfig+0x18c>
 8003594:	231b      	movs	r3, #27
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2208      	movs	r2, #8
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e00c      	b.n	80035bc <UART_SetConfig+0x18c>
 80035a2:	231b      	movs	r3, #27
 80035a4:	2218      	movs	r2, #24
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	2210      	movs	r2, #16
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e005      	b.n	80035bc <UART_SetConfig+0x18c>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2218      	movs	r2, #24
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2210      	movs	r2, #16
 80035ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5e      	ldr	r2, [pc, #376]	@ (800373c <UART_SetConfig+0x30c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d000      	beq.n	80035c8 <UART_SetConfig+0x198>
 80035c6:	e084      	b.n	80036d2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035c8:	231b      	movs	r3, #27
 80035ca:	2218      	movs	r2, #24
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	19db      	adds	r3, r3, r7
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d01d      	beq.n	8003612 <UART_SetConfig+0x1e2>
 80035d6:	dc20      	bgt.n	800361a <UART_SetConfig+0x1ea>
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d015      	beq.n	8003608 <UART_SetConfig+0x1d8>
 80035dc:	dc1d      	bgt.n	800361a <UART_SetConfig+0x1ea>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <UART_SetConfig+0x1b8>
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d005      	beq.n	80035f2 <UART_SetConfig+0x1c2>
 80035e6:	e018      	b.n	800361a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7ff fcd6 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80035ec:	0003      	movs	r3, r0
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035f0:	e01c      	b.n	800362c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f2:	4b55      	ldr	r3, [pc, #340]	@ (8003748 <UART_SetConfig+0x318>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2210      	movs	r2, #16
 80035f8:	4013      	ands	r3, r2
 80035fa:	d002      	beq.n	8003602 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035fc:	4b53      	ldr	r3, [pc, #332]	@ (800374c <UART_SetConfig+0x31c>)
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003600:	e014      	b.n	800362c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003602:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <UART_SetConfig+0x320>)
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003606:	e011      	b.n	800362c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003608:	f7ff fc36 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 800360c:	0003      	movs	r3, r0
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003610:	e00c      	b.n	800362c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003618:	e008      	b.n	800362c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800361e:	231a      	movs	r3, #26
 8003620:	2218      	movs	r2, #24
 8003622:	189b      	adds	r3, r3, r2
 8003624:	19db      	adds	r3, r3, r7
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
        break;
 800362a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d100      	bne.n	8003634 <UART_SetConfig+0x204>
 8003632:	e12f      	b.n	8003894 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	0013      	movs	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	189b      	adds	r3, r3, r2
 800363e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d305      	bcc.n	8003650 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800364a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d906      	bls.n	800365e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003650:	231a      	movs	r3, #26
 8003652:	2218      	movs	r2, #24
 8003654:	189b      	adds	r3, r3, r2
 8003656:	19db      	adds	r3, r3, r7
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e11a      	b.n	8003894 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	000b      	movs	r3, r1
 800366c:	0e1b      	lsrs	r3, r3, #24
 800366e:	0010      	movs	r0, r2
 8003670:	0205      	lsls	r5, r0, #8
 8003672:	431d      	orrs	r5, r3
 8003674:	000b      	movs	r3, r1
 8003676:	021c      	lsls	r4, r3, #8
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	1900      	adds	r0, r0, r4
 800368a:	4169      	adcs	r1, r5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f7fc fdd3 	bl	8000244 <__aeabi_uldivmod>
 800369e:	0002      	movs	r2, r0
 80036a0:	000b      	movs	r3, r1
 80036a2:	0013      	movs	r3, r2
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036a8:	23c0      	movs	r3, #192	@ 0xc0
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d309      	bcc.n	80036c4 <UART_SetConfig+0x294>
 80036b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	035b      	lsls	r3, r3, #13
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d204      	bcs.n	80036c4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e0e7      	b.n	8003894 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80036c4:	231a      	movs	r3, #26
 80036c6:	2218      	movs	r2, #24
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e0e0      	b.n	8003894 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	429a      	cmp	r2, r3
 80036dc:	d000      	beq.n	80036e0 <UART_SetConfig+0x2b0>
 80036de:	e082      	b.n	80037e6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80036e0:	231b      	movs	r3, #27
 80036e2:	2218      	movs	r2, #24
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	19db      	adds	r3, r3, r7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d834      	bhi.n	8003758 <UART_SetConfig+0x328>
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	4b18      	ldr	r3, [pc, #96]	@ (8003754 <UART_SetConfig+0x324>)
 80036f2:	18d3      	adds	r3, r2, r3
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7ff fc4e 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80036fc:	0003      	movs	r3, r0
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003700:	e033      	b.n	800376a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003702:	f7ff fc5f 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8003706:	0003      	movs	r3, r0
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800370a:	e02e      	b.n	800376a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <UART_SetConfig+0x318>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2210      	movs	r2, #16
 8003712:	4013      	ands	r3, r2
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003716:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <UART_SetConfig+0x31c>)
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800371a:	e026      	b.n	800376a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <UART_SetConfig+0x320>)
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003720:	e023      	b.n	800376a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7ff fba9 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8003726:	0003      	movs	r3, r0
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800372a:	e01e      	b.n	800376a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003732:	e01a      	b.n	800376a <UART_SetConfig+0x33a>
 8003734:	efff69f3 	.word	0xefff69f3
 8003738:	ffffcfff 	.word	0xffffcfff
 800373c:	40004800 	.word	0x40004800
 8003740:	fffff4ff 	.word	0xfffff4ff
 8003744:	40004400 	.word	0x40004400
 8003748:	40021000 	.word	0x40021000
 800374c:	003d0900 	.word	0x003d0900
 8003750:	00f42400 	.word	0x00f42400
 8003754:	08004770 	.word	0x08004770
      default:
        pclk = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800375c:	231a      	movs	r3, #26
 800375e:	2218      	movs	r2, #24
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
        break;
 8003768:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d100      	bne.n	8003772 <UART_SetConfig+0x342>
 8003770:	e090      	b.n	8003894 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	005a      	lsls	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	18d2      	adds	r2, r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f7fc fcd1 	bl	800012c <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d921      	bls.n	80037d8 <UART_SetConfig+0x3a8>
 8003794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	025b      	lsls	r3, r3, #9
 800379a:	429a      	cmp	r2, r3
 800379c:	d21c      	bcs.n	80037d8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	200e      	movs	r0, #14
 80037a4:	2418      	movs	r4, #24
 80037a6:	1903      	adds	r3, r0, r4
 80037a8:	19db      	adds	r3, r3, r7
 80037aa:	210f      	movs	r1, #15
 80037ac:	438a      	bics	r2, r1
 80037ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2207      	movs	r2, #7
 80037b8:	4013      	ands	r3, r2
 80037ba:	b299      	uxth	r1, r3
 80037bc:	1903      	adds	r3, r0, r4
 80037be:	19db      	adds	r3, r3, r7
 80037c0:	1902      	adds	r2, r0, r4
 80037c2:	19d2      	adds	r2, r2, r7
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1902      	adds	r2, r0, r4
 80037d0:	19d2      	adds	r2, r2, r7
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e05d      	b.n	8003894 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80037d8:	231a      	movs	r3, #26
 80037da:	2218      	movs	r2, #24
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e056      	b.n	8003894 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e6:	231b      	movs	r3, #27
 80037e8:	2218      	movs	r2, #24
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	19db      	adds	r3, r3, r7
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d822      	bhi.n	800383a <UART_SetConfig+0x40a>
 80037f4:	009a      	lsls	r2, r3, #2
 80037f6:	4b2f      	ldr	r3, [pc, #188]	@ (80038b4 <UART_SetConfig+0x484>)
 80037f8:	18d3      	adds	r3, r2, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7ff fbcb 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8003802:	0003      	movs	r3, r0
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003806:	e021      	b.n	800384c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7ff fbdc 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 800380c:	0003      	movs	r3, r0
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003810:	e01c      	b.n	800384c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003812:	4b29      	ldr	r3, [pc, #164]	@ (80038b8 <UART_SetConfig+0x488>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2210      	movs	r2, #16
 8003818:	4013      	ands	r3, r2
 800381a:	d002      	beq.n	8003822 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800381c:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <UART_SetConfig+0x48c>)
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003820:	e014      	b.n	800384c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003822:	4b27      	ldr	r3, [pc, #156]	@ (80038c0 <UART_SetConfig+0x490>)
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003826:	e011      	b.n	800384c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003828:	f7ff fb26 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 800382c:	0003      	movs	r3, r0
 800382e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003830:	e00c      	b.n	800384c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003838:	e008      	b.n	800384c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800383e:	231a      	movs	r3, #26
 8003840:	2218      	movs	r2, #24
 8003842:	189b      	adds	r3, r3, r2
 8003844:	19db      	adds	r3, r3, r7
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
        break;
 800384a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	085a      	lsrs	r2, r3, #1
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	18d2      	adds	r2, r2, r3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0019      	movs	r1, r3
 8003862:	0010      	movs	r0, r2
 8003864:	f7fc fc62 	bl	800012c <__udivsi3>
 8003868:	0003      	movs	r3, r0
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d90a      	bls.n	8003888 <UART_SetConfig+0x458>
 8003872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	025b      	lsls	r3, r3, #9
 8003878:	429a      	cmp	r2, r3
 800387a:	d205      	bcs.n	8003888 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	b29a      	uxth	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	e005      	b.n	8003894 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003888:	231a      	movs	r3, #26
 800388a:	2218      	movs	r2, #24
 800388c:	189b      	adds	r3, r3, r2
 800388e:	19db      	adds	r3, r3, r7
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038a0:	231a      	movs	r3, #26
 80038a2:	2218      	movs	r2, #24
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b00e      	add	sp, #56	@ 0x38
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	08004794 	.word	0x08004794
 80038b8:	40021000 	.word	0x40021000
 80038bc:	003d0900 	.word	0x003d0900
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	2208      	movs	r2, #8
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003a08 <UART_AdvFeatureConfig+0x144>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	2201      	movs	r2, #1
 80038f4:	4013      	ands	r3, r2
 80038f6:	d00b      	beq.n	8003910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a43      	ldr	r2, [pc, #268]	@ (8003a0c <UART_AdvFeatureConfig+0x148>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d00b      	beq.n	8003932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a3b      	ldr	r2, [pc, #236]	@ (8003a10 <UART_AdvFeatureConfig+0x14c>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	2204      	movs	r2, #4
 8003938:	4013      	ands	r3, r2
 800393a:	d00b      	beq.n	8003954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a34      	ldr	r2, [pc, #208]	@ (8003a14 <UART_AdvFeatureConfig+0x150>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	2210      	movs	r2, #16
 800395a:	4013      	ands	r3, r2
 800395c:	d00b      	beq.n	8003976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <UART_AdvFeatureConfig+0x154>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	2220      	movs	r2, #32
 800397c:	4013      	ands	r3, r2
 800397e:	d00b      	beq.n	8003998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a25      	ldr	r2, [pc, #148]	@ (8003a1c <UART_AdvFeatureConfig+0x158>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	2240      	movs	r2, #64	@ 0x40
 800399e:	4013      	ands	r3, r2
 80039a0:	d01d      	beq.n	80039de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <UART_AdvFeatureConfig+0x15c>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	035b      	lsls	r3, r3, #13
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10b      	bne.n	80039de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <UART_AdvFeatureConfig+0x160>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	4013      	ands	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <UART_AdvFeatureConfig+0x164>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	ffff7fff 	.word	0xffff7fff
 8003a0c:	fffdffff 	.word	0xfffdffff
 8003a10:	fffeffff 	.word	0xfffeffff
 8003a14:	fffbffff 	.word	0xfffbffff
 8003a18:	ffffefff 	.word	0xffffefff
 8003a1c:	ffffdfff 	.word	0xffffdfff
 8003a20:	ffefffff 	.word	0xffefffff
 8003a24:	ff9fffff 	.word	0xff9fffff
 8003a28:	fff7ffff 	.word	0xfff7ffff

08003a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b092      	sub	sp, #72	@ 0x48
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2284      	movs	r2, #132	@ 0x84
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a3c:	f7fd f864 	bl	8000b08 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d12c      	bne.n	8003aac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	0391      	lsls	r1, r2, #14
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4a46      	ldr	r2, [pc, #280]	@ (8003b74 <UART_CheckIdleState+0x148>)
 8003a5c:	9200      	str	r2, [sp, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f000 f88c 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d021      	beq.n	8003aac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a72:	2301      	movs	r3, #1
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	438a      	bics	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2278      	movs	r2, #120	@ 0x78
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e05f      	b.n	8003b6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d146      	bne.n	8003b48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abc:	2280      	movs	r2, #128	@ 0x80
 8003abe:	03d1      	lsls	r1, r2, #15
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <UART_CheckIdleState+0x148>)
 8003ac4:	9200      	str	r2, [sp, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f000 f858 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d03b      	beq.n	8003b48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ada:	2301      	movs	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f383 8810 	msr	PRIMASK, r3
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4921      	ldr	r1, [pc, #132]	@ (8003b78 <UART_CheckIdleState+0x14c>)
 8003af2:	400a      	ands	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	2120      	movs	r1, #32
 8003b3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2278      	movs	r2, #120	@ 0x78
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e011      	b.n	8003b6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2280      	movs	r2, #128	@ 0x80
 8003b52:	2120      	movs	r1, #32
 8003b54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2278      	movs	r2, #120	@ 0x78
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b010      	add	sp, #64	@ 0x40
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	01ffffff 	.word	0x01ffffff
 8003b78:	fffffedf 	.word	0xfffffedf

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e051      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3301      	adds	r3, #1
 8003b92:	d04e      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fc ffb8 	bl	8000b08 <HAL_GetTick>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e051      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d03b      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	d038      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d035      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d111      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f83c 	bl	8003c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2284      	movs	r2, #132	@ 0x84
 8003be8:	2108      	movs	r1, #8
 8003bea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2278      	movs	r2, #120	@ 0x78
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e02c      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	401a      	ands	r2, r3
 8003c04:	2380      	movs	r3, #128	@ 0x80
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d112      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f81f 	bl	8003c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2284      	movs	r2, #132	@ 0x84
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2278      	movs	r2, #120	@ 0x78
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e00f      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	425a      	negs	r2, r3
 8003c42:	4153      	adcs	r3, r2
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	001a      	movs	r2, r3
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d09e      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08e      	sub	sp, #56	@ 0x38
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	617b      	str	r3, [r7, #20]
  return(result);
 8003c6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f383 8810 	msr	PRIMASK, r3
}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4926      	ldr	r1, [pc, #152]	@ (8003d20 <UART_EndRxTransfer+0xc4>)
 8003c86:	400a      	ands	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c96:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d118      	bne.n	8003d02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cda:	2301      	movs	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2110      	movs	r1, #16
 8003cf2:	438a      	bics	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2280      	movs	r2, #128	@ 0x80
 8003d06:	2120      	movs	r1, #32
 8003d08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b00e      	add	sp, #56	@ 0x38
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	fffffedf 	.word	0xfffffedf

08003d24 <sniprintf>:
 8003d24:	b40c      	push	{r2, r3}
 8003d26:	b530      	push	{r4, r5, lr}
 8003d28:	4b18      	ldr	r3, [pc, #96]	@ (8003d8c <sniprintf+0x68>)
 8003d2a:	000c      	movs	r4, r1
 8003d2c:	681d      	ldr	r5, [r3, #0]
 8003d2e:	b09d      	sub	sp, #116	@ 0x74
 8003d30:	2900      	cmp	r1, #0
 8003d32:	da08      	bge.n	8003d46 <sniprintf+0x22>
 8003d34:	238b      	movs	r3, #139	@ 0x8b
 8003d36:	2001      	movs	r0, #1
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	4240      	negs	r0, r0
 8003d3c:	b01d      	add	sp, #116	@ 0x74
 8003d3e:	bc30      	pop	{r4, r5}
 8003d40:	bc08      	pop	{r3}
 8003d42:	b002      	add	sp, #8
 8003d44:	4718      	bx	r3
 8003d46:	2382      	movs	r3, #130	@ 0x82
 8003d48:	466a      	mov	r2, sp
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	8293      	strh	r3, [r2, #20]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003d54:	9006      	str	r0, [sp, #24]
 8003d56:	4299      	cmp	r1, r3
 8003d58:	d000      	beq.n	8003d5c <sniprintf+0x38>
 8003d5a:	1e4b      	subs	r3, r1, #1
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	2301      	movs	r3, #1
 8003d62:	466a      	mov	r2, sp
 8003d64:	425b      	negs	r3, r3
 8003d66:	82d3      	strh	r3, [r2, #22]
 8003d68:	0028      	movs	r0, r5
 8003d6a:	ab21      	add	r3, sp, #132	@ 0x84
 8003d6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d6e:	a902      	add	r1, sp, #8
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	f000 f99d 	bl	80040b0 <_svfiprintf_r>
 8003d76:	1c43      	adds	r3, r0, #1
 8003d78:	da01      	bge.n	8003d7e <sniprintf+0x5a>
 8003d7a:	238b      	movs	r3, #139	@ 0x8b
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d0dc      	beq.n	8003d3c <sniprintf+0x18>
 8003d82:	2200      	movs	r2, #0
 8003d84:	9b02      	ldr	r3, [sp, #8]
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e7d8      	b.n	8003d3c <sniprintf+0x18>
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <memset>:
 8003d90:	0003      	movs	r3, r0
 8003d92:	1882      	adds	r2, r0, r2
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	7019      	strb	r1, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <__errno>:
 8003da0:	4b01      	ldr	r3, [pc, #4]	@ (8003da8 <__errno+0x8>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4770      	bx	lr
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	2000000c 	.word	0x2000000c

08003dac <__libc_init_array>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	2600      	movs	r6, #0
 8003db0:	4c0c      	ldr	r4, [pc, #48]	@ (8003de4 <__libc_init_array+0x38>)
 8003db2:	4d0d      	ldr	r5, [pc, #52]	@ (8003de8 <__libc_init_array+0x3c>)
 8003db4:	1b64      	subs	r4, r4, r5
 8003db6:	10a4      	asrs	r4, r4, #2
 8003db8:	42a6      	cmp	r6, r4
 8003dba:	d109      	bne.n	8003dd0 <__libc_init_array+0x24>
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	f000 fc61 	bl	8004684 <_init>
 8003dc2:	4c0a      	ldr	r4, [pc, #40]	@ (8003dec <__libc_init_array+0x40>)
 8003dc4:	4d0a      	ldr	r5, [pc, #40]	@ (8003df0 <__libc_init_array+0x44>)
 8003dc6:	1b64      	subs	r4, r4, r5
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	42a6      	cmp	r6, r4
 8003dcc:	d105      	bne.n	8003dda <__libc_init_array+0x2e>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	00b3      	lsls	r3, r6, #2
 8003dd2:	58eb      	ldr	r3, [r5, r3]
 8003dd4:	4798      	blx	r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7ee      	b.n	8003db8 <__libc_init_array+0xc>
 8003dda:	00b3      	lsls	r3, r6, #2
 8003ddc:	58eb      	ldr	r3, [r5, r3]
 8003dde:	4798      	blx	r3
 8003de0:	3601      	adds	r6, #1
 8003de2:	e7f2      	b.n	8003dca <__libc_init_array+0x1e>
 8003de4:	080047f4 	.word	0x080047f4
 8003de8:	080047f4 	.word	0x080047f4
 8003dec:	080047f8 	.word	0x080047f8
 8003df0:	080047f4 	.word	0x080047f4

08003df4 <__retarget_lock_acquire_recursive>:
 8003df4:	4770      	bx	lr

08003df6 <__retarget_lock_release_recursive>:
 8003df6:	4770      	bx	lr

08003df8 <_free_r>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	0005      	movs	r5, r0
 8003dfc:	1e0c      	subs	r4, r1, #0
 8003dfe:	d010      	beq.n	8003e22 <_free_r+0x2a>
 8003e00:	3c04      	subs	r4, #4
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da00      	bge.n	8003e0a <_free_r+0x12>
 8003e08:	18e4      	adds	r4, r4, r3
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f000 f8e0 	bl	8003fd0 <__malloc_lock>
 8003e10:	4a1d      	ldr	r2, [pc, #116]	@ (8003e88 <_free_r+0x90>)
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <_free_r+0x2c>
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6014      	str	r4, [r2, #0]
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	f000 f8df 	bl	8003fe0 <__malloc_unlock>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	d908      	bls.n	8003e3a <_free_r+0x42>
 8003e28:	6820      	ldr	r0, [r4, #0]
 8003e2a:	1821      	adds	r1, r4, r0
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d1f3      	bne.n	8003e18 <_free_r+0x20>
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	1809      	adds	r1, r1, r0
 8003e36:	6021      	str	r1, [r4, #0]
 8003e38:	e7ee      	b.n	8003e18 <_free_r+0x20>
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <_free_r+0x4e>
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	d9f9      	bls.n	8003e3a <_free_r+0x42>
 8003e46:	6811      	ldr	r1, [r2, #0]
 8003e48:	1850      	adds	r0, r2, r1
 8003e4a:	42a0      	cmp	r0, r4
 8003e4c:	d10b      	bne.n	8003e66 <_free_r+0x6e>
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	1809      	adds	r1, r1, r0
 8003e52:	1850      	adds	r0, r2, r1
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	4283      	cmp	r3, r0
 8003e58:	d1e0      	bne.n	8003e1c <_free_r+0x24>
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	1841      	adds	r1, r0, r1
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	6053      	str	r3, [r2, #4]
 8003e64:	e7da      	b.n	8003e1c <_free_r+0x24>
 8003e66:	42a0      	cmp	r0, r4
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x78>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d5      	b.n	8003e1c <_free_r+0x24>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d103      	bne.n	8003e80 <_free_r+0x88>
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	1809      	adds	r1, r1, r0
 8003e7e:	6021      	str	r1, [r4, #0]
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	6054      	str	r4, [r2, #4]
 8003e84:	e7ca      	b.n	8003e1c <_free_r+0x24>
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	200002a0 	.word	0x200002a0

08003e8c <sbrk_aligned>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ecc <sbrk_aligned+0x40>)
 8003e90:	000d      	movs	r5, r1
 8003e92:	6831      	ldr	r1, [r6, #0]
 8003e94:	0004      	movs	r4, r0
 8003e96:	2900      	cmp	r1, #0
 8003e98:	d102      	bne.n	8003ea0 <sbrk_aligned+0x14>
 8003e9a:	f000 fb95 	bl	80045c8 <_sbrk_r>
 8003e9e:	6030      	str	r0, [r6, #0]
 8003ea0:	0029      	movs	r1, r5
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f000 fb90 	bl	80045c8 <_sbrk_r>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <sbrk_aligned+0x28>
 8003eac:	2501      	movs	r5, #1
 8003eae:	426d      	negs	r5, r5
 8003eb0:	0028      	movs	r0, r5
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	1cc5      	adds	r5, r0, #3
 8003eb8:	439d      	bics	r5, r3
 8003eba:	42a8      	cmp	r0, r5
 8003ebc:	d0f8      	beq.n	8003eb0 <sbrk_aligned+0x24>
 8003ebe:	1a29      	subs	r1, r5, r0
 8003ec0:	0020      	movs	r0, r4
 8003ec2:	f000 fb81 	bl	80045c8 <_sbrk_r>
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d1f2      	bne.n	8003eb0 <sbrk_aligned+0x24>
 8003eca:	e7ef      	b.n	8003eac <sbrk_aligned+0x20>
 8003ecc:	2000029c 	.word	0x2000029c

08003ed0 <_malloc_r>:
 8003ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	1ccb      	adds	r3, r1, #3
 8003ed6:	4393      	bics	r3, r2
 8003ed8:	3308      	adds	r3, #8
 8003eda:	0005      	movs	r5, r0
 8003edc:	001f      	movs	r7, r3
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d234      	bcs.n	8003f4c <_malloc_r+0x7c>
 8003ee2:	270c      	movs	r7, #12
 8003ee4:	42b9      	cmp	r1, r7
 8003ee6:	d833      	bhi.n	8003f50 <_malloc_r+0x80>
 8003ee8:	0028      	movs	r0, r5
 8003eea:	f000 f871 	bl	8003fd0 <__malloc_lock>
 8003eee:	4e37      	ldr	r6, [pc, #220]	@ (8003fcc <_malloc_r+0xfc>)
 8003ef0:	6833      	ldr	r3, [r6, #0]
 8003ef2:	001c      	movs	r4, r3
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	d12f      	bne.n	8003f58 <_malloc_r+0x88>
 8003ef8:	0039      	movs	r1, r7
 8003efa:	0028      	movs	r0, r5
 8003efc:	f7ff ffc6 	bl	8003e8c <sbrk_aligned>
 8003f00:	0004      	movs	r4, r0
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d15f      	bne.n	8003fc6 <_malloc_r+0xf6>
 8003f06:	6834      	ldr	r4, [r6, #0]
 8003f08:	9400      	str	r4, [sp, #0]
 8003f0a:	9b00      	ldr	r3, [sp, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d14a      	bne.n	8003fa6 <_malloc_r+0xd6>
 8003f10:	2c00      	cmp	r4, #0
 8003f12:	d052      	beq.n	8003fba <_malloc_r+0xea>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	0028      	movs	r0, r5
 8003f18:	18e3      	adds	r3, r4, r3
 8003f1a:	9900      	ldr	r1, [sp, #0]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	f000 fb53 	bl	80045c8 <_sbrk_r>
 8003f22:	9b01      	ldr	r3, [sp, #4]
 8003f24:	4283      	cmp	r3, r0
 8003f26:	d148      	bne.n	8003fba <_malloc_r+0xea>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	0028      	movs	r0, r5
 8003f2c:	1aff      	subs	r7, r7, r3
 8003f2e:	0039      	movs	r1, r7
 8003f30:	f7ff ffac 	bl	8003e8c <sbrk_aligned>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d040      	beq.n	8003fba <_malloc_r+0xea>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	6833      	ldr	r3, [r6, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d133      	bne.n	8003fae <_malloc_r+0xde>
 8003f46:	9b00      	ldr	r3, [sp, #0]
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	e019      	b.n	8003f80 <_malloc_r+0xb0>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dac9      	bge.n	8003ee4 <_malloc_r+0x14>
 8003f50:	230c      	movs	r3, #12
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	2000      	movs	r0, #0
 8003f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f58:	6821      	ldr	r1, [r4, #0]
 8003f5a:	1bc9      	subs	r1, r1, r7
 8003f5c:	d420      	bmi.n	8003fa0 <_malloc_r+0xd0>
 8003f5e:	290b      	cmp	r1, #11
 8003f60:	d90a      	bls.n	8003f78 <_malloc_r+0xa8>
 8003f62:	19e2      	adds	r2, r4, r7
 8003f64:	6027      	str	r7, [r4, #0]
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	d104      	bne.n	8003f74 <_malloc_r+0xa4>
 8003f6a:	6032      	str	r2, [r6, #0]
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	6011      	str	r1, [r2, #0]
 8003f70:	6053      	str	r3, [r2, #4]
 8003f72:	e005      	b.n	8003f80 <_malloc_r+0xb0>
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e7f9      	b.n	8003f6c <_malloc_r+0x9c>
 8003f78:	6862      	ldr	r2, [r4, #4]
 8003f7a:	42a3      	cmp	r3, r4
 8003f7c:	d10e      	bne.n	8003f9c <_malloc_r+0xcc>
 8003f7e:	6032      	str	r2, [r6, #0]
 8003f80:	0028      	movs	r0, r5
 8003f82:	f000 f82d 	bl	8003fe0 <__malloc_unlock>
 8003f86:	0020      	movs	r0, r4
 8003f88:	2207      	movs	r2, #7
 8003f8a:	300b      	adds	r0, #11
 8003f8c:	1d23      	adds	r3, r4, #4
 8003f8e:	4390      	bics	r0, r2
 8003f90:	1ac2      	subs	r2, r0, r3
 8003f92:	4298      	cmp	r0, r3
 8003f94:	d0df      	beq.n	8003f56 <_malloc_r+0x86>
 8003f96:	1a1b      	subs	r3, r3, r0
 8003f98:	50a3      	str	r3, [r4, r2]
 8003f9a:	e7dc      	b.n	8003f56 <_malloc_r+0x86>
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	e7ef      	b.n	8003f80 <_malloc_r+0xb0>
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	6864      	ldr	r4, [r4, #4]
 8003fa4:	e7a6      	b.n	8003ef4 <_malloc_r+0x24>
 8003fa6:	9c00      	ldr	r4, [sp, #0]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	e7ad      	b.n	8003f0a <_malloc_r+0x3a>
 8003fae:	001a      	movs	r2, r3
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	d1fb      	bne.n	8003fae <_malloc_r+0xde>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e7da      	b.n	8003f70 <_malloc_r+0xa0>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f000 f80e 	bl	8003fe0 <__malloc_unlock>
 8003fc4:	e7c6      	b.n	8003f54 <_malloc_r+0x84>
 8003fc6:	6007      	str	r7, [r0, #0]
 8003fc8:	e7da      	b.n	8003f80 <_malloc_r+0xb0>
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	200002a0 	.word	0x200002a0

08003fd0 <__malloc_lock>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <__malloc_lock+0xc>)
 8003fd4:	f7ff ff0e 	bl	8003df4 <__retarget_lock_acquire_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	20000298 	.word	0x20000298

08003fe0 <__malloc_unlock>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4802      	ldr	r0, [pc, #8]	@ (8003fec <__malloc_unlock+0xc>)
 8003fe4:	f7ff ff07 	bl	8003df6 <__retarget_lock_release_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	20000298 	.word	0x20000298

08003ff0 <__ssputs_r>:
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	688e      	ldr	r6, [r1, #8]
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	001f      	movs	r7, r3
 8003ff8:	000c      	movs	r4, r1
 8003ffa:	680b      	ldr	r3, [r1, #0]
 8003ffc:	9002      	str	r0, [sp, #8]
 8003ffe:	9203      	str	r2, [sp, #12]
 8004000:	42be      	cmp	r6, r7
 8004002:	d830      	bhi.n	8004066 <__ssputs_r+0x76>
 8004004:	210c      	movs	r1, #12
 8004006:	5e62      	ldrsh	r2, [r4, r1]
 8004008:	2190      	movs	r1, #144	@ 0x90
 800400a:	00c9      	lsls	r1, r1, #3
 800400c:	420a      	tst	r2, r1
 800400e:	d028      	beq.n	8004062 <__ssputs_r+0x72>
 8004010:	2003      	movs	r0, #3
 8004012:	6921      	ldr	r1, [r4, #16]
 8004014:	1a5b      	subs	r3, r3, r1
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6963      	ldr	r3, [r4, #20]
 800401a:	4343      	muls	r3, r0
 800401c:	9801      	ldr	r0, [sp, #4]
 800401e:	0fdd      	lsrs	r5, r3, #31
 8004020:	18ed      	adds	r5, r5, r3
 8004022:	1c7b      	adds	r3, r7, #1
 8004024:	181b      	adds	r3, r3, r0
 8004026:	106d      	asrs	r5, r5, #1
 8004028:	42ab      	cmp	r3, r5
 800402a:	d900      	bls.n	800402e <__ssputs_r+0x3e>
 800402c:	001d      	movs	r5, r3
 800402e:	0552      	lsls	r2, r2, #21
 8004030:	d528      	bpl.n	8004084 <__ssputs_r+0x94>
 8004032:	0029      	movs	r1, r5
 8004034:	9802      	ldr	r0, [sp, #8]
 8004036:	f7ff ff4b 	bl	8003ed0 <_malloc_r>
 800403a:	1e06      	subs	r6, r0, #0
 800403c:	d02c      	beq.n	8004098 <__ssputs_r+0xa8>
 800403e:	9a01      	ldr	r2, [sp, #4]
 8004040:	6921      	ldr	r1, [r4, #16]
 8004042:	f000 fade 	bl	8004602 <memcpy>
 8004046:	89a2      	ldrh	r2, [r4, #12]
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <__ssputs_r+0xbc>)
 800404a:	401a      	ands	r2, r3
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	4313      	orrs	r3, r2
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	18f6      	adds	r6, r6, r3
 8004058:	6026      	str	r6, [r4, #0]
 800405a:	003e      	movs	r6, r7
 800405c:	6165      	str	r5, [r4, #20]
 800405e:	1aed      	subs	r5, r5, r3
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	42be      	cmp	r6, r7
 8004064:	d900      	bls.n	8004068 <__ssputs_r+0x78>
 8004066:	003e      	movs	r6, r7
 8004068:	0032      	movs	r2, r6
 800406a:	9903      	ldr	r1, [sp, #12]
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f000 fa99 	bl	80045a4 <memmove>
 8004072:	2000      	movs	r0, #0
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	1b9b      	subs	r3, r3, r6
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	199b      	adds	r3, r3, r6
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	b005      	add	sp, #20
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	002a      	movs	r2, r5
 8004086:	9802      	ldr	r0, [sp, #8]
 8004088:	f000 fac4 	bl	8004614 <_realloc_r>
 800408c:	1e06      	subs	r6, r0, #0
 800408e:	d1e0      	bne.n	8004052 <__ssputs_r+0x62>
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	9802      	ldr	r0, [sp, #8]
 8004094:	f7ff feb0 	bl	8003df8 <_free_r>
 8004098:	230c      	movs	r3, #12
 800409a:	2001      	movs	r0, #1
 800409c:	9a02      	ldr	r2, [sp, #8]
 800409e:	4240      	negs	r0, r0
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	89a2      	ldrh	r2, [r4, #12]
 80040a4:	3334      	adds	r3, #52	@ 0x34
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	e7e9      	b.n	8004080 <__ssputs_r+0x90>
 80040ac:	fffffb7f 	.word	0xfffffb7f

080040b0 <_svfiprintf_r>:
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	b0a1      	sub	sp, #132	@ 0x84
 80040b4:	9003      	str	r0, [sp, #12]
 80040b6:	001d      	movs	r5, r3
 80040b8:	898b      	ldrh	r3, [r1, #12]
 80040ba:	000f      	movs	r7, r1
 80040bc:	0016      	movs	r6, r2
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	d511      	bpl.n	80040e6 <_svfiprintf_r+0x36>
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <_svfiprintf_r+0x36>
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	f7ff ff01 	bl	8003ed0 <_malloc_r>
 80040ce:	6038      	str	r0, [r7, #0]
 80040d0:	6138      	str	r0, [r7, #16]
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d105      	bne.n	80040e2 <_svfiprintf_r+0x32>
 80040d6:	230c      	movs	r3, #12
 80040d8:	9a03      	ldr	r2, [sp, #12]
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	2001      	movs	r0, #1
 80040de:	4240      	negs	r0, r0
 80040e0:	e0cf      	b.n	8004282 <_svfiprintf_r+0x1d2>
 80040e2:	2340      	movs	r3, #64	@ 0x40
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	2300      	movs	r3, #0
 80040e8:	ac08      	add	r4, sp, #32
 80040ea:	6163      	str	r3, [r4, #20]
 80040ec:	3320      	adds	r3, #32
 80040ee:	7663      	strb	r3, [r4, #25]
 80040f0:	3310      	adds	r3, #16
 80040f2:	76a3      	strb	r3, [r4, #26]
 80040f4:	9507      	str	r5, [sp, #28]
 80040f6:	0035      	movs	r5, r6
 80040f8:	782b      	ldrb	r3, [r5, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <_svfiprintf_r+0x52>
 80040fe:	2b25      	cmp	r3, #37	@ 0x25
 8004100:	d148      	bne.n	8004194 <_svfiprintf_r+0xe4>
 8004102:	1bab      	subs	r3, r5, r6
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	42b5      	cmp	r5, r6
 8004108:	d00b      	beq.n	8004122 <_svfiprintf_r+0x72>
 800410a:	0032      	movs	r2, r6
 800410c:	0039      	movs	r1, r7
 800410e:	9803      	ldr	r0, [sp, #12]
 8004110:	f7ff ff6e 	bl	8003ff0 <__ssputs_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d100      	bne.n	800411a <_svfiprintf_r+0x6a>
 8004118:	e0ae      	b.n	8004278 <_svfiprintf_r+0x1c8>
 800411a:	6963      	ldr	r3, [r4, #20]
 800411c:	9a05      	ldr	r2, [sp, #20]
 800411e:	189b      	adds	r3, r3, r2
 8004120:	6163      	str	r3, [r4, #20]
 8004122:	782b      	ldrb	r3, [r5, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d100      	bne.n	800412a <_svfiprintf_r+0x7a>
 8004128:	e0a6      	b.n	8004278 <_svfiprintf_r+0x1c8>
 800412a:	2201      	movs	r2, #1
 800412c:	2300      	movs	r3, #0
 800412e:	4252      	negs	r2, r2
 8004130:	6062      	str	r2, [r4, #4]
 8004132:	a904      	add	r1, sp, #16
 8004134:	3254      	adds	r2, #84	@ 0x54
 8004136:	1852      	adds	r2, r2, r1
 8004138:	1c6e      	adds	r6, r5, #1
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	60e3      	str	r3, [r4, #12]
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	7013      	strb	r3, [r2, #0]
 8004142:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004144:	4b54      	ldr	r3, [pc, #336]	@ (8004298 <_svfiprintf_r+0x1e8>)
 8004146:	2205      	movs	r2, #5
 8004148:	0018      	movs	r0, r3
 800414a:	7831      	ldrb	r1, [r6, #0]
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	f000 fa4d 	bl	80045ec <memchr>
 8004152:	1c75      	adds	r5, r6, #1
 8004154:	2800      	cmp	r0, #0
 8004156:	d11f      	bne.n	8004198 <_svfiprintf_r+0xe8>
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	06d3      	lsls	r3, r2, #27
 800415c:	d504      	bpl.n	8004168 <_svfiprintf_r+0xb8>
 800415e:	2353      	movs	r3, #83	@ 0x53
 8004160:	a904      	add	r1, sp, #16
 8004162:	185b      	adds	r3, r3, r1
 8004164:	2120      	movs	r1, #32
 8004166:	7019      	strb	r1, [r3, #0]
 8004168:	0713      	lsls	r3, r2, #28
 800416a:	d504      	bpl.n	8004176 <_svfiprintf_r+0xc6>
 800416c:	2353      	movs	r3, #83	@ 0x53
 800416e:	a904      	add	r1, sp, #16
 8004170:	185b      	adds	r3, r3, r1
 8004172:	212b      	movs	r1, #43	@ 0x2b
 8004174:	7019      	strb	r1, [r3, #0]
 8004176:	7833      	ldrb	r3, [r6, #0]
 8004178:	2b2a      	cmp	r3, #42	@ 0x2a
 800417a:	d016      	beq.n	80041aa <_svfiprintf_r+0xfa>
 800417c:	0035      	movs	r5, r6
 800417e:	2100      	movs	r1, #0
 8004180:	200a      	movs	r0, #10
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	782a      	ldrb	r2, [r5, #0]
 8004186:	1c6e      	adds	r6, r5, #1
 8004188:	3a30      	subs	r2, #48	@ 0x30
 800418a:	2a09      	cmp	r2, #9
 800418c:	d950      	bls.n	8004230 <_svfiprintf_r+0x180>
 800418e:	2900      	cmp	r1, #0
 8004190:	d111      	bne.n	80041b6 <_svfiprintf_r+0x106>
 8004192:	e017      	b.n	80041c4 <_svfiprintf_r+0x114>
 8004194:	3501      	adds	r5, #1
 8004196:	e7af      	b.n	80040f8 <_svfiprintf_r+0x48>
 8004198:	9b05      	ldr	r3, [sp, #20]
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	1ac0      	subs	r0, r0, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	4083      	lsls	r3, r0
 80041a2:	4313      	orrs	r3, r2
 80041a4:	002e      	movs	r6, r5
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	e7cc      	b.n	8004144 <_svfiprintf_r+0x94>
 80041aa:	9b07      	ldr	r3, [sp, #28]
 80041ac:	1d19      	adds	r1, r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	9107      	str	r1, [sp, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db01      	blt.n	80041ba <_svfiprintf_r+0x10a>
 80041b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041b8:	e004      	b.n	80041c4 <_svfiprintf_r+0x114>
 80041ba:	425b      	negs	r3, r3
 80041bc:	60e3      	str	r3, [r4, #12]
 80041be:	2302      	movs	r3, #2
 80041c0:	4313      	orrs	r3, r2
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	782b      	ldrb	r3, [r5, #0]
 80041c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c8:	d10c      	bne.n	80041e4 <_svfiprintf_r+0x134>
 80041ca:	786b      	ldrb	r3, [r5, #1]
 80041cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ce:	d134      	bne.n	800423a <_svfiprintf_r+0x18a>
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	3502      	adds	r5, #2
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	9207      	str	r2, [sp, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da01      	bge.n	80041e2 <_svfiprintf_r+0x132>
 80041de:	2301      	movs	r3, #1
 80041e0:	425b      	negs	r3, r3
 80041e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e4:	4e2d      	ldr	r6, [pc, #180]	@ (800429c <_svfiprintf_r+0x1ec>)
 80041e6:	2203      	movs	r2, #3
 80041e8:	0030      	movs	r0, r6
 80041ea:	7829      	ldrb	r1, [r5, #0]
 80041ec:	f000 f9fe 	bl	80045ec <memchr>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d006      	beq.n	8004202 <_svfiprintf_r+0x152>
 80041f4:	2340      	movs	r3, #64	@ 0x40
 80041f6:	1b80      	subs	r0, r0, r6
 80041f8:	4083      	lsls	r3, r0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	3501      	adds	r5, #1
 80041fe:	4313      	orrs	r3, r2
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	7829      	ldrb	r1, [r5, #0]
 8004204:	2206      	movs	r2, #6
 8004206:	4826      	ldr	r0, [pc, #152]	@ (80042a0 <_svfiprintf_r+0x1f0>)
 8004208:	1c6e      	adds	r6, r5, #1
 800420a:	7621      	strb	r1, [r4, #24]
 800420c:	f000 f9ee 	bl	80045ec <memchr>
 8004210:	2800      	cmp	r0, #0
 8004212:	d038      	beq.n	8004286 <_svfiprintf_r+0x1d6>
 8004214:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <_svfiprintf_r+0x1f4>)
 8004216:	2b00      	cmp	r3, #0
 8004218:	d122      	bne.n	8004260 <_svfiprintf_r+0x1b0>
 800421a:	2207      	movs	r2, #7
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	3307      	adds	r3, #7
 8004220:	4393      	bics	r3, r2
 8004222:	3308      	adds	r3, #8
 8004224:	9307      	str	r3, [sp, #28]
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	9a04      	ldr	r2, [sp, #16]
 800422a:	189b      	adds	r3, r3, r2
 800422c:	6163      	str	r3, [r4, #20]
 800422e:	e762      	b.n	80040f6 <_svfiprintf_r+0x46>
 8004230:	4343      	muls	r3, r0
 8004232:	0035      	movs	r5, r6
 8004234:	2101      	movs	r1, #1
 8004236:	189b      	adds	r3, r3, r2
 8004238:	e7a4      	b.n	8004184 <_svfiprintf_r+0xd4>
 800423a:	2300      	movs	r3, #0
 800423c:	200a      	movs	r0, #10
 800423e:	0019      	movs	r1, r3
 8004240:	3501      	adds	r5, #1
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	782a      	ldrb	r2, [r5, #0]
 8004246:	1c6e      	adds	r6, r5, #1
 8004248:	3a30      	subs	r2, #48	@ 0x30
 800424a:	2a09      	cmp	r2, #9
 800424c:	d903      	bls.n	8004256 <_svfiprintf_r+0x1a6>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0c8      	beq.n	80041e4 <_svfiprintf_r+0x134>
 8004252:	9109      	str	r1, [sp, #36]	@ 0x24
 8004254:	e7c6      	b.n	80041e4 <_svfiprintf_r+0x134>
 8004256:	4341      	muls	r1, r0
 8004258:	0035      	movs	r5, r6
 800425a:	2301      	movs	r3, #1
 800425c:	1889      	adds	r1, r1, r2
 800425e:	e7f1      	b.n	8004244 <_svfiprintf_r+0x194>
 8004260:	aa07      	add	r2, sp, #28
 8004262:	9200      	str	r2, [sp, #0]
 8004264:	0021      	movs	r1, r4
 8004266:	003a      	movs	r2, r7
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <_svfiprintf_r+0x1f8>)
 800426a:	9803      	ldr	r0, [sp, #12]
 800426c:	e000      	b.n	8004270 <_svfiprintf_r+0x1c0>
 800426e:	bf00      	nop
 8004270:	9004      	str	r0, [sp, #16]
 8004272:	9b04      	ldr	r3, [sp, #16]
 8004274:	3301      	adds	r3, #1
 8004276:	d1d6      	bne.n	8004226 <_svfiprintf_r+0x176>
 8004278:	89bb      	ldrh	r3, [r7, #12]
 800427a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800427c:	065b      	lsls	r3, r3, #25
 800427e:	d500      	bpl.n	8004282 <_svfiprintf_r+0x1d2>
 8004280:	e72c      	b.n	80040dc <_svfiprintf_r+0x2c>
 8004282:	b021      	add	sp, #132	@ 0x84
 8004284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004286:	aa07      	add	r2, sp, #28
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	0021      	movs	r1, r4
 800428c:	003a      	movs	r2, r7
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <_svfiprintf_r+0x1f8>)
 8004290:	9803      	ldr	r0, [sp, #12]
 8004292:	f000 f87b 	bl	800438c <_printf_i>
 8004296:	e7eb      	b.n	8004270 <_svfiprintf_r+0x1c0>
 8004298:	080047b8 	.word	0x080047b8
 800429c:	080047be 	.word	0x080047be
 80042a0:	080047c2 	.word	0x080047c2
 80042a4:	00000000 	.word	0x00000000
 80042a8:	08003ff1 	.word	0x08003ff1

080042ac <_printf_common>:
 80042ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ae:	0016      	movs	r6, r2
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	688a      	ldr	r2, [r1, #8]
 80042b4:	690b      	ldr	r3, [r1, #16]
 80042b6:	000c      	movs	r4, r1
 80042b8:	9000      	str	r0, [sp, #0]
 80042ba:	4293      	cmp	r3, r2
 80042bc:	da00      	bge.n	80042c0 <_printf_common+0x14>
 80042be:	0013      	movs	r3, r2
 80042c0:	0022      	movs	r2, r4
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	3243      	adds	r2, #67	@ 0x43
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d001      	beq.n	80042d0 <_printf_common+0x24>
 80042cc:	3301      	adds	r3, #1
 80042ce:	6033      	str	r3, [r6, #0]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	d502      	bpl.n	80042dc <_printf_common+0x30>
 80042d6:	6833      	ldr	r3, [r6, #0]
 80042d8:	3302      	adds	r3, #2
 80042da:	6033      	str	r3, [r6, #0]
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	2306      	movs	r3, #6
 80042e0:	0015      	movs	r5, r2
 80042e2:	401d      	ands	r5, r3
 80042e4:	421a      	tst	r2, r3
 80042e6:	d027      	beq.n	8004338 <_printf_common+0x8c>
 80042e8:	0023      	movs	r3, r4
 80042ea:	3343      	adds	r3, #67	@ 0x43
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	4193      	sbcs	r3, r2
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	0692      	lsls	r2, r2, #26
 80042f6:	d430      	bmi.n	800435a <_printf_common+0xae>
 80042f8:	0022      	movs	r2, r4
 80042fa:	9901      	ldr	r1, [sp, #4]
 80042fc:	9800      	ldr	r0, [sp, #0]
 80042fe:	9d08      	ldr	r5, [sp, #32]
 8004300:	3243      	adds	r2, #67	@ 0x43
 8004302:	47a8      	blx	r5
 8004304:	3001      	adds	r0, #1
 8004306:	d025      	beq.n	8004354 <_printf_common+0xa8>
 8004308:	2206      	movs	r2, #6
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	2500      	movs	r5, #0
 800430e:	4013      	ands	r3, r2
 8004310:	2b04      	cmp	r3, #4
 8004312:	d105      	bne.n	8004320 <_printf_common+0x74>
 8004314:	6833      	ldr	r3, [r6, #0]
 8004316:	68e5      	ldr	r5, [r4, #12]
 8004318:	1aed      	subs	r5, r5, r3
 800431a:	43eb      	mvns	r3, r5
 800431c:	17db      	asrs	r3, r3, #31
 800431e:	401d      	ands	r5, r3
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	6922      	ldr	r2, [r4, #16]
 8004324:	4293      	cmp	r3, r2
 8004326:	dd01      	ble.n	800432c <_printf_common+0x80>
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	18ed      	adds	r5, r5, r3
 800432c:	2600      	movs	r6, #0
 800432e:	42b5      	cmp	r5, r6
 8004330:	d120      	bne.n	8004374 <_printf_common+0xc8>
 8004332:	2000      	movs	r0, #0
 8004334:	e010      	b.n	8004358 <_printf_common+0xac>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	6832      	ldr	r2, [r6, #0]
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	42ab      	cmp	r3, r5
 8004340:	ddd2      	ble.n	80042e8 <_printf_common+0x3c>
 8004342:	0022      	movs	r2, r4
 8004344:	2301      	movs	r3, #1
 8004346:	9901      	ldr	r1, [sp, #4]
 8004348:	9800      	ldr	r0, [sp, #0]
 800434a:	9f08      	ldr	r7, [sp, #32]
 800434c:	3219      	adds	r2, #25
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	d1f0      	bne.n	8004336 <_printf_common+0x8a>
 8004354:	2001      	movs	r0, #1
 8004356:	4240      	negs	r0, r0
 8004358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800435a:	2030      	movs	r0, #48	@ 0x30
 800435c:	18e1      	adds	r1, r4, r3
 800435e:	3143      	adds	r1, #67	@ 0x43
 8004360:	7008      	strb	r0, [r1, #0]
 8004362:	0021      	movs	r1, r4
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	3145      	adds	r1, #69	@ 0x45
 8004368:	7809      	ldrb	r1, [r1, #0]
 800436a:	18a2      	adds	r2, r4, r2
 800436c:	3243      	adds	r2, #67	@ 0x43
 800436e:	3302      	adds	r3, #2
 8004370:	7011      	strb	r1, [r2, #0]
 8004372:	e7c1      	b.n	80042f8 <_printf_common+0x4c>
 8004374:	0022      	movs	r2, r4
 8004376:	2301      	movs	r3, #1
 8004378:	9901      	ldr	r1, [sp, #4]
 800437a:	9800      	ldr	r0, [sp, #0]
 800437c:	9f08      	ldr	r7, [sp, #32]
 800437e:	321a      	adds	r2, #26
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	d0e6      	beq.n	8004354 <_printf_common+0xa8>
 8004386:	3601      	adds	r6, #1
 8004388:	e7d1      	b.n	800432e <_printf_common+0x82>
	...

0800438c <_printf_i>:
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b08b      	sub	sp, #44	@ 0x2c
 8004390:	9206      	str	r2, [sp, #24]
 8004392:	000a      	movs	r2, r1
 8004394:	3243      	adds	r2, #67	@ 0x43
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	9005      	str	r0, [sp, #20]
 800439a:	9203      	str	r2, [sp, #12]
 800439c:	7e0a      	ldrb	r2, [r1, #24]
 800439e:	000c      	movs	r4, r1
 80043a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043a2:	2a78      	cmp	r2, #120	@ 0x78
 80043a4:	d809      	bhi.n	80043ba <_printf_i+0x2e>
 80043a6:	2a62      	cmp	r2, #98	@ 0x62
 80043a8:	d80b      	bhi.n	80043c2 <_printf_i+0x36>
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d100      	bne.n	80043b0 <_printf_i+0x24>
 80043ae:	e0ba      	b.n	8004526 <_printf_i+0x19a>
 80043b0:	497a      	ldr	r1, [pc, #488]	@ (800459c <_printf_i+0x210>)
 80043b2:	9104      	str	r1, [sp, #16]
 80043b4:	2a58      	cmp	r2, #88	@ 0x58
 80043b6:	d100      	bne.n	80043ba <_printf_i+0x2e>
 80043b8:	e08e      	b.n	80044d8 <_printf_i+0x14c>
 80043ba:	0025      	movs	r5, r4
 80043bc:	3542      	adds	r5, #66	@ 0x42
 80043be:	702a      	strb	r2, [r5, #0]
 80043c0:	e022      	b.n	8004408 <_printf_i+0x7c>
 80043c2:	0010      	movs	r0, r2
 80043c4:	3863      	subs	r0, #99	@ 0x63
 80043c6:	2815      	cmp	r0, #21
 80043c8:	d8f7      	bhi.n	80043ba <_printf_i+0x2e>
 80043ca:	f7fb fea5 	bl	8000118 <__gnu_thumb1_case_shi>
 80043ce:	0016      	.short	0x0016
 80043d0:	fff6001f 	.word	0xfff6001f
 80043d4:	fff6fff6 	.word	0xfff6fff6
 80043d8:	001ffff6 	.word	0x001ffff6
 80043dc:	fff6fff6 	.word	0xfff6fff6
 80043e0:	fff6fff6 	.word	0xfff6fff6
 80043e4:	0036009f 	.word	0x0036009f
 80043e8:	fff6007e 	.word	0xfff6007e
 80043ec:	00b0fff6 	.word	0x00b0fff6
 80043f0:	0036fff6 	.word	0x0036fff6
 80043f4:	fff6fff6 	.word	0xfff6fff6
 80043f8:	0082      	.short	0x0082
 80043fa:	0025      	movs	r5, r4
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	3542      	adds	r5, #66	@ 0x42
 8004400:	1d11      	adds	r1, r2, #4
 8004402:	6019      	str	r1, [r3, #0]
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	702b      	strb	r3, [r5, #0]
 8004408:	2301      	movs	r3, #1
 800440a:	e09e      	b.n	800454a <_printf_i+0x1be>
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	1d02      	adds	r2, r0, #4
 8004412:	060d      	lsls	r5, r1, #24
 8004414:	d50b      	bpl.n	800442e <_printf_i+0xa2>
 8004416:	6806      	ldr	r6, [r0, #0]
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	2e00      	cmp	r6, #0
 800441c:	da03      	bge.n	8004426 <_printf_i+0x9a>
 800441e:	232d      	movs	r3, #45	@ 0x2d
 8004420:	9a03      	ldr	r2, [sp, #12]
 8004422:	4276      	negs	r6, r6
 8004424:	7013      	strb	r3, [r2, #0]
 8004426:	4b5d      	ldr	r3, [pc, #372]	@ (800459c <_printf_i+0x210>)
 8004428:	270a      	movs	r7, #10
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	e018      	b.n	8004460 <_printf_i+0xd4>
 800442e:	6806      	ldr	r6, [r0, #0]
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	0649      	lsls	r1, r1, #25
 8004434:	d5f1      	bpl.n	800441a <_printf_i+0x8e>
 8004436:	b236      	sxth	r6, r6
 8004438:	e7ef      	b.n	800441a <_printf_i+0x8e>
 800443a:	6808      	ldr	r0, [r1, #0]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	c940      	ldmia	r1!, {r6}
 8004440:	0605      	lsls	r5, r0, #24
 8004442:	d402      	bmi.n	800444a <_printf_i+0xbe>
 8004444:	0640      	lsls	r0, r0, #25
 8004446:	d500      	bpl.n	800444a <_printf_i+0xbe>
 8004448:	b2b6      	uxth	r6, r6
 800444a:	6019      	str	r1, [r3, #0]
 800444c:	4b53      	ldr	r3, [pc, #332]	@ (800459c <_printf_i+0x210>)
 800444e:	270a      	movs	r7, #10
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	2a6f      	cmp	r2, #111	@ 0x6f
 8004454:	d100      	bne.n	8004458 <_printf_i+0xcc>
 8004456:	3f02      	subs	r7, #2
 8004458:	0023      	movs	r3, r4
 800445a:	2200      	movs	r2, #0
 800445c:	3343      	adds	r3, #67	@ 0x43
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	60a3      	str	r3, [r4, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db06      	blt.n	8004476 <_printf_i+0xea>
 8004468:	2104      	movs	r1, #4
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	9d03      	ldr	r5, [sp, #12]
 800446e:	438a      	bics	r2, r1
 8004470:	6022      	str	r2, [r4, #0]
 8004472:	4333      	orrs	r3, r6
 8004474:	d00c      	beq.n	8004490 <_printf_i+0x104>
 8004476:	9d03      	ldr	r5, [sp, #12]
 8004478:	0030      	movs	r0, r6
 800447a:	0039      	movs	r1, r7
 800447c:	f7fb fedc 	bl	8000238 <__aeabi_uidivmod>
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	3d01      	subs	r5, #1
 8004484:	5c5b      	ldrb	r3, [r3, r1]
 8004486:	702b      	strb	r3, [r5, #0]
 8004488:	0033      	movs	r3, r6
 800448a:	0006      	movs	r6, r0
 800448c:	429f      	cmp	r7, r3
 800448e:	d9f3      	bls.n	8004478 <_printf_i+0xec>
 8004490:	2f08      	cmp	r7, #8
 8004492:	d109      	bne.n	80044a8 <_printf_i+0x11c>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	07db      	lsls	r3, r3, #31
 8004498:	d506      	bpl.n	80044a8 <_printf_i+0x11c>
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	dc02      	bgt.n	80044a8 <_printf_i+0x11c>
 80044a2:	2330      	movs	r3, #48	@ 0x30
 80044a4:	3d01      	subs	r5, #1
 80044a6:	702b      	strb	r3, [r5, #0]
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	9b07      	ldr	r3, [sp, #28]
 80044b0:	0021      	movs	r1, r4
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	9805      	ldr	r0, [sp, #20]
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	aa09      	add	r2, sp, #36	@ 0x24
 80044ba:	f7ff fef7 	bl	80042ac <_printf_common>
 80044be:	3001      	adds	r0, #1
 80044c0:	d148      	bne.n	8004554 <_printf_i+0x1c8>
 80044c2:	2001      	movs	r0, #1
 80044c4:	4240      	negs	r0, r0
 80044c6:	b00b      	add	sp, #44	@ 0x2c
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ca:	2220      	movs	r2, #32
 80044cc:	6809      	ldr	r1, [r1, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	2278      	movs	r2, #120	@ 0x78
 80044d4:	4932      	ldr	r1, [pc, #200]	@ (80045a0 <_printf_i+0x214>)
 80044d6:	9104      	str	r1, [sp, #16]
 80044d8:	0021      	movs	r1, r4
 80044da:	3145      	adds	r1, #69	@ 0x45
 80044dc:	700a      	strb	r2, [r1, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	c940      	ldmia	r1!, {r6}
 80044e4:	0610      	lsls	r0, r2, #24
 80044e6:	d402      	bmi.n	80044ee <_printf_i+0x162>
 80044e8:	0650      	lsls	r0, r2, #25
 80044ea:	d500      	bpl.n	80044ee <_printf_i+0x162>
 80044ec:	b2b6      	uxth	r6, r6
 80044ee:	6019      	str	r1, [r3, #0]
 80044f0:	07d3      	lsls	r3, r2, #31
 80044f2:	d502      	bpl.n	80044fa <_printf_i+0x16e>
 80044f4:	2320      	movs	r3, #32
 80044f6:	4313      	orrs	r3, r2
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d001      	beq.n	8004502 <_printf_i+0x176>
 80044fe:	2710      	movs	r7, #16
 8004500:	e7aa      	b.n	8004458 <_printf_i+0xcc>
 8004502:	2220      	movs	r2, #32
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	4393      	bics	r3, r2
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	e7f8      	b.n	80044fe <_printf_i+0x172>
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	680d      	ldr	r5, [r1, #0]
 8004510:	1d10      	adds	r0, r2, #4
 8004512:	6949      	ldr	r1, [r1, #20]
 8004514:	6018      	str	r0, [r3, #0]
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	062e      	lsls	r6, r5, #24
 800451a:	d501      	bpl.n	8004520 <_printf_i+0x194>
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	e002      	b.n	8004526 <_printf_i+0x19a>
 8004520:	066d      	lsls	r5, r5, #25
 8004522:	d5fb      	bpl.n	800451c <_printf_i+0x190>
 8004524:	8019      	strh	r1, [r3, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	9d03      	ldr	r5, [sp, #12]
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	e7bf      	b.n	80044ae <_printf_i+0x122>
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	1d11      	adds	r1, r2, #4
 8004532:	6019      	str	r1, [r3, #0]
 8004534:	6815      	ldr	r5, [r2, #0]
 8004536:	2100      	movs	r1, #0
 8004538:	0028      	movs	r0, r5
 800453a:	6862      	ldr	r2, [r4, #4]
 800453c:	f000 f856 	bl	80045ec <memchr>
 8004540:	2800      	cmp	r0, #0
 8004542:	d001      	beq.n	8004548 <_printf_i+0x1bc>
 8004544:	1b40      	subs	r0, r0, r5
 8004546:	6060      	str	r0, [r4, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	6123      	str	r3, [r4, #16]
 800454c:	2300      	movs	r3, #0
 800454e:	9a03      	ldr	r2, [sp, #12]
 8004550:	7013      	strb	r3, [r2, #0]
 8004552:	e7ac      	b.n	80044ae <_printf_i+0x122>
 8004554:	002a      	movs	r2, r5
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	9906      	ldr	r1, [sp, #24]
 800455a:	9805      	ldr	r0, [sp, #20]
 800455c:	9d07      	ldr	r5, [sp, #28]
 800455e:	47a8      	blx	r5
 8004560:	3001      	adds	r0, #1
 8004562:	d0ae      	beq.n	80044c2 <_printf_i+0x136>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	079b      	lsls	r3, r3, #30
 8004568:	d415      	bmi.n	8004596 <_printf_i+0x20a>
 800456a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	4298      	cmp	r0, r3
 8004570:	daa9      	bge.n	80044c6 <_printf_i+0x13a>
 8004572:	0018      	movs	r0, r3
 8004574:	e7a7      	b.n	80044c6 <_printf_i+0x13a>
 8004576:	0022      	movs	r2, r4
 8004578:	2301      	movs	r3, #1
 800457a:	9906      	ldr	r1, [sp, #24]
 800457c:	9805      	ldr	r0, [sp, #20]
 800457e:	9e07      	ldr	r6, [sp, #28]
 8004580:	3219      	adds	r2, #25
 8004582:	47b0      	blx	r6
 8004584:	3001      	adds	r0, #1
 8004586:	d09c      	beq.n	80044c2 <_printf_i+0x136>
 8004588:	3501      	adds	r5, #1
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	42ab      	cmp	r3, r5
 8004592:	dcf0      	bgt.n	8004576 <_printf_i+0x1ea>
 8004594:	e7e9      	b.n	800456a <_printf_i+0x1de>
 8004596:	2500      	movs	r5, #0
 8004598:	e7f7      	b.n	800458a <_printf_i+0x1fe>
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	080047c9 	.word	0x080047c9
 80045a0:	080047da 	.word	0x080047da

080045a4 <memmove>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4288      	cmp	r0, r1
 80045a8:	d902      	bls.n	80045b0 <memmove+0xc>
 80045aa:	188b      	adds	r3, r1, r2
 80045ac:	4298      	cmp	r0, r3
 80045ae:	d308      	bcc.n	80045c2 <memmove+0x1e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d007      	beq.n	80045c6 <memmove+0x22>
 80045b6:	5ccc      	ldrb	r4, [r1, r3]
 80045b8:	54c4      	strb	r4, [r0, r3]
 80045ba:	3301      	adds	r3, #1
 80045bc:	e7f9      	b.n	80045b2 <memmove+0xe>
 80045be:	5c8b      	ldrb	r3, [r1, r2]
 80045c0:	5483      	strb	r3, [r0, r2]
 80045c2:	3a01      	subs	r2, #1
 80045c4:	d2fb      	bcs.n	80045be <memmove+0x1a>
 80045c6:	bd10      	pop	{r4, pc}

080045c8 <_sbrk_r>:
 80045c8:	2300      	movs	r3, #0
 80045ca:	b570      	push	{r4, r5, r6, lr}
 80045cc:	4d06      	ldr	r5, [pc, #24]	@ (80045e8 <_sbrk_r+0x20>)
 80045ce:	0004      	movs	r4, r0
 80045d0:	0008      	movs	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fc f9b4 	bl	8000940 <_sbrk>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d103      	bne.n	80045e4 <_sbrk_r+0x1c>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d000      	beq.n	80045e4 <_sbrk_r+0x1c>
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	20000294 	.word	0x20000294

080045ec <memchr>:
 80045ec:	b2c9      	uxtb	r1, r1
 80045ee:	1882      	adds	r2, r0, r2
 80045f0:	4290      	cmp	r0, r2
 80045f2:	d101      	bne.n	80045f8 <memchr+0xc>
 80045f4:	2000      	movs	r0, #0
 80045f6:	4770      	bx	lr
 80045f8:	7803      	ldrb	r3, [r0, #0]
 80045fa:	428b      	cmp	r3, r1
 80045fc:	d0fb      	beq.n	80045f6 <memchr+0xa>
 80045fe:	3001      	adds	r0, #1
 8004600:	e7f6      	b.n	80045f0 <memchr+0x4>

08004602 <memcpy>:
 8004602:	2300      	movs	r3, #0
 8004604:	b510      	push	{r4, lr}
 8004606:	429a      	cmp	r2, r3
 8004608:	d100      	bne.n	800460c <memcpy+0xa>
 800460a:	bd10      	pop	{r4, pc}
 800460c:	5ccc      	ldrb	r4, [r1, r3]
 800460e:	54c4      	strb	r4, [r0, r3]
 8004610:	3301      	adds	r3, #1
 8004612:	e7f8      	b.n	8004606 <memcpy+0x4>

08004614 <_realloc_r>:
 8004614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004616:	0006      	movs	r6, r0
 8004618:	000c      	movs	r4, r1
 800461a:	0015      	movs	r5, r2
 800461c:	2900      	cmp	r1, #0
 800461e:	d105      	bne.n	800462c <_realloc_r+0x18>
 8004620:	0011      	movs	r1, r2
 8004622:	f7ff fc55 	bl	8003ed0 <_malloc_r>
 8004626:	0004      	movs	r4, r0
 8004628:	0020      	movs	r0, r4
 800462a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800462c:	2a00      	cmp	r2, #0
 800462e:	d103      	bne.n	8004638 <_realloc_r+0x24>
 8004630:	f7ff fbe2 	bl	8003df8 <_free_r>
 8004634:	002c      	movs	r4, r5
 8004636:	e7f7      	b.n	8004628 <_realloc_r+0x14>
 8004638:	f000 f81c 	bl	8004674 <_malloc_usable_size_r>
 800463c:	0007      	movs	r7, r0
 800463e:	4285      	cmp	r5, r0
 8004640:	d802      	bhi.n	8004648 <_realloc_r+0x34>
 8004642:	0843      	lsrs	r3, r0, #1
 8004644:	42ab      	cmp	r3, r5
 8004646:	d3ef      	bcc.n	8004628 <_realloc_r+0x14>
 8004648:	0029      	movs	r1, r5
 800464a:	0030      	movs	r0, r6
 800464c:	f7ff fc40 	bl	8003ed0 <_malloc_r>
 8004650:	9001      	str	r0, [sp, #4]
 8004652:	2800      	cmp	r0, #0
 8004654:	d101      	bne.n	800465a <_realloc_r+0x46>
 8004656:	9c01      	ldr	r4, [sp, #4]
 8004658:	e7e6      	b.n	8004628 <_realloc_r+0x14>
 800465a:	002a      	movs	r2, r5
 800465c:	42bd      	cmp	r5, r7
 800465e:	d900      	bls.n	8004662 <_realloc_r+0x4e>
 8004660:	003a      	movs	r2, r7
 8004662:	0021      	movs	r1, r4
 8004664:	9801      	ldr	r0, [sp, #4]
 8004666:	f7ff ffcc 	bl	8004602 <memcpy>
 800466a:	0021      	movs	r1, r4
 800466c:	0030      	movs	r0, r6
 800466e:	f7ff fbc3 	bl	8003df8 <_free_r>
 8004672:	e7f0      	b.n	8004656 <_realloc_r+0x42>

08004674 <_malloc_usable_size_r>:
 8004674:	1f0b      	subs	r3, r1, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	1f18      	subs	r0, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	da01      	bge.n	8004682 <_malloc_usable_size_r+0xe>
 800467e:	580b      	ldr	r3, [r1, r0]
 8004680:	18c0      	adds	r0, r0, r3
 8004682:	4770      	bx	lr

08004684 <_init>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr

08004690 <_fini>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr
