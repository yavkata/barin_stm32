
STM32L010RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bfc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008cc0  08008cc0  00009cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090f8  080090f8  0000a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080090fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001dc  080092d8  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080092d8  0000b48c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de99  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230e  00000000  00000000  0001909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0001b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096a  00000000  00000000  0001bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012977  00000000  00000000  0001c932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fabe  00000000  00000000  0002f2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ce3c  00000000  00000000  0003ed67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000abbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000af6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008ca4 	.word	0x08008ca4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008ca4 	.word	0x08008ca4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b1 	bl	80015a4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fff5 	bl	800143c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a3 	bl	80015a4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f899 	bl	80015a4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f81f 	bl	80014c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f815 	bl	80014c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f878 	bl	80025fc <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f873 	bl	80025fc <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	9000      	str	r0, [sp, #0]
 800068e:	9101      	str	r1, [sp, #4]
 8000690:	030e      	lsls	r6, r1, #12
 8000692:	004c      	lsls	r4, r1, #1
 8000694:	0fcd      	lsrs	r5, r1, #31
 8000696:	0a71      	lsrs	r1, r6, #9
 8000698:	9e00      	ldr	r6, [sp, #0]
 800069a:	005f      	lsls	r7, r3, #1
 800069c:	0f76      	lsrs	r6, r6, #29
 800069e:	430e      	orrs	r6, r1
 80006a0:	9900      	ldr	r1, [sp, #0]
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	00c9      	lsls	r1, r1, #3
 80006a8:	4689      	mov	r9, r1
 80006aa:	0319      	lsls	r1, r3, #12
 80006ac:	0d7b      	lsrs	r3, r7, #21
 80006ae:	4698      	mov	r8, r3
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	0a49      	lsrs	r1, r1, #9
 80006b4:	0fdb      	lsrs	r3, r3, #31
 80006b6:	469c      	mov	ip, r3
 80006b8:	9b00      	ldr	r3, [sp, #0]
 80006ba:	9a00      	ldr	r2, [sp, #0]
 80006bc:	0f5b      	lsrs	r3, r3, #29
 80006be:	430b      	orrs	r3, r1
 80006c0:	4641      	mov	r1, r8
 80006c2:	0d64      	lsrs	r4, r4, #21
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	1a61      	subs	r1, r4, r1
 80006c8:	4565      	cmp	r5, ip
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x4e>
 80006cc:	e0a6      	b.n	800081c <__aeabi_dadd+0x19c>
 80006ce:	2900      	cmp	r1, #0
 80006d0:	dd72      	ble.n	80007b8 <__aeabi_dadd+0x138>
 80006d2:	4647      	mov	r7, r8
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x5a>
 80006d8:	e0dd      	b.n	8000896 <__aeabi_dadd+0x216>
 80006da:	4fcc      	ldr	r7, [pc, #816]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80006dc:	42bc      	cmp	r4, r7
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x62>
 80006e0:	e19a      	b.n	8000a18 <__aeabi_dadd+0x398>
 80006e2:	2701      	movs	r7, #1
 80006e4:	2938      	cmp	r1, #56	@ 0x38
 80006e6:	dc17      	bgt.n	8000718 <__aeabi_dadd+0x98>
 80006e8:	2780      	movs	r7, #128	@ 0x80
 80006ea:	043f      	lsls	r7, r7, #16
 80006ec:	433b      	orrs	r3, r7
 80006ee:	291f      	cmp	r1, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x74>
 80006f2:	e1dd      	b.n	8000ab0 <__aeabi_dadd+0x430>
 80006f4:	2720      	movs	r7, #32
 80006f6:	1a78      	subs	r0, r7, r1
 80006f8:	001f      	movs	r7, r3
 80006fa:	4087      	lsls	r7, r0
 80006fc:	46ba      	mov	sl, r7
 80006fe:	0017      	movs	r7, r2
 8000700:	40cf      	lsrs	r7, r1
 8000702:	4684      	mov	ip, r0
 8000704:	0038      	movs	r0, r7
 8000706:	4657      	mov	r7, sl
 8000708:	4307      	orrs	r7, r0
 800070a:	4660      	mov	r0, ip
 800070c:	4082      	lsls	r2, r0
 800070e:	40cb      	lsrs	r3, r1
 8000710:	1e50      	subs	r0, r2, #1
 8000712:	4182      	sbcs	r2, r0
 8000714:	1af6      	subs	r6, r6, r3
 8000716:	4317      	orrs	r7, r2
 8000718:	464b      	mov	r3, r9
 800071a:	1bdf      	subs	r7, r3, r7
 800071c:	45b9      	cmp	r9, r7
 800071e:	4180      	sbcs	r0, r0
 8000720:	4240      	negs	r0, r0
 8000722:	1a36      	subs	r6, r6, r0
 8000724:	0233      	lsls	r3, r6, #8
 8000726:	d400      	bmi.n	800072a <__aeabi_dadd+0xaa>
 8000728:	e0ff      	b.n	800092a <__aeabi_dadd+0x2aa>
 800072a:	0276      	lsls	r6, r6, #9
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	2e00      	cmp	r6, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0xb4>
 8000732:	e13c      	b.n	80009ae <__aeabi_dadd+0x32e>
 8000734:	0030      	movs	r0, r6
 8000736:	f001 ff43 	bl	80025c0 <__clzsi2>
 800073a:	0003      	movs	r3, r0
 800073c:	3b08      	subs	r3, #8
 800073e:	2120      	movs	r1, #32
 8000740:	0038      	movs	r0, r7
 8000742:	1aca      	subs	r2, r1, r3
 8000744:	40d0      	lsrs	r0, r2
 8000746:	409e      	lsls	r6, r3
 8000748:	0002      	movs	r2, r0
 800074a:	409f      	lsls	r7, r3
 800074c:	4332      	orrs	r2, r6
 800074e:	429c      	cmp	r4, r3
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xd4>
 8000752:	e1a6      	b.n	8000aa2 <__aeabi_dadd+0x422>
 8000754:	1b18      	subs	r0, r3, r4
 8000756:	3001      	adds	r0, #1
 8000758:	1a09      	subs	r1, r1, r0
 800075a:	003e      	movs	r6, r7
 800075c:	408f      	lsls	r7, r1
 800075e:	40c6      	lsrs	r6, r0
 8000760:	1e7b      	subs	r3, r7, #1
 8000762:	419f      	sbcs	r7, r3
 8000764:	0013      	movs	r3, r2
 8000766:	408b      	lsls	r3, r1
 8000768:	4337      	orrs	r7, r6
 800076a:	431f      	orrs	r7, r3
 800076c:	40c2      	lsrs	r2, r0
 800076e:	003b      	movs	r3, r7
 8000770:	0016      	movs	r6, r2
 8000772:	2400      	movs	r4, #0
 8000774:	4313      	orrs	r3, r2
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0xfa>
 8000778:	e1df      	b.n	8000b3a <__aeabi_dadd+0x4ba>
 800077a:	077b      	lsls	r3, r7, #29
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x100>
 800077e:	e332      	b.n	8000de6 <__aeabi_dadd+0x766>
 8000780:	230f      	movs	r3, #15
 8000782:	003a      	movs	r2, r7
 8000784:	403b      	ands	r3, r7
 8000786:	2b04      	cmp	r3, #4
 8000788:	d004      	beq.n	8000794 <__aeabi_dadd+0x114>
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	42ba      	cmp	r2, r7
 800078e:	41bf      	sbcs	r7, r7
 8000790:	427f      	negs	r7, r7
 8000792:	19f6      	adds	r6, r6, r7
 8000794:	0233      	lsls	r3, r6, #8
 8000796:	d400      	bmi.n	800079a <__aeabi_dadd+0x11a>
 8000798:	e323      	b.n	8000de2 <__aeabi_dadd+0x762>
 800079a:	4b9c      	ldr	r3, [pc, #624]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800079c:	3401      	adds	r4, #1
 800079e:	429c      	cmp	r4, r3
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x124>
 80007a2:	e0b4      	b.n	800090e <__aeabi_dadd+0x28e>
 80007a4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a10 <__aeabi_dadd+0x390>)
 80007a6:	0564      	lsls	r4, r4, #21
 80007a8:	401e      	ands	r6, r3
 80007aa:	0d64      	lsrs	r4, r4, #21
 80007ac:	0777      	lsls	r7, r6, #29
 80007ae:	08d2      	lsrs	r2, r2, #3
 80007b0:	0276      	lsls	r6, r6, #9
 80007b2:	4317      	orrs	r7, r2
 80007b4:	0b36      	lsrs	r6, r6, #12
 80007b6:	e0ac      	b.n	8000912 <__aeabi_dadd+0x292>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x13e>
 80007bc:	e07e      	b.n	80008bc <__aeabi_dadd+0x23c>
 80007be:	4641      	mov	r1, r8
 80007c0:	1b09      	subs	r1, r1, r4
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d000      	beq.n	80007c8 <__aeabi_dadd+0x148>
 80007c6:	e160      	b.n	8000a8a <__aeabi_dadd+0x40a>
 80007c8:	0034      	movs	r4, r6
 80007ca:	4648      	mov	r0, r9
 80007cc:	4304      	orrs	r4, r0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x152>
 80007d0:	e1c9      	b.n	8000b66 <__aeabi_dadd+0x4e6>
 80007d2:	1e4c      	subs	r4, r1, #1
 80007d4:	2901      	cmp	r1, #1
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x15a>
 80007d8:	e22e      	b.n	8000c38 <__aeabi_dadd+0x5b8>
 80007da:	4d8c      	ldr	r5, [pc, #560]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80007dc:	42a9      	cmp	r1, r5
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x162>
 80007e0:	e224      	b.n	8000c2c <__aeabi_dadd+0x5ac>
 80007e2:	2701      	movs	r7, #1
 80007e4:	2c38      	cmp	r4, #56	@ 0x38
 80007e6:	dc11      	bgt.n	800080c <__aeabi_dadd+0x18c>
 80007e8:	0021      	movs	r1, r4
 80007ea:	291f      	cmp	r1, #31
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_dadd+0x170>
 80007ee:	e20b      	b.n	8000c08 <__aeabi_dadd+0x588>
 80007f0:	2420      	movs	r4, #32
 80007f2:	0037      	movs	r7, r6
 80007f4:	4648      	mov	r0, r9
 80007f6:	1a64      	subs	r4, r4, r1
 80007f8:	40a7      	lsls	r7, r4
 80007fa:	40c8      	lsrs	r0, r1
 80007fc:	4307      	orrs	r7, r0
 80007fe:	4648      	mov	r0, r9
 8000800:	40a0      	lsls	r0, r4
 8000802:	40ce      	lsrs	r6, r1
 8000804:	1e44      	subs	r4, r0, #1
 8000806:	41a0      	sbcs	r0, r4
 8000808:	1b9b      	subs	r3, r3, r6
 800080a:	4307      	orrs	r7, r0
 800080c:	1bd7      	subs	r7, r2, r7
 800080e:	42ba      	cmp	r2, r7
 8000810:	4192      	sbcs	r2, r2
 8000812:	4252      	negs	r2, r2
 8000814:	4665      	mov	r5, ip
 8000816:	4644      	mov	r4, r8
 8000818:	1a9e      	subs	r6, r3, r2
 800081a:	e783      	b.n	8000724 <__aeabi_dadd+0xa4>
 800081c:	2900      	cmp	r1, #0
 800081e:	dc00      	bgt.n	8000822 <__aeabi_dadd+0x1a2>
 8000820:	e09c      	b.n	800095c <__aeabi_dadd+0x2dc>
 8000822:	4647      	mov	r7, r8
 8000824:	2f00      	cmp	r7, #0
 8000826:	d167      	bne.n	80008f8 <__aeabi_dadd+0x278>
 8000828:	001f      	movs	r7, r3
 800082a:	4317      	orrs	r7, r2
 800082c:	d100      	bne.n	8000830 <__aeabi_dadd+0x1b0>
 800082e:	e0e4      	b.n	80009fa <__aeabi_dadd+0x37a>
 8000830:	1e48      	subs	r0, r1, #1
 8000832:	2901      	cmp	r1, #1
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x1b8>
 8000836:	e19b      	b.n	8000b70 <__aeabi_dadd+0x4f0>
 8000838:	4f74      	ldr	r7, [pc, #464]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800083a:	42b9      	cmp	r1, r7
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x1c0>
 800083e:	e0eb      	b.n	8000a18 <__aeabi_dadd+0x398>
 8000840:	2701      	movs	r7, #1
 8000842:	0001      	movs	r1, r0
 8000844:	2838      	cmp	r0, #56	@ 0x38
 8000846:	dc11      	bgt.n	800086c <__aeabi_dadd+0x1ec>
 8000848:	291f      	cmp	r1, #31
 800084a:	dd00      	ble.n	800084e <__aeabi_dadd+0x1ce>
 800084c:	e1c7      	b.n	8000bde <__aeabi_dadd+0x55e>
 800084e:	2720      	movs	r7, #32
 8000850:	1a78      	subs	r0, r7, r1
 8000852:	001f      	movs	r7, r3
 8000854:	4684      	mov	ip, r0
 8000856:	4087      	lsls	r7, r0
 8000858:	0010      	movs	r0, r2
 800085a:	40c8      	lsrs	r0, r1
 800085c:	4307      	orrs	r7, r0
 800085e:	4660      	mov	r0, ip
 8000860:	4082      	lsls	r2, r0
 8000862:	40cb      	lsrs	r3, r1
 8000864:	1e50      	subs	r0, r2, #1
 8000866:	4182      	sbcs	r2, r0
 8000868:	18f6      	adds	r6, r6, r3
 800086a:	4317      	orrs	r7, r2
 800086c:	444f      	add	r7, r9
 800086e:	454f      	cmp	r7, r9
 8000870:	4180      	sbcs	r0, r0
 8000872:	4240      	negs	r0, r0
 8000874:	1836      	adds	r6, r6, r0
 8000876:	0233      	lsls	r3, r6, #8
 8000878:	d557      	bpl.n	800092a <__aeabi_dadd+0x2aa>
 800087a:	4b64      	ldr	r3, [pc, #400]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800087c:	3401      	adds	r4, #1
 800087e:	429c      	cmp	r4, r3
 8000880:	d045      	beq.n	800090e <__aeabi_dadd+0x28e>
 8000882:	2101      	movs	r1, #1
 8000884:	4b62      	ldr	r3, [pc, #392]	@ (8000a10 <__aeabi_dadd+0x390>)
 8000886:	087a      	lsrs	r2, r7, #1
 8000888:	401e      	ands	r6, r3
 800088a:	4039      	ands	r1, r7
 800088c:	430a      	orrs	r2, r1
 800088e:	07f7      	lsls	r7, r6, #31
 8000890:	4317      	orrs	r7, r2
 8000892:	0876      	lsrs	r6, r6, #1
 8000894:	e771      	b.n	800077a <__aeabi_dadd+0xfa>
 8000896:	001f      	movs	r7, r3
 8000898:	4317      	orrs	r7, r2
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x21e>
 800089c:	e0ad      	b.n	80009fa <__aeabi_dadd+0x37a>
 800089e:	1e4f      	subs	r7, r1, #1
 80008a0:	46bc      	mov	ip, r7
 80008a2:	2901      	cmp	r1, #1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x228>
 80008a6:	e182      	b.n	8000bae <__aeabi_dadd+0x52e>
 80008a8:	4f58      	ldr	r7, [pc, #352]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80008aa:	42b9      	cmp	r1, r7
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x230>
 80008ae:	e190      	b.n	8000bd2 <__aeabi_dadd+0x552>
 80008b0:	4661      	mov	r1, ip
 80008b2:	2701      	movs	r7, #1
 80008b4:	2938      	cmp	r1, #56	@ 0x38
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x23a>
 80008b8:	e72e      	b.n	8000718 <__aeabi_dadd+0x98>
 80008ba:	e718      	b.n	80006ee <__aeabi_dadd+0x6e>
 80008bc:	4f55      	ldr	r7, [pc, #340]	@ (8000a14 <__aeabi_dadd+0x394>)
 80008be:	1c61      	adds	r1, r4, #1
 80008c0:	4239      	tst	r1, r7
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x246>
 80008c4:	e0d0      	b.n	8000a68 <__aeabi_dadd+0x3e8>
 80008c6:	0031      	movs	r1, r6
 80008c8:	4648      	mov	r0, r9
 80008ca:	001f      	movs	r7, r3
 80008cc:	4301      	orrs	r1, r0
 80008ce:	4317      	orrs	r7, r2
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x256>
 80008d4:	e13d      	b.n	8000b52 <__aeabi_dadd+0x4d2>
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x25c>
 80008da:	e1bc      	b.n	8000c56 <__aeabi_dadd+0x5d6>
 80008dc:	2f00      	cmp	r7, #0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x262>
 80008e0:	e1bf      	b.n	8000c62 <__aeabi_dadd+0x5e2>
 80008e2:	464b      	mov	r3, r9
 80008e4:	2100      	movs	r1, #0
 80008e6:	08d8      	lsrs	r0, r3, #3
 80008e8:	0777      	lsls	r7, r6, #29
 80008ea:	4307      	orrs	r7, r0
 80008ec:	08f0      	lsrs	r0, r6, #3
 80008ee:	0306      	lsls	r6, r0, #12
 80008f0:	054c      	lsls	r4, r1, #21
 80008f2:	0b36      	lsrs	r6, r6, #12
 80008f4:	0d64      	lsrs	r4, r4, #21
 80008f6:	e00c      	b.n	8000912 <__aeabi_dadd+0x292>
 80008f8:	4f44      	ldr	r7, [pc, #272]	@ (8000a0c <__aeabi_dadd+0x38c>)
 80008fa:	42bc      	cmp	r4, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x280>
 80008fe:	e08b      	b.n	8000a18 <__aeabi_dadd+0x398>
 8000900:	2701      	movs	r7, #1
 8000902:	2938      	cmp	r1, #56	@ 0x38
 8000904:	dcb2      	bgt.n	800086c <__aeabi_dadd+0x1ec>
 8000906:	2780      	movs	r7, #128	@ 0x80
 8000908:	043f      	lsls	r7, r7, #16
 800090a:	433b      	orrs	r3, r7
 800090c:	e79c      	b.n	8000848 <__aeabi_dadd+0x1c8>
 800090e:	2600      	movs	r6, #0
 8000910:	2700      	movs	r7, #0
 8000912:	0524      	lsls	r4, r4, #20
 8000914:	4334      	orrs	r4, r6
 8000916:	07ed      	lsls	r5, r5, #31
 8000918:	432c      	orrs	r4, r5
 800091a:	0038      	movs	r0, r7
 800091c:	0021      	movs	r1, r4
 800091e:	b002      	add	sp, #8
 8000920:	bce0      	pop	{r5, r6, r7}
 8000922:	46ba      	mov	sl, r7
 8000924:	46b1      	mov	r9, r6
 8000926:	46a8      	mov	r8, r5
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	077b      	lsls	r3, r7, #29
 800092c:	d004      	beq.n	8000938 <__aeabi_dadd+0x2b8>
 800092e:	230f      	movs	r3, #15
 8000930:	403b      	ands	r3, r7
 8000932:	2b04      	cmp	r3, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_dadd+0x2b8>
 8000936:	e728      	b.n	800078a <__aeabi_dadd+0x10a>
 8000938:	08f8      	lsrs	r0, r7, #3
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800093c:	0777      	lsls	r7, r6, #29
 800093e:	4307      	orrs	r7, r0
 8000940:	08f0      	lsrs	r0, r6, #3
 8000942:	429c      	cmp	r4, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_dadd+0x2c8>
 8000946:	e24a      	b.n	8000dde <__aeabi_dadd+0x75e>
 8000948:	003b      	movs	r3, r7
 800094a:	4303      	orrs	r3, r0
 800094c:	d059      	beq.n	8000a02 <__aeabi_dadd+0x382>
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	0336      	lsls	r6, r6, #12
 8000952:	4306      	orrs	r6, r0
 8000954:	0336      	lsls	r6, r6, #12
 8000956:	4c2d      	ldr	r4, [pc, #180]	@ (8000a0c <__aeabi_dadd+0x38c>)
 8000958:	0b36      	lsrs	r6, r6, #12
 800095a:	e7da      	b.n	8000912 <__aeabi_dadd+0x292>
 800095c:	2900      	cmp	r1, #0
 800095e:	d061      	beq.n	8000a24 <__aeabi_dadd+0x3a4>
 8000960:	4641      	mov	r1, r8
 8000962:	1b09      	subs	r1, r1, r4
 8000964:	2c00      	cmp	r4, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ea>
 8000968:	e0b9      	b.n	8000ade <__aeabi_dadd+0x45e>
 800096a:	4c28      	ldr	r4, [pc, #160]	@ (8000a0c <__aeabi_dadd+0x38c>)
 800096c:	45a0      	cmp	r8, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f2>
 8000970:	e1a5      	b.n	8000cbe <__aeabi_dadd+0x63e>
 8000972:	2701      	movs	r7, #1
 8000974:	2938      	cmp	r1, #56	@ 0x38
 8000976:	dc13      	bgt.n	80009a0 <__aeabi_dadd+0x320>
 8000978:	2480      	movs	r4, #128	@ 0x80
 800097a:	0424      	lsls	r4, r4, #16
 800097c:	4326      	orrs	r6, r4
 800097e:	291f      	cmp	r1, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x304>
 8000982:	e1c8      	b.n	8000d16 <__aeabi_dadd+0x696>
 8000984:	2420      	movs	r4, #32
 8000986:	0037      	movs	r7, r6
 8000988:	4648      	mov	r0, r9
 800098a:	1a64      	subs	r4, r4, r1
 800098c:	40a7      	lsls	r7, r4
 800098e:	40c8      	lsrs	r0, r1
 8000990:	4307      	orrs	r7, r0
 8000992:	4648      	mov	r0, r9
 8000994:	40a0      	lsls	r0, r4
 8000996:	40ce      	lsrs	r6, r1
 8000998:	1e44      	subs	r4, r0, #1
 800099a:	41a0      	sbcs	r0, r4
 800099c:	199b      	adds	r3, r3, r6
 800099e:	4307      	orrs	r7, r0
 80009a0:	18bf      	adds	r7, r7, r2
 80009a2:	4297      	cmp	r7, r2
 80009a4:	4192      	sbcs	r2, r2
 80009a6:	4252      	negs	r2, r2
 80009a8:	4644      	mov	r4, r8
 80009aa:	18d6      	adds	r6, r2, r3
 80009ac:	e763      	b.n	8000876 <__aeabi_dadd+0x1f6>
 80009ae:	0038      	movs	r0, r7
 80009b0:	f001 fe06 	bl	80025c0 <__clzsi2>
 80009b4:	0003      	movs	r3, r0
 80009b6:	3318      	adds	r3, #24
 80009b8:	2b1f      	cmp	r3, #31
 80009ba:	dc00      	bgt.n	80009be <__aeabi_dadd+0x33e>
 80009bc:	e6bf      	b.n	800073e <__aeabi_dadd+0xbe>
 80009be:	003a      	movs	r2, r7
 80009c0:	3808      	subs	r0, #8
 80009c2:	4082      	lsls	r2, r0
 80009c4:	429c      	cmp	r4, r3
 80009c6:	dd00      	ble.n	80009ca <__aeabi_dadd+0x34a>
 80009c8:	e083      	b.n	8000ad2 <__aeabi_dadd+0x452>
 80009ca:	1b1b      	subs	r3, r3, r4
 80009cc:	1c58      	adds	r0, r3, #1
 80009ce:	281f      	cmp	r0, #31
 80009d0:	dc00      	bgt.n	80009d4 <__aeabi_dadd+0x354>
 80009d2:	e1b4      	b.n	8000d3e <__aeabi_dadd+0x6be>
 80009d4:	0017      	movs	r7, r2
 80009d6:	3b1f      	subs	r3, #31
 80009d8:	40df      	lsrs	r7, r3
 80009da:	2820      	cmp	r0, #32
 80009dc:	d005      	beq.n	80009ea <__aeabi_dadd+0x36a>
 80009de:	2340      	movs	r3, #64	@ 0x40
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	409a      	lsls	r2, r3
 80009e4:	1e53      	subs	r3, r2, #1
 80009e6:	419a      	sbcs	r2, r3
 80009e8:	4317      	orrs	r7, r2
 80009ea:	2400      	movs	r4, #0
 80009ec:	2f00      	cmp	r7, #0
 80009ee:	d00a      	beq.n	8000a06 <__aeabi_dadd+0x386>
 80009f0:	077b      	lsls	r3, r7, #29
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dadd+0x376>
 80009f4:	e6c4      	b.n	8000780 <__aeabi_dadd+0x100>
 80009f6:	0026      	movs	r6, r4
 80009f8:	e79e      	b.n	8000938 <__aeabi_dadd+0x2b8>
 80009fa:	464b      	mov	r3, r9
 80009fc:	000c      	movs	r4, r1
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	e79b      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000a02:	2700      	movs	r7, #0
 8000a04:	4c01      	ldr	r4, [pc, #4]	@ (8000a0c <__aeabi_dadd+0x38c>)
 8000a06:	2600      	movs	r6, #0
 8000a08:	e783      	b.n	8000912 <__aeabi_dadd+0x292>
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	ff7fffff 	.word	0xff7fffff
 8000a14:	000007fe 	.word	0x000007fe
 8000a18:	464b      	mov	r3, r9
 8000a1a:	0777      	lsls	r7, r6, #29
 8000a1c:	08d8      	lsrs	r0, r3, #3
 8000a1e:	4307      	orrs	r7, r0
 8000a20:	08f0      	lsrs	r0, r6, #3
 8000a22:	e791      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000a24:	4fcd      	ldr	r7, [pc, #820]	@ (8000d5c <__aeabi_dadd+0x6dc>)
 8000a26:	1c61      	adds	r1, r4, #1
 8000a28:	4239      	tst	r1, r7
 8000a2a:	d16b      	bne.n	8000b04 <__aeabi_dadd+0x484>
 8000a2c:	0031      	movs	r1, r6
 8000a2e:	4648      	mov	r0, r9
 8000a30:	4301      	orrs	r1, r0
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_dadd+0x3b8>
 8000a36:	e14b      	b.n	8000cd0 <__aeabi_dadd+0x650>
 8000a38:	001f      	movs	r7, r3
 8000a3a:	4317      	orrs	r7, r2
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x3c2>
 8000a40:	e181      	b.n	8000d46 <__aeabi_dadd+0x6c6>
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x3c8>
 8000a46:	e74c      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000a48:	444a      	add	r2, r9
 8000a4a:	454a      	cmp	r2, r9
 8000a4c:	4180      	sbcs	r0, r0
 8000a4e:	18f6      	adds	r6, r6, r3
 8000a50:	4240      	negs	r0, r0
 8000a52:	1836      	adds	r6, r6, r0
 8000a54:	0233      	lsls	r3, r6, #8
 8000a56:	d500      	bpl.n	8000a5a <__aeabi_dadd+0x3da>
 8000a58:	e1b0      	b.n	8000dbc <__aeabi_dadd+0x73c>
 8000a5a:	0017      	movs	r7, r2
 8000a5c:	4691      	mov	r9, r2
 8000a5e:	4337      	orrs	r7, r6
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x3e4>
 8000a62:	e73e      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000a64:	2600      	movs	r6, #0
 8000a66:	e754      	b.n	8000912 <__aeabi_dadd+0x292>
 8000a68:	4649      	mov	r1, r9
 8000a6a:	1a89      	subs	r1, r1, r2
 8000a6c:	4688      	mov	r8, r1
 8000a6e:	45c1      	cmp	r9, r8
 8000a70:	41bf      	sbcs	r7, r7
 8000a72:	1af1      	subs	r1, r6, r3
 8000a74:	427f      	negs	r7, r7
 8000a76:	1bc9      	subs	r1, r1, r7
 8000a78:	020f      	lsls	r7, r1, #8
 8000a7a:	d461      	bmi.n	8000b40 <__aeabi_dadd+0x4c0>
 8000a7c:	4647      	mov	r7, r8
 8000a7e:	430f      	orrs	r7, r1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x404>
 8000a82:	e0bd      	b.n	8000c00 <__aeabi_dadd+0x580>
 8000a84:	000e      	movs	r6, r1
 8000a86:	4647      	mov	r7, r8
 8000a88:	e651      	b.n	800072e <__aeabi_dadd+0xae>
 8000a8a:	4cb5      	ldr	r4, [pc, #724]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000a8c:	45a0      	cmp	r8, r4
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x412>
 8000a90:	e100      	b.n	8000c94 <__aeabi_dadd+0x614>
 8000a92:	2701      	movs	r7, #1
 8000a94:	2938      	cmp	r1, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x41a>
 8000a98:	e6b8      	b.n	800080c <__aeabi_dadd+0x18c>
 8000a9a:	2480      	movs	r4, #128	@ 0x80
 8000a9c:	0424      	lsls	r4, r4, #16
 8000a9e:	4326      	orrs	r6, r4
 8000aa0:	e6a3      	b.n	80007ea <__aeabi_dadd+0x16a>
 8000aa2:	4eb0      	ldr	r6, [pc, #704]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000aa4:	1ae4      	subs	r4, r4, r3
 8000aa6:	4016      	ands	r6, r2
 8000aa8:	077b      	lsls	r3, r7, #29
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x42e>
 8000aac:	e73f      	b.n	800092e <__aeabi_dadd+0x2ae>
 8000aae:	e743      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000ab0:	000f      	movs	r7, r1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	3f20      	subs	r7, #32
 8000ab6:	40f8      	lsrs	r0, r7
 8000ab8:	4684      	mov	ip, r0
 8000aba:	2920      	cmp	r1, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x446>
 8000abe:	2740      	movs	r7, #64	@ 0x40
 8000ac0:	1a79      	subs	r1, r7, r1
 8000ac2:	408b      	lsls	r3, r1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	1e53      	subs	r3, r2, #1
 8000ac8:	419a      	sbcs	r2, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	0017      	movs	r7, r2
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	e622      	b.n	8000718 <__aeabi_dadd+0x98>
 8000ad2:	48a4      	ldr	r0, [pc, #656]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000ad4:	1ae1      	subs	r1, r4, r3
 8000ad6:	4010      	ands	r0, r2
 8000ad8:	0747      	lsls	r7, r0, #29
 8000ada:	08c0      	lsrs	r0, r0, #3
 8000adc:	e707      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000ade:	0034      	movs	r4, r6
 8000ae0:	4648      	mov	r0, r9
 8000ae2:	4304      	orrs	r4, r0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x468>
 8000ae6:	e0fa      	b.n	8000cde <__aeabi_dadd+0x65e>
 8000ae8:	1e4c      	subs	r4, r1, #1
 8000aea:	2901      	cmp	r1, #1
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x470>
 8000aee:	e0d7      	b.n	8000ca0 <__aeabi_dadd+0x620>
 8000af0:	4f9b      	ldr	r7, [pc, #620]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000af2:	42b9      	cmp	r1, r7
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x478>
 8000af6:	e0e2      	b.n	8000cbe <__aeabi_dadd+0x63e>
 8000af8:	2701      	movs	r7, #1
 8000afa:	2c38      	cmp	r4, #56	@ 0x38
 8000afc:	dd00      	ble.n	8000b00 <__aeabi_dadd+0x480>
 8000afe:	e74f      	b.n	80009a0 <__aeabi_dadd+0x320>
 8000b00:	0021      	movs	r1, r4
 8000b02:	e73c      	b.n	800097e <__aeabi_dadd+0x2fe>
 8000b04:	4c96      	ldr	r4, [pc, #600]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000b06:	42a1      	cmp	r1, r4
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x48c>
 8000b0a:	e0dd      	b.n	8000cc8 <__aeabi_dadd+0x648>
 8000b0c:	444a      	add	r2, r9
 8000b0e:	454a      	cmp	r2, r9
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	18f3      	adds	r3, r6, r3
 8000b14:	4240      	negs	r0, r0
 8000b16:	1818      	adds	r0, r3, r0
 8000b18:	07c7      	lsls	r7, r0, #31
 8000b1a:	0852      	lsrs	r2, r2, #1
 8000b1c:	4317      	orrs	r7, r2
 8000b1e:	0846      	lsrs	r6, r0, #1
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	d005      	beq.n	8000b30 <__aeabi_dadd+0x4b0>
 8000b24:	220f      	movs	r2, #15
 8000b26:	000c      	movs	r4, r1
 8000b28:	403a      	ands	r2, r7
 8000b2a:	2a04      	cmp	r2, #4
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_dadd+0x4b0>
 8000b2e:	e62c      	b.n	800078a <__aeabi_dadd+0x10a>
 8000b30:	0776      	lsls	r6, r6, #29
 8000b32:	08ff      	lsrs	r7, r7, #3
 8000b34:	4337      	orrs	r7, r6
 8000b36:	0900      	lsrs	r0, r0, #4
 8000b38:	e6d9      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000b3a:	2700      	movs	r7, #0
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	e6e8      	b.n	8000912 <__aeabi_dadd+0x292>
 8000b40:	4649      	mov	r1, r9
 8000b42:	1a57      	subs	r7, r2, r1
 8000b44:	42ba      	cmp	r2, r7
 8000b46:	4192      	sbcs	r2, r2
 8000b48:	1b9e      	subs	r6, r3, r6
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	4665      	mov	r5, ip
 8000b4e:	1ab6      	subs	r6, r6, r2
 8000b50:	e5ed      	b.n	800072e <__aeabi_dadd+0xae>
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d000      	beq.n	8000b58 <__aeabi_dadd+0x4d8>
 8000b56:	e0c6      	b.n	8000ce6 <__aeabi_dadd+0x666>
 8000b58:	2f00      	cmp	r7, #0
 8000b5a:	d167      	bne.n	8000c2c <__aeabi_dadd+0x5ac>
 8000b5c:	2680      	movs	r6, #128	@ 0x80
 8000b5e:	2500      	movs	r5, #0
 8000b60:	4c7f      	ldr	r4, [pc, #508]	@ (8000d60 <__aeabi_dadd+0x6e0>)
 8000b62:	0336      	lsls	r6, r6, #12
 8000b64:	e6d5      	b.n	8000912 <__aeabi_dadd+0x292>
 8000b66:	4665      	mov	r5, ip
 8000b68:	000c      	movs	r4, r1
 8000b6a:	001e      	movs	r6, r3
 8000b6c:	08d0      	lsrs	r0, r2, #3
 8000b6e:	e6e4      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000b70:	444a      	add	r2, r9
 8000b72:	454a      	cmp	r2, r9
 8000b74:	4180      	sbcs	r0, r0
 8000b76:	18f3      	adds	r3, r6, r3
 8000b78:	4240      	negs	r0, r0
 8000b7a:	1818      	adds	r0, r3, r0
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0203      	lsls	r3, r0, #8
 8000b80:	d400      	bmi.n	8000b84 <__aeabi_dadd+0x504>
 8000b82:	e096      	b.n	8000cb2 <__aeabi_dadd+0x632>
 8000b84:	4b77      	ldr	r3, [pc, #476]	@ (8000d64 <__aeabi_dadd+0x6e4>)
 8000b86:	0849      	lsrs	r1, r1, #1
 8000b88:	4018      	ands	r0, r3
 8000b8a:	07c3      	lsls	r3, r0, #31
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	0844      	lsrs	r4, r0, #1
 8000b90:	0749      	lsls	r1, r1, #29
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x516>
 8000b94:	e129      	b.n	8000dea <__aeabi_dadd+0x76a>
 8000b96:	220f      	movs	r2, #15
 8000b98:	401a      	ands	r2, r3
 8000b9a:	2a04      	cmp	r2, #4
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x520>
 8000b9e:	e0ea      	b.n	8000d76 <__aeabi_dadd+0x6f6>
 8000ba0:	1d1f      	adds	r7, r3, #4
 8000ba2:	429f      	cmp	r7, r3
 8000ba4:	41b6      	sbcs	r6, r6
 8000ba6:	4276      	negs	r6, r6
 8000ba8:	1936      	adds	r6, r6, r4
 8000baa:	2402      	movs	r4, #2
 8000bac:	e6c4      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000bae:	4649      	mov	r1, r9
 8000bb0:	1a8f      	subs	r7, r1, r2
 8000bb2:	45b9      	cmp	r9, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	1af6      	subs	r6, r6, r3
 8000bb8:	4240      	negs	r0, r0
 8000bba:	1a36      	subs	r6, r6, r0
 8000bbc:	0233      	lsls	r3, r6, #8
 8000bbe:	d406      	bmi.n	8000bce <__aeabi_dadd+0x54e>
 8000bc0:	0773      	lsls	r3, r6, #29
 8000bc2:	08ff      	lsrs	r7, r7, #3
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	08f0      	lsrs	r0, r6, #3
 8000bca:	e690      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000bcc:	4665      	mov	r5, ip
 8000bce:	2401      	movs	r4, #1
 8000bd0:	e5ab      	b.n	800072a <__aeabi_dadd+0xaa>
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	0777      	lsls	r7, r6, #29
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	4307      	orrs	r7, r0
 8000bda:	08f0      	lsrs	r0, r6, #3
 8000bdc:	e6b4      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000bde:	000f      	movs	r7, r1
 8000be0:	0018      	movs	r0, r3
 8000be2:	3f20      	subs	r7, #32
 8000be4:	40f8      	lsrs	r0, r7
 8000be6:	4684      	mov	ip, r0
 8000be8:	2920      	cmp	r1, #32
 8000bea:	d003      	beq.n	8000bf4 <__aeabi_dadd+0x574>
 8000bec:	2740      	movs	r7, #64	@ 0x40
 8000bee:	1a79      	subs	r1, r7, r1
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	1e53      	subs	r3, r2, #1
 8000bf6:	419a      	sbcs	r2, r3
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	0017      	movs	r7, r2
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	e635      	b.n	800086c <__aeabi_dadd+0x1ec>
 8000c00:	2500      	movs	r5, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	2600      	movs	r6, #0
 8000c06:	e684      	b.n	8000912 <__aeabi_dadd+0x292>
 8000c08:	000c      	movs	r4, r1
 8000c0a:	0035      	movs	r5, r6
 8000c0c:	3c20      	subs	r4, #32
 8000c0e:	40e5      	lsrs	r5, r4
 8000c10:	2920      	cmp	r1, #32
 8000c12:	d005      	beq.n	8000c20 <__aeabi_dadd+0x5a0>
 8000c14:	2440      	movs	r4, #64	@ 0x40
 8000c16:	1a61      	subs	r1, r4, r1
 8000c18:	408e      	lsls	r6, r1
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	4331      	orrs	r1, r6
 8000c1e:	4689      	mov	r9, r1
 8000c20:	4648      	mov	r0, r9
 8000c22:	1e41      	subs	r1, r0, #1
 8000c24:	4188      	sbcs	r0, r1
 8000c26:	0007      	movs	r7, r0
 8000c28:	432f      	orrs	r7, r5
 8000c2a:	e5ef      	b.n	800080c <__aeabi_dadd+0x18c>
 8000c2c:	08d2      	lsrs	r2, r2, #3
 8000c2e:	075f      	lsls	r7, r3, #29
 8000c30:	4665      	mov	r5, ip
 8000c32:	4317      	orrs	r7, r2
 8000c34:	08d8      	lsrs	r0, r3, #3
 8000c36:	e687      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000c38:	1a17      	subs	r7, r2, r0
 8000c3a:	42ba      	cmp	r2, r7
 8000c3c:	4192      	sbcs	r2, r2
 8000c3e:	1b9e      	subs	r6, r3, r6
 8000c40:	4252      	negs	r2, r2
 8000c42:	1ab6      	subs	r6, r6, r2
 8000c44:	0233      	lsls	r3, r6, #8
 8000c46:	d4c1      	bmi.n	8000bcc <__aeabi_dadd+0x54c>
 8000c48:	0773      	lsls	r3, r6, #29
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	4665      	mov	r5, ip
 8000c4e:	2101      	movs	r1, #1
 8000c50:	431f      	orrs	r7, r3
 8000c52:	08f0      	lsrs	r0, r6, #3
 8000c54:	e64b      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d07b      	beq.n	8000d52 <__aeabi_dadd+0x6d2>
 8000c5a:	4665      	mov	r5, ip
 8000c5c:	001e      	movs	r6, r3
 8000c5e:	4691      	mov	r9, r2
 8000c60:	e63f      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000c62:	1a81      	subs	r1, r0, r2
 8000c64:	4688      	mov	r8, r1
 8000c66:	45c1      	cmp	r9, r8
 8000c68:	41a4      	sbcs	r4, r4
 8000c6a:	1af1      	subs	r1, r6, r3
 8000c6c:	4264      	negs	r4, r4
 8000c6e:	1b09      	subs	r1, r1, r4
 8000c70:	2480      	movs	r4, #128	@ 0x80
 8000c72:	0424      	lsls	r4, r4, #16
 8000c74:	4221      	tst	r1, r4
 8000c76:	d077      	beq.n	8000d68 <__aeabi_dadd+0x6e8>
 8000c78:	1a10      	subs	r0, r2, r0
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	0007      	movs	r7, r0
 8000c80:	1b9e      	subs	r6, r3, r6
 8000c82:	4252      	negs	r2, r2
 8000c84:	1ab6      	subs	r6, r6, r2
 8000c86:	4337      	orrs	r7, r6
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x60c>
 8000c8a:	e0a0      	b.n	8000dce <__aeabi_dadd+0x74e>
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	2400      	movs	r4, #0
 8000c90:	2600      	movs	r6, #0
 8000c92:	e63e      	b.n	8000912 <__aeabi_dadd+0x292>
 8000c94:	075f      	lsls	r7, r3, #29
 8000c96:	08d2      	lsrs	r2, r2, #3
 8000c98:	4665      	mov	r5, ip
 8000c9a:	4317      	orrs	r7, r2
 8000c9c:	08d8      	lsrs	r0, r3, #3
 8000c9e:	e653      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000ca0:	1881      	adds	r1, r0, r2
 8000ca2:	4291      	cmp	r1, r2
 8000ca4:	4192      	sbcs	r2, r2
 8000ca6:	18f0      	adds	r0, r6, r3
 8000ca8:	4252      	negs	r2, r2
 8000caa:	1880      	adds	r0, r0, r2
 8000cac:	0203      	lsls	r3, r0, #8
 8000cae:	d500      	bpl.n	8000cb2 <__aeabi_dadd+0x632>
 8000cb0:	e768      	b.n	8000b84 <__aeabi_dadd+0x504>
 8000cb2:	0747      	lsls	r7, r0, #29
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	430f      	orrs	r7, r1
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	2101      	movs	r1, #1
 8000cbc:	e617      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000cbe:	08d2      	lsrs	r2, r2, #3
 8000cc0:	075f      	lsls	r7, r3, #29
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	08d8      	lsrs	r0, r3, #3
 8000cc6:	e63f      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000cc8:	000c      	movs	r4, r1
 8000cca:	2600      	movs	r6, #0
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e620      	b.n	8000912 <__aeabi_dadd+0x292>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d156      	bne.n	8000d82 <__aeabi_dadd+0x702>
 8000cd4:	075f      	lsls	r7, r3, #29
 8000cd6:	08d2      	lsrs	r2, r2, #3
 8000cd8:	4317      	orrs	r7, r2
 8000cda:	08d8      	lsrs	r0, r3, #3
 8000cdc:	e634      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000cde:	000c      	movs	r4, r1
 8000ce0:	001e      	movs	r6, r3
 8000ce2:	08d0      	lsrs	r0, r2, #3
 8000ce4:	e629      	b.n	800093a <__aeabi_dadd+0x2ba>
 8000ce6:	08c1      	lsrs	r1, r0, #3
 8000ce8:	0770      	lsls	r0, r6, #29
 8000cea:	4301      	orrs	r1, r0
 8000cec:	08f0      	lsrs	r0, r6, #3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d062      	beq.n	8000db8 <__aeabi_dadd+0x738>
 8000cf2:	2480      	movs	r4, #128	@ 0x80
 8000cf4:	0324      	lsls	r4, r4, #12
 8000cf6:	4220      	tst	r0, r4
 8000cf8:	d007      	beq.n	8000d0a <__aeabi_dadd+0x68a>
 8000cfa:	08de      	lsrs	r6, r3, #3
 8000cfc:	4226      	tst	r6, r4
 8000cfe:	d104      	bne.n	8000d0a <__aeabi_dadd+0x68a>
 8000d00:	4665      	mov	r5, ip
 8000d02:	0030      	movs	r0, r6
 8000d04:	08d1      	lsrs	r1, r2, #3
 8000d06:	075b      	lsls	r3, r3, #29
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	0f4f      	lsrs	r7, r1, #29
 8000d0c:	00c9      	lsls	r1, r1, #3
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	077f      	lsls	r7, r7, #29
 8000d12:	430f      	orrs	r7, r1
 8000d14:	e618      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000d16:	000c      	movs	r4, r1
 8000d18:	0030      	movs	r0, r6
 8000d1a:	3c20      	subs	r4, #32
 8000d1c:	40e0      	lsrs	r0, r4
 8000d1e:	4684      	mov	ip, r0
 8000d20:	2920      	cmp	r1, #32
 8000d22:	d005      	beq.n	8000d30 <__aeabi_dadd+0x6b0>
 8000d24:	2440      	movs	r4, #64	@ 0x40
 8000d26:	1a61      	subs	r1, r4, r1
 8000d28:	408e      	lsls	r6, r1
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4331      	orrs	r1, r6
 8000d2e:	4689      	mov	r9, r1
 8000d30:	4648      	mov	r0, r9
 8000d32:	1e41      	subs	r1, r0, #1
 8000d34:	4188      	sbcs	r0, r1
 8000d36:	4661      	mov	r1, ip
 8000d38:	0007      	movs	r7, r0
 8000d3a:	430f      	orrs	r7, r1
 8000d3c:	e630      	b.n	80009a0 <__aeabi_dadd+0x320>
 8000d3e:	2120      	movs	r1, #32
 8000d40:	2700      	movs	r7, #0
 8000d42:	1a09      	subs	r1, r1, r0
 8000d44:	e50e      	b.n	8000764 <__aeabi_dadd+0xe4>
 8000d46:	001e      	movs	r6, r3
 8000d48:	2f00      	cmp	r7, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dadd+0x6ce>
 8000d4c:	e522      	b.n	8000794 <__aeabi_dadd+0x114>
 8000d4e:	2400      	movs	r4, #0
 8000d50:	e758      	b.n	8000c04 <__aeabi_dadd+0x584>
 8000d52:	2500      	movs	r5, #0
 8000d54:	2400      	movs	r4, #0
 8000d56:	2600      	movs	r6, #0
 8000d58:	e5db      	b.n	8000912 <__aeabi_dadd+0x292>
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff
 8000d68:	4647      	mov	r7, r8
 8000d6a:	430f      	orrs	r7, r1
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x6f0>
 8000d6e:	e747      	b.n	8000c00 <__aeabi_dadd+0x580>
 8000d70:	000e      	movs	r6, r1
 8000d72:	46c1      	mov	r9, r8
 8000d74:	e5b5      	b.n	80008e2 <__aeabi_dadd+0x262>
 8000d76:	08df      	lsrs	r7, r3, #3
 8000d78:	0764      	lsls	r4, r4, #29
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4327      	orrs	r7, r4
 8000d7e:	0900      	lsrs	r0, r0, #4
 8000d80:	e5b5      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000d82:	0019      	movs	r1, r3
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	0777      	lsls	r7, r6, #29
 8000d88:	4307      	orrs	r7, r0
 8000d8a:	4311      	orrs	r1, r2
 8000d8c:	08f0      	lsrs	r0, r6, #3
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x714>
 8000d92:	e5d9      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	0309      	lsls	r1, r1, #12
 8000d98:	4208      	tst	r0, r1
 8000d9a:	d007      	beq.n	8000dac <__aeabi_dadd+0x72c>
 8000d9c:	08dc      	lsrs	r4, r3, #3
 8000d9e:	420c      	tst	r4, r1
 8000da0:	d104      	bne.n	8000dac <__aeabi_dadd+0x72c>
 8000da2:	08d2      	lsrs	r2, r2, #3
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0017      	movs	r7, r2
 8000daa:	0020      	movs	r0, r4
 8000dac:	0f7b      	lsrs	r3, r7, #29
 8000dae:	00ff      	lsls	r7, r7, #3
 8000db0:	08ff      	lsrs	r7, r7, #3
 8000db2:	075b      	lsls	r3, r3, #29
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e5c7      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000db8:	000f      	movs	r7, r1
 8000dba:	e5c5      	b.n	8000948 <__aeabi_dadd+0x2c8>
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <__aeabi_dadd+0x788>)
 8000dbe:	08d2      	lsrs	r2, r2, #3
 8000dc0:	4033      	ands	r3, r6
 8000dc2:	075f      	lsls	r7, r3, #29
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	2401      	movs	r4, #1
 8000dc8:	4317      	orrs	r7, r2
 8000dca:	0b1e      	lsrs	r6, r3, #12
 8000dcc:	e5a1      	b.n	8000912 <__aeabi_dadd+0x292>
 8000dce:	4226      	tst	r6, r4
 8000dd0:	d012      	beq.n	8000df8 <__aeabi_dadd+0x778>
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <__aeabi_dadd+0x788>)
 8000dd4:	4665      	mov	r5, ip
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	2401      	movs	r4, #1
 8000dda:	401e      	ands	r6, r3
 8000ddc:	e4e6      	b.n	80007ac <__aeabi_dadd+0x12c>
 8000dde:	0021      	movs	r1, r4
 8000de0:	e585      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000de2:	0017      	movs	r7, r2
 8000de4:	e5a8      	b.n	8000938 <__aeabi_dadd+0x2b8>
 8000de6:	003a      	movs	r2, r7
 8000de8:	e4d4      	b.n	8000794 <__aeabi_dadd+0x114>
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	0764      	lsls	r4, r4, #29
 8000dee:	431c      	orrs	r4, r3
 8000df0:	0027      	movs	r7, r4
 8000df2:	2102      	movs	r1, #2
 8000df4:	0900      	lsrs	r0, r0, #4
 8000df6:	e57a      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000df8:	08c0      	lsrs	r0, r0, #3
 8000dfa:	0777      	lsls	r7, r6, #29
 8000dfc:	4307      	orrs	r7, r0
 8000dfe:	4665      	mov	r5, ip
 8000e00:	2100      	movs	r1, #0
 8000e02:	08f0      	lsrs	r0, r6, #3
 8000e04:	e573      	b.n	80008ee <__aeabi_dadd+0x26e>
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	ff7fffff 	.word	0xff7fffff

08000e0c <__aeabi_ddiv>:
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	46de      	mov	lr, fp
 8000e10:	4645      	mov	r5, r8
 8000e12:	4657      	mov	r7, sl
 8000e14:	464e      	mov	r6, r9
 8000e16:	b5e0      	push	{r5, r6, r7, lr}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	030b      	lsls	r3, r1, #12
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	469b      	mov	fp, r3
 8000e24:	0fca      	lsrs	r2, r1, #31
 8000e26:	004b      	lsls	r3, r1, #1
 8000e28:	0004      	movs	r4, r0
 8000e2a:	4680      	mov	r8, r0
 8000e2c:	0d5b      	lsrs	r3, r3, #21
 8000e2e:	9202      	str	r2, [sp, #8]
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x28>
 8000e32:	e098      	b.n	8000f66 <__aeabi_ddiv+0x15a>
 8000e34:	4a7c      	ldr	r2, [pc, #496]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d037      	beq.n	8000eaa <__aeabi_ddiv+0x9e>
 8000e3a:	4659      	mov	r1, fp
 8000e3c:	0f42      	lsrs	r2, r0, #29
 8000e3e:	00c9      	lsls	r1, r1, #3
 8000e40:	430a      	orrs	r2, r1
 8000e42:	2180      	movs	r1, #128	@ 0x80
 8000e44:	0409      	lsls	r1, r1, #16
 8000e46:	4311      	orrs	r1, r2
 8000e48:	00c2      	lsls	r2, r0, #3
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	4a77      	ldr	r2, [pc, #476]	@ (800102c <__aeabi_ddiv+0x220>)
 8000e4e:	4689      	mov	r9, r1
 8000e50:	4692      	mov	sl, r2
 8000e52:	449a      	add	sl, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	2400      	movs	r4, #0
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	9e00      	ldr	r6, [sp, #0]
 8000e5c:	9f01      	ldr	r7, [sp, #4]
 8000e5e:	033b      	lsls	r3, r7, #12
 8000e60:	0b1b      	lsrs	r3, r3, #12
 8000e62:	469b      	mov	fp, r3
 8000e64:	007b      	lsls	r3, r7, #1
 8000e66:	0030      	movs	r0, r6
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0ffd      	lsrs	r5, r7, #31
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d059      	beq.n	8000f24 <__aeabi_ddiv+0x118>
 8000e70:	4a6d      	ldr	r2, [pc, #436]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d048      	beq.n	8000f08 <__aeabi_ddiv+0xfc>
 8000e76:	4659      	mov	r1, fp
 8000e78:	0f72      	lsrs	r2, r6, #29
 8000e7a:	00c9      	lsls	r1, r1, #3
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	0409      	lsls	r1, r1, #16
 8000e82:	4311      	orrs	r1, r2
 8000e84:	468b      	mov	fp, r1
 8000e86:	4969      	ldr	r1, [pc, #420]	@ (800102c <__aeabi_ddiv+0x220>)
 8000e88:	00f2      	lsls	r2, r6, #3
 8000e8a:	468c      	mov	ip, r1
 8000e8c:	4651      	mov	r1, sl
 8000e8e:	4463      	add	r3, ip
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	469a      	mov	sl, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	9e02      	ldr	r6, [sp, #8]
 8000e98:	406e      	eors	r6, r5
 8000e9a:	b2f6      	uxtb	r6, r6
 8000e9c:	2c0f      	cmp	r4, #15
 8000e9e:	d900      	bls.n	8000ea2 <__aeabi_ddiv+0x96>
 8000ea0:	e0ce      	b.n	8001040 <__aeabi_ddiv+0x234>
 8000ea2:	4b63      	ldr	r3, [pc, #396]	@ (8001030 <__aeabi_ddiv+0x224>)
 8000ea4:	00a4      	lsls	r4, r4, #2
 8000ea6:	591b      	ldr	r3, [r3, r4]
 8000ea8:	469f      	mov	pc, r3
 8000eaa:	465a      	mov	r2, fp
 8000eac:	4302      	orrs	r2, r0
 8000eae:	4691      	mov	r9, r2
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_ddiv+0xa8>
 8000eb2:	e090      	b.n	8000fd6 <__aeabi_ddiv+0x1ca>
 8000eb4:	469a      	mov	sl, r3
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	4690      	mov	r8, r2
 8000eba:	2408      	movs	r4, #8
 8000ebc:	9303      	str	r3, [sp, #12]
 8000ebe:	e7cc      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000ec0:	46cb      	mov	fp, r9
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	9d02      	ldr	r5, [sp, #8]
 8000ec6:	9903      	ldr	r1, [sp, #12]
 8000ec8:	2902      	cmp	r1, #2
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0xc2>
 8000ecc:	e1de      	b.n	800128c <__aeabi_ddiv+0x480>
 8000ece:	2903      	cmp	r1, #3
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0xc8>
 8000ed2:	e08d      	b.n	8000ff0 <__aeabi_ddiv+0x1e4>
 8000ed4:	2901      	cmp	r1, #1
 8000ed6:	d000      	beq.n	8000eda <__aeabi_ddiv+0xce>
 8000ed8:	e179      	b.n	80011ce <__aeabi_ddiv+0x3c2>
 8000eda:	002e      	movs	r6, r5
 8000edc:	2200      	movs	r2, #0
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	4690      	mov	r8, r2
 8000ee4:	051b      	lsls	r3, r3, #20
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	07f6      	lsls	r6, r6, #31
 8000eea:	4333      	orrs	r3, r6
 8000eec:	4640      	mov	r0, r8
 8000eee:	0019      	movs	r1, r3
 8000ef0:	b007      	add	sp, #28
 8000ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef4:	46bb      	mov	fp, r7
 8000ef6:	46b2      	mov	sl, r6
 8000ef8:	46a9      	mov	r9, r5
 8000efa:	46a0      	mov	r8, r4
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	2200      	movs	r2, #0
 8000f00:	2400      	movs	r4, #0
 8000f02:	4690      	mov	r8, r2
 8000f04:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000f06:	e7ed      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8000f08:	465a      	mov	r2, fp
 8000f0a:	9b00      	ldr	r3, [sp, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <__aeabi_ddiv+0x228>)
 8000f10:	469c      	mov	ip, r3
 8000f12:	44e2      	add	sl, ip
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d159      	bne.n	8000fcc <__aeabi_ddiv+0x1c0>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	469b      	mov	fp, r3
 8000f22:	e7b8      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000f24:	465a      	mov	r2, fp
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	d049      	beq.n	8000fc0 <__aeabi_ddiv+0x1b4>
 8000f2c:	465b      	mov	r3, fp
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x128>
 8000f32:	e19c      	b.n	800126e <__aeabi_ddiv+0x462>
 8000f34:	4658      	mov	r0, fp
 8000f36:	f001 fb43 	bl	80025c0 <__clzsi2>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	3a0b      	subs	r2, #11
 8000f40:	271d      	movs	r7, #29
 8000f42:	9e00      	ldr	r6, [sp, #0]
 8000f44:	1aba      	subs	r2, r7, r2
 8000f46:	0019      	movs	r1, r3
 8000f48:	4658      	mov	r0, fp
 8000f4a:	40d6      	lsrs	r6, r2
 8000f4c:	3908      	subs	r1, #8
 8000f4e:	4088      	lsls	r0, r1
 8000f50:	0032      	movs	r2, r6
 8000f52:	4302      	orrs	r2, r0
 8000f54:	4693      	mov	fp, r2
 8000f56:	9a00      	ldr	r2, [sp, #0]
 8000f58:	408a      	lsls	r2, r1
 8000f5a:	4937      	ldr	r1, [pc, #220]	@ (8001038 <__aeabi_ddiv+0x22c>)
 8000f5c:	4453      	add	r3, sl
 8000f5e:	468a      	mov	sl, r1
 8000f60:	2100      	movs	r1, #0
 8000f62:	449a      	add	sl, r3
 8000f64:	e797      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000f66:	465b      	mov	r3, fp
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	d021      	beq.n	8000fb2 <__aeabi_ddiv+0x1a6>
 8000f6e:	465b      	mov	r3, fp
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x16a>
 8000f74:	e169      	b.n	800124a <__aeabi_ddiv+0x43e>
 8000f76:	4658      	mov	r0, fp
 8000f78:	f001 fb22 	bl	80025c0 <__clzsi2>
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	0002      	movs	r2, r0
 8000f84:	4484      	add	ip, r0
 8000f86:	4666      	mov	r6, ip
 8000f88:	231d      	movs	r3, #29
 8000f8a:	1b9b      	subs	r3, r3, r6
 8000f8c:	0026      	movs	r6, r4
 8000f8e:	0011      	movs	r1, r2
 8000f90:	4658      	mov	r0, fp
 8000f92:	40de      	lsrs	r6, r3
 8000f94:	3908      	subs	r1, #8
 8000f96:	4088      	lsls	r0, r1
 8000f98:	0033      	movs	r3, r6
 8000f9a:	4303      	orrs	r3, r0
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	0023      	movs	r3, r4
 8000fa0:	408b      	lsls	r3, r1
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <__aeabi_ddiv+0x230>)
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	469a      	mov	sl, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	9303      	str	r3, [sp, #12]
 8000fb0:	e753      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	2404      	movs	r4, #4
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	e74c      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	431c      	orrs	r4, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	469b      	mov	fp, r3
 8000fca:	e764      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	0032      	movs	r2, r6
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	e75f      	b.n	8000e96 <__aeabi_ddiv+0x8a>
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	46d9      	mov	r9, fp
 8000fdc:	240c      	movs	r4, #12
 8000fde:	9303      	str	r3, [sp, #12]
 8000fe0:	e73b      	b.n	8000e5a <__aeabi_ddiv+0x4e>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2480      	movs	r4, #128	@ 0x80
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	2600      	movs	r6, #0
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8000fec:	0324      	lsls	r4, r4, #12
 8000fee:	e779      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8000ff0:	2480      	movs	r4, #128	@ 0x80
 8000ff2:	465b      	mov	r3, fp
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	0324      	lsls	r4, r4, #12
 8000ffa:	002e      	movs	r6, r5
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8001000:	0b24      	lsrs	r4, r4, #12
 8001002:	e76f      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001004:	2480      	movs	r4, #128	@ 0x80
 8001006:	464b      	mov	r3, r9
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	4223      	tst	r3, r4
 800100c:	d002      	beq.n	8001014 <__aeabi_ddiv+0x208>
 800100e:	465b      	mov	r3, fp
 8001010:	4223      	tst	r3, r4
 8001012:	d0f0      	beq.n	8000ff6 <__aeabi_ddiv+0x1ea>
 8001014:	2480      	movs	r4, #128	@ 0x80
 8001016:	464b      	mov	r3, r9
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	431c      	orrs	r4, r3
 800101c:	0324      	lsls	r4, r4, #12
 800101e:	9e02      	ldr	r6, [sp, #8]
 8001020:	4b01      	ldr	r3, [pc, #4]	@ (8001028 <__aeabi_ddiv+0x21c>)
 8001022:	0b24      	lsrs	r4, r4, #12
 8001024:	e75e      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	000007ff 	.word	0x000007ff
 800102c:	fffffc01 	.word	0xfffffc01
 8001030:	08008ccc 	.word	0x08008ccc
 8001034:	fffff801 	.word	0xfffff801
 8001038:	000003f3 	.word	0x000003f3
 800103c:	fffffc0d 	.word	0xfffffc0d
 8001040:	45cb      	cmp	fp, r9
 8001042:	d200      	bcs.n	8001046 <__aeabi_ddiv+0x23a>
 8001044:	e0f8      	b.n	8001238 <__aeabi_ddiv+0x42c>
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x23e>
 8001048:	e0f3      	b.n	8001232 <__aeabi_ddiv+0x426>
 800104a:	2301      	movs	r3, #1
 800104c:	425b      	negs	r3, r3
 800104e:	469c      	mov	ip, r3
 8001050:	4644      	mov	r4, r8
 8001052:	4648      	mov	r0, r9
 8001054:	2500      	movs	r5, #0
 8001056:	44e2      	add	sl, ip
 8001058:	465b      	mov	r3, fp
 800105a:	0e17      	lsrs	r7, r2, #24
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	431f      	orrs	r7, r3
 8001060:	0c19      	lsrs	r1, r3, #16
 8001062:	043b      	lsls	r3, r7, #16
 8001064:	0212      	lsls	r2, r2, #8
 8001066:	9700      	str	r7, [sp, #0]
 8001068:	0c1f      	lsrs	r7, r3, #16
 800106a:	4691      	mov	r9, r2
 800106c:	9102      	str	r1, [sp, #8]
 800106e:	9703      	str	r7, [sp, #12]
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	0002      	movs	r2, r0
 8001076:	437a      	muls	r2, r7
 8001078:	040b      	lsls	r3, r1, #16
 800107a:	0c21      	lsrs	r1, r4, #16
 800107c:	4680      	mov	r8, r0
 800107e:	4319      	orrs	r1, r3
 8001080:	428a      	cmp	r2, r1
 8001082:	d909      	bls.n	8001098 <__aeabi_ddiv+0x28c>
 8001084:	9f00      	ldr	r7, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	46bc      	mov	ip, r7
 800108a:	425b      	negs	r3, r3
 800108c:	4461      	add	r1, ip
 800108e:	469c      	mov	ip, r3
 8001090:	44e0      	add	r8, ip
 8001092:	428f      	cmp	r7, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x28c>
 8001096:	e15c      	b.n	8001352 <__aeabi_ddiv+0x546>
 8001098:	1a88      	subs	r0, r1, r2
 800109a:	9902      	ldr	r1, [sp, #8]
 800109c:	f7ff f8d6 	bl	800024c <__aeabi_uidivmod>
 80010a0:	9a03      	ldr	r2, [sp, #12]
 80010a2:	0424      	lsls	r4, r4, #16
 80010a4:	4342      	muls	r2, r0
 80010a6:	0409      	lsls	r1, r1, #16
 80010a8:	0c24      	lsrs	r4, r4, #16
 80010aa:	0003      	movs	r3, r0
 80010ac:	430c      	orrs	r4, r1
 80010ae:	42a2      	cmp	r2, r4
 80010b0:	d906      	bls.n	80010c0 <__aeabi_ddiv+0x2b4>
 80010b2:	9900      	ldr	r1, [sp, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	468c      	mov	ip, r1
 80010b8:	4464      	add	r4, ip
 80010ba:	42a1      	cmp	r1, r4
 80010bc:	d800      	bhi.n	80010c0 <__aeabi_ddiv+0x2b4>
 80010be:	e142      	b.n	8001346 <__aeabi_ddiv+0x53a>
 80010c0:	1aa0      	subs	r0, r4, r2
 80010c2:	4642      	mov	r2, r8
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	431a      	orrs	r2, r3
 80010c8:	4693      	mov	fp, r2
 80010ca:	464b      	mov	r3, r9
 80010cc:	4659      	mov	r1, fp
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	001f      	movs	r7, r3
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	040b      	lsls	r3, r1, #16
 80010d6:	4649      	mov	r1, r9
 80010d8:	0409      	lsls	r1, r1, #16
 80010da:	0c09      	lsrs	r1, r1, #16
 80010dc:	000c      	movs	r4, r1
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	435c      	muls	r4, r3
 80010e2:	0c12      	lsrs	r2, r2, #16
 80010e4:	437b      	muls	r3, r7
 80010e6:	4688      	mov	r8, r1
 80010e8:	4351      	muls	r1, r2
 80010ea:	437a      	muls	r2, r7
 80010ec:	0c27      	lsrs	r7, r4, #16
 80010ee:	46bc      	mov	ip, r7
 80010f0:	185b      	adds	r3, r3, r1
 80010f2:	4463      	add	r3, ip
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d903      	bls.n	8001100 <__aeabi_ddiv+0x2f4>
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	0249      	lsls	r1, r1, #9
 80010fc:	468c      	mov	ip, r1
 80010fe:	4462      	add	r2, ip
 8001100:	0c19      	lsrs	r1, r3, #16
 8001102:	0424      	lsls	r4, r4, #16
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	0c24      	lsrs	r4, r4, #16
 8001108:	188a      	adds	r2, r1, r2
 800110a:	191c      	adds	r4, r3, r4
 800110c:	4290      	cmp	r0, r2
 800110e:	d302      	bcc.n	8001116 <__aeabi_ddiv+0x30a>
 8001110:	d116      	bne.n	8001140 <__aeabi_ddiv+0x334>
 8001112:	42a5      	cmp	r5, r4
 8001114:	d214      	bcs.n	8001140 <__aeabi_ddiv+0x334>
 8001116:	465b      	mov	r3, fp
 8001118:	9f00      	ldr	r7, [sp, #0]
 800111a:	3b01      	subs	r3, #1
 800111c:	444d      	add	r5, r9
 800111e:	9305      	str	r3, [sp, #20]
 8001120:	454d      	cmp	r5, r9
 8001122:	419b      	sbcs	r3, r3
 8001124:	46bc      	mov	ip, r7
 8001126:	425b      	negs	r3, r3
 8001128:	4463      	add	r3, ip
 800112a:	18c0      	adds	r0, r0, r3
 800112c:	4287      	cmp	r7, r0
 800112e:	d300      	bcc.n	8001132 <__aeabi_ddiv+0x326>
 8001130:	e102      	b.n	8001338 <__aeabi_ddiv+0x52c>
 8001132:	4282      	cmp	r2, r0
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x32c>
 8001136:	e129      	b.n	800138c <__aeabi_ddiv+0x580>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x330>
 800113a:	e124      	b.n	8001386 <__aeabi_ddiv+0x57a>
 800113c:	9b05      	ldr	r3, [sp, #20]
 800113e:	469b      	mov	fp, r3
 8001140:	1b2c      	subs	r4, r5, r4
 8001142:	42a5      	cmp	r5, r4
 8001144:	41ad      	sbcs	r5, r5
 8001146:	9b00      	ldr	r3, [sp, #0]
 8001148:	1a80      	subs	r0, r0, r2
 800114a:	426d      	negs	r5, r5
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	4283      	cmp	r3, r0
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x348>
 8001152:	e10f      	b.n	8001374 <__aeabi_ddiv+0x568>
 8001154:	9902      	ldr	r1, [sp, #8]
 8001156:	f7ff f879 	bl	800024c <__aeabi_uidivmod>
 800115a:	9a03      	ldr	r2, [sp, #12]
 800115c:	040b      	lsls	r3, r1, #16
 800115e:	4342      	muls	r2, r0
 8001160:	0c21      	lsrs	r1, r4, #16
 8001162:	0005      	movs	r5, r0
 8001164:	4319      	orrs	r1, r3
 8001166:	428a      	cmp	r2, r1
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x360>
 800116a:	e0cb      	b.n	8001304 <__aeabi_ddiv+0x4f8>
 800116c:	1a88      	subs	r0, r1, r2
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	f7ff f86c 	bl	800024c <__aeabi_uidivmod>
 8001174:	9a03      	ldr	r2, [sp, #12]
 8001176:	0424      	lsls	r4, r4, #16
 8001178:	4342      	muls	r2, r0
 800117a:	0409      	lsls	r1, r1, #16
 800117c:	0c24      	lsrs	r4, r4, #16
 800117e:	0003      	movs	r3, r0
 8001180:	430c      	orrs	r4, r1
 8001182:	42a2      	cmp	r2, r4
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x37c>
 8001186:	e0ca      	b.n	800131e <__aeabi_ddiv+0x512>
 8001188:	4641      	mov	r1, r8
 800118a:	1aa4      	subs	r4, r4, r2
 800118c:	042a      	lsls	r2, r5, #16
 800118e:	431a      	orrs	r2, r3
 8001190:	9f04      	ldr	r7, [sp, #16]
 8001192:	0413      	lsls	r3, r2, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	4359      	muls	r1, r3
 8001198:	4640      	mov	r0, r8
 800119a:	437b      	muls	r3, r7
 800119c:	469c      	mov	ip, r3
 800119e:	0c15      	lsrs	r5, r2, #16
 80011a0:	4368      	muls	r0, r5
 80011a2:	0c0b      	lsrs	r3, r1, #16
 80011a4:	4484      	add	ip, r0
 80011a6:	4463      	add	r3, ip
 80011a8:	437d      	muls	r5, r7
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d903      	bls.n	80011b6 <__aeabi_ddiv+0x3aa>
 80011ae:	2080      	movs	r0, #128	@ 0x80
 80011b0:	0240      	lsls	r0, r0, #9
 80011b2:	4684      	mov	ip, r0
 80011b4:	4465      	add	r5, ip
 80011b6:	0c18      	lsrs	r0, r3, #16
 80011b8:	0409      	lsls	r1, r1, #16
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	0c09      	lsrs	r1, r1, #16
 80011be:	1940      	adds	r0, r0, r5
 80011c0:	185b      	adds	r3, r3, r1
 80011c2:	4284      	cmp	r4, r0
 80011c4:	d327      	bcc.n	8001216 <__aeabi_ddiv+0x40a>
 80011c6:	d023      	beq.n	8001210 <__aeabi_ddiv+0x404>
 80011c8:	2301      	movs	r3, #1
 80011ca:	0035      	movs	r5, r6
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b94      	ldr	r3, [pc, #592]	@ (8001420 <__aeabi_ddiv+0x614>)
 80011d0:	4453      	add	r3, sl
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dd60      	ble.n	8001298 <__aeabi_ddiv+0x48c>
 80011d6:	0751      	lsls	r1, r2, #29
 80011d8:	d000      	beq.n	80011dc <__aeabi_ddiv+0x3d0>
 80011da:	e086      	b.n	80012ea <__aeabi_ddiv+0x4de>
 80011dc:	002e      	movs	r6, r5
 80011de:	08d1      	lsrs	r1, r2, #3
 80011e0:	465a      	mov	r2, fp
 80011e2:	01d2      	lsls	r2, r2, #7
 80011e4:	d506      	bpl.n	80011f4 <__aeabi_ddiv+0x3e8>
 80011e6:	465a      	mov	r2, fp
 80011e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001424 <__aeabi_ddiv+0x618>)
 80011ea:	401a      	ands	r2, r3
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	4693      	mov	fp, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4453      	add	r3, sl
 80011f4:	4a8c      	ldr	r2, [pc, #560]	@ (8001428 <__aeabi_ddiv+0x61c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	dd00      	ble.n	80011fc <__aeabi_ddiv+0x3f0>
 80011fa:	e680      	b.n	8000efe <__aeabi_ddiv+0xf2>
 80011fc:	465a      	mov	r2, fp
 80011fe:	0752      	lsls	r2, r2, #29
 8001200:	430a      	orrs	r2, r1
 8001202:	4690      	mov	r8, r2
 8001204:	465a      	mov	r2, fp
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	0254      	lsls	r4, r2, #9
 800120a:	0b24      	lsrs	r4, r4, #12
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	e669      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001210:	0035      	movs	r5, r6
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0db      	beq.n	80011ce <__aeabi_ddiv+0x3c2>
 8001216:	9d00      	ldr	r5, [sp, #0]
 8001218:	1e51      	subs	r1, r2, #1
 800121a:	46ac      	mov	ip, r5
 800121c:	4464      	add	r4, ip
 800121e:	42ac      	cmp	r4, r5
 8001220:	d200      	bcs.n	8001224 <__aeabi_ddiv+0x418>
 8001222:	e09e      	b.n	8001362 <__aeabi_ddiv+0x556>
 8001224:	4284      	cmp	r4, r0
 8001226:	d200      	bcs.n	800122a <__aeabi_ddiv+0x41e>
 8001228:	e0e1      	b.n	80013ee <__aeabi_ddiv+0x5e2>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x422>
 800122c:	e0ee      	b.n	800140c <__aeabi_ddiv+0x600>
 800122e:	000a      	movs	r2, r1
 8001230:	e7ca      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 8001232:	4542      	cmp	r2, r8
 8001234:	d900      	bls.n	8001238 <__aeabi_ddiv+0x42c>
 8001236:	e708      	b.n	800104a <__aeabi_ddiv+0x23e>
 8001238:	464b      	mov	r3, r9
 800123a:	07dc      	lsls	r4, r3, #31
 800123c:	0858      	lsrs	r0, r3, #1
 800123e:	4643      	mov	r3, r8
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	431c      	orrs	r4, r3
 8001244:	4643      	mov	r3, r8
 8001246:	07dd      	lsls	r5, r3, #31
 8001248:	e706      	b.n	8001058 <__aeabi_ddiv+0x24c>
 800124a:	f001 f9b9 	bl	80025c0 <__clzsi2>
 800124e:	2315      	movs	r3, #21
 8001250:	469c      	mov	ip, r3
 8001252:	4484      	add	ip, r0
 8001254:	0002      	movs	r2, r0
 8001256:	4663      	mov	r3, ip
 8001258:	3220      	adds	r2, #32
 800125a:	2b1c      	cmp	r3, #28
 800125c:	dc00      	bgt.n	8001260 <__aeabi_ddiv+0x454>
 800125e:	e692      	b.n	8000f86 <__aeabi_ddiv+0x17a>
 8001260:	0023      	movs	r3, r4
 8001262:	3808      	subs	r0, #8
 8001264:	4083      	lsls	r3, r0
 8001266:	4699      	mov	r9, r3
 8001268:	2300      	movs	r3, #0
 800126a:	4698      	mov	r8, r3
 800126c:	e69a      	b.n	8000fa4 <__aeabi_ddiv+0x198>
 800126e:	f001 f9a7 	bl	80025c0 <__clzsi2>
 8001272:	0002      	movs	r2, r0
 8001274:	0003      	movs	r3, r0
 8001276:	3215      	adds	r2, #21
 8001278:	3320      	adds	r3, #32
 800127a:	2a1c      	cmp	r2, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x474>
 800127e:	e65f      	b.n	8000f40 <__aeabi_ddiv+0x134>
 8001280:	9900      	ldr	r1, [sp, #0]
 8001282:	3808      	subs	r0, #8
 8001284:	4081      	lsls	r1, r0
 8001286:	2200      	movs	r2, #0
 8001288:	468b      	mov	fp, r1
 800128a:	e666      	b.n	8000f5a <__aeabi_ddiv+0x14e>
 800128c:	2200      	movs	r2, #0
 800128e:	002e      	movs	r6, r5
 8001290:	2400      	movs	r4, #0
 8001292:	4690      	mov	r8, r2
 8001294:	4b65      	ldr	r3, [pc, #404]	@ (800142c <__aeabi_ddiv+0x620>)
 8001296:	e625      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 8001298:	002e      	movs	r6, r5
 800129a:	2101      	movs	r1, #1
 800129c:	1ac9      	subs	r1, r1, r3
 800129e:	2938      	cmp	r1, #56	@ 0x38
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_ddiv+0x498>
 80012a2:	e61b      	b.n	8000edc <__aeabi_ddiv+0xd0>
 80012a4:	291f      	cmp	r1, #31
 80012a6:	dc7e      	bgt.n	80013a6 <__aeabi_ddiv+0x59a>
 80012a8:	4861      	ldr	r0, [pc, #388]	@ (8001430 <__aeabi_ddiv+0x624>)
 80012aa:	0014      	movs	r4, r2
 80012ac:	4450      	add	r0, sl
 80012ae:	465b      	mov	r3, fp
 80012b0:	4082      	lsls	r2, r0
 80012b2:	4083      	lsls	r3, r0
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	1e50      	subs	r0, r2, #1
 80012b8:	4182      	sbcs	r2, r0
 80012ba:	4323      	orrs	r3, r4
 80012bc:	431a      	orrs	r2, r3
 80012be:	465b      	mov	r3, fp
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	0751      	lsls	r1, r2, #29
 80012c4:	d009      	beq.n	80012da <__aeabi_ddiv+0x4ce>
 80012c6:	210f      	movs	r1, #15
 80012c8:	4011      	ands	r1, r2
 80012ca:	2904      	cmp	r1, #4
 80012cc:	d005      	beq.n	80012da <__aeabi_ddiv+0x4ce>
 80012ce:	1d11      	adds	r1, r2, #4
 80012d0:	4291      	cmp	r1, r2
 80012d2:	4192      	sbcs	r2, r2
 80012d4:	4252      	negs	r2, r2
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	000a      	movs	r2, r1
 80012da:	0219      	lsls	r1, r3, #8
 80012dc:	d400      	bmi.n	80012e0 <__aeabi_ddiv+0x4d4>
 80012de:	e09b      	b.n	8001418 <__aeabi_ddiv+0x60c>
 80012e0:	2200      	movs	r2, #0
 80012e2:	2301      	movs	r3, #1
 80012e4:	2400      	movs	r4, #0
 80012e6:	4690      	mov	r8, r2
 80012e8:	e5fc      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 80012ea:	210f      	movs	r1, #15
 80012ec:	4011      	ands	r1, r2
 80012ee:	2904      	cmp	r1, #4
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x4e8>
 80012f2:	e773      	b.n	80011dc <__aeabi_ddiv+0x3d0>
 80012f4:	1d11      	adds	r1, r2, #4
 80012f6:	4291      	cmp	r1, r2
 80012f8:	4192      	sbcs	r2, r2
 80012fa:	4252      	negs	r2, r2
 80012fc:	002e      	movs	r6, r5
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	4493      	add	fp, r2
 8001302:	e76d      	b.n	80011e0 <__aeabi_ddiv+0x3d4>
 8001304:	9b00      	ldr	r3, [sp, #0]
 8001306:	3d01      	subs	r5, #1
 8001308:	469c      	mov	ip, r3
 800130a:	4461      	add	r1, ip
 800130c:	428b      	cmp	r3, r1
 800130e:	d900      	bls.n	8001312 <__aeabi_ddiv+0x506>
 8001310:	e72c      	b.n	800116c <__aeabi_ddiv+0x360>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x50c>
 8001316:	e729      	b.n	800116c <__aeabi_ddiv+0x360>
 8001318:	1e85      	subs	r5, r0, #2
 800131a:	4461      	add	r1, ip
 800131c:	e726      	b.n	800116c <__aeabi_ddiv+0x360>
 800131e:	9900      	ldr	r1, [sp, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	468c      	mov	ip, r1
 8001324:	4464      	add	r4, ip
 8001326:	42a1      	cmp	r1, r4
 8001328:	d900      	bls.n	800132c <__aeabi_ddiv+0x520>
 800132a:	e72d      	b.n	8001188 <__aeabi_ddiv+0x37c>
 800132c:	42a2      	cmp	r2, r4
 800132e:	d800      	bhi.n	8001332 <__aeabi_ddiv+0x526>
 8001330:	e72a      	b.n	8001188 <__aeabi_ddiv+0x37c>
 8001332:	1e83      	subs	r3, r0, #2
 8001334:	4464      	add	r4, ip
 8001336:	e727      	b.n	8001188 <__aeabi_ddiv+0x37c>
 8001338:	4287      	cmp	r7, r0
 800133a:	d000      	beq.n	800133e <__aeabi_ddiv+0x532>
 800133c:	e6fe      	b.n	800113c <__aeabi_ddiv+0x330>
 800133e:	45a9      	cmp	r9, r5
 8001340:	d900      	bls.n	8001344 <__aeabi_ddiv+0x538>
 8001342:	e6fb      	b.n	800113c <__aeabi_ddiv+0x330>
 8001344:	e6f5      	b.n	8001132 <__aeabi_ddiv+0x326>
 8001346:	42a2      	cmp	r2, r4
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x540>
 800134a:	e6b9      	b.n	80010c0 <__aeabi_ddiv+0x2b4>
 800134c:	1e83      	subs	r3, r0, #2
 800134e:	4464      	add	r4, ip
 8001350:	e6b6      	b.n	80010c0 <__aeabi_ddiv+0x2b4>
 8001352:	428a      	cmp	r2, r1
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x54c>
 8001356:	e69f      	b.n	8001098 <__aeabi_ddiv+0x28c>
 8001358:	46bc      	mov	ip, r7
 800135a:	1e83      	subs	r3, r0, #2
 800135c:	4698      	mov	r8, r3
 800135e:	4461      	add	r1, ip
 8001360:	e69a      	b.n	8001098 <__aeabi_ddiv+0x28c>
 8001362:	000a      	movs	r2, r1
 8001364:	4284      	cmp	r4, r0
 8001366:	d000      	beq.n	800136a <__aeabi_ddiv+0x55e>
 8001368:	e72e      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 800136a:	454b      	cmp	r3, r9
 800136c:	d000      	beq.n	8001370 <__aeabi_ddiv+0x564>
 800136e:	e72b      	b.n	80011c8 <__aeabi_ddiv+0x3bc>
 8001370:	0035      	movs	r5, r6
 8001372:	e72c      	b.n	80011ce <__aeabi_ddiv+0x3c2>
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <__aeabi_ddiv+0x614>)
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <__aeabi_ddiv+0x628>)
 8001378:	4453      	add	r3, sl
 800137a:	4592      	cmp	sl, r2
 800137c:	db43      	blt.n	8001406 <__aeabi_ddiv+0x5fa>
 800137e:	2201      	movs	r2, #1
 8001380:	2100      	movs	r1, #0
 8001382:	4493      	add	fp, r2
 8001384:	e72c      	b.n	80011e0 <__aeabi_ddiv+0x3d4>
 8001386:	42ac      	cmp	r4, r5
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x580>
 800138a:	e6d7      	b.n	800113c <__aeabi_ddiv+0x330>
 800138c:	2302      	movs	r3, #2
 800138e:	425b      	negs	r3, r3
 8001390:	469c      	mov	ip, r3
 8001392:	9900      	ldr	r1, [sp, #0]
 8001394:	444d      	add	r5, r9
 8001396:	454d      	cmp	r5, r9
 8001398:	419b      	sbcs	r3, r3
 800139a:	44e3      	add	fp, ip
 800139c:	468c      	mov	ip, r1
 800139e:	425b      	negs	r3, r3
 80013a0:	4463      	add	r3, ip
 80013a2:	18c0      	adds	r0, r0, r3
 80013a4:	e6cc      	b.n	8001140 <__aeabi_ddiv+0x334>
 80013a6:	201f      	movs	r0, #31
 80013a8:	4240      	negs	r0, r0
 80013aa:	1ac3      	subs	r3, r0, r3
 80013ac:	4658      	mov	r0, fp
 80013ae:	40d8      	lsrs	r0, r3
 80013b0:	2920      	cmp	r1, #32
 80013b2:	d004      	beq.n	80013be <__aeabi_ddiv+0x5b2>
 80013b4:	4659      	mov	r1, fp
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <__aeabi_ddiv+0x62c>)
 80013b8:	4453      	add	r3, sl
 80013ba:	4099      	lsls	r1, r3
 80013bc:	430a      	orrs	r2, r1
 80013be:	1e53      	subs	r3, r2, #1
 80013c0:	419a      	sbcs	r2, r3
 80013c2:	2307      	movs	r3, #7
 80013c4:	0019      	movs	r1, r3
 80013c6:	4302      	orrs	r2, r0
 80013c8:	2400      	movs	r4, #0
 80013ca:	4011      	ands	r1, r2
 80013cc:	4213      	tst	r3, r2
 80013ce:	d009      	beq.n	80013e4 <__aeabi_ddiv+0x5d8>
 80013d0:	3308      	adds	r3, #8
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d01d      	beq.n	8001414 <__aeabi_ddiv+0x608>
 80013d8:	1d13      	adds	r3, r2, #4
 80013da:	4293      	cmp	r3, r2
 80013dc:	4189      	sbcs	r1, r1
 80013de:	001a      	movs	r2, r3
 80013e0:	4249      	negs	r1, r1
 80013e2:	0749      	lsls	r1, r1, #29
 80013e4:	08d2      	lsrs	r2, r2, #3
 80013e6:	430a      	orrs	r2, r1
 80013e8:	4690      	mov	r8, r2
 80013ea:	2300      	movs	r3, #0
 80013ec:	e57a      	b.n	8000ee4 <__aeabi_ddiv+0xd8>
 80013ee:	4649      	mov	r1, r9
 80013f0:	9f00      	ldr	r7, [sp, #0]
 80013f2:	004d      	lsls	r5, r1, #1
 80013f4:	454d      	cmp	r5, r9
 80013f6:	4189      	sbcs	r1, r1
 80013f8:	46bc      	mov	ip, r7
 80013fa:	4249      	negs	r1, r1
 80013fc:	4461      	add	r1, ip
 80013fe:	46a9      	mov	r9, r5
 8001400:	3a02      	subs	r2, #2
 8001402:	1864      	adds	r4, r4, r1
 8001404:	e7ae      	b.n	8001364 <__aeabi_ddiv+0x558>
 8001406:	2201      	movs	r2, #1
 8001408:	4252      	negs	r2, r2
 800140a:	e746      	b.n	800129a <__aeabi_ddiv+0x48e>
 800140c:	4599      	cmp	r9, r3
 800140e:	d3ee      	bcc.n	80013ee <__aeabi_ddiv+0x5e2>
 8001410:	000a      	movs	r2, r1
 8001412:	e7aa      	b.n	800136a <__aeabi_ddiv+0x55e>
 8001414:	2100      	movs	r1, #0
 8001416:	e7e5      	b.n	80013e4 <__aeabi_ddiv+0x5d8>
 8001418:	0759      	lsls	r1, r3, #29
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	0b1c      	lsrs	r4, r3, #12
 800141e:	e7e1      	b.n	80013e4 <__aeabi_ddiv+0x5d8>
 8001420:	000003ff 	.word	0x000003ff
 8001424:	feffffff 	.word	0xfeffffff
 8001428:	000007fe 	.word	0x000007fe
 800142c:	000007ff 	.word	0x000007ff
 8001430:	0000041e 	.word	0x0000041e
 8001434:	fffffc02 	.word	0xfffffc02
 8001438:	0000043e 	.word	0x0000043e

0800143c <__eqdf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4657      	mov	r7, sl
 8001440:	46de      	mov	lr, fp
 8001442:	464e      	mov	r6, r9
 8001444:	4645      	mov	r5, r8
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	000d      	movs	r5, r1
 800144a:	0004      	movs	r4, r0
 800144c:	0fe8      	lsrs	r0, r5, #31
 800144e:	4683      	mov	fp, r0
 8001450:	0309      	lsls	r1, r1, #12
 8001452:	0fd8      	lsrs	r0, r3, #31
 8001454:	0b09      	lsrs	r1, r1, #12
 8001456:	4682      	mov	sl, r0
 8001458:	4819      	ldr	r0, [pc, #100]	@ (80014c0 <__eqdf2+0x84>)
 800145a:	468c      	mov	ip, r1
 800145c:	031f      	lsls	r7, r3, #12
 800145e:	0069      	lsls	r1, r5, #1
 8001460:	005e      	lsls	r6, r3, #1
 8001462:	0d49      	lsrs	r1, r1, #21
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d76      	lsrs	r6, r6, #21
 8001468:	4281      	cmp	r1, r0
 800146a:	d018      	beq.n	800149e <__eqdf2+0x62>
 800146c:	4286      	cmp	r6, r0
 800146e:	d00f      	beq.n	8001490 <__eqdf2+0x54>
 8001470:	2001      	movs	r0, #1
 8001472:	42b1      	cmp	r1, r6
 8001474:	d10d      	bne.n	8001492 <__eqdf2+0x56>
 8001476:	45bc      	cmp	ip, r7
 8001478:	d10b      	bne.n	8001492 <__eqdf2+0x56>
 800147a:	4294      	cmp	r4, r2
 800147c:	d109      	bne.n	8001492 <__eqdf2+0x56>
 800147e:	45d3      	cmp	fp, sl
 8001480:	d01c      	beq.n	80014bc <__eqdf2+0x80>
 8001482:	2900      	cmp	r1, #0
 8001484:	d105      	bne.n	8001492 <__eqdf2+0x56>
 8001486:	4660      	mov	r0, ip
 8001488:	4320      	orrs	r0, r4
 800148a:	1e43      	subs	r3, r0, #1
 800148c:	4198      	sbcs	r0, r3
 800148e:	e000      	b.n	8001492 <__eqdf2+0x56>
 8001490:	2001      	movs	r0, #1
 8001492:	bcf0      	pop	{r4, r5, r6, r7}
 8001494:	46bb      	mov	fp, r7
 8001496:	46b2      	mov	sl, r6
 8001498:	46a9      	mov	r9, r5
 800149a:	46a0      	mov	r8, r4
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	2001      	movs	r0, #1
 80014a0:	428e      	cmp	r6, r1
 80014a2:	d1f6      	bne.n	8001492 <__eqdf2+0x56>
 80014a4:	4661      	mov	r1, ip
 80014a6:	4339      	orrs	r1, r7
 80014a8:	000f      	movs	r7, r1
 80014aa:	4317      	orrs	r7, r2
 80014ac:	4327      	orrs	r7, r4
 80014ae:	d1f0      	bne.n	8001492 <__eqdf2+0x56>
 80014b0:	465b      	mov	r3, fp
 80014b2:	4652      	mov	r2, sl
 80014b4:	1a98      	subs	r0, r3, r2
 80014b6:	1e43      	subs	r3, r0, #1
 80014b8:	4198      	sbcs	r0, r3
 80014ba:	e7ea      	b.n	8001492 <__eqdf2+0x56>
 80014bc:	2000      	movs	r0, #0
 80014be:	e7e8      	b.n	8001492 <__eqdf2+0x56>
 80014c0:	000007ff 	.word	0x000007ff

080014c4 <__gedf2>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	4657      	mov	r7, sl
 80014c8:	464e      	mov	r6, r9
 80014ca:	4645      	mov	r5, r8
 80014cc:	46de      	mov	lr, fp
 80014ce:	b5e0      	push	{r5, r6, r7, lr}
 80014d0:	000d      	movs	r5, r1
 80014d2:	030e      	lsls	r6, r1, #12
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	0d49      	lsrs	r1, r1, #21
 80014d8:	468a      	mov	sl, r1
 80014da:	0fdf      	lsrs	r7, r3, #31
 80014dc:	0fe9      	lsrs	r1, r5, #31
 80014de:	46bc      	mov	ip, r7
 80014e0:	b083      	sub	sp, #12
 80014e2:	4f2f      	ldr	r7, [pc, #188]	@ (80015a0 <__gedf2+0xdc>)
 80014e4:	0004      	movs	r4, r0
 80014e6:	4680      	mov	r8, r0
 80014e8:	9101      	str	r1, [sp, #4]
 80014ea:	0058      	lsls	r0, r3, #1
 80014ec:	0319      	lsls	r1, r3, #12
 80014ee:	4691      	mov	r9, r2
 80014f0:	0b36      	lsrs	r6, r6, #12
 80014f2:	0b09      	lsrs	r1, r1, #12
 80014f4:	0d40      	lsrs	r0, r0, #21
 80014f6:	45ba      	cmp	sl, r7
 80014f8:	d01d      	beq.n	8001536 <__gedf2+0x72>
 80014fa:	42b8      	cmp	r0, r7
 80014fc:	d00d      	beq.n	800151a <__gedf2+0x56>
 80014fe:	4657      	mov	r7, sl
 8001500:	2f00      	cmp	r7, #0
 8001502:	d12a      	bne.n	800155a <__gedf2+0x96>
 8001504:	4334      	orrs	r4, r6
 8001506:	2800      	cmp	r0, #0
 8001508:	d124      	bne.n	8001554 <__gedf2+0x90>
 800150a:	430a      	orrs	r2, r1
 800150c:	d036      	beq.n	800157c <__gedf2+0xb8>
 800150e:	2c00      	cmp	r4, #0
 8001510:	d141      	bne.n	8001596 <__gedf2+0xd2>
 8001512:	4663      	mov	r3, ip
 8001514:	0058      	lsls	r0, r3, #1
 8001516:	3801      	subs	r0, #1
 8001518:	e015      	b.n	8001546 <__gedf2+0x82>
 800151a:	4311      	orrs	r1, r2
 800151c:	d138      	bne.n	8001590 <__gedf2+0xcc>
 800151e:	4653      	mov	r3, sl
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <__gedf2+0x64>
 8001524:	4326      	orrs	r6, r4
 8001526:	d0f4      	beq.n	8001512 <__gedf2+0x4e>
 8001528:	9b01      	ldr	r3, [sp, #4]
 800152a:	4563      	cmp	r3, ip
 800152c:	d107      	bne.n	800153e <__gedf2+0x7a>
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	0058      	lsls	r0, r3, #1
 8001532:	3801      	subs	r0, #1
 8001534:	e007      	b.n	8001546 <__gedf2+0x82>
 8001536:	4326      	orrs	r6, r4
 8001538:	d12a      	bne.n	8001590 <__gedf2+0xcc>
 800153a:	4550      	cmp	r0, sl
 800153c:	d021      	beq.n	8001582 <__gedf2+0xbe>
 800153e:	2001      	movs	r0, #1
 8001540:	9b01      	ldr	r3, [sp, #4]
 8001542:	425f      	negs	r7, r3
 8001544:	4338      	orrs	r0, r7
 8001546:	b003      	add	sp, #12
 8001548:	bcf0      	pop	{r4, r5, r6, r7}
 800154a:	46bb      	mov	fp, r7
 800154c:	46b2      	mov	sl, r6
 800154e:	46a9      	mov	r9, r5
 8001550:	46a0      	mov	r8, r4
 8001552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0dc      	beq.n	8001512 <__gedf2+0x4e>
 8001558:	e7e6      	b.n	8001528 <__gedf2+0x64>
 800155a:	2800      	cmp	r0, #0
 800155c:	d0ef      	beq.n	800153e <__gedf2+0x7a>
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	4563      	cmp	r3, ip
 8001562:	d1ec      	bne.n	800153e <__gedf2+0x7a>
 8001564:	4582      	cmp	sl, r0
 8001566:	dcea      	bgt.n	800153e <__gedf2+0x7a>
 8001568:	dbe1      	blt.n	800152e <__gedf2+0x6a>
 800156a:	428e      	cmp	r6, r1
 800156c:	d8e7      	bhi.n	800153e <__gedf2+0x7a>
 800156e:	d1de      	bne.n	800152e <__gedf2+0x6a>
 8001570:	45c8      	cmp	r8, r9
 8001572:	d8e4      	bhi.n	800153e <__gedf2+0x7a>
 8001574:	2000      	movs	r0, #0
 8001576:	45c8      	cmp	r8, r9
 8001578:	d2e5      	bcs.n	8001546 <__gedf2+0x82>
 800157a:	e7d8      	b.n	800152e <__gedf2+0x6a>
 800157c:	2c00      	cmp	r4, #0
 800157e:	d0e2      	beq.n	8001546 <__gedf2+0x82>
 8001580:	e7dd      	b.n	800153e <__gedf2+0x7a>
 8001582:	4311      	orrs	r1, r2
 8001584:	d104      	bne.n	8001590 <__gedf2+0xcc>
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	4563      	cmp	r3, ip
 800158a:	d1d8      	bne.n	800153e <__gedf2+0x7a>
 800158c:	2000      	movs	r0, #0
 800158e:	e7da      	b.n	8001546 <__gedf2+0x82>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7d7      	b.n	8001546 <__gedf2+0x82>
 8001596:	9b01      	ldr	r3, [sp, #4]
 8001598:	4563      	cmp	r3, ip
 800159a:	d0e6      	beq.n	800156a <__gedf2+0xa6>
 800159c:	e7cf      	b.n	800153e <__gedf2+0x7a>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4657      	mov	r7, sl
 80015a8:	464e      	mov	r6, r9
 80015aa:	4645      	mov	r5, r8
 80015ac:	46de      	mov	lr, fp
 80015ae:	b5e0      	push	{r5, r6, r7, lr}
 80015b0:	000d      	movs	r5, r1
 80015b2:	030e      	lsls	r6, r1, #12
 80015b4:	0049      	lsls	r1, r1, #1
 80015b6:	0d49      	lsrs	r1, r1, #21
 80015b8:	468a      	mov	sl, r1
 80015ba:	0fdf      	lsrs	r7, r3, #31
 80015bc:	0fe9      	lsrs	r1, r5, #31
 80015be:	46bc      	mov	ip, r7
 80015c0:	b083      	sub	sp, #12
 80015c2:	4f2e      	ldr	r7, [pc, #184]	@ (800167c <__ledf2+0xd8>)
 80015c4:	0004      	movs	r4, r0
 80015c6:	4680      	mov	r8, r0
 80015c8:	9101      	str	r1, [sp, #4]
 80015ca:	0058      	lsls	r0, r3, #1
 80015cc:	0319      	lsls	r1, r3, #12
 80015ce:	4691      	mov	r9, r2
 80015d0:	0b36      	lsrs	r6, r6, #12
 80015d2:	0b09      	lsrs	r1, r1, #12
 80015d4:	0d40      	lsrs	r0, r0, #21
 80015d6:	45ba      	cmp	sl, r7
 80015d8:	d01e      	beq.n	8001618 <__ledf2+0x74>
 80015da:	42b8      	cmp	r0, r7
 80015dc:	d00d      	beq.n	80015fa <__ledf2+0x56>
 80015de:	4657      	mov	r7, sl
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	d127      	bne.n	8001634 <__ledf2+0x90>
 80015e4:	4334      	orrs	r4, r6
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d133      	bne.n	8001652 <__ledf2+0xae>
 80015ea:	430a      	orrs	r2, r1
 80015ec:	d034      	beq.n	8001658 <__ledf2+0xb4>
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d140      	bne.n	8001674 <__ledf2+0xd0>
 80015f2:	4663      	mov	r3, ip
 80015f4:	0058      	lsls	r0, r3, #1
 80015f6:	3801      	subs	r0, #1
 80015f8:	e015      	b.n	8001626 <__ledf2+0x82>
 80015fa:	4311      	orrs	r1, r2
 80015fc:	d112      	bne.n	8001624 <__ledf2+0x80>
 80015fe:	4653      	mov	r3, sl
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <__ledf2+0x64>
 8001604:	4326      	orrs	r6, r4
 8001606:	d0f4      	beq.n	80015f2 <__ledf2+0x4e>
 8001608:	9b01      	ldr	r3, [sp, #4]
 800160a:	4563      	cmp	r3, ip
 800160c:	d01d      	beq.n	800164a <__ledf2+0xa6>
 800160e:	2001      	movs	r0, #1
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	425f      	negs	r7, r3
 8001614:	4338      	orrs	r0, r7
 8001616:	e006      	b.n	8001626 <__ledf2+0x82>
 8001618:	4326      	orrs	r6, r4
 800161a:	d103      	bne.n	8001624 <__ledf2+0x80>
 800161c:	4550      	cmp	r0, sl
 800161e:	d1f6      	bne.n	800160e <__ledf2+0x6a>
 8001620:	4311      	orrs	r1, r2
 8001622:	d01c      	beq.n	800165e <__ledf2+0xba>
 8001624:	2002      	movs	r0, #2
 8001626:	b003      	add	sp, #12
 8001628:	bcf0      	pop	{r4, r5, r6, r7}
 800162a:	46bb      	mov	fp, r7
 800162c:	46b2      	mov	sl, r6
 800162e:	46a9      	mov	r9, r5
 8001630:	46a0      	mov	r8, r4
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001634:	2800      	cmp	r0, #0
 8001636:	d0ea      	beq.n	800160e <__ledf2+0x6a>
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	4563      	cmp	r3, ip
 800163c:	d1e7      	bne.n	800160e <__ledf2+0x6a>
 800163e:	4582      	cmp	sl, r0
 8001640:	dce5      	bgt.n	800160e <__ledf2+0x6a>
 8001642:	db02      	blt.n	800164a <__ledf2+0xa6>
 8001644:	428e      	cmp	r6, r1
 8001646:	d8e2      	bhi.n	800160e <__ledf2+0x6a>
 8001648:	d00e      	beq.n	8001668 <__ledf2+0xc4>
 800164a:	9b01      	ldr	r3, [sp, #4]
 800164c:	0058      	lsls	r0, r3, #1
 800164e:	3801      	subs	r0, #1
 8001650:	e7e9      	b.n	8001626 <__ledf2+0x82>
 8001652:	2c00      	cmp	r4, #0
 8001654:	d0cd      	beq.n	80015f2 <__ledf2+0x4e>
 8001656:	e7d7      	b.n	8001608 <__ledf2+0x64>
 8001658:	2c00      	cmp	r4, #0
 800165a:	d0e4      	beq.n	8001626 <__ledf2+0x82>
 800165c:	e7d7      	b.n	800160e <__ledf2+0x6a>
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	2000      	movs	r0, #0
 8001662:	4563      	cmp	r3, ip
 8001664:	d0df      	beq.n	8001626 <__ledf2+0x82>
 8001666:	e7d2      	b.n	800160e <__ledf2+0x6a>
 8001668:	45c8      	cmp	r8, r9
 800166a:	d8d0      	bhi.n	800160e <__ledf2+0x6a>
 800166c:	2000      	movs	r0, #0
 800166e:	45c8      	cmp	r8, r9
 8001670:	d2d9      	bcs.n	8001626 <__ledf2+0x82>
 8001672:	e7ea      	b.n	800164a <__ledf2+0xa6>
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	4563      	cmp	r3, ip
 8001678:	d0e4      	beq.n	8001644 <__ledf2+0xa0>
 800167a:	e7c8      	b.n	800160e <__ledf2+0x6a>
 800167c:	000007ff 	.word	0x000007ff

08001680 <__aeabi_dmul>:
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	4657      	mov	r7, sl
 8001684:	464e      	mov	r6, r9
 8001686:	46de      	mov	lr, fp
 8001688:	4645      	mov	r5, r8
 800168a:	b5e0      	push	{r5, r6, r7, lr}
 800168c:	001f      	movs	r7, r3
 800168e:	030b      	lsls	r3, r1, #12
 8001690:	0b1b      	lsrs	r3, r3, #12
 8001692:	0016      	movs	r6, r2
 8001694:	469a      	mov	sl, r3
 8001696:	0fca      	lsrs	r2, r1, #31
 8001698:	004b      	lsls	r3, r1, #1
 800169a:	0004      	movs	r4, r0
 800169c:	4691      	mov	r9, r2
 800169e:	b085      	sub	sp, #20
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x26>
 80016a4:	e1cf      	b.n	8001a46 <__aeabi_dmul+0x3c6>
 80016a6:	4acd      	ldr	r2, [pc, #820]	@ (80019dc <__aeabi_dmul+0x35c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d055      	beq.n	8001758 <__aeabi_dmul+0xd8>
 80016ac:	4651      	mov	r1, sl
 80016ae:	0f42      	lsrs	r2, r0, #29
 80016b0:	00c9      	lsls	r1, r1, #3
 80016b2:	430a      	orrs	r2, r1
 80016b4:	2180      	movs	r1, #128	@ 0x80
 80016b6:	0409      	lsls	r1, r1, #16
 80016b8:	4311      	orrs	r1, r2
 80016ba:	00c2      	lsls	r2, r0, #3
 80016bc:	4690      	mov	r8, r2
 80016be:	4ac8      	ldr	r2, [pc, #800]	@ (80019e0 <__aeabi_dmul+0x360>)
 80016c0:	468a      	mov	sl, r1
 80016c2:	4693      	mov	fp, r2
 80016c4:	449b      	add	fp, r3
 80016c6:	2300      	movs	r3, #0
 80016c8:	2500      	movs	r5, #0
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	033c      	lsls	r4, r7, #12
 80016ce:	007b      	lsls	r3, r7, #1
 80016d0:	0ffa      	lsrs	r2, r7, #31
 80016d2:	9601      	str	r6, [sp, #4]
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d5b      	lsrs	r3, r3, #21
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x5e>
 80016dc:	e188      	b.n	80019f0 <__aeabi_dmul+0x370>
 80016de:	4abf      	ldr	r2, [pc, #764]	@ (80019dc <__aeabi_dmul+0x35c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x66>
 80016e4:	e092      	b.n	800180c <__aeabi_dmul+0x18c>
 80016e6:	4abe      	ldr	r2, [pc, #760]	@ (80019e0 <__aeabi_dmul+0x360>)
 80016e8:	4694      	mov	ip, r2
 80016ea:	4463      	add	r3, ip
 80016ec:	449b      	add	fp, r3
 80016ee:	2d0a      	cmp	r5, #10
 80016f0:	dc42      	bgt.n	8001778 <__aeabi_dmul+0xf8>
 80016f2:	00e4      	lsls	r4, r4, #3
 80016f4:	0f73      	lsrs	r3, r6, #29
 80016f6:	4323      	orrs	r3, r4
 80016f8:	2480      	movs	r4, #128	@ 0x80
 80016fa:	4649      	mov	r1, r9
 80016fc:	0424      	lsls	r4, r4, #16
 80016fe:	431c      	orrs	r4, r3
 8001700:	00f3      	lsls	r3, r6, #3
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	9b00      	ldr	r3, [sp, #0]
 8001706:	2000      	movs	r0, #0
 8001708:	4059      	eors	r1, r3
 800170a:	b2cb      	uxtb	r3, r1
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	2d02      	cmp	r5, #2
 8001710:	dc00      	bgt.n	8001714 <__aeabi_dmul+0x94>
 8001712:	e094      	b.n	800183e <__aeabi_dmul+0x1be>
 8001714:	2301      	movs	r3, #1
 8001716:	40ab      	lsls	r3, r5
 8001718:	001d      	movs	r5, r3
 800171a:	23a6      	movs	r3, #166	@ 0xa6
 800171c:	002a      	movs	r2, r5
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	401a      	ands	r2, r3
 8001722:	421d      	tst	r5, r3
 8001724:	d000      	beq.n	8001728 <__aeabi_dmul+0xa8>
 8001726:	e229      	b.n	8001b7c <__aeabi_dmul+0x4fc>
 8001728:	2390      	movs	r3, #144	@ 0x90
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	421d      	tst	r5, r3
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0xb2>
 8001730:	e24d      	b.n	8001bce <__aeabi_dmul+0x54e>
 8001732:	2300      	movs	r3, #0
 8001734:	2480      	movs	r4, #128	@ 0x80
 8001736:	4699      	mov	r9, r3
 8001738:	0324      	lsls	r4, r4, #12
 800173a:	4ba8      	ldr	r3, [pc, #672]	@ (80019dc <__aeabi_dmul+0x35c>)
 800173c:	0010      	movs	r0, r2
 800173e:	464a      	mov	r2, r9
 8001740:	051b      	lsls	r3, r3, #20
 8001742:	4323      	orrs	r3, r4
 8001744:	07d2      	lsls	r2, r2, #31
 8001746:	4313      	orrs	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	b005      	add	sp, #20
 800174c:	bcf0      	pop	{r4, r5, r6, r7}
 800174e:	46bb      	mov	fp, r7
 8001750:	46b2      	mov	sl, r6
 8001752:	46a9      	mov	r9, r5
 8001754:	46a0      	mov	r8, r4
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001758:	4652      	mov	r2, sl
 800175a:	4302      	orrs	r2, r0
 800175c:	4690      	mov	r8, r2
 800175e:	d000      	beq.n	8001762 <__aeabi_dmul+0xe2>
 8001760:	e1ac      	b.n	8001abc <__aeabi_dmul+0x43c>
 8001762:	469b      	mov	fp, r3
 8001764:	2302      	movs	r3, #2
 8001766:	4692      	mov	sl, r2
 8001768:	2508      	movs	r5, #8
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	e7ae      	b.n	80016cc <__aeabi_dmul+0x4c>
 800176e:	9b00      	ldr	r3, [sp, #0]
 8001770:	46a2      	mov	sl, r4
 8001772:	4699      	mov	r9, r3
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	4698      	mov	r8, r3
 8001778:	9b02      	ldr	r3, [sp, #8]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d100      	bne.n	8001780 <__aeabi_dmul+0x100>
 800177e:	e1ca      	b.n	8001b16 <__aeabi_dmul+0x496>
 8001780:	2b03      	cmp	r3, #3
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x106>
 8001784:	e192      	b.n	8001aac <__aeabi_dmul+0x42c>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d110      	bne.n	80017ac <__aeabi_dmul+0x12c>
 800178a:	2300      	movs	r3, #0
 800178c:	2400      	movs	r4, #0
 800178e:	2200      	movs	r2, #0
 8001790:	e7d4      	b.n	800173c <__aeabi_dmul+0xbc>
 8001792:	2201      	movs	r2, #1
 8001794:	087b      	lsrs	r3, r7, #1
 8001796:	403a      	ands	r2, r7
 8001798:	4313      	orrs	r3, r2
 800179a:	4652      	mov	r2, sl
 800179c:	07d2      	lsls	r2, r2, #31
 800179e:	4313      	orrs	r3, r2
 80017a0:	4698      	mov	r8, r3
 80017a2:	4653      	mov	r3, sl
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	469a      	mov	sl, r3
 80017a8:	9b03      	ldr	r3, [sp, #12]
 80017aa:	4699      	mov	r9, r3
 80017ac:	465b      	mov	r3, fp
 80017ae:	1c58      	adds	r0, r3, #1
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	445b      	add	r3, fp
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc00      	bgt.n	80017bc <__aeabi_dmul+0x13c>
 80017ba:	e1b1      	b.n	8001b20 <__aeabi_dmul+0x4a0>
 80017bc:	4642      	mov	r2, r8
 80017be:	0752      	lsls	r2, r2, #29
 80017c0:	d00b      	beq.n	80017da <__aeabi_dmul+0x15a>
 80017c2:	220f      	movs	r2, #15
 80017c4:	4641      	mov	r1, r8
 80017c6:	400a      	ands	r2, r1
 80017c8:	2a04      	cmp	r2, #4
 80017ca:	d006      	beq.n	80017da <__aeabi_dmul+0x15a>
 80017cc:	4642      	mov	r2, r8
 80017ce:	1d11      	adds	r1, r2, #4
 80017d0:	4541      	cmp	r1, r8
 80017d2:	4192      	sbcs	r2, r2
 80017d4:	4688      	mov	r8, r1
 80017d6:	4252      	negs	r2, r2
 80017d8:	4492      	add	sl, r2
 80017da:	4652      	mov	r2, sl
 80017dc:	01d2      	lsls	r2, r2, #7
 80017de:	d506      	bpl.n	80017ee <__aeabi_dmul+0x16e>
 80017e0:	4652      	mov	r2, sl
 80017e2:	4b80      	ldr	r3, [pc, #512]	@ (80019e4 <__aeabi_dmul+0x364>)
 80017e4:	401a      	ands	r2, r3
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	4692      	mov	sl, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	18c3      	adds	r3, r0, r3
 80017ee:	4a7e      	ldr	r2, [pc, #504]	@ (80019e8 <__aeabi_dmul+0x368>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	dd00      	ble.n	80017f6 <__aeabi_dmul+0x176>
 80017f4:	e18f      	b.n	8001b16 <__aeabi_dmul+0x496>
 80017f6:	4642      	mov	r2, r8
 80017f8:	08d1      	lsrs	r1, r2, #3
 80017fa:	4652      	mov	r2, sl
 80017fc:	0752      	lsls	r2, r2, #29
 80017fe:	430a      	orrs	r2, r1
 8001800:	4651      	mov	r1, sl
 8001802:	055b      	lsls	r3, r3, #21
 8001804:	024c      	lsls	r4, r1, #9
 8001806:	0b24      	lsrs	r4, r4, #12
 8001808:	0d5b      	lsrs	r3, r3, #21
 800180a:	e797      	b.n	800173c <__aeabi_dmul+0xbc>
 800180c:	4b73      	ldr	r3, [pc, #460]	@ (80019dc <__aeabi_dmul+0x35c>)
 800180e:	4326      	orrs	r6, r4
 8001810:	469c      	mov	ip, r3
 8001812:	44e3      	add	fp, ip
 8001814:	2e00      	cmp	r6, #0
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x19a>
 8001818:	e16f      	b.n	8001afa <__aeabi_dmul+0x47a>
 800181a:	2303      	movs	r3, #3
 800181c:	4649      	mov	r1, r9
 800181e:	431d      	orrs	r5, r3
 8001820:	9b00      	ldr	r3, [sp, #0]
 8001822:	4059      	eors	r1, r3
 8001824:	b2cb      	uxtb	r3, r1
 8001826:	9303      	str	r3, [sp, #12]
 8001828:	2d0a      	cmp	r5, #10
 800182a:	dd00      	ble.n	800182e <__aeabi_dmul+0x1ae>
 800182c:	e133      	b.n	8001a96 <__aeabi_dmul+0x416>
 800182e:	2301      	movs	r3, #1
 8001830:	40ab      	lsls	r3, r5
 8001832:	001d      	movs	r5, r3
 8001834:	2303      	movs	r3, #3
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2288      	movs	r2, #136	@ 0x88
 800183a:	422a      	tst	r2, r5
 800183c:	d197      	bne.n	800176e <__aeabi_dmul+0xee>
 800183e:	4642      	mov	r2, r8
 8001840:	4643      	mov	r3, r8
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	0c12      	lsrs	r2, r2, #16
 8001846:	0016      	movs	r6, r2
 8001848:	9801      	ldr	r0, [sp, #4]
 800184a:	0c1d      	lsrs	r5, r3, #16
 800184c:	0c03      	lsrs	r3, r0, #16
 800184e:	0400      	lsls	r0, r0, #16
 8001850:	0c00      	lsrs	r0, r0, #16
 8001852:	4346      	muls	r6, r0
 8001854:	46b4      	mov	ip, r6
 8001856:	001e      	movs	r6, r3
 8001858:	436e      	muls	r6, r5
 800185a:	9600      	str	r6, [sp, #0]
 800185c:	0016      	movs	r6, r2
 800185e:	0007      	movs	r7, r0
 8001860:	435e      	muls	r6, r3
 8001862:	4661      	mov	r1, ip
 8001864:	46b0      	mov	r8, r6
 8001866:	436f      	muls	r7, r5
 8001868:	0c0e      	lsrs	r6, r1, #16
 800186a:	44b8      	add	r8, r7
 800186c:	4446      	add	r6, r8
 800186e:	42b7      	cmp	r7, r6
 8001870:	d905      	bls.n	800187e <__aeabi_dmul+0x1fe>
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0249      	lsls	r1, r1, #9
 8001876:	4688      	mov	r8, r1
 8001878:	9f00      	ldr	r7, [sp, #0]
 800187a:	4447      	add	r7, r8
 800187c:	9700      	str	r7, [sp, #0]
 800187e:	4661      	mov	r1, ip
 8001880:	0409      	lsls	r1, r1, #16
 8001882:	0c09      	lsrs	r1, r1, #16
 8001884:	0c37      	lsrs	r7, r6, #16
 8001886:	0436      	lsls	r6, r6, #16
 8001888:	468c      	mov	ip, r1
 800188a:	0031      	movs	r1, r6
 800188c:	4461      	add	r1, ip
 800188e:	9101      	str	r1, [sp, #4]
 8001890:	0011      	movs	r1, r2
 8001892:	0c26      	lsrs	r6, r4, #16
 8001894:	0424      	lsls	r4, r4, #16
 8001896:	0c24      	lsrs	r4, r4, #16
 8001898:	4361      	muls	r1, r4
 800189a:	468c      	mov	ip, r1
 800189c:	0021      	movs	r1, r4
 800189e:	4369      	muls	r1, r5
 80018a0:	4689      	mov	r9, r1
 80018a2:	4661      	mov	r1, ip
 80018a4:	0c09      	lsrs	r1, r1, #16
 80018a6:	4688      	mov	r8, r1
 80018a8:	4372      	muls	r2, r6
 80018aa:	444a      	add	r2, r9
 80018ac:	4442      	add	r2, r8
 80018ae:	4375      	muls	r5, r6
 80018b0:	4591      	cmp	r9, r2
 80018b2:	d903      	bls.n	80018bc <__aeabi_dmul+0x23c>
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0249      	lsls	r1, r1, #9
 80018b8:	4688      	mov	r8, r1
 80018ba:	4445      	add	r5, r8
 80018bc:	0c11      	lsrs	r1, r2, #16
 80018be:	4688      	mov	r8, r1
 80018c0:	4661      	mov	r1, ip
 80018c2:	0409      	lsls	r1, r1, #16
 80018c4:	0c09      	lsrs	r1, r1, #16
 80018c6:	468c      	mov	ip, r1
 80018c8:	0412      	lsls	r2, r2, #16
 80018ca:	4462      	add	r2, ip
 80018cc:	18b9      	adds	r1, r7, r2
 80018ce:	9102      	str	r1, [sp, #8]
 80018d0:	4651      	mov	r1, sl
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	468c      	mov	ip, r1
 80018d6:	4651      	mov	r1, sl
 80018d8:	040f      	lsls	r7, r1, #16
 80018da:	0c3f      	lsrs	r7, r7, #16
 80018dc:	0039      	movs	r1, r7
 80018de:	4341      	muls	r1, r0
 80018e0:	4445      	add	r5, r8
 80018e2:	4688      	mov	r8, r1
 80018e4:	4661      	mov	r1, ip
 80018e6:	4341      	muls	r1, r0
 80018e8:	468a      	mov	sl, r1
 80018ea:	4641      	mov	r1, r8
 80018ec:	4660      	mov	r0, ip
 80018ee:	0c09      	lsrs	r1, r1, #16
 80018f0:	4689      	mov	r9, r1
 80018f2:	4358      	muls	r0, r3
 80018f4:	437b      	muls	r3, r7
 80018f6:	4453      	add	r3, sl
 80018f8:	444b      	add	r3, r9
 80018fa:	459a      	cmp	sl, r3
 80018fc:	d903      	bls.n	8001906 <__aeabi_dmul+0x286>
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	4689      	mov	r9, r1
 8001904:	4448      	add	r0, r9
 8001906:	0c19      	lsrs	r1, r3, #16
 8001908:	4689      	mov	r9, r1
 800190a:	4641      	mov	r1, r8
 800190c:	0409      	lsls	r1, r1, #16
 800190e:	0c09      	lsrs	r1, r1, #16
 8001910:	4688      	mov	r8, r1
 8001912:	0039      	movs	r1, r7
 8001914:	4361      	muls	r1, r4
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	4443      	add	r3, r8
 800191a:	4688      	mov	r8, r1
 800191c:	4661      	mov	r1, ip
 800191e:	434c      	muls	r4, r1
 8001920:	4371      	muls	r1, r6
 8001922:	468c      	mov	ip, r1
 8001924:	4641      	mov	r1, r8
 8001926:	4377      	muls	r7, r6
 8001928:	0c0e      	lsrs	r6, r1, #16
 800192a:	193f      	adds	r7, r7, r4
 800192c:	19f6      	adds	r6, r6, r7
 800192e:	4448      	add	r0, r9
 8001930:	42b4      	cmp	r4, r6
 8001932:	d903      	bls.n	800193c <__aeabi_dmul+0x2bc>
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0249      	lsls	r1, r1, #9
 8001938:	4689      	mov	r9, r1
 800193a:	44cc      	add	ip, r9
 800193c:	9902      	ldr	r1, [sp, #8]
 800193e:	9f00      	ldr	r7, [sp, #0]
 8001940:	4689      	mov	r9, r1
 8001942:	0431      	lsls	r1, r6, #16
 8001944:	444f      	add	r7, r9
 8001946:	4689      	mov	r9, r1
 8001948:	4641      	mov	r1, r8
 800194a:	4297      	cmp	r7, r2
 800194c:	4192      	sbcs	r2, r2
 800194e:	040c      	lsls	r4, r1, #16
 8001950:	0c24      	lsrs	r4, r4, #16
 8001952:	444c      	add	r4, r9
 8001954:	18ff      	adds	r7, r7, r3
 8001956:	4252      	negs	r2, r2
 8001958:	1964      	adds	r4, r4, r5
 800195a:	18a1      	adds	r1, r4, r2
 800195c:	429f      	cmp	r7, r3
 800195e:	419b      	sbcs	r3, r3
 8001960:	4688      	mov	r8, r1
 8001962:	4682      	mov	sl, r0
 8001964:	425b      	negs	r3, r3
 8001966:	4699      	mov	r9, r3
 8001968:	4590      	cmp	r8, r2
 800196a:	4192      	sbcs	r2, r2
 800196c:	42ac      	cmp	r4, r5
 800196e:	41a4      	sbcs	r4, r4
 8001970:	44c2      	add	sl, r8
 8001972:	44d1      	add	r9, sl
 8001974:	4252      	negs	r2, r2
 8001976:	4264      	negs	r4, r4
 8001978:	4314      	orrs	r4, r2
 800197a:	4599      	cmp	r9, r3
 800197c:	419b      	sbcs	r3, r3
 800197e:	4582      	cmp	sl, r0
 8001980:	4192      	sbcs	r2, r2
 8001982:	425b      	negs	r3, r3
 8001984:	4252      	negs	r2, r2
 8001986:	4313      	orrs	r3, r2
 8001988:	464a      	mov	r2, r9
 800198a:	0c36      	lsrs	r6, r6, #16
 800198c:	19a4      	adds	r4, r4, r6
 800198e:	18e3      	adds	r3, r4, r3
 8001990:	4463      	add	r3, ip
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	0dd2      	lsrs	r2, r2, #23
 8001996:	431a      	orrs	r2, r3
 8001998:	9901      	ldr	r1, [sp, #4]
 800199a:	4692      	mov	sl, r2
 800199c:	027a      	lsls	r2, r7, #9
 800199e:	430a      	orrs	r2, r1
 80019a0:	1e50      	subs	r0, r2, #1
 80019a2:	4182      	sbcs	r2, r0
 80019a4:	0dff      	lsrs	r7, r7, #23
 80019a6:	4317      	orrs	r7, r2
 80019a8:	464a      	mov	r2, r9
 80019aa:	0252      	lsls	r2, r2, #9
 80019ac:	4317      	orrs	r7, r2
 80019ae:	46b8      	mov	r8, r7
 80019b0:	01db      	lsls	r3, r3, #7
 80019b2:	d500      	bpl.n	80019b6 <__aeabi_dmul+0x336>
 80019b4:	e6ed      	b.n	8001792 <__aeabi_dmul+0x112>
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <__aeabi_dmul+0x36c>)
 80019b8:	9a03      	ldr	r2, [sp, #12]
 80019ba:	445b      	add	r3, fp
 80019bc:	4691      	mov	r9, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_dmul+0x344>
 80019c2:	e0ac      	b.n	8001b1e <__aeabi_dmul+0x49e>
 80019c4:	003a      	movs	r2, r7
 80019c6:	0752      	lsls	r2, r2, #29
 80019c8:	d100      	bne.n	80019cc <__aeabi_dmul+0x34c>
 80019ca:	e710      	b.n	80017ee <__aeabi_dmul+0x16e>
 80019cc:	220f      	movs	r2, #15
 80019ce:	4658      	mov	r0, fp
 80019d0:	403a      	ands	r2, r7
 80019d2:	2a04      	cmp	r2, #4
 80019d4:	d000      	beq.n	80019d8 <__aeabi_dmul+0x358>
 80019d6:	e6f9      	b.n	80017cc <__aeabi_dmul+0x14c>
 80019d8:	e709      	b.n	80017ee <__aeabi_dmul+0x16e>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff
 80019e0:	fffffc01 	.word	0xfffffc01
 80019e4:	feffffff 	.word	0xfeffffff
 80019e8:	000007fe 	.word	0x000007fe
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	0022      	movs	r2, r4
 80019f2:	4332      	orrs	r2, r6
 80019f4:	d06f      	beq.n	8001ad6 <__aeabi_dmul+0x456>
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dmul+0x37c>
 80019fa:	e0c2      	b.n	8001b82 <__aeabi_dmul+0x502>
 80019fc:	0020      	movs	r0, r4
 80019fe:	f000 fddf 	bl	80025c0 <__clzsi2>
 8001a02:	0002      	movs	r2, r0
 8001a04:	0003      	movs	r3, r0
 8001a06:	3a0b      	subs	r2, #11
 8001a08:	201d      	movs	r0, #29
 8001a0a:	1a82      	subs	r2, r0, r2
 8001a0c:	0030      	movs	r0, r6
 8001a0e:	0019      	movs	r1, r3
 8001a10:	40d0      	lsrs	r0, r2
 8001a12:	3908      	subs	r1, #8
 8001a14:	408c      	lsls	r4, r1
 8001a16:	0002      	movs	r2, r0
 8001a18:	4322      	orrs	r2, r4
 8001a1a:	0034      	movs	r4, r6
 8001a1c:	408c      	lsls	r4, r1
 8001a1e:	4659      	mov	r1, fp
 8001a20:	1acb      	subs	r3, r1, r3
 8001a22:	4986      	ldr	r1, [pc, #536]	@ (8001c3c <__aeabi_dmul+0x5bc>)
 8001a24:	468b      	mov	fp, r1
 8001a26:	449b      	add	fp, r3
 8001a28:	2d0a      	cmp	r5, #10
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dmul+0x3ae>
 8001a2c:	e6a4      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001a2e:	4649      	mov	r1, r9
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	9401      	str	r4, [sp, #4]
 8001a34:	4059      	eors	r1, r3
 8001a36:	b2cb      	uxtb	r3, r1
 8001a38:	0014      	movs	r4, r2
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	2d02      	cmp	r5, #2
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dmul+0x3c4>
 8001a42:	e667      	b.n	8001714 <__aeabi_dmul+0x94>
 8001a44:	e6fb      	b.n	800183e <__aeabi_dmul+0x1be>
 8001a46:	4653      	mov	r3, sl
 8001a48:	4303      	orrs	r3, r0
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	d03c      	beq.n	8001ac8 <__aeabi_dmul+0x448>
 8001a4e:	4653      	mov	r3, sl
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dmul+0x3d6>
 8001a54:	e0a3      	b.n	8001b9e <__aeabi_dmul+0x51e>
 8001a56:	4650      	mov	r0, sl
 8001a58:	f000 fdb2 	bl	80025c0 <__clzsi2>
 8001a5c:	230b      	movs	r3, #11
 8001a5e:	425b      	negs	r3, r3
 8001a60:	469c      	mov	ip, r3
 8001a62:	0002      	movs	r2, r0
 8001a64:	4484      	add	ip, r0
 8001a66:	0011      	movs	r1, r2
 8001a68:	4650      	mov	r0, sl
 8001a6a:	3908      	subs	r1, #8
 8001a6c:	4088      	lsls	r0, r1
 8001a6e:	231d      	movs	r3, #29
 8001a70:	4680      	mov	r8, r0
 8001a72:	4660      	mov	r0, ip
 8001a74:	1a1b      	subs	r3, r3, r0
 8001a76:	0020      	movs	r0, r4
 8001a78:	40d8      	lsrs	r0, r3
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	469a      	mov	sl, r3
 8001a82:	0023      	movs	r3, r4
 8001a84:	408b      	lsls	r3, r1
 8001a86:	4698      	mov	r8, r3
 8001a88:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <__aeabi_dmul+0x5bc>)
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	469b      	mov	fp, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	e61a      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001a96:	2d0f      	cmp	r5, #15
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dmul+0x41c>
 8001a9a:	e0c9      	b.n	8001c30 <__aeabi_dmul+0x5b0>
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	421a      	tst	r2, r3
 8001aa4:	d002      	beq.n	8001aac <__aeabi_dmul+0x42c>
 8001aa6:	421c      	tst	r4, r3
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0x42c>
 8001aaa:	e092      	b.n	8001bd2 <__aeabi_dmul+0x552>
 8001aac:	2480      	movs	r4, #128	@ 0x80
 8001aae:	4653      	mov	r3, sl
 8001ab0:	0324      	lsls	r4, r4, #12
 8001ab2:	431c      	orrs	r4, r3
 8001ab4:	0324      	lsls	r4, r4, #12
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	e63e      	b.n	800173a <__aeabi_dmul+0xba>
 8001abc:	469b      	mov	fp, r3
 8001abe:	2303      	movs	r3, #3
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	250c      	movs	r5, #12
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	e601      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	469a      	mov	sl, r3
 8001acc:	469b      	mov	fp, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	2504      	movs	r5, #4
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	e5fa      	b.n	80016cc <__aeabi_dmul+0x4c>
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430d      	orrs	r5, r1
 8001ada:	2d0a      	cmp	r5, #10
 8001adc:	dd00      	ble.n	8001ae0 <__aeabi_dmul+0x460>
 8001ade:	e64b      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001ae0:	4649      	mov	r1, r9
 8001ae2:	9800      	ldr	r0, [sp, #0]
 8001ae4:	4041      	eors	r1, r0
 8001ae6:	b2c9      	uxtb	r1, r1
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	2d02      	cmp	r5, #2
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_dmul+0x470>
 8001aee:	e096      	b.n	8001c1e <__aeabi_dmul+0x59e>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2400      	movs	r4, #0
 8001af4:	2001      	movs	r0, #1
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	e60c      	b.n	8001714 <__aeabi_dmul+0x94>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2302      	movs	r3, #2
 8001afe:	9a00      	ldr	r2, [sp, #0]
 8001b00:	432b      	orrs	r3, r5
 8001b02:	4051      	eors	r1, r2
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	9203      	str	r2, [sp, #12]
 8001b08:	2b0a      	cmp	r3, #10
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dmul+0x48e>
 8001b0c:	e634      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001b0e:	2d00      	cmp	r5, #0
 8001b10:	d157      	bne.n	8001bc2 <__aeabi_dmul+0x542>
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	4699      	mov	r9, r3
 8001b16:	2400      	movs	r4, #0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <__aeabi_dmul+0x5c0>)
 8001b1c:	e60e      	b.n	800173c <__aeabi_dmul+0xbc>
 8001b1e:	4658      	mov	r0, fp
 8001b20:	2101      	movs	r1, #1
 8001b22:	1ac9      	subs	r1, r1, r3
 8001b24:	2938      	cmp	r1, #56	@ 0x38
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dmul+0x4aa>
 8001b28:	e62f      	b.n	800178a <__aeabi_dmul+0x10a>
 8001b2a:	291f      	cmp	r1, #31
 8001b2c:	dd56      	ble.n	8001bdc <__aeabi_dmul+0x55c>
 8001b2e:	221f      	movs	r2, #31
 8001b30:	4654      	mov	r4, sl
 8001b32:	4252      	negs	r2, r2
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	40dc      	lsrs	r4, r3
 8001b38:	2920      	cmp	r1, #32
 8001b3a:	d007      	beq.n	8001b4c <__aeabi_dmul+0x4cc>
 8001b3c:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <__aeabi_dmul+0x5c4>)
 8001b3e:	4642      	mov	r2, r8
 8001b40:	469c      	mov	ip, r3
 8001b42:	4653      	mov	r3, sl
 8001b44:	4460      	add	r0, ip
 8001b46:	4083      	lsls	r3, r0
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	2107      	movs	r1, #7
 8001b50:	1e53      	subs	r3, r2, #1
 8001b52:	419a      	sbcs	r2, r3
 8001b54:	000b      	movs	r3, r1
 8001b56:	4322      	orrs	r2, r4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	4211      	tst	r1, r2
 8001b5e:	d009      	beq.n	8001b74 <__aeabi_dmul+0x4f4>
 8001b60:	230f      	movs	r3, #15
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d05d      	beq.n	8001c24 <__aeabi_dmul+0x5a4>
 8001b68:	1d11      	adds	r1, r2, #4
 8001b6a:	4291      	cmp	r1, r2
 8001b6c:	419b      	sbcs	r3, r3
 8001b6e:	000a      	movs	r2, r1
 8001b70:	425b      	negs	r3, r3
 8001b72:	075b      	lsls	r3, r3, #29
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e5df      	b.n	800173c <__aeabi_dmul+0xbc>
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	4699      	mov	r9, r3
 8001b80:	e5fa      	b.n	8001778 <__aeabi_dmul+0xf8>
 8001b82:	9801      	ldr	r0, [sp, #4]
 8001b84:	f000 fd1c 	bl	80025c0 <__clzsi2>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	3215      	adds	r2, #21
 8001b8e:	3320      	adds	r3, #32
 8001b90:	2a1c      	cmp	r2, #28
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dmul+0x516>
 8001b94:	e738      	b.n	8001a08 <__aeabi_dmul+0x388>
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4082      	lsls	r2, r0
 8001b9c:	e73f      	b.n	8001a1e <__aeabi_dmul+0x39e>
 8001b9e:	f000 fd0f 	bl	80025c0 <__clzsi2>
 8001ba2:	2315      	movs	r3, #21
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	4484      	add	ip, r0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	4663      	mov	r3, ip
 8001bac:	3220      	adds	r2, #32
 8001bae:	2b1c      	cmp	r3, #28
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dmul+0x534>
 8001bb2:	e758      	b.n	8001a66 <__aeabi_dmul+0x3e6>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	0023      	movs	r3, r4
 8001bba:	3808      	subs	r0, #8
 8001bbc:	4083      	lsls	r3, r0
 8001bbe:	469a      	mov	sl, r3
 8001bc0:	e762      	b.n	8001a88 <__aeabi_dmul+0x408>
 8001bc2:	001d      	movs	r5, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	2002      	movs	r0, #2
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	e5a2      	b.n	8001714 <__aeabi_dmul+0x94>
 8001bce:	9002      	str	r0, [sp, #8]
 8001bd0:	e632      	b.n	8001838 <__aeabi_dmul+0x1b8>
 8001bd2:	431c      	orrs	r4, r3
 8001bd4:	9b00      	ldr	r3, [sp, #0]
 8001bd6:	9a01      	ldr	r2, [sp, #4]
 8001bd8:	4699      	mov	r9, r3
 8001bda:	e5ae      	b.n	800173a <__aeabi_dmul+0xba>
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <__aeabi_dmul+0x5c8>)
 8001bde:	4652      	mov	r2, sl
 8001be0:	18c3      	adds	r3, r0, r3
 8001be2:	4640      	mov	r0, r8
 8001be4:	409a      	lsls	r2, r3
 8001be6:	40c8      	lsrs	r0, r1
 8001be8:	4302      	orrs	r2, r0
 8001bea:	4640      	mov	r0, r8
 8001bec:	4098      	lsls	r0, r3
 8001bee:	0003      	movs	r3, r0
 8001bf0:	1e58      	subs	r0, r3, #1
 8001bf2:	4183      	sbcs	r3, r0
 8001bf4:	4654      	mov	r4, sl
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	40cc      	lsrs	r4, r1
 8001bfa:	0753      	lsls	r3, r2, #29
 8001bfc:	d009      	beq.n	8001c12 <__aeabi_dmul+0x592>
 8001bfe:	230f      	movs	r3, #15
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d005      	beq.n	8001c12 <__aeabi_dmul+0x592>
 8001c06:	1d13      	adds	r3, r2, #4
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	4252      	negs	r2, r2
 8001c0e:	18a4      	adds	r4, r4, r2
 8001c10:	001a      	movs	r2, r3
 8001c12:	0223      	lsls	r3, r4, #8
 8001c14:	d508      	bpl.n	8001c28 <__aeabi_dmul+0x5a8>
 8001c16:	2301      	movs	r3, #1
 8001c18:	2400      	movs	r4, #0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	e58e      	b.n	800173c <__aeabi_dmul+0xbc>
 8001c1e:	4689      	mov	r9, r1
 8001c20:	2400      	movs	r4, #0
 8001c22:	e58b      	b.n	800173c <__aeabi_dmul+0xbc>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e7a5      	b.n	8001b74 <__aeabi_dmul+0x4f4>
 8001c28:	0763      	lsls	r3, r4, #29
 8001c2a:	0264      	lsls	r4, r4, #9
 8001c2c:	0b24      	lsrs	r4, r4, #12
 8001c2e:	e7a1      	b.n	8001b74 <__aeabi_dmul+0x4f4>
 8001c30:	9b00      	ldr	r3, [sp, #0]
 8001c32:	46a2      	mov	sl, r4
 8001c34:	4699      	mov	r9, r3
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	4698      	mov	r8, r3
 8001c3a:	e737      	b.n	8001aac <__aeabi_dmul+0x42c>
 8001c3c:	fffffc0d 	.word	0xfffffc0d
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	0000043e 	.word	0x0000043e
 8001c48:	0000041e 	.word	0x0000041e

08001c4c <__aeabi_dsub>:
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	4657      	mov	r7, sl
 8001c50:	464e      	mov	r6, r9
 8001c52:	4645      	mov	r5, r8
 8001c54:	46de      	mov	lr, fp
 8001c56:	b5e0      	push	{r5, r6, r7, lr}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	9000      	str	r0, [sp, #0]
 8001c5c:	9101      	str	r1, [sp, #4]
 8001c5e:	030c      	lsls	r4, r1, #12
 8001c60:	004d      	lsls	r5, r1, #1
 8001c62:	0fce      	lsrs	r6, r1, #31
 8001c64:	0a61      	lsrs	r1, r4, #9
 8001c66:	9c00      	ldr	r4, [sp, #0]
 8001c68:	005f      	lsls	r7, r3, #1
 8001c6a:	0f64      	lsrs	r4, r4, #29
 8001c6c:	430c      	orrs	r4, r1
 8001c6e:	9900      	ldr	r1, [sp, #0]
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	00c8      	lsls	r0, r1, #3
 8001c76:	0319      	lsls	r1, r3, #12
 8001c78:	0d7b      	lsrs	r3, r7, #21
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	9b01      	ldr	r3, [sp, #4]
 8001c7e:	4fcc      	ldr	r7, [pc, #816]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001c80:	0fdb      	lsrs	r3, r3, #31
 8001c82:	469c      	mov	ip, r3
 8001c84:	0a4b      	lsrs	r3, r1, #9
 8001c86:	9900      	ldr	r1, [sp, #0]
 8001c88:	4680      	mov	r8, r0
 8001c8a:	0f49      	lsrs	r1, r1, #29
 8001c8c:	4319      	orrs	r1, r3
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	468b      	mov	fp, r1
 8001c92:	00da      	lsls	r2, r3, #3
 8001c94:	4692      	mov	sl, r2
 8001c96:	0d6d      	lsrs	r5, r5, #21
 8001c98:	45b9      	cmp	r9, r7
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x52>
 8001c9c:	e0bf      	b.n	8001e1e <__aeabi_dsub+0x1d2>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	4059      	eors	r1, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	1aeb      	subs	r3, r5, r3
 8001caa:	428e      	cmp	r6, r1
 8001cac:	d075      	beq.n	8001d9a <__aeabi_dsub+0x14e>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_dsub+0x68>
 8001cb2:	e2a3      	b.n	80021fc <__aeabi_dsub+0x5b0>
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x70>
 8001cba:	e0ce      	b.n	8001e5a <__aeabi_dsub+0x20e>
 8001cbc:	42bd      	cmp	r5, r7
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x76>
 8001cc0:	e200      	b.n	80020c4 <__aeabi_dsub+0x478>
 8001cc2:	2701      	movs	r7, #1
 8001cc4:	2b38      	cmp	r3, #56	@ 0x38
 8001cc6:	dc19      	bgt.n	8001cfc <__aeabi_dsub+0xb0>
 8001cc8:	2780      	movs	r7, #128	@ 0x80
 8001cca:	4659      	mov	r1, fp
 8001ccc:	043f      	lsls	r7, r7, #16
 8001cce:	4339      	orrs	r1, r7
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	2b1f      	cmp	r3, #31
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_dsub+0x8c>
 8001cd6:	e1fa      	b.n	80020ce <__aeabi_dsub+0x482>
 8001cd8:	2720      	movs	r7, #32
 8001cda:	1af9      	subs	r1, r7, r3
 8001cdc:	468c      	mov	ip, r1
 8001cde:	4659      	mov	r1, fp
 8001ce0:	4667      	mov	r7, ip
 8001ce2:	40b9      	lsls	r1, r7
 8001ce4:	000f      	movs	r7, r1
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	40d9      	lsrs	r1, r3
 8001cea:	430f      	orrs	r7, r1
 8001cec:	4661      	mov	r1, ip
 8001cee:	408a      	lsls	r2, r1
 8001cf0:	1e51      	subs	r1, r2, #1
 8001cf2:	418a      	sbcs	r2, r1
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	40d9      	lsrs	r1, r3
 8001cf8:	4317      	orrs	r7, r2
 8001cfa:	1a64      	subs	r4, r4, r1
 8001cfc:	1bc7      	subs	r7, r0, r7
 8001cfe:	42b8      	cmp	r0, r7
 8001d00:	4180      	sbcs	r0, r0
 8001d02:	4240      	negs	r0, r0
 8001d04:	1a24      	subs	r4, r4, r0
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0xc0>
 8001d0a:	e140      	b.n	8001f8e <__aeabi_dsub+0x342>
 8001d0c:	0264      	lsls	r4, r4, #9
 8001d0e:	0a64      	lsrs	r4, r4, #9
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0xca>
 8001d14:	e154      	b.n	8001fc0 <__aeabi_dsub+0x374>
 8001d16:	0020      	movs	r0, r4
 8001d18:	f000 fc52 	bl	80025c0 <__clzsi2>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	3b08      	subs	r3, #8
 8001d20:	2120      	movs	r1, #32
 8001d22:	0038      	movs	r0, r7
 8001d24:	1aca      	subs	r2, r1, r3
 8001d26:	40d0      	lsrs	r0, r2
 8001d28:	409c      	lsls	r4, r3
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	409f      	lsls	r7, r3
 8001d2e:	4322      	orrs	r2, r4
 8001d30:	429d      	cmp	r5, r3
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0xea>
 8001d34:	e1a6      	b.n	8002084 <__aeabi_dsub+0x438>
 8001d36:	1b58      	subs	r0, r3, r5
 8001d38:	3001      	adds	r0, #1
 8001d3a:	1a09      	subs	r1, r1, r0
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	408f      	lsls	r7, r1
 8001d40:	40c4      	lsrs	r4, r0
 8001d42:	1e7b      	subs	r3, r7, #1
 8001d44:	419f      	sbcs	r7, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	408b      	lsls	r3, r1
 8001d4a:	4327      	orrs	r7, r4
 8001d4c:	431f      	orrs	r7, r3
 8001d4e:	40c2      	lsrs	r2, r0
 8001d50:	003b      	movs	r3, r7
 8001d52:	0014      	movs	r4, r2
 8001d54:	2500      	movs	r5, #0
 8001d56:	4313      	orrs	r3, r2
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x110>
 8001d5a:	e1f7      	b.n	800214c <__aeabi_dsub+0x500>
 8001d5c:	077b      	lsls	r3, r7, #29
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x116>
 8001d60:	e377      	b.n	8002452 <__aeabi_dsub+0x806>
 8001d62:	230f      	movs	r3, #15
 8001d64:	0038      	movs	r0, r7
 8001d66:	403b      	ands	r3, r7
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d004      	beq.n	8001d76 <__aeabi_dsub+0x12a>
 8001d6c:	1d38      	adds	r0, r7, #4
 8001d6e:	42b8      	cmp	r0, r7
 8001d70:	41bf      	sbcs	r7, r7
 8001d72:	427f      	negs	r7, r7
 8001d74:	19e4      	adds	r4, r4, r7
 8001d76:	0223      	lsls	r3, r4, #8
 8001d78:	d400      	bmi.n	8001d7c <__aeabi_dsub+0x130>
 8001d7a:	e368      	b.n	800244e <__aeabi_dsub+0x802>
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001d7e:	3501      	adds	r5, #1
 8001d80:	429d      	cmp	r5, r3
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x13a>
 8001d84:	e0f4      	b.n	8001f70 <__aeabi_dsub+0x324>
 8001d86:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001d88:	056d      	lsls	r5, r5, #21
 8001d8a:	401c      	ands	r4, r3
 8001d8c:	0d6d      	lsrs	r5, r5, #21
 8001d8e:	0767      	lsls	r7, r4, #29
 8001d90:	08c0      	lsrs	r0, r0, #3
 8001d92:	0264      	lsls	r4, r4, #9
 8001d94:	4307      	orrs	r7, r0
 8001d96:	0b24      	lsrs	r4, r4, #12
 8001d98:	e0ec      	b.n	8001f74 <__aeabi_dsub+0x328>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc00      	bgt.n	8001da0 <__aeabi_dsub+0x154>
 8001d9e:	e329      	b.n	80023f4 <__aeabi_dsub+0x7a8>
 8001da0:	4649      	mov	r1, r9
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x15c>
 8001da6:	e0d6      	b.n	8001f56 <__aeabi_dsub+0x30a>
 8001da8:	4659      	mov	r1, fp
 8001daa:	4311      	orrs	r1, r2
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x164>
 8001dae:	e12e      	b.n	800200e <__aeabi_dsub+0x3c2>
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x16c>
 8001db6:	e1e6      	b.n	8002186 <__aeabi_dsub+0x53a>
 8001db8:	42bb      	cmp	r3, r7
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dsub+0x172>
 8001dbc:	e182      	b.n	80020c4 <__aeabi_dsub+0x478>
 8001dbe:	2701      	movs	r7, #1
 8001dc0:	000b      	movs	r3, r1
 8001dc2:	2938      	cmp	r1, #56	@ 0x38
 8001dc4:	dc14      	bgt.n	8001df0 <__aeabi_dsub+0x1a4>
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	dd00      	ble.n	8001dcc <__aeabi_dsub+0x180>
 8001dca:	e23c      	b.n	8002246 <__aeabi_dsub+0x5fa>
 8001dcc:	2720      	movs	r7, #32
 8001dce:	1af9      	subs	r1, r7, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	4659      	mov	r1, fp
 8001dd4:	4667      	mov	r7, ip
 8001dd6:	40b9      	lsls	r1, r7
 8001dd8:	000f      	movs	r7, r1
 8001dda:	0011      	movs	r1, r2
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	430f      	orrs	r7, r1
 8001de0:	4661      	mov	r1, ip
 8001de2:	408a      	lsls	r2, r1
 8001de4:	1e51      	subs	r1, r2, #1
 8001de6:	418a      	sbcs	r2, r1
 8001de8:	4659      	mov	r1, fp
 8001dea:	40d9      	lsrs	r1, r3
 8001dec:	4317      	orrs	r7, r2
 8001dee:	1864      	adds	r4, r4, r1
 8001df0:	183f      	adds	r7, r7, r0
 8001df2:	4287      	cmp	r7, r0
 8001df4:	4180      	sbcs	r0, r0
 8001df6:	4240      	negs	r0, r0
 8001df8:	1824      	adds	r4, r4, r0
 8001dfa:	0223      	lsls	r3, r4, #8
 8001dfc:	d400      	bmi.n	8001e00 <__aeabi_dsub+0x1b4>
 8001dfe:	e0c6      	b.n	8001f8e <__aeabi_dsub+0x342>
 8001e00:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001e02:	3501      	adds	r5, #1
 8001e04:	429d      	cmp	r5, r3
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x1be>
 8001e08:	e0b2      	b.n	8001f70 <__aeabi_dsub+0x324>
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4b69      	ldr	r3, [pc, #420]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001e0e:	087a      	lsrs	r2, r7, #1
 8001e10:	401c      	ands	r4, r3
 8001e12:	4039      	ands	r1, r7
 8001e14:	430a      	orrs	r2, r1
 8001e16:	07e7      	lsls	r7, r4, #31
 8001e18:	4317      	orrs	r7, r2
 8001e1a:	0864      	lsrs	r4, r4, #1
 8001e1c:	e79e      	b.n	8001d5c <__aeabi_dsub+0x110>
 8001e1e:	4b66      	ldr	r3, [pc, #408]	@ (8001fb8 <__aeabi_dsub+0x36c>)
 8001e20:	4311      	orrs	r1, r2
 8001e22:	468a      	mov	sl, r1
 8001e24:	18eb      	adds	r3, r5, r3
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d028      	beq.n	8001e7c <__aeabi_dsub+0x230>
 8001e2a:	4566      	cmp	r6, ip
 8001e2c:	d02c      	beq.n	8001e88 <__aeabi_dsub+0x23c>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05b      	beq.n	8001eea <__aeabi_dsub+0x29e>
 8001e32:	2d00      	cmp	r5, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x1ec>
 8001e36:	e12c      	b.n	8002092 <__aeabi_dsub+0x446>
 8001e38:	465b      	mov	r3, fp
 8001e3a:	4666      	mov	r6, ip
 8001e3c:	075f      	lsls	r7, r3, #29
 8001e3e:	08d2      	lsrs	r2, r2, #3
 8001e40:	4317      	orrs	r7, r2
 8001e42:	08dd      	lsrs	r5, r3, #3
 8001e44:	003b      	movs	r3, r7
 8001e46:	432b      	orrs	r3, r5
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x200>
 8001e4a:	e0e2      	b.n	8002012 <__aeabi_dsub+0x3c6>
 8001e4c:	2480      	movs	r4, #128	@ 0x80
 8001e4e:	0324      	lsls	r4, r4, #12
 8001e50:	432c      	orrs	r4, r5
 8001e52:	0324      	lsls	r4, r4, #12
 8001e54:	4d56      	ldr	r5, [pc, #344]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001e56:	0b24      	lsrs	r4, r4, #12
 8001e58:	e08c      	b.n	8001f74 <__aeabi_dsub+0x328>
 8001e5a:	4659      	mov	r1, fp
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x216>
 8001e60:	e0d5      	b.n	800200e <__aeabi_dsub+0x3c2>
 8001e62:	1e59      	subs	r1, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x21e>
 8001e68:	e1b9      	b.n	80021de <__aeabi_dsub+0x592>
 8001e6a:	42bb      	cmp	r3, r7
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x224>
 8001e6e:	e1b1      	b.n	80021d4 <__aeabi_dsub+0x588>
 8001e70:	2701      	movs	r7, #1
 8001e72:	000b      	movs	r3, r1
 8001e74:	2938      	cmp	r1, #56	@ 0x38
 8001e76:	dd00      	ble.n	8001e7a <__aeabi_dsub+0x22e>
 8001e78:	e740      	b.n	8001cfc <__aeabi_dsub+0xb0>
 8001e7a:	e72a      	b.n	8001cd2 <__aeabi_dsub+0x86>
 8001e7c:	4661      	mov	r1, ip
 8001e7e:	2701      	movs	r7, #1
 8001e80:	4079      	eors	r1, r7
 8001e82:	468c      	mov	ip, r1
 8001e84:	4566      	cmp	r6, ip
 8001e86:	d1d2      	bne.n	8001e2e <__aeabi_dsub+0x1e2>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dsub+0x242>
 8001e8c:	e0c5      	b.n	800201a <__aeabi_dsub+0x3ce>
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	d000      	beq.n	8001e94 <__aeabi_dsub+0x248>
 8001e92:	e155      	b.n	8002140 <__aeabi_dsub+0x4f4>
 8001e94:	464b      	mov	r3, r9
 8001e96:	0025      	movs	r5, r4
 8001e98:	4305      	orrs	r5, r0
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x252>
 8001e9c:	e212      	b.n	80022c4 <__aeabi_dsub+0x678>
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	468c      	mov	ip, r1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x25c>
 8001ea6:	e249      	b.n	800233c <__aeabi_dsub+0x6f0>
 8001ea8:	4d41      	ldr	r5, [pc, #260]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x264>
 8001eae:	e28f      	b.n	80023d0 <__aeabi_dsub+0x784>
 8001eb0:	2701      	movs	r7, #1
 8001eb2:	2938      	cmp	r1, #56	@ 0x38
 8001eb4:	dc11      	bgt.n	8001eda <__aeabi_dsub+0x28e>
 8001eb6:	4663      	mov	r3, ip
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x272>
 8001ebc:	e25b      	b.n	8002376 <__aeabi_dsub+0x72a>
 8001ebe:	4661      	mov	r1, ip
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	0027      	movs	r7, r4
 8001ec4:	1a5b      	subs	r3, r3, r1
 8001ec6:	0005      	movs	r5, r0
 8001ec8:	4098      	lsls	r0, r3
 8001eca:	409f      	lsls	r7, r3
 8001ecc:	40cd      	lsrs	r5, r1
 8001ece:	1e43      	subs	r3, r0, #1
 8001ed0:	4198      	sbcs	r0, r3
 8001ed2:	40cc      	lsrs	r4, r1
 8001ed4:	432f      	orrs	r7, r5
 8001ed6:	4307      	orrs	r7, r0
 8001ed8:	44a3      	add	fp, r4
 8001eda:	18bf      	adds	r7, r7, r2
 8001edc:	4297      	cmp	r7, r2
 8001ede:	4192      	sbcs	r2, r2
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	445a      	add	r2, fp
 8001ee4:	0014      	movs	r4, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	e787      	b.n	8001dfa <__aeabi_dsub+0x1ae>
 8001eea:	4f34      	ldr	r7, [pc, #208]	@ (8001fbc <__aeabi_dsub+0x370>)
 8001eec:	1c6b      	adds	r3, r5, #1
 8001eee:	423b      	tst	r3, r7
 8001ef0:	d000      	beq.n	8001ef4 <__aeabi_dsub+0x2a8>
 8001ef2:	e0b6      	b.n	8002062 <__aeabi_dsub+0x416>
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	0023      	movs	r3, r4
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	000f      	movs	r7, r1
 8001efc:	4303      	orrs	r3, r0
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dsub+0x2b8>
 8001f02:	e126      	b.n	8002152 <__aeabi_dsub+0x506>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x2be>
 8001f08:	e1c0      	b.n	800228c <__aeabi_dsub+0x640>
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x2c4>
 8001f0e:	e0a1      	b.n	8002054 <__aeabi_dsub+0x408>
 8001f10:	1a83      	subs	r3, r0, r2
 8001f12:	4698      	mov	r8, r3
 8001f14:	465b      	mov	r3, fp
 8001f16:	4540      	cmp	r0, r8
 8001f18:	41ad      	sbcs	r5, r5
 8001f1a:	1ae3      	subs	r3, r4, r3
 8001f1c:	426d      	negs	r5, r5
 8001f1e:	1b5b      	subs	r3, r3, r5
 8001f20:	2580      	movs	r5, #128	@ 0x80
 8001f22:	042d      	lsls	r5, r5, #16
 8001f24:	422b      	tst	r3, r5
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x2de>
 8001f28:	e14b      	b.n	80021c2 <__aeabi_dsub+0x576>
 8001f2a:	465b      	mov	r3, fp
 8001f2c:	1a10      	subs	r0, r2, r0
 8001f2e:	4282      	cmp	r2, r0
 8001f30:	4192      	sbcs	r2, r2
 8001f32:	1b1c      	subs	r4, r3, r4
 8001f34:	0007      	movs	r7, r0
 8001f36:	2601      	movs	r6, #1
 8001f38:	4663      	mov	r3, ip
 8001f3a:	4252      	negs	r2, r2
 8001f3c:	1aa4      	subs	r4, r4, r2
 8001f3e:	4327      	orrs	r7, r4
 8001f40:	401e      	ands	r6, r3
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x2fc>
 8001f46:	e142      	b.n	80021ce <__aeabi_dsub+0x582>
 8001f48:	422c      	tst	r4, r5
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x302>
 8001f4c:	e26d      	b.n	800242a <__aeabi_dsub+0x7de>
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <__aeabi_dsub+0x368>)
 8001f50:	2501      	movs	r5, #1
 8001f52:	401c      	ands	r4, r3
 8001f54:	e71b      	b.n	8001d8e <__aeabi_dsub+0x142>
 8001f56:	42bd      	cmp	r5, r7
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x310>
 8001f5a:	e13b      	b.n	80021d4 <__aeabi_dsub+0x588>
 8001f5c:	2701      	movs	r7, #1
 8001f5e:	2b38      	cmp	r3, #56	@ 0x38
 8001f60:	dd00      	ble.n	8001f64 <__aeabi_dsub+0x318>
 8001f62:	e745      	b.n	8001df0 <__aeabi_dsub+0x1a4>
 8001f64:	2780      	movs	r7, #128	@ 0x80
 8001f66:	4659      	mov	r1, fp
 8001f68:	043f      	lsls	r7, r7, #16
 8001f6a:	4339      	orrs	r1, r7
 8001f6c:	468b      	mov	fp, r1
 8001f6e:	e72a      	b.n	8001dc6 <__aeabi_dsub+0x17a>
 8001f70:	2400      	movs	r4, #0
 8001f72:	2700      	movs	r7, #0
 8001f74:	052d      	lsls	r5, r5, #20
 8001f76:	4325      	orrs	r5, r4
 8001f78:	07f6      	lsls	r6, r6, #31
 8001f7a:	4335      	orrs	r5, r6
 8001f7c:	0038      	movs	r0, r7
 8001f7e:	0029      	movs	r1, r5
 8001f80:	b003      	add	sp, #12
 8001f82:	bcf0      	pop	{r4, r5, r6, r7}
 8001f84:	46bb      	mov	fp, r7
 8001f86:	46b2      	mov	sl, r6
 8001f88:	46a9      	mov	r9, r5
 8001f8a:	46a0      	mov	r8, r4
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	077b      	lsls	r3, r7, #29
 8001f90:	d004      	beq.n	8001f9c <__aeabi_dsub+0x350>
 8001f92:	230f      	movs	r3, #15
 8001f94:	403b      	ands	r3, r7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dsub+0x350>
 8001f9a:	e6e7      	b.n	8001d6c <__aeabi_dsub+0x120>
 8001f9c:	002b      	movs	r3, r5
 8001f9e:	08f8      	lsrs	r0, r7, #3
 8001fa0:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <__aeabi_dsub+0x364>)
 8001fa2:	0767      	lsls	r7, r4, #29
 8001fa4:	4307      	orrs	r7, r0
 8001fa6:	08e5      	lsrs	r5, r4, #3
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x362>
 8001fac:	e74a      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8001fae:	e0a5      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	fffff801 	.word	0xfffff801
 8001fbc:	000007fe 	.word	0x000007fe
 8001fc0:	0038      	movs	r0, r7
 8001fc2:	f000 fafd 	bl	80025c0 <__clzsi2>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	3318      	adds	r3, #24
 8001fca:	2b1f      	cmp	r3, #31
 8001fcc:	dc00      	bgt.n	8001fd0 <__aeabi_dsub+0x384>
 8001fce:	e6a7      	b.n	8001d20 <__aeabi_dsub+0xd4>
 8001fd0:	003a      	movs	r2, r7
 8001fd2:	3808      	subs	r0, #8
 8001fd4:	4082      	lsls	r2, r0
 8001fd6:	429d      	cmp	r5, r3
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0x390>
 8001fda:	e08a      	b.n	80020f2 <__aeabi_dsub+0x4a6>
 8001fdc:	1b5b      	subs	r3, r3, r5
 8001fde:	1c58      	adds	r0, r3, #1
 8001fe0:	281f      	cmp	r0, #31
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dsub+0x39a>
 8001fe4:	e1d8      	b.n	8002398 <__aeabi_dsub+0x74c>
 8001fe6:	0017      	movs	r7, r2
 8001fe8:	3b1f      	subs	r3, #31
 8001fea:	40df      	lsrs	r7, r3
 8001fec:	2820      	cmp	r0, #32
 8001fee:	d005      	beq.n	8001ffc <__aeabi_dsub+0x3b0>
 8001ff0:	2340      	movs	r3, #64	@ 0x40
 8001ff2:	1a1b      	subs	r3, r3, r0
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	1e53      	subs	r3, r2, #1
 8001ff8:	419a      	sbcs	r2, r3
 8001ffa:	4317      	orrs	r7, r2
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	2f00      	cmp	r7, #0
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x3b8>
 8002002:	e0e5      	b.n	80021d0 <__aeabi_dsub+0x584>
 8002004:	077b      	lsls	r3, r7, #29
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x3be>
 8002008:	e6ab      	b.n	8001d62 <__aeabi_dsub+0x116>
 800200a:	002c      	movs	r4, r5
 800200c:	e7c6      	b.n	8001f9c <__aeabi_dsub+0x350>
 800200e:	08c0      	lsrs	r0, r0, #3
 8002010:	e7c6      	b.n	8001fa0 <__aeabi_dsub+0x354>
 8002012:	2700      	movs	r7, #0
 8002014:	2400      	movs	r4, #0
 8002016:	4dd1      	ldr	r5, [pc, #836]	@ (800235c <__aeabi_dsub+0x710>)
 8002018:	e7ac      	b.n	8001f74 <__aeabi_dsub+0x328>
 800201a:	4fd1      	ldr	r7, [pc, #836]	@ (8002360 <__aeabi_dsub+0x714>)
 800201c:	1c6b      	adds	r3, r5, #1
 800201e:	423b      	tst	r3, r7
 8002020:	d171      	bne.n	8002106 <__aeabi_dsub+0x4ba>
 8002022:	0023      	movs	r3, r4
 8002024:	4303      	orrs	r3, r0
 8002026:	2d00      	cmp	r5, #0
 8002028:	d000      	beq.n	800202c <__aeabi_dsub+0x3e0>
 800202a:	e14e      	b.n	80022ca <__aeabi_dsub+0x67e>
 800202c:	4657      	mov	r7, sl
 800202e:	2b00      	cmp	r3, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x3e8>
 8002032:	e1b5      	b.n	80023a0 <__aeabi_dsub+0x754>
 8002034:	2f00      	cmp	r7, #0
 8002036:	d00d      	beq.n	8002054 <__aeabi_dsub+0x408>
 8002038:	1883      	adds	r3, r0, r2
 800203a:	4283      	cmp	r3, r0
 800203c:	4180      	sbcs	r0, r0
 800203e:	445c      	add	r4, fp
 8002040:	4240      	negs	r0, r0
 8002042:	1824      	adds	r4, r4, r0
 8002044:	0222      	lsls	r2, r4, #8
 8002046:	d500      	bpl.n	800204a <__aeabi_dsub+0x3fe>
 8002048:	e1c8      	b.n	80023dc <__aeabi_dsub+0x790>
 800204a:	001f      	movs	r7, r3
 800204c:	4698      	mov	r8, r3
 800204e:	4327      	orrs	r7, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x408>
 8002052:	e0bc      	b.n	80021ce <__aeabi_dsub+0x582>
 8002054:	4643      	mov	r3, r8
 8002056:	0767      	lsls	r7, r4, #29
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	431f      	orrs	r7, r3
 800205c:	08e5      	lsrs	r5, r4, #3
 800205e:	2300      	movs	r3, #0
 8002060:	e04c      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002062:	1a83      	subs	r3, r0, r2
 8002064:	4698      	mov	r8, r3
 8002066:	465b      	mov	r3, fp
 8002068:	4540      	cmp	r0, r8
 800206a:	41bf      	sbcs	r7, r7
 800206c:	1ae3      	subs	r3, r4, r3
 800206e:	427f      	negs	r7, r7
 8002070:	1bdb      	subs	r3, r3, r7
 8002072:	021f      	lsls	r7, r3, #8
 8002074:	d47c      	bmi.n	8002170 <__aeabi_dsub+0x524>
 8002076:	4647      	mov	r7, r8
 8002078:	431f      	orrs	r7, r3
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x432>
 800207c:	e0a6      	b.n	80021cc <__aeabi_dsub+0x580>
 800207e:	001c      	movs	r4, r3
 8002080:	4647      	mov	r7, r8
 8002082:	e645      	b.n	8001d10 <__aeabi_dsub+0xc4>
 8002084:	4cb7      	ldr	r4, [pc, #732]	@ (8002364 <__aeabi_dsub+0x718>)
 8002086:	1aed      	subs	r5, r5, r3
 8002088:	4014      	ands	r4, r2
 800208a:	077b      	lsls	r3, r7, #29
 800208c:	d000      	beq.n	8002090 <__aeabi_dsub+0x444>
 800208e:	e780      	b.n	8001f92 <__aeabi_dsub+0x346>
 8002090:	e784      	b.n	8001f9c <__aeabi_dsub+0x350>
 8002092:	464b      	mov	r3, r9
 8002094:	0025      	movs	r5, r4
 8002096:	4305      	orrs	r5, r0
 8002098:	d066      	beq.n	8002168 <__aeabi_dsub+0x51c>
 800209a:	1e5f      	subs	r7, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x456>
 80020a0:	e0fc      	b.n	800229c <__aeabi_dsub+0x650>
 80020a2:	4dae      	ldr	r5, [pc, #696]	@ (800235c <__aeabi_dsub+0x710>)
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x45e>
 80020a8:	e15e      	b.n	8002368 <__aeabi_dsub+0x71c>
 80020aa:	4666      	mov	r6, ip
 80020ac:	2f38      	cmp	r7, #56	@ 0x38
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_dsub+0x466>
 80020b0:	e0b4      	b.n	800221c <__aeabi_dsub+0x5d0>
 80020b2:	2001      	movs	r0, #1
 80020b4:	1a17      	subs	r7, r2, r0
 80020b6:	42ba      	cmp	r2, r7
 80020b8:	4192      	sbcs	r2, r2
 80020ba:	465b      	mov	r3, fp
 80020bc:	4252      	negs	r2, r2
 80020be:	464d      	mov	r5, r9
 80020c0:	1a9c      	subs	r4, r3, r2
 80020c2:	e620      	b.n	8001d06 <__aeabi_dsub+0xba>
 80020c4:	0767      	lsls	r7, r4, #29
 80020c6:	08c0      	lsrs	r0, r0, #3
 80020c8:	4307      	orrs	r7, r0
 80020ca:	08e5      	lsrs	r5, r4, #3
 80020cc:	e6ba      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80020ce:	001f      	movs	r7, r3
 80020d0:	4659      	mov	r1, fp
 80020d2:	3f20      	subs	r7, #32
 80020d4:	40f9      	lsrs	r1, r7
 80020d6:	000f      	movs	r7, r1
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d005      	beq.n	80020e8 <__aeabi_dsub+0x49c>
 80020dc:	2140      	movs	r1, #64	@ 0x40
 80020de:	1acb      	subs	r3, r1, r3
 80020e0:	4659      	mov	r1, fp
 80020e2:	4099      	lsls	r1, r3
 80020e4:	430a      	orrs	r2, r1
 80020e6:	4692      	mov	sl, r2
 80020e8:	4653      	mov	r3, sl
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	4193      	sbcs	r3, r2
 80020ee:	431f      	orrs	r7, r3
 80020f0:	e604      	b.n	8001cfc <__aeabi_dsub+0xb0>
 80020f2:	1aeb      	subs	r3, r5, r3
 80020f4:	4d9b      	ldr	r5, [pc, #620]	@ (8002364 <__aeabi_dsub+0x718>)
 80020f6:	4015      	ands	r5, r2
 80020f8:	076f      	lsls	r7, r5, #29
 80020fa:	08ed      	lsrs	r5, r5, #3
 80020fc:	032c      	lsls	r4, r5, #12
 80020fe:	055d      	lsls	r5, r3, #21
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	0d6d      	lsrs	r5, r5, #21
 8002104:	e736      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002106:	4d95      	ldr	r5, [pc, #596]	@ (800235c <__aeabi_dsub+0x710>)
 8002108:	42ab      	cmp	r3, r5
 800210a:	d100      	bne.n	800210e <__aeabi_dsub+0x4c2>
 800210c:	e0d6      	b.n	80022bc <__aeabi_dsub+0x670>
 800210e:	1882      	adds	r2, r0, r2
 8002110:	0021      	movs	r1, r4
 8002112:	4282      	cmp	r2, r0
 8002114:	4180      	sbcs	r0, r0
 8002116:	4459      	add	r1, fp
 8002118:	4240      	negs	r0, r0
 800211a:	1808      	adds	r0, r1, r0
 800211c:	07c7      	lsls	r7, r0, #31
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	4317      	orrs	r7, r2
 8002122:	0844      	lsrs	r4, r0, #1
 8002124:	0752      	lsls	r2, r2, #29
 8002126:	d400      	bmi.n	800212a <__aeabi_dsub+0x4de>
 8002128:	e185      	b.n	8002436 <__aeabi_dsub+0x7ea>
 800212a:	220f      	movs	r2, #15
 800212c:	001d      	movs	r5, r3
 800212e:	403a      	ands	r2, r7
 8002130:	2a04      	cmp	r2, #4
 8002132:	d000      	beq.n	8002136 <__aeabi_dsub+0x4ea>
 8002134:	e61a      	b.n	8001d6c <__aeabi_dsub+0x120>
 8002136:	08ff      	lsrs	r7, r7, #3
 8002138:	0764      	lsls	r4, r4, #29
 800213a:	4327      	orrs	r7, r4
 800213c:	0905      	lsrs	r5, r0, #4
 800213e:	e7dd      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002140:	465b      	mov	r3, fp
 8002142:	08d2      	lsrs	r2, r2, #3
 8002144:	075f      	lsls	r7, r3, #29
 8002146:	4317      	orrs	r7, r2
 8002148:	08dd      	lsrs	r5, r3, #3
 800214a:	e67b      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 800214c:	2700      	movs	r7, #0
 800214e:	2400      	movs	r4, #0
 8002150:	e710      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002152:	2b00      	cmp	r3, #0
 8002154:	d000      	beq.n	8002158 <__aeabi_dsub+0x50c>
 8002156:	e0d6      	b.n	8002306 <__aeabi_dsub+0x6ba>
 8002158:	2900      	cmp	r1, #0
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x512>
 800215c:	e12f      	b.n	80023be <__aeabi_dsub+0x772>
 800215e:	2480      	movs	r4, #128	@ 0x80
 8002160:	2600      	movs	r6, #0
 8002162:	4d7e      	ldr	r5, [pc, #504]	@ (800235c <__aeabi_dsub+0x710>)
 8002164:	0324      	lsls	r4, r4, #12
 8002166:	e705      	b.n	8001f74 <__aeabi_dsub+0x328>
 8002168:	4666      	mov	r6, ip
 800216a:	465c      	mov	r4, fp
 800216c:	08d0      	lsrs	r0, r2, #3
 800216e:	e717      	b.n	8001fa0 <__aeabi_dsub+0x354>
 8002170:	465b      	mov	r3, fp
 8002172:	1a17      	subs	r7, r2, r0
 8002174:	42ba      	cmp	r2, r7
 8002176:	4192      	sbcs	r2, r2
 8002178:	1b1c      	subs	r4, r3, r4
 800217a:	2601      	movs	r6, #1
 800217c:	4663      	mov	r3, ip
 800217e:	4252      	negs	r2, r2
 8002180:	1aa4      	subs	r4, r4, r2
 8002182:	401e      	ands	r6, r3
 8002184:	e5c4      	b.n	8001d10 <__aeabi_dsub+0xc4>
 8002186:	1883      	adds	r3, r0, r2
 8002188:	4283      	cmp	r3, r0
 800218a:	4180      	sbcs	r0, r0
 800218c:	445c      	add	r4, fp
 800218e:	4240      	negs	r0, r0
 8002190:	1825      	adds	r5, r4, r0
 8002192:	022a      	lsls	r2, r5, #8
 8002194:	d400      	bmi.n	8002198 <__aeabi_dsub+0x54c>
 8002196:	e0da      	b.n	800234e <__aeabi_dsub+0x702>
 8002198:	4a72      	ldr	r2, [pc, #456]	@ (8002364 <__aeabi_dsub+0x718>)
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	4015      	ands	r5, r2
 800219e:	07ea      	lsls	r2, r5, #31
 80021a0:	431a      	orrs	r2, r3
 80021a2:	0869      	lsrs	r1, r5, #1
 80021a4:	075b      	lsls	r3, r3, #29
 80021a6:	d400      	bmi.n	80021aa <__aeabi_dsub+0x55e>
 80021a8:	e14a      	b.n	8002440 <__aeabi_dsub+0x7f4>
 80021aa:	230f      	movs	r3, #15
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x568>
 80021b2:	e0fc      	b.n	80023ae <__aeabi_dsub+0x762>
 80021b4:	1d17      	adds	r7, r2, #4
 80021b6:	4297      	cmp	r7, r2
 80021b8:	41a4      	sbcs	r4, r4
 80021ba:	4264      	negs	r4, r4
 80021bc:	2502      	movs	r5, #2
 80021be:	1864      	adds	r4, r4, r1
 80021c0:	e6ec      	b.n	8001f9c <__aeabi_dsub+0x350>
 80021c2:	4647      	mov	r7, r8
 80021c4:	001c      	movs	r4, r3
 80021c6:	431f      	orrs	r7, r3
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x580>
 80021ca:	e743      	b.n	8002054 <__aeabi_dsub+0x408>
 80021cc:	2600      	movs	r6, #0
 80021ce:	2500      	movs	r5, #0
 80021d0:	2400      	movs	r4, #0
 80021d2:	e6cf      	b.n	8001f74 <__aeabi_dsub+0x328>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	0767      	lsls	r7, r4, #29
 80021d8:	4307      	orrs	r7, r0
 80021da:	08e5      	lsrs	r5, r4, #3
 80021dc:	e632      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80021de:	1a87      	subs	r7, r0, r2
 80021e0:	465b      	mov	r3, fp
 80021e2:	42b8      	cmp	r0, r7
 80021e4:	4180      	sbcs	r0, r0
 80021e6:	1ae4      	subs	r4, r4, r3
 80021e8:	4240      	negs	r0, r0
 80021ea:	1a24      	subs	r4, r4, r0
 80021ec:	0223      	lsls	r3, r4, #8
 80021ee:	d428      	bmi.n	8002242 <__aeabi_dsub+0x5f6>
 80021f0:	0763      	lsls	r3, r4, #29
 80021f2:	08ff      	lsrs	r7, r7, #3
 80021f4:	431f      	orrs	r7, r3
 80021f6:	08e5      	lsrs	r5, r4, #3
 80021f8:	2301      	movs	r3, #1
 80021fa:	e77f      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x5b6>
 8002200:	e673      	b.n	8001eea <__aeabi_dsub+0x29e>
 8002202:	464b      	mov	r3, r9
 8002204:	1b5f      	subs	r7, r3, r5
 8002206:	003b      	movs	r3, r7
 8002208:	2d00      	cmp	r5, #0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x5c2>
 800220c:	e742      	b.n	8002094 <__aeabi_dsub+0x448>
 800220e:	2f38      	cmp	r7, #56	@ 0x38
 8002210:	dd00      	ble.n	8002214 <__aeabi_dsub+0x5c8>
 8002212:	e0ec      	b.n	80023ee <__aeabi_dsub+0x7a2>
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	000e      	movs	r6, r1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431c      	orrs	r4, r3
 800221c:	2f1f      	cmp	r7, #31
 800221e:	dc25      	bgt.n	800226c <__aeabi_dsub+0x620>
 8002220:	2520      	movs	r5, #32
 8002222:	0023      	movs	r3, r4
 8002224:	1bed      	subs	r5, r5, r7
 8002226:	0001      	movs	r1, r0
 8002228:	40a8      	lsls	r0, r5
 800222a:	40ab      	lsls	r3, r5
 800222c:	40f9      	lsrs	r1, r7
 800222e:	1e45      	subs	r5, r0, #1
 8002230:	41a8      	sbcs	r0, r5
 8002232:	430b      	orrs	r3, r1
 8002234:	40fc      	lsrs	r4, r7
 8002236:	4318      	orrs	r0, r3
 8002238:	465b      	mov	r3, fp
 800223a:	1b1b      	subs	r3, r3, r4
 800223c:	469b      	mov	fp, r3
 800223e:	e739      	b.n	80020b4 <__aeabi_dsub+0x468>
 8002240:	4666      	mov	r6, ip
 8002242:	2501      	movs	r5, #1
 8002244:	e562      	b.n	8001d0c <__aeabi_dsub+0xc0>
 8002246:	001f      	movs	r7, r3
 8002248:	4659      	mov	r1, fp
 800224a:	3f20      	subs	r7, #32
 800224c:	40f9      	lsrs	r1, r7
 800224e:	468c      	mov	ip, r1
 8002250:	2b20      	cmp	r3, #32
 8002252:	d005      	beq.n	8002260 <__aeabi_dsub+0x614>
 8002254:	2740      	movs	r7, #64	@ 0x40
 8002256:	4659      	mov	r1, fp
 8002258:	1afb      	subs	r3, r7, r3
 800225a:	4099      	lsls	r1, r3
 800225c:	430a      	orrs	r2, r1
 800225e:	4692      	mov	sl, r2
 8002260:	4657      	mov	r7, sl
 8002262:	1e7b      	subs	r3, r7, #1
 8002264:	419f      	sbcs	r7, r3
 8002266:	4663      	mov	r3, ip
 8002268:	431f      	orrs	r7, r3
 800226a:	e5c1      	b.n	8001df0 <__aeabi_dsub+0x1a4>
 800226c:	003b      	movs	r3, r7
 800226e:	0025      	movs	r5, r4
 8002270:	3b20      	subs	r3, #32
 8002272:	40dd      	lsrs	r5, r3
 8002274:	2f20      	cmp	r7, #32
 8002276:	d004      	beq.n	8002282 <__aeabi_dsub+0x636>
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	1bdb      	subs	r3, r3, r7
 800227c:	409c      	lsls	r4, r3
 800227e:	4320      	orrs	r0, r4
 8002280:	4680      	mov	r8, r0
 8002282:	4640      	mov	r0, r8
 8002284:	1e43      	subs	r3, r0, #1
 8002286:	4198      	sbcs	r0, r3
 8002288:	4328      	orrs	r0, r5
 800228a:	e713      	b.n	80020b4 <__aeabi_dsub+0x468>
 800228c:	2900      	cmp	r1, #0
 800228e:	d09d      	beq.n	80021cc <__aeabi_dsub+0x580>
 8002290:	2601      	movs	r6, #1
 8002292:	4663      	mov	r3, ip
 8002294:	465c      	mov	r4, fp
 8002296:	4690      	mov	r8, r2
 8002298:	401e      	ands	r6, r3
 800229a:	e6db      	b.n	8002054 <__aeabi_dsub+0x408>
 800229c:	1a17      	subs	r7, r2, r0
 800229e:	465b      	mov	r3, fp
 80022a0:	42ba      	cmp	r2, r7
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	1b1c      	subs	r4, r3, r4
 80022a6:	4252      	negs	r2, r2
 80022a8:	1aa4      	subs	r4, r4, r2
 80022aa:	0223      	lsls	r3, r4, #8
 80022ac:	d4c8      	bmi.n	8002240 <__aeabi_dsub+0x5f4>
 80022ae:	0763      	lsls	r3, r4, #29
 80022b0:	08ff      	lsrs	r7, r7, #3
 80022b2:	431f      	orrs	r7, r3
 80022b4:	4666      	mov	r6, ip
 80022b6:	2301      	movs	r3, #1
 80022b8:	08e5      	lsrs	r5, r4, #3
 80022ba:	e71f      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80022bc:	001d      	movs	r5, r3
 80022be:	2400      	movs	r4, #0
 80022c0:	2700      	movs	r7, #0
 80022c2:	e657      	b.n	8001f74 <__aeabi_dsub+0x328>
 80022c4:	465c      	mov	r4, fp
 80022c6:	08d0      	lsrs	r0, r2, #3
 80022c8:	e66a      	b.n	8001fa0 <__aeabi_dsub+0x354>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x684>
 80022ce:	e737      	b.n	8002140 <__aeabi_dsub+0x4f4>
 80022d0:	4653      	mov	r3, sl
 80022d2:	08c0      	lsrs	r0, r0, #3
 80022d4:	0767      	lsls	r7, r4, #29
 80022d6:	4307      	orrs	r7, r0
 80022d8:	08e5      	lsrs	r5, r4, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x694>
 80022de:	e5b1      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	031b      	lsls	r3, r3, #12
 80022e4:	421d      	tst	r5, r3
 80022e6:	d008      	beq.n	80022fa <__aeabi_dsub+0x6ae>
 80022e8:	4659      	mov	r1, fp
 80022ea:	08c8      	lsrs	r0, r1, #3
 80022ec:	4218      	tst	r0, r3
 80022ee:	d104      	bne.n	80022fa <__aeabi_dsub+0x6ae>
 80022f0:	08d2      	lsrs	r2, r2, #3
 80022f2:	0749      	lsls	r1, r1, #29
 80022f4:	430a      	orrs	r2, r1
 80022f6:	0017      	movs	r7, r2
 80022f8:	0005      	movs	r5, r0
 80022fa:	0f7b      	lsrs	r3, r7, #29
 80022fc:	00ff      	lsls	r7, r7, #3
 80022fe:	08ff      	lsrs	r7, r7, #3
 8002300:	075b      	lsls	r3, r3, #29
 8002302:	431f      	orrs	r7, r3
 8002304:	e59e      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8002306:	08c0      	lsrs	r0, r0, #3
 8002308:	0763      	lsls	r3, r4, #29
 800230a:	4318      	orrs	r0, r3
 800230c:	08e5      	lsrs	r5, r4, #3
 800230e:	2900      	cmp	r1, #0
 8002310:	d053      	beq.n	80023ba <__aeabi_dsub+0x76e>
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	421d      	tst	r5, r3
 8002318:	d00a      	beq.n	8002330 <__aeabi_dsub+0x6e4>
 800231a:	4659      	mov	r1, fp
 800231c:	08cc      	lsrs	r4, r1, #3
 800231e:	421c      	tst	r4, r3
 8002320:	d106      	bne.n	8002330 <__aeabi_dsub+0x6e4>
 8002322:	2601      	movs	r6, #1
 8002324:	4663      	mov	r3, ip
 8002326:	0025      	movs	r5, r4
 8002328:	08d0      	lsrs	r0, r2, #3
 800232a:	0749      	lsls	r1, r1, #29
 800232c:	4308      	orrs	r0, r1
 800232e:	401e      	ands	r6, r3
 8002330:	0f47      	lsrs	r7, r0, #29
 8002332:	00c0      	lsls	r0, r0, #3
 8002334:	08c0      	lsrs	r0, r0, #3
 8002336:	077f      	lsls	r7, r7, #29
 8002338:	4307      	orrs	r7, r0
 800233a:	e583      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 800233c:	1883      	adds	r3, r0, r2
 800233e:	4293      	cmp	r3, r2
 8002340:	4192      	sbcs	r2, r2
 8002342:	445c      	add	r4, fp
 8002344:	4252      	negs	r2, r2
 8002346:	18a5      	adds	r5, r4, r2
 8002348:	022a      	lsls	r2, r5, #8
 800234a:	d500      	bpl.n	800234e <__aeabi_dsub+0x702>
 800234c:	e724      	b.n	8002198 <__aeabi_dsub+0x54c>
 800234e:	076f      	lsls	r7, r5, #29
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	431f      	orrs	r7, r3
 8002354:	08ed      	lsrs	r5, r5, #3
 8002356:	2301      	movs	r3, #1
 8002358:	e6d0      	b.n	80020fc <__aeabi_dsub+0x4b0>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	000007fe 	.word	0x000007fe
 8002364:	ff7fffff 	.word	0xff7fffff
 8002368:	465b      	mov	r3, fp
 800236a:	08d2      	lsrs	r2, r2, #3
 800236c:	075f      	lsls	r7, r3, #29
 800236e:	4666      	mov	r6, ip
 8002370:	4317      	orrs	r7, r2
 8002372:	08dd      	lsrs	r5, r3, #3
 8002374:	e566      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 8002376:	0025      	movs	r5, r4
 8002378:	3b20      	subs	r3, #32
 800237a:	40dd      	lsrs	r5, r3
 800237c:	4663      	mov	r3, ip
 800237e:	2b20      	cmp	r3, #32
 8002380:	d005      	beq.n	800238e <__aeabi_dsub+0x742>
 8002382:	2340      	movs	r3, #64	@ 0x40
 8002384:	4661      	mov	r1, ip
 8002386:	1a5b      	subs	r3, r3, r1
 8002388:	409c      	lsls	r4, r3
 800238a:	4320      	orrs	r0, r4
 800238c:	4680      	mov	r8, r0
 800238e:	4647      	mov	r7, r8
 8002390:	1e7b      	subs	r3, r7, #1
 8002392:	419f      	sbcs	r7, r3
 8002394:	432f      	orrs	r7, r5
 8002396:	e5a0      	b.n	8001eda <__aeabi_dsub+0x28e>
 8002398:	2120      	movs	r1, #32
 800239a:	2700      	movs	r7, #0
 800239c:	1a09      	subs	r1, r1, r0
 800239e:	e4d2      	b.n	8001d46 <__aeabi_dsub+0xfa>
 80023a0:	2f00      	cmp	r7, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x75a>
 80023a4:	e713      	b.n	80021ce <__aeabi_dsub+0x582>
 80023a6:	465c      	mov	r4, fp
 80023a8:	0017      	movs	r7, r2
 80023aa:	2500      	movs	r5, #0
 80023ac:	e5f6      	b.n	8001f9c <__aeabi_dsub+0x350>
 80023ae:	08d7      	lsrs	r7, r2, #3
 80023b0:	0749      	lsls	r1, r1, #29
 80023b2:	2302      	movs	r3, #2
 80023b4:	430f      	orrs	r7, r1
 80023b6:	092d      	lsrs	r5, r5, #4
 80023b8:	e6a0      	b.n	80020fc <__aeabi_dsub+0x4b0>
 80023ba:	0007      	movs	r7, r0
 80023bc:	e542      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023be:	465b      	mov	r3, fp
 80023c0:	2601      	movs	r6, #1
 80023c2:	075f      	lsls	r7, r3, #29
 80023c4:	08dd      	lsrs	r5, r3, #3
 80023c6:	4663      	mov	r3, ip
 80023c8:	08d2      	lsrs	r2, r2, #3
 80023ca:	4317      	orrs	r7, r2
 80023cc:	401e      	ands	r6, r3
 80023ce:	e539      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023d0:	465b      	mov	r3, fp
 80023d2:	08d2      	lsrs	r2, r2, #3
 80023d4:	075f      	lsls	r7, r3, #29
 80023d6:	4317      	orrs	r7, r2
 80023d8:	08dd      	lsrs	r5, r3, #3
 80023da:	e533      	b.n	8001e44 <__aeabi_dsub+0x1f8>
 80023dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <__aeabi_dsub+0x80c>)
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	4022      	ands	r2, r4
 80023e2:	0757      	lsls	r7, r2, #29
 80023e4:	0252      	lsls	r2, r2, #9
 80023e6:	2501      	movs	r5, #1
 80023e8:	431f      	orrs	r7, r3
 80023ea:	0b14      	lsrs	r4, r2, #12
 80023ec:	e5c2      	b.n	8001f74 <__aeabi_dsub+0x328>
 80023ee:	000e      	movs	r6, r1
 80023f0:	2001      	movs	r0, #1
 80023f2:	e65f      	b.n	80020b4 <__aeabi_dsub+0x468>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <__aeabi_dsub+0x7c8>
 80023f8:	464b      	mov	r3, r9
 80023fa:	1b5b      	subs	r3, r3, r5
 80023fc:	469c      	mov	ip, r3
 80023fe:	2d00      	cmp	r5, #0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x7b8>
 8002402:	e548      	b.n	8001e96 <__aeabi_dsub+0x24a>
 8002404:	2701      	movs	r7, #1
 8002406:	2b38      	cmp	r3, #56	@ 0x38
 8002408:	dd00      	ble.n	800240c <__aeabi_dsub+0x7c0>
 800240a:	e566      	b.n	8001eda <__aeabi_dsub+0x28e>
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431c      	orrs	r4, r3
 8002412:	e550      	b.n	8001eb6 <__aeabi_dsub+0x26a>
 8002414:	1c6b      	adds	r3, r5, #1
 8002416:	4d11      	ldr	r5, [pc, #68]	@ (800245c <__aeabi_dsub+0x810>)
 8002418:	422b      	tst	r3, r5
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x7d2>
 800241c:	e673      	b.n	8002106 <__aeabi_dsub+0x4ba>
 800241e:	4659      	mov	r1, fp
 8002420:	0023      	movs	r3, r4
 8002422:	4311      	orrs	r1, r2
 8002424:	468a      	mov	sl, r1
 8002426:	4303      	orrs	r3, r0
 8002428:	e600      	b.n	800202c <__aeabi_dsub+0x3e0>
 800242a:	0767      	lsls	r7, r4, #29
 800242c:	08c0      	lsrs	r0, r0, #3
 800242e:	2300      	movs	r3, #0
 8002430:	4307      	orrs	r7, r0
 8002432:	08e5      	lsrs	r5, r4, #3
 8002434:	e662      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002436:	0764      	lsls	r4, r4, #29
 8002438:	08ff      	lsrs	r7, r7, #3
 800243a:	4327      	orrs	r7, r4
 800243c:	0905      	lsrs	r5, r0, #4
 800243e:	e65d      	b.n	80020fc <__aeabi_dsub+0x4b0>
 8002440:	08d2      	lsrs	r2, r2, #3
 8002442:	0749      	lsls	r1, r1, #29
 8002444:	4311      	orrs	r1, r2
 8002446:	000f      	movs	r7, r1
 8002448:	2302      	movs	r3, #2
 800244a:	092d      	lsrs	r5, r5, #4
 800244c:	e656      	b.n	80020fc <__aeabi_dsub+0x4b0>
 800244e:	0007      	movs	r7, r0
 8002450:	e5a4      	b.n	8001f9c <__aeabi_dsub+0x350>
 8002452:	0038      	movs	r0, r7
 8002454:	e48f      	b.n	8001d76 <__aeabi_dsub+0x12a>
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	ff7fffff 	.word	0xff7fffff
 800245c:	000007fe 	.word	0x000007fe

08002460 <__aeabi_dcmpun>:
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	46c6      	mov	lr, r8
 8002464:	031e      	lsls	r6, r3, #12
 8002466:	0b36      	lsrs	r6, r6, #12
 8002468:	46b0      	mov	r8, r6
 800246a:	4e0d      	ldr	r6, [pc, #52]	@ (80024a0 <__aeabi_dcmpun+0x40>)
 800246c:	030c      	lsls	r4, r1, #12
 800246e:	004d      	lsls	r5, r1, #1
 8002470:	005f      	lsls	r7, r3, #1
 8002472:	b500      	push	{lr}
 8002474:	0b24      	lsrs	r4, r4, #12
 8002476:	0d6d      	lsrs	r5, r5, #21
 8002478:	0d7f      	lsrs	r7, r7, #21
 800247a:	42b5      	cmp	r5, r6
 800247c:	d00b      	beq.n	8002496 <__aeabi_dcmpun+0x36>
 800247e:	4908      	ldr	r1, [pc, #32]	@ (80024a0 <__aeabi_dcmpun+0x40>)
 8002480:	2000      	movs	r0, #0
 8002482:	428f      	cmp	r7, r1
 8002484:	d104      	bne.n	8002490 <__aeabi_dcmpun+0x30>
 8002486:	4646      	mov	r6, r8
 8002488:	4316      	orrs	r6, r2
 800248a:	0030      	movs	r0, r6
 800248c:	1e43      	subs	r3, r0, #1
 800248e:	4198      	sbcs	r0, r3
 8002490:	bc80      	pop	{r7}
 8002492:	46b8      	mov	r8, r7
 8002494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002496:	4304      	orrs	r4, r0
 8002498:	2001      	movs	r0, #1
 800249a:	2c00      	cmp	r4, #0
 800249c:	d1f8      	bne.n	8002490 <__aeabi_dcmpun+0x30>
 800249e:	e7ee      	b.n	800247e <__aeabi_dcmpun+0x1e>
 80024a0:	000007ff 	.word	0x000007ff

080024a4 <__aeabi_d2iz>:
 80024a4:	000b      	movs	r3, r1
 80024a6:	0002      	movs	r2, r0
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4d16      	ldr	r5, [pc, #88]	@ (8002504 <__aeabi_d2iz+0x60>)
 80024ac:	030c      	lsls	r4, r1, #12
 80024ae:	b082      	sub	sp, #8
 80024b0:	0049      	lsls	r1, r1, #1
 80024b2:	2000      	movs	r0, #0
 80024b4:	9200      	str	r2, [sp, #0]
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	0b24      	lsrs	r4, r4, #12
 80024ba:	0d49      	lsrs	r1, r1, #21
 80024bc:	0fde      	lsrs	r6, r3, #31
 80024be:	42a9      	cmp	r1, r5
 80024c0:	dd04      	ble.n	80024cc <__aeabi_d2iz+0x28>
 80024c2:	4811      	ldr	r0, [pc, #68]	@ (8002508 <__aeabi_d2iz+0x64>)
 80024c4:	4281      	cmp	r1, r0
 80024c6:	dd03      	ble.n	80024d0 <__aeabi_d2iz+0x2c>
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <__aeabi_d2iz+0x68>)
 80024ca:	18f0      	adds	r0, r6, r3
 80024cc:	b002      	add	sp, #8
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	2080      	movs	r0, #128	@ 0x80
 80024d2:	0340      	lsls	r0, r0, #13
 80024d4:	4320      	orrs	r0, r4
 80024d6:	4c0e      	ldr	r4, [pc, #56]	@ (8002510 <__aeabi_d2iz+0x6c>)
 80024d8:	1a64      	subs	r4, r4, r1
 80024da:	2c1f      	cmp	r4, #31
 80024dc:	dd08      	ble.n	80024f0 <__aeabi_d2iz+0x4c>
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <__aeabi_d2iz+0x70>)
 80024e0:	1a5b      	subs	r3, r3, r1
 80024e2:	40d8      	lsrs	r0, r3
 80024e4:	0003      	movs	r3, r0
 80024e6:	4258      	negs	r0, r3
 80024e8:	2e00      	cmp	r6, #0
 80024ea:	d1ef      	bne.n	80024cc <__aeabi_d2iz+0x28>
 80024ec:	0018      	movs	r0, r3
 80024ee:	e7ed      	b.n	80024cc <__aeabi_d2iz+0x28>
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <__aeabi_d2iz+0x74>)
 80024f2:	9a00      	ldr	r2, [sp, #0]
 80024f4:	469c      	mov	ip, r3
 80024f6:	0003      	movs	r3, r0
 80024f8:	4461      	add	r1, ip
 80024fa:	408b      	lsls	r3, r1
 80024fc:	40e2      	lsrs	r2, r4
 80024fe:	4313      	orrs	r3, r2
 8002500:	e7f1      	b.n	80024e6 <__aeabi_d2iz+0x42>
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	000003fe 	.word	0x000003fe
 8002508:	0000041d 	.word	0x0000041d
 800250c:	7fffffff 	.word	0x7fffffff
 8002510:	00000433 	.word	0x00000433
 8002514:	00000413 	.word	0x00000413
 8002518:	fffffbed 	.word	0xfffffbed

0800251c <__aeabi_i2d>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	2800      	cmp	r0, #0
 8002520:	d016      	beq.n	8002550 <__aeabi_i2d+0x34>
 8002522:	17c3      	asrs	r3, r0, #31
 8002524:	18c5      	adds	r5, r0, r3
 8002526:	405d      	eors	r5, r3
 8002528:	0fc4      	lsrs	r4, r0, #31
 800252a:	0028      	movs	r0, r5
 800252c:	f000 f848 	bl	80025c0 <__clzsi2>
 8002530:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <__aeabi_i2d+0x58>)
 8002532:	1a1b      	subs	r3, r3, r0
 8002534:	055b      	lsls	r3, r3, #21
 8002536:	0d5b      	lsrs	r3, r3, #21
 8002538:	280a      	cmp	r0, #10
 800253a:	dc14      	bgt.n	8002566 <__aeabi_i2d+0x4a>
 800253c:	0002      	movs	r2, r0
 800253e:	002e      	movs	r6, r5
 8002540:	3215      	adds	r2, #21
 8002542:	4096      	lsls	r6, r2
 8002544:	220b      	movs	r2, #11
 8002546:	1a12      	subs	r2, r2, r0
 8002548:	40d5      	lsrs	r5, r2
 800254a:	032d      	lsls	r5, r5, #12
 800254c:	0b2d      	lsrs	r5, r5, #12
 800254e:	e003      	b.n	8002558 <__aeabi_i2d+0x3c>
 8002550:	2400      	movs	r4, #0
 8002552:	2300      	movs	r3, #0
 8002554:	2500      	movs	r5, #0
 8002556:	2600      	movs	r6, #0
 8002558:	051b      	lsls	r3, r3, #20
 800255a:	432b      	orrs	r3, r5
 800255c:	07e4      	lsls	r4, r4, #31
 800255e:	4323      	orrs	r3, r4
 8002560:	0030      	movs	r0, r6
 8002562:	0019      	movs	r1, r3
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	380b      	subs	r0, #11
 8002568:	4085      	lsls	r5, r0
 800256a:	032d      	lsls	r5, r5, #12
 800256c:	2600      	movs	r6, #0
 800256e:	0b2d      	lsrs	r5, r5, #12
 8002570:	e7f2      	b.n	8002558 <__aeabi_i2d+0x3c>
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	0000041e 	.word	0x0000041e

08002578 <__aeabi_ui2d>:
 8002578:	b510      	push	{r4, lr}
 800257a:	1e04      	subs	r4, r0, #0
 800257c:	d010      	beq.n	80025a0 <__aeabi_ui2d+0x28>
 800257e:	f000 f81f 	bl	80025c0 <__clzsi2>
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <__aeabi_ui2d+0x44>)
 8002584:	1a1b      	subs	r3, r3, r0
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	0d5b      	lsrs	r3, r3, #21
 800258a:	280a      	cmp	r0, #10
 800258c:	dc0f      	bgt.n	80025ae <__aeabi_ui2d+0x36>
 800258e:	220b      	movs	r2, #11
 8002590:	0021      	movs	r1, r4
 8002592:	1a12      	subs	r2, r2, r0
 8002594:	40d1      	lsrs	r1, r2
 8002596:	3015      	adds	r0, #21
 8002598:	030a      	lsls	r2, r1, #12
 800259a:	4084      	lsls	r4, r0
 800259c:	0b12      	lsrs	r2, r2, #12
 800259e:	e001      	b.n	80025a4 <__aeabi_ui2d+0x2c>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2200      	movs	r2, #0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	4313      	orrs	r3, r2
 80025a8:	0020      	movs	r0, r4
 80025aa:	0019      	movs	r1, r3
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	0022      	movs	r2, r4
 80025b0:	380b      	subs	r0, #11
 80025b2:	4082      	lsls	r2, r0
 80025b4:	0312      	lsls	r2, r2, #12
 80025b6:	2400      	movs	r4, #0
 80025b8:	0b12      	lsrs	r2, r2, #12
 80025ba:	e7f3      	b.n	80025a4 <__aeabi_ui2d+0x2c>
 80025bc:	0000041e 	.word	0x0000041e

080025c0 <__clzsi2>:
 80025c0:	211c      	movs	r1, #28
 80025c2:	2301      	movs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	4298      	cmp	r0, r3
 80025c8:	d301      	bcc.n	80025ce <__clzsi2+0xe>
 80025ca:	0c00      	lsrs	r0, r0, #16
 80025cc:	3910      	subs	r1, #16
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	4298      	cmp	r0, r3
 80025d2:	d301      	bcc.n	80025d8 <__clzsi2+0x18>
 80025d4:	0a00      	lsrs	r0, r0, #8
 80025d6:	3908      	subs	r1, #8
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	4298      	cmp	r0, r3
 80025dc:	d301      	bcc.n	80025e2 <__clzsi2+0x22>
 80025de:	0900      	lsrs	r0, r0, #4
 80025e0:	3904      	subs	r1, #4
 80025e2:	a202      	add	r2, pc, #8	@ (adr r2, 80025ec <__clzsi2+0x2c>)
 80025e4:	5c10      	ldrb	r0, [r2, r0]
 80025e6:	1840      	adds	r0, r0, r1
 80025e8:	4770      	bx	lr
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	02020304 	.word	0x02020304
 80025f0:	01010101 	.word	0x01010101
	...

080025fc <__clzdi2>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	2900      	cmp	r1, #0
 8002600:	d103      	bne.n	800260a <__clzdi2+0xe>
 8002602:	f7ff ffdd 	bl	80025c0 <__clzsi2>
 8002606:	3020      	adds	r0, #32
 8002608:	e002      	b.n	8002610 <__clzdi2+0x14>
 800260a:	0008      	movs	r0, r1
 800260c:	f7ff ffd8 	bl	80025c0 <__clzsi2>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)

08002614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800261a:	f000 fcc5 	bl	8002fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261e:	f000 f847 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002622:	f000 f9b5 	bl	8002990 <MX_GPIO_Init>
  MX_ADC_Init();
 8002626:	f000 f8bf 	bl	80027a8 <MX_ADC_Init>
  MX_I2C1_Init();
 800262a:	f000 f941 	bl	80028b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800262e:	f000 f97f 	bl	8002930 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002632:	f000 f8ab 	bl	800278c <MX_NVIC_Init>

  /* USER CODE BEGIN 2 */

  // Start receiving in interrupt mode
    HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8002636:	4918      	ldr	r1, [pc, #96]	@ (8002698 <main+0x84>)
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <main+0x88>)
 800263a:	2201      	movs	r2, #1
 800263c:	0018      	movs	r0, r3
 800263e:	f002 fb43 	bl	8004cc8 <HAL_UART_Receive_IT>
            // ADDED CODE END
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Toggle a heartbeat LED to show the MCU is alive (optional)
	   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	01db      	lsls	r3, r3, #7
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <main+0x8c>)
 8002648:	0019      	movs	r1, r3
 800264a:	0010      	movs	r0, r2
 800264c:	f001 fa1d 	bl	8003a8a <HAL_GPIO_TogglePin>
	   HAL_Delay(1000);  // 1-second heartbeat
 8002650:	23fa      	movs	r3, #250	@ 0xfa
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fd17 	bl	8003088 <HAL_Delay>

	   // UART sanity check message every 3 seconds
	   static uint32_t lastTick = 0;
	   if (HAL_GetTick() - lastTick >= 3000)
 800265a:	f000 fd0b 	bl	8003074 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <main+0x90>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a10      	ldr	r2, [pc, #64]	@ (80026a8 <main+0x94>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d9ea      	bls.n	8002642 <main+0x2e>
	   {
	     char testMsg[] = "UART test\r\n";
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	4a0f      	ldr	r2, [pc, #60]	@ (80026ac <main+0x98>)
 8002670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002672:	c313      	stmia	r3!, {r0, r1, r4}
	     HAL_UART_Transmit(&huart2, (uint8_t*)testMsg, strlen(testMsg), HAL_MAX_DELAY);
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	0018      	movs	r0, r3
 8002678:	f7fd fd46 	bl	8000108 <strlen>
 800267c:	0003      	movs	r3, r0
 800267e:	b29a      	uxth	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	1d39      	adds	r1, r7, #4
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <main+0x88>)
 8002688:	f002 fa7e 	bl	8004b88 <HAL_UART_Transmit>
	     lastTick = HAL_GetTick();
 800268c:	f000 fcf2 	bl	8003074 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <main+0x90>)
 8002694:	601a      	str	r2, [r3, #0]
  {
 8002696:	e7d4      	b.n	8002642 <main+0x2e>
 8002698:	20000330 	.word	0x20000330
 800269c:	200002a8 	.word	0x200002a8
 80026a0:	50000400 	.word	0x50000400
 80026a4:	20000334 	.word	0x20000334
 80026a8:	00000bb7 	.word	0x00000bb7
 80026ac:	08008cc0 	.word	0x08008cc0

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b099      	sub	sp, #100	@ 0x64
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	242c      	movs	r4, #44	@ 0x2c
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	0018      	movs	r0, r3
 80026bc:	2334      	movs	r3, #52	@ 0x34
 80026be:	001a      	movs	r2, r3
 80026c0:	2100      	movs	r1, #0
 80026c2:	f004 fb39 	bl	8006d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c6:	2318      	movs	r3, #24
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	0018      	movs	r0, r3
 80026cc:	2314      	movs	r3, #20
 80026ce:	001a      	movs	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f004 fb31 	bl	8006d38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d6:	003b      	movs	r3, r7
 80026d8:	0018      	movs	r0, r3
 80026da:	2318      	movs	r3, #24
 80026dc:	001a      	movs	r2, r3
 80026de:	2100      	movs	r1, #0
 80026e0:	f004 fb2a 	bl	8006d38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <SystemClock_Config+0xd4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <SystemClock_Config+0xd8>)
 80026ea:	401a      	ands	r2, r3
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <SystemClock_Config+0xd4>)
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	0109      	lsls	r1, r1, #4
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026f6:	0021      	movs	r1, r4
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2210      	movs	r2, #16
 80026fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2201      	movs	r2, #1
 8002702:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	22a0      	movs	r2, #160	@ 0xa0
 800270e:	0212      	lsls	r2, r2, #8
 8002710:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002718:	187b      	adds	r3, r7, r1
 800271a:	0018      	movs	r0, r3
 800271c:	f001 fb34 	bl	8003d88 <HAL_RCC_OscConfig>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002724:	f000 fa1a 	bl	8002b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002728:	2118      	movs	r1, #24
 800272a:	187b      	adds	r3, r7, r1
 800272c:	220f      	movs	r2, #15
 800272e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2100      	movs	r1, #0
 800274c:	0018      	movs	r0, r3
 800274e:	f001 fe97 	bl	8004480 <HAL_RCC_ClockConfig>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002756:	f000 fa01 	bl	8002b5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800275a:	003b      	movs	r3, r7
 800275c:	220a      	movs	r2, #10
 800275e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002760:	003b      	movs	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002766:	003b      	movs	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800276c:	003b      	movs	r3, r7
 800276e:	0018      	movs	r0, r3
 8002770:	f002 f88a 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002778:	f000 f9f0 	bl	8002b5c <Error_Handler>
  }
}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b019      	add	sp, #100	@ 0x64
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	40007000 	.word	0x40007000
 8002788:	ffffe7ff 	.word	0xffffe7ff

0800278c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2102      	movs	r1, #2
 8002794:	201c      	movs	r0, #28
 8002796:	f000 ff23 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800279a:	201c      	movs	r0, #28
 800279c:	f000 ff35 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027ae:	003b      	movs	r3, r7
 80027b0:	0018      	movs	r0, r3
 80027b2:	2308      	movs	r3, #8
 80027b4:	001a      	movs	r2, r3
 80027b6:	2100      	movs	r1, #0
 80027b8:	f004 fabe 	bl	8006d38 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80027bc:	4b37      	ldr	r3, [pc, #220]	@ (800289c <MX_ADC_Init+0xf4>)
 80027be:	4a38      	ldr	r2, [pc, #224]	@ (80028a0 <MX_ADC_Init+0xf8>)
 80027c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80027c2:	4b36      	ldr	r3, [pc, #216]	@ (800289c <MX_ADC_Init+0xf4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027c8:	4b34      	ldr	r3, [pc, #208]	@ (800289c <MX_ADC_Init+0xf4>)
 80027ca:	22c0      	movs	r2, #192	@ 0xc0
 80027cc:	0612      	lsls	r2, r2, #24
 80027ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80027d0:	4b32      	ldr	r3, [pc, #200]	@ (800289c <MX_ADC_Init+0xf4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <MX_ADC_Init+0xf4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <MX_ADC_Init+0xf4>)
 80027de:	2201      	movs	r2, #1
 80027e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027e2:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <MX_ADC_Init+0xf4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80027e8:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <MX_ADC_Init+0xf4>)
 80027ea:	2220      	movs	r2, #32
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <MX_ADC_Init+0xf4>)
 80027f2:	2221      	movs	r2, #33	@ 0x21
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f8:	4b28      	ldr	r3, [pc, #160]	@ (800289c <MX_ADC_Init+0xf4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fe:	4b27      	ldr	r3, [pc, #156]	@ (800289c <MX_ADC_Init+0xf4>)
 8002800:	22c2      	movs	r2, #194	@ 0xc2
 8002802:	32ff      	adds	r2, #255	@ 0xff
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002806:	4b25      	ldr	r3, [pc, #148]	@ (800289c <MX_ADC_Init+0xf4>)
 8002808:	222c      	movs	r2, #44	@ 0x2c
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800280e:	4b23      	ldr	r3, [pc, #140]	@ (800289c <MX_ADC_Init+0xf4>)
 8002810:	2204      	movs	r2, #4
 8002812:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002814:	4b21      	ldr	r3, [pc, #132]	@ (800289c <MX_ADC_Init+0xf4>)
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <MX_ADC_Init+0xf4>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <MX_ADC_Init+0xf4>)
 8002822:	2201      	movs	r2, #1
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <MX_ADC_Init+0xf4>)
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <MX_ADC_Init+0xf4>)
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fc4e 	bl	80030d0 <HAL_ADC_Init>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d001      	beq.n	800283c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002838:	f000 f990 	bl	8002b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800283c:	003b      	movs	r3, r7
 800283e:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <MX_ADC_Init+0xfc>)
 8002840:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002842:	003b      	movs	r3, r7
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	0152      	lsls	r2, r2, #5
 8002848:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800284a:	003a      	movs	r2, r7
 800284c:	4b13      	ldr	r3, [pc, #76]	@ (800289c <MX_ADC_Init+0xf4>)
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fdb1 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d001      	beq.n	800285e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800285a:	f000 f97f 	bl	8002b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800285e:	003b      	movs	r3, r7
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <MX_ADC_Init+0x100>)
 8002862:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002864:	003a      	movs	r2, r7
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <MX_ADC_Init+0xf4>)
 8002868:	0011      	movs	r1, r2
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fda4 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002874:	f000 f972 	bl	8002b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002878:	003b      	movs	r3, r7
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <MX_ADC_Init+0x104>)
 800287c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800287e:	003a      	movs	r2, r7
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <MX_ADC_Init+0xf4>)
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fd97 	bl	80033b8 <HAL_ADC_ConfigChannel>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800288e:	f000 f965 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	b002      	add	sp, #8
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	200001f8 	.word	0x200001f8
 80028a0:	40012400 	.word	0x40012400
 80028a4:	10000010 	.word	0x10000010
 80028a8:	14000020 	.word	0x14000020
 80028ac:	18000040 	.word	0x18000040

080028b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028b6:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <MX_I2C1_Init+0x7c>)
 80028b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028bc:	22c1      	movs	r2, #193	@ 0xc1
 80028be:	00d2      	lsls	r2, r2, #3
 80028c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028c2:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028d4:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f001 f90c 	bl	8003b0c <HAL_I2C_Init>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028f8:	f000 f930 	bl	8002b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <MX_I2C1_Init+0x78>)
 80028fe:	2100      	movs	r1, #0
 8002900:	0018      	movs	r0, r3
 8002902:	f001 f9a9 	bl	8003c58 <HAL_I2CEx_ConfigAnalogFilter>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800290a:	f000 f927 	bl	8002b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <MX_I2C1_Init+0x78>)
 8002910:	2100      	movs	r1, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f001 f9ec 	bl	8003cf0 <HAL_I2CEx_ConfigDigitalFilter>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800291c:	f000 f91e 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	20000254 	.word	0x20000254
 800292c:	40005400 	.word	0x40005400

08002930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002936:	4a15      	ldr	r2, [pc, #84]	@ (800298c <MX_USART2_UART_Init+0x5c>)
 8002938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 800293c:	22e1      	movs	r2, #225	@ 0xe1
 800293e:	0252      	lsls	r2, r2, #9
 8002940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <MX_USART2_UART_Init+0x58>)
 8002974:	0018      	movs	r0, r3
 8002976:	f002 f8b3 	bl	8004ae0 <HAL_UART_Init>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800297e:	f000 f8ed 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200002a8 	.word	0x200002a8
 800298c:	40004400 	.word	0x40004400

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	@ 0x24
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	240c      	movs	r4, #12
 8002998:	193b      	adds	r3, r7, r4
 800299a:	0018      	movs	r0, r3
 800299c:	2314      	movs	r3, #20
 800299e:	001a      	movs	r2, r3
 80029a0:	2100      	movs	r1, #0
 80029a2:	f004 f9c9 	bl	8006d38 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b48      	ldr	r3, [pc, #288]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029aa:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029ac:	2101      	movs	r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029b2:	4b45      	ldr	r3, [pc, #276]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	2201      	movs	r2, #1
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b42      	ldr	r3, [pc, #264]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029c4:	2102      	movs	r1, #2
 80029c6:	430a      	orrs	r2, r1
 80029c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029ca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <MX_GPIO_Init+0x138>)
 80029cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80029d6:	493d      	ldr	r1, [pc, #244]	@ (8002acc <MX_GPIO_Init+0x13c>)
 80029d8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <MX_GPIO_Init+0x140>)
 80029da:	2200      	movs	r2, #0
 80029dc:	0018      	movs	r0, r3
 80029de:	f001 f837 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 80029e2:	23a0      	movs	r3, #160	@ 0xa0
 80029e4:	01db      	lsls	r3, r3, #7
 80029e6:	483a      	ldr	r0, [pc, #232]	@ (8002ad0 <MX_GPIO_Init+0x140>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	0019      	movs	r1, r3
 80029ec:	f001 f830 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2203      	movs	r2, #3
 80029f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2202      	movs	r2, #2
 80029fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	193a      	adds	r2, r7, r4
 8002a10:	23a0      	movs	r3, #160	@ 0xa0
 8002a12:	05db      	lsls	r3, r3, #23
 8002a14:	0011      	movs	r1, r2
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fe9c 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad4 <MX_GPIO_Init+0x144>)
 8002a20:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	2284      	movs	r2, #132	@ 0x84
 8002a26:	0392      	lsls	r2, r2, #14
 8002a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	193a      	adds	r2, r7, r4
 8002a32:	23a0      	movs	r3, #160	@ 0xa0
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 fe8b 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	4a25      	ldr	r2, [pc, #148]	@ (8002ad8 <MX_GPIO_Init+0x148>)
 8002a42:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	2201      	movs	r2, #1
 8002a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <MX_GPIO_Init+0x140>)
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f000 fe79 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2202      	movs	r2, #2
 8002a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <MX_GPIO_Init+0x140>)
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	f000 fe6a 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a80:	0021      	movs	r1, r4
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	00d2      	lsls	r2, r2, #3
 8002a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <MX_GPIO_Init+0x140>)
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f000 fe53 	bl	8003754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2007      	movs	r0, #7
 8002ab4:	f000 fd94 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ab8:	2007      	movs	r0, #7
 8002aba:	f000 fda6 	bl	800360a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b009      	add	sp, #36	@ 0x24
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	00002019 	.word	0x00002019
 8002ad0:	50000400 	.word	0x50000400
 8002ad4:	00009980 	.word	0x00009980
 8002ad8:	00007019 	.word	0x00007019

08002adc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_UART_RxCpltCallback+0x6c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d127      	bne.n	8002b3e <HAL_UART_RxCpltCallback+0x62>
  {
    // Echo received character
    HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8002aee:	2301      	movs	r3, #1
 8002af0:	425b      	negs	r3, r3
 8002af2:	4916      	ldr	r1, [pc, #88]	@ (8002b4c <HAL_UART_RxCpltCallback+0x70>)
 8002af4:	4816      	ldr	r0, [pc, #88]	@ (8002b50 <HAL_UART_RxCpltCallback+0x74>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	f002 f846 	bl	8004b88 <HAL_UART_Transmit>

    // Check for 'p' or 'P'
    if (rxData == 'p' || rxData == 'P')
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_UART_RxCpltCallback+0x70>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b70      	cmp	r3, #112	@ 0x70
 8002b02:	d003      	beq.n	8002b0c <HAL_UART_RxCpltCallback+0x30>
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_UART_RxCpltCallback+0x70>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b50      	cmp	r3, #80	@ 0x50
 8002b0a:	d112      	bne.n	8002b32 <HAL_UART_RxCpltCallback+0x56>
    {
      HAL_UART_Transmit(&huart2, (uint8_t*)pongMessage, strlen(pongMessage), HAL_MAX_DELAY);
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_UART_RxCpltCallback+0x78>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fd fafa 	bl	8000108 <strlen>
 8002b14:	0003      	movs	r3, r0
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2301      	movs	r3, #1
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	490d      	ldr	r1, [pc, #52]	@ (8002b54 <HAL_UART_RxCpltCallback+0x78>)
 8002b1e:	480c      	ldr	r0, [pc, #48]	@ (8002b50 <HAL_UART_RxCpltCallback+0x74>)
 8002b20:	f002 f832 	bl	8004b88 <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); // Toggle ping LED
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	015b      	lsls	r3, r3, #5
 8002b28:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <HAL_UART_RxCpltCallback+0x7c>)
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f000 ffac 	bl	8003a8a <HAL_GPIO_TogglePin>
    }

    // Continue listening
    HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8002b32:	4906      	ldr	r1, [pc, #24]	@ (8002b4c <HAL_UART_RxCpltCallback+0x70>)
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_UART_RxCpltCallback+0x74>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f002 f8c5 	bl	8004cc8 <HAL_UART_Receive_IT>
  }
}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	40004400 	.word	0x40004400
 8002b4c:	20000330 	.word	0x20000330
 8002b50:	200002a8 	.word	0x200002a8
 8002b54:	20000000 	.word	0x20000000
 8002b58:	50000400 	.word	0x50000400

08002b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	e7fd      	b.n	8002b64 <Error_Handler+0x8>

08002b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <HAL_MspInit+0x24>)
 8002b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_MspInit+0x24>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	430a      	orrs	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <HAL_MspInit+0x24>)
 8002b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_MspInit+0x24>)
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	0549      	lsls	r1, r1, #21
 8002b82:	430a      	orrs	r2, r1
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	240c      	movs	r4, #12
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2314      	movs	r3, #20
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f004 f8c8 	bl	8006d38 <memset>
  if(hadc->Instance==ADC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <HAL_ADC_MspInit+0x70>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d122      	bne.n	8002bf8 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bb2:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_ADC_MspInit+0x74>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb6:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <HAL_ADC_MspInit+0x74>)
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	0089      	lsls	r1, r1, #2
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_ADC_MspInit+0x74>)
 8002bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_ADC_MspInit+0x74>)
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <HAL_ADC_MspInit+0x74>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	2270      	movs	r2, #112	@ 0x70
 8002bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	2203      	movs	r2, #3
 8002be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	193a      	adds	r2, r7, r4
 8002bec:	23a0      	movs	r3, #160	@ 0xa0
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fdae 	bl	8003754 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b009      	add	sp, #36	@ 0x24
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	40012400 	.word	0x40012400
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	240c      	movs	r4, #12
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	0018      	movs	r0, r3
 8002c16:	2314      	movs	r3, #20
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f004 f88c 	bl	8006d38 <memset>
  if(hi2c->Instance==I2C1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_I2C_MspInit+0x80>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12a      	bne.n	8002c80 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <HAL_I2C_MspInit+0x84>)
 8002c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2e:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_I2C_MspInit+0x84>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_I2C_MspInit+0x84>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	22c0      	movs	r2, #192	@ 0xc0
 8002c46:	00d2      	lsls	r2, r2, #3
 8002c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2212      	movs	r2, #18
 8002c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2206      	movs	r2, #6
 8002c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	187a      	adds	r2, r7, r1
 8002c66:	23a0      	movs	r3, #160	@ 0xa0
 8002c68:	05db      	lsls	r3, r3, #23
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 fd71 	bl	8003754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_I2C_MspInit+0x84>)
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_I2C_MspInit+0x84>)
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	0389      	lsls	r1, r1, #14
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b009      	add	sp, #36	@ 0x24
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	40005400 	.word	0x40005400
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	240c      	movs	r4, #12
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f004 f848 	bl	8006d38 <memset>
  if(huart->Instance==USART2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <HAL_UART_MspInit+0x80>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d129      	bne.n	8002d06 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <HAL_UART_MspInit+0x84>)
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_UART_MspInit+0x84>)
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	0289      	lsls	r1, r1, #10
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_UART_MspInit+0x84>)
 8002cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_UART_MspInit+0x84>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_UART_MspInit+0x84>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cd8:	0021      	movs	r1, r4
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	220c      	movs	r2, #12
 8002cde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	187a      	adds	r2, r7, r1
 8002cfa:	23a0      	movs	r3, #160	@ 0xa0
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	0011      	movs	r1, r2
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fd27 	bl	8003754 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b009      	add	sp, #36	@ 0x24
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40021000 	.word	0x40021000

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	e7fd      	b.n	8002d1c <NMI_Handler+0x4>

08002d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	e7fd      	b.n	8002d24 <HardFault_Handler+0x4>

08002d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d40:	f000 f986 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d4e:	2080      	movs	r0, #128	@ 0x80
 8002d50:	f000 feb6 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 feb1 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 feac 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fea7 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fea2 	bl	8003ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <USART2_IRQHandler+0x14>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fffa 	bl	8004d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	200002a8 	.word	0x200002a8

08002d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  return 1;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_kill>:

int _kill(int pid, int sig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002db2:	f004 f81b 	bl	8006dec <__errno>
 8002db6:	0003      	movs	r3, r0
 8002db8:	2216      	movs	r2, #22
 8002dba:	601a      	str	r2, [r3, #0]
  return -1;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	425b      	negs	r3, r3
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_exit>:

void _exit (int status)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	425a      	negs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff ffe5 	bl	8002da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	e7fd      	b.n	8002dde <_exit+0x16>

08002de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e00a      	b.n	8002e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df4:	e000      	b.n	8002df8 <_read+0x16>
 8002df6:	bf00      	nop
 8002df8:	0001      	movs	r1, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	b2ca      	uxtb	r2, r1
 8002e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dbf0      	blt.n	8002df4 <_read+0x12>
  }

  return len;
 8002e12:	687b      	ldr	r3, [r7, #4]
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b006      	add	sp, #24
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e009      	b.n	8002e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60ba      	str	r2, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	e000      	b.n	8002e3c <_write+0x20>
 8002e3a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	dbf1      	blt.n	8002e2e <_write+0x12>
  }
  return len;
 8002e4a:	687b      	ldr	r3, [r7, #4]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b006      	add	sp, #24
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_close>:

int _close(int file)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	425b      	negs	r3, r3
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
  return 0;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_isatty>:

int _isatty(int file)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <_sbrk+0x5c>)
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <_sbrk+0x60>)
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <_sbrk+0x64>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <_sbrk+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d207      	bcs.n	8002eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002edc:	f003 ff86 	bl	8006dec <__errno>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	425b      	negs	r3, r3
 8002eea:	e009      	b.n	8002f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	18d2      	adds	r2, r2, r3
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <_sbrk+0x64>)
 8002efc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b006      	add	sp, #24
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20005000 	.word	0x20005000
 8002f0c:	00000400 	.word	0x00000400
 8002f10:	20000338 	.word	0x20000338
 8002f14:	20000490 	.word	0x20000490

08002f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002f24:	4813      	ldr	r0, [pc, #76]	@ (8002f74 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002f26:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f28:	f7ff fff6 	bl	8002f18 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002f2c:	4812      	ldr	r0, [pc, #72]	@ (8002f78 <LoopForever+0x6>)
    LDR R1, [R0]
 8002f2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <LoopForever+0xa>)
    CMP R1, R2
 8002f34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f36:	d105      	bne.n	8002f44 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002f38:	4811      	ldr	r0, [pc, #68]	@ (8002f80 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002f3a:	4912      	ldr	r1, [pc, #72]	@ (8002f84 <LoopForever+0x12>)
    STR R1, [R0]
 8002f3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f3e:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002f40:	4912      	ldr	r1, [pc, #72]	@ (8002f8c <LoopForever+0x1a>)
    STR R1, [R0]
 8002f42:	6001      	str	r1, [r0, #0]

08002f44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f44:	4812      	ldr	r0, [pc, #72]	@ (8002f90 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002f46:	4913      	ldr	r1, [pc, #76]	@ (8002f94 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002f48:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <LoopForever+0x26>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a10      	ldr	r2, [pc, #64]	@ (8002f9c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002f5c:	4c10      	ldr	r4, [pc, #64]	@ (8002fa0 <LoopForever+0x2e>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f003 ff45 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff fb51 	bl	8002614 <main>

08002f72 <LoopForever>:

LoopForever:
    b LoopForever
 8002f72:	e7fe      	b.n	8002f72 <LoopForever>
   ldr   r0, =_estack
 8002f74:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8002f78:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002f7c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002f80:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002f84:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002f88:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002f8c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f98:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8002f9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002fa0:	2000048c 	.word	0x2000048c

08002fa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC1_IRQHandler>
	...

08002fa8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_Init+0x3c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_Init+0x3c>)
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f811 	bl	8002fe8 <HAL_InitTick>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e001      	b.n	8002fd6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fd2:	f7ff fdc9 	bl	8002b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_InitTick+0x5c>)
 8002ff2:	681c      	ldr	r4, [r3, #0]
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_InitTick+0x60>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	23fa      	movs	r3, #250	@ 0xfa
 8002ffc:	0098      	lsls	r0, r3, #2
 8002ffe:	f7fd f89f 	bl	8000140 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	0019      	movs	r1, r3
 8003006:	0020      	movs	r0, r4
 8003008:	f7fd f89a 	bl	8000140 <__udivsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	0018      	movs	r0, r3
 8003010:	f000 fb0b 	bl	800362a <HAL_SYSTICK_Config>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d001      	beq.n	800301c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e00f      	b.n	800303c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d80b      	bhi.n	800303a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	2301      	movs	r3, #1
 8003026:	425b      	negs	r3, r3
 8003028:	2200      	movs	r2, #0
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fad8 	bl	80035e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_InitTick+0x64>)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b003      	add	sp, #12
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	20000008 	.word	0x20000008
 8003048:	20000010 	.word	0x20000010
 800304c:	2000000c 	.word	0x2000000c

08003050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_IncTick+0x1c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	001a      	movs	r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_IncTick+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	18d2      	adds	r2, r2, r3
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_IncTick+0x20>)
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	20000010 	.word	0x20000010
 8003070:	2000033c 	.word	0x2000033c

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b02      	ldr	r3, [pc, #8]	@ (8003084 <HAL_GetTick+0x10>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	2000033c 	.word	0x2000033c

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fff0 	bl	8003074 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	001a      	movs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	f7ff ffe0 	bl	8003074 <HAL_GetTick>
 80030b4:	0002      	movs	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	20000010 	.word	0x20000010

080030d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e159      	b.n	8003396 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2250      	movs	r2, #80	@ 0x50
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7ff fd48 	bl	8002b90 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	2b10      	cmp	r3, #16
 800310a:	d005      	beq.n	8003118 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003116:	d00b      	beq.n	8003130 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	2210      	movs	r2, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2250      	movs	r2, #80	@ 0x50
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e132      	b.n	8003396 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	4a9a      	ldr	r2, [pc, #616]	@ (80033a0 <HAL_ADC_Init+0x2d0>)
 8003136:	4013      	ands	r3, r2
 8003138:	2202      	movs	r2, #2
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2203      	movs	r2, #3
 8003148:	4013      	ands	r3, r2
 800314a:	2b01      	cmp	r3, #1
 800314c:	d108      	bne.n	8003160 <HAL_ADC_Init+0x90>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_Init+0x90>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_ADC_Init+0x92>
 8003160:	2300      	movs	r3, #0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d149      	bne.n	80031fa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	23c0      	movs	r3, #192	@ 0xc0
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	429a      	cmp	r2, r3
 8003170:	d00b      	beq.n	800318a <HAL_ADC_Init+0xba>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	429a      	cmp	r2, r3
 800317c:	d005      	beq.n	800318a <HAL_ADC_Init+0xba>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	429a      	cmp	r2, r3
 8003188:	d111      	bne.n	80031ae <HAL_ADC_Init+0xde>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	0892      	lsrs	r2, r2, #2
 8003198:	611a      	str	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6919      	ldr	r1, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	611a      	str	r2, [r3, #16]
 80031ac:	e014      	b.n	80031d8 <HAL_ADC_Init+0x108>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	0892      	lsrs	r2, r2, #2
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	4b79      	ldr	r3, [pc, #484]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b78      	ldr	r3, [pc, #480]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 80031c4:	4978      	ldr	r1, [pc, #480]	@ (80033a8 <HAL_ADC_Init+0x2d8>)
 80031c6:	400a      	ands	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4b76      	ldr	r3, [pc, #472]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4b74      	ldr	r3, [pc, #464]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2118      	movs	r1, #24
 80031e4:	438a      	bics	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80031fa:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b69      	ldr	r3, [pc, #420]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 8003200:	496a      	ldr	r1, [pc, #424]	@ (80033ac <HAL_ADC_Init+0x2dc>)
 8003202:	400a      	ands	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003206:	4b67      	ldr	r3, [pc, #412]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	065a      	lsls	r2, r3, #25
 8003210:	4b64      	ldr	r3, [pc, #400]	@ (80033a4 <HAL_ADC_Init+0x2d4>)
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	055b      	lsls	r3, r3, #21
 8003220:	4013      	ands	r3, r2
 8003222:	d108      	bne.n	8003236 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2180      	movs	r1, #128	@ 0x80
 8003230:	0549      	lsls	r1, r1, #21
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	495b      	ldr	r1, [pc, #364]	@ (80033b0 <HAL_ADC_Init+0x2e0>)
 8003242:	400a      	ands	r2, r1
 8003244:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68d9      	ldr	r1, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d101      	bne.n	800325c <HAL_ADC_Init+0x18c>
 8003258:	2304      	movs	r3, #4
 800325a:	e000      	b.n	800325e <HAL_ADC_Init+0x18e>
 800325c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800325e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2020      	movs	r0, #32
 8003264:	5c1b      	ldrb	r3, [r3, r0]
 8003266:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003268:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	202c      	movs	r0, #44	@ 0x2c
 800326e:	5c1b      	ldrb	r3, [r3, r0]
 8003270:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003272:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003278:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003280:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003288:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003296:	23c2      	movs	r3, #194	@ 0xc2
 8003298:	33ff      	adds	r3, #255	@ 0xff
 800329a:	429a      	cmp	r2, r3
 800329c:	d00b      	beq.n	80032b6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2221      	movs	r2, #33	@ 0x21
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d11a      	bne.n	80032f6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	5c9b      	ldrb	r3, [r3, r2]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2180      	movs	r1, #128	@ 0x80
 80032d6:	0249      	lsls	r1, r1, #9
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e00b      	b.n	80032f6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	2220      	movs	r2, #32
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	2201      	movs	r2, #1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d11f      	bne.n	800333e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	492a      	ldr	r1, [pc, #168]	@ (80033b4 <HAL_ADC_Init+0x2e4>)
 800330a:	400a      	ands	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6919      	ldr	r1, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800331c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003322:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	611a      	str	r2, [r3, #16]
 800333c:	e00e      	b.n	800335c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2107      	movs	r1, #7
 8003368:	438a      	bics	r2, r1
 800336a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6959      	ldr	r1, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	2203      	movs	r2, #3
 800338a:	4393      	bics	r3, r2
 800338c:	2201      	movs	r2, #1
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	fffffefd 	.word	0xfffffefd
 80033a4:	40012708 	.word	0x40012708
 80033a8:	ffc3ffff 	.word	0xffc3ffff
 80033ac:	fdffffff 	.word	0xfdffffff
 80033b0:	fffe0219 	.word	0xfffe0219
 80033b4:	fffffc03 	.word	0xfffffc03

080033b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2250      	movs	r2, #80	@ 0x50
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x18>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e050      	b.n	8003472 <HAL_ADC_ConfigChannel+0xba>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2250      	movs	r2, #80	@ 0x50
 80033d4:	2101      	movs	r1, #1
 80033d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00b      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	2220      	movs	r2, #32
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2250      	movs	r2, #80	@ 0x50
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e03a      	b.n	8003472 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <HAL_ADC_ConfigChannel+0xc4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	035b      	lsls	r3, r3, #13
 8003412:	0b5a      	lsrs	r2, r3, #13
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	d01f      	beq.n	8003468 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003428:	4b15      	ldr	r3, [pc, #84]	@ (8003480 <HAL_ADC_ConfigChannel+0xc8>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <HAL_ADC_ConfigChannel+0xc8>)
 800342e:	2180      	movs	r1, #128	@ 0x80
 8003430:	03c9      	lsls	r1, r1, #15
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e017      	b.n	8003468 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	035b      	lsls	r3, r3, #13
 8003444:	0b5b      	lsrs	r3, r3, #13
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	400a      	ands	r2, r1
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	4013      	ands	r3, r2
 800345a:	d005      	beq.n	8003468 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_ADC_ConfigChannel+0xc8>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <HAL_ADC_ConfigChannel+0xc8>)
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <HAL_ADC_ConfigChannel+0xcc>)
 8003464:	400a      	ands	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2250      	movs	r2, #80	@ 0x50
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b002      	add	sp, #8
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	00001001 	.word	0x00001001
 8003480:	40012708 	.word	0x40012708
 8003484:	ffbfffff 	.word	0xffbfffff

08003488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	0002      	movs	r2, r0
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b7f      	cmp	r3, #127	@ 0x7f
 800349a:	d809      	bhi.n	80034b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	001a      	movs	r2, r3
 80034a2:	231f      	movs	r3, #31
 80034a4:	401a      	ands	r2, r3
 80034a6:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <__NVIC_EnableIRQ+0x30>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	4091      	lsls	r1, r2
 80034ac:	000a      	movs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
  }
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	0002      	movs	r2, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80034d0:	d828      	bhi.n	8003524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003590 <__NVIC_SetPriority+0xd4>)
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	33c0      	adds	r3, #192	@ 0xc0
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	589b      	ldr	r3, [r3, r2]
 80034e2:	1dfa      	adds	r2, r7, #7
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	0011      	movs	r1, r2
 80034e8:	2203      	movs	r2, #3
 80034ea:	400a      	ands	r2, r1
 80034ec:	00d2      	lsls	r2, r2, #3
 80034ee:	21ff      	movs	r1, #255	@ 0xff
 80034f0:	4091      	lsls	r1, r2
 80034f2:	000a      	movs	r2, r1
 80034f4:	43d2      	mvns	r2, r2
 80034f6:	401a      	ands	r2, r3
 80034f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	401a      	ands	r2, r3
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	0018      	movs	r0, r3
 8003508:	2303      	movs	r3, #3
 800350a:	4003      	ands	r3, r0
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003510:	481f      	ldr	r0, [pc, #124]	@ (8003590 <__NVIC_SetPriority+0xd4>)
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b25b      	sxtb	r3, r3
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	430a      	orrs	r2, r1
 800351c:	33c0      	adds	r3, #192	@ 0xc0
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003522:	e031      	b.n	8003588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003524:	4a1b      	ldr	r2, [pc, #108]	@ (8003594 <__NVIC_SetPriority+0xd8>)
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	0019      	movs	r1, r3
 800352c:	230f      	movs	r3, #15
 800352e:	400b      	ands	r3, r1
 8003530:	3b08      	subs	r3, #8
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3306      	adds	r3, #6
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	18d3      	adds	r3, r2, r3
 800353a:	3304      	adds	r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1dfa      	adds	r2, r7, #7
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	0011      	movs	r1, r2
 8003544:	2203      	movs	r2, #3
 8003546:	400a      	ands	r2, r1
 8003548:	00d2      	lsls	r2, r2, #3
 800354a:	21ff      	movs	r1, #255	@ 0xff
 800354c:	4091      	lsls	r1, r2
 800354e:	000a      	movs	r2, r1
 8003550:	43d2      	mvns	r2, r2
 8003552:	401a      	ands	r2, r3
 8003554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	401a      	ands	r2, r3
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	0018      	movs	r0, r3
 8003564:	2303      	movs	r3, #3
 8003566:	4003      	ands	r3, r0
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800356c:	4809      	ldr	r0, [pc, #36]	@ (8003594 <__NVIC_SetPriority+0xd8>)
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	001c      	movs	r4, r3
 8003574:	230f      	movs	r3, #15
 8003576:	4023      	ands	r3, r4
 8003578:	3b08      	subs	r3, #8
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	430a      	orrs	r2, r1
 800357e:	3306      	adds	r3, #6
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	18c3      	adds	r3, r0, r3
 8003584:	3304      	adds	r3, #4
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b003      	add	sp, #12
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	045b      	lsls	r3, r3, #17
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d301      	bcc.n	80035b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ac:	2301      	movs	r3, #1
 80035ae:	e010      	b.n	80035d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b0:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <SysTick_Config+0x44>)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	3a01      	subs	r2, #1
 80035b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b8:	2301      	movs	r3, #1
 80035ba:	425b      	negs	r3, r3
 80035bc:	2103      	movs	r1, #3
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff ff7c 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <SysTick_Config+0x44>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <SysTick_Config+0x44>)
 80035cc:	2207      	movs	r2, #7
 80035ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	210f      	movs	r1, #15
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	1c02      	adds	r2, r0, #0
 80035f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b004      	add	sp, #16
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	0002      	movs	r2, r0
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b25b      	sxtb	r3, r3
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff ff33 	bl	8003488 <__NVIC_EnableIRQ>
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b002      	add	sp, #8
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff ffaf 	bl	8003598 <SysTick_Config>
 800363a:	0003      	movs	r3, r0
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	230f      	movs	r3, #15
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2225      	movs	r2, #37	@ 0x25
 8003658:	5c9b      	ldrb	r3, [r3, r2]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d008      	beq.n	8003672 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2204      	movs	r2, #4
 8003664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2224      	movs	r2, #36	@ 0x24
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e024      	b.n	80036bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	210e      	movs	r1, #14
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	221c      	movs	r2, #28
 8003698:	401a      	ands	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	2101      	movs	r1, #1
 80036a0:	4091      	lsls	r1, r2
 80036a2:	000a      	movs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2225      	movs	r2, #37	@ 0x25
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2224      	movs	r2, #36	@ 0x24
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

    return status;
 80036b6:	230f      	movs	r3, #15
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	210f      	movs	r1, #15
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2225      	movs	r2, #37	@ 0x25
 80036d8:	5c9b      	ldrb	r3, [r3, r2]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d006      	beq.n	80036ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2204      	movs	r2, #4
 80036e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e02a      	b.n	8003744 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	210e      	movs	r1, #14
 80036fa:	438a      	bics	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	438a      	bics	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	221c      	movs	r2, #28
 8003714:	401a      	ands	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2101      	movs	r1, #1
 800371c:	4091      	lsls	r1, r2
 800371e:	000a      	movs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2225      	movs	r2, #37	@ 0x25
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2224      	movs	r2, #36	@ 0x24
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	0010      	movs	r0, r2
 8003742:	4798      	blx	r3
    }
  }
  return status;
 8003744:	230f      	movs	r3, #15
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800376a:	e155      	b.n	8003a18 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4091      	lsls	r1, r2
 8003776:	000a      	movs	r2, r1
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d100      	bne.n	8003784 <HAL_GPIO_Init+0x30>
 8003782:	e146      	b.n	8003a12 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	4013      	ands	r3, r2
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	409a      	lsls	r2, r3
 80037aa:	0013      	movs	r3, r2
 80037ac:	43da      	mvns	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	0013      	movs	r3, r2
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	43da      	mvns	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	2201      	movs	r2, #1
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	4013      	ands	r3, r2
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	0013      	movs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	4013      	ands	r3, r2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	58d3      	ldr	r3, [r2, r3]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2207      	movs	r2, #7
 8003858:	4013      	ands	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	43da      	mvns	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2107      	movs	r1, #7
 8003872:	400b      	ands	r3, r1
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	6939      	ldr	r1, [r7, #16]
 800388c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	409a      	lsls	r2, r3
 800389c:	0013      	movs	r3, r2
 800389e:	43da      	mvns	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2203      	movs	r2, #3
 80038ac:	401a      	ands	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	23c0      	movs	r3, #192	@ 0xc0
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	4013      	ands	r3, r2
 80038cc:	d100      	bne.n	80038d0 <HAL_GPIO_Init+0x17c>
 80038ce:	e0a0      	b.n	8003a12 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b57      	ldr	r3, [pc, #348]	@ (8003a30 <HAL_GPIO_Init+0x2dc>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d4:	4b56      	ldr	r3, [pc, #344]	@ (8003a30 <HAL_GPIO_Init+0x2dc>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	430a      	orrs	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80038dc:	4a55      	ldr	r2, [pc, #340]	@ (8003a34 <HAL_GPIO_Init+0x2e0>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4013      	ands	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	409a      	lsls	r2, r3
 80038f6:	0013      	movs	r3, r2
 80038f8:	43da      	mvns	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	23a0      	movs	r3, #160	@ 0xa0
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	429a      	cmp	r2, r3
 8003908:	d01f      	beq.n	800394a <HAL_GPIO_Init+0x1f6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <HAL_GPIO_Init+0x2e4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d019      	beq.n	8003946 <HAL_GPIO_Init+0x1f2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a49      	ldr	r2, [pc, #292]	@ (8003a3c <HAL_GPIO_Init+0x2e8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x1ee>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a48      	ldr	r2, [pc, #288]	@ (8003a40 <HAL_GPIO_Init+0x2ec>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00d      	beq.n	800393e <HAL_GPIO_Init+0x1ea>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a47      	ldr	r2, [pc, #284]	@ (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x1e6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a46      	ldr	r2, [pc, #280]	@ (8003a48 <HAL_GPIO_Init+0x2f4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_GPIO_Init+0x1e2>
 8003932:	2305      	movs	r3, #5
 8003934:	e00a      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 8003936:	2306      	movs	r3, #6
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 800393a:	2304      	movs	r3, #4
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x1f8>
 800394a:	2300      	movs	r3, #0
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	2103      	movs	r1, #3
 8003950:	400a      	ands	r2, r1
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	@ (8003a34 <HAL_GPIO_Init+0x2e0>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396a:	4b38      	ldr	r3, [pc, #224]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43da      	mvns	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	2380      	movs	r3, #128	@ 0x80
 8003980:	035b      	lsls	r3, r3, #13
 8003982:	4013      	ands	r3, r2
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800398e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003994:	4b2d      	ldr	r3, [pc, #180]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	43da      	mvns	r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	039b      	lsls	r3, r3, #14
 80039ac:	4013      	ands	r3, r2
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039b8:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80039be:	4b23      	ldr	r3, [pc, #140]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	2380      	movs	r3, #128	@ 0x80
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	4013      	ands	r3, r2
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e8:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43da      	mvns	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	4013      	ands	r3, r2
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <HAL_GPIO_Init+0x2f8>)
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3301      	adds	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	40da      	lsrs	r2, r3
 8003a20:	1e13      	subs	r3, r2, #0
 8003a22:	d000      	beq.n	8003a26 <HAL_GPIO_Init+0x2d2>
 8003a24:	e6a2      	b.n	800376c <HAL_GPIO_Init+0x18>
  }
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	50000400 	.word	0x50000400
 8003a3c:	50000800 	.word	0x50000800
 8003a40:	50000c00 	.word	0x50000c00
 8003a44:	50001000 	.word	0x50001000
 8003a48:	50001c00 	.word	0x50001c00
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	0008      	movs	r0, r1
 8003a5a:	0011      	movs	r1, r2
 8003a5c:	1cbb      	adds	r3, r7, #2
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	1c7b      	adds	r3, r7, #1
 8003a64:	1c0a      	adds	r2, r1, #0
 8003a66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a68:	1c7b      	adds	r3, r7, #1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a70:	1cbb      	adds	r3, r7, #2
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003a7a:	1cbb      	adds	r3, r7, #2
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	000a      	movs	r2, r1
 8003a94:	1cbb      	adds	r3, r7, #2
 8003a96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a9e:	1cbb      	adds	r3, r7, #2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	041a      	lsls	r2, r3, #16
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	1cb9      	adds	r1, r7, #2
 8003aae:	8809      	ldrh	r1, [r1, #0]
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	1dbb      	adds	r3, r7, #6
 8003aca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003acc:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	1dba      	adds	r2, r7, #6
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d008      	beq.n	8003aea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ad8:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ada:	1dba      	adds	r2, r7, #6
 8003adc:	8812      	ldrh	r2, [r2, #0]
 8003ade:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae0:	1dbb      	adds	r3, r7, #6
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f807 	bl	8003af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	40010400 	.word	0x40010400

08003af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	0002      	movs	r2, r0
 8003b00:	1dbb      	adds	r3, r7, #6
 8003b02:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e08f      	b.n	8003c3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2241      	movs	r2, #65	@ 0x41
 8003b22:	5c9b      	ldrb	r3, [r3, r2]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2240      	movs	r2, #64	@ 0x40
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff f867 	bl	8002c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2241      	movs	r2, #65	@ 0x41
 8003b3e:	2124      	movs	r1, #36	@ 0x24
 8003b40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	438a      	bics	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	493b      	ldr	r1, [pc, #236]	@ (8003c48 <HAL_I2C_Init+0x13c>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4938      	ldr	r1, [pc, #224]	@ (8003c4c <HAL_I2C_Init+0x140>)
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d108      	bne.n	8003b8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2180      	movs	r1, #128	@ 0x80
 8003b82:	0209      	lsls	r1, r1, #8
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e007      	b.n	8003b9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2184      	movs	r1, #132	@ 0x84
 8003b94:	0209      	lsls	r1, r1, #8
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d109      	bne.n	8003bb6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2180      	movs	r1, #128	@ 0x80
 8003bae:	0109      	lsls	r1, r1, #4
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	e007      	b.n	8003bc6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4923      	ldr	r1, [pc, #140]	@ (8003c50 <HAL_I2C_Init+0x144>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4920      	ldr	r1, [pc, #128]	@ (8003c54 <HAL_I2C_Init+0x148>)
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	491a      	ldr	r1, [pc, #104]	@ (8003c4c <HAL_I2C_Init+0x140>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69d9      	ldr	r1, [r3, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2241      	movs	r2, #65	@ 0x41
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2242      	movs	r2, #66	@ 0x42
 8003c38:	2100      	movs	r1, #0
 8003c3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	f0ffffff 	.word	0xf0ffffff
 8003c4c:	ffff7fff 	.word	0xffff7fff
 8003c50:	fffff7ff 	.word	0xfffff7ff
 8003c54:	02008000 	.word	0x02008000

08003c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2241      	movs	r2, #65	@ 0x41
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d138      	bne.n	8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e032      	b.n	8003ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	2101      	movs	r1, #1
 8003c82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2241      	movs	r2, #65	@ 0x41
 8003c88:	2124      	movs	r1, #36	@ 0x24
 8003c8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2101      	movs	r1, #1
 8003c98:	438a      	bics	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4911      	ldr	r1, [pc, #68]	@ (8003cec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2241      	movs	r2, #65	@ 0x41
 8003cd0:	2120      	movs	r1, #32
 8003cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	ffffefff 	.word	0xffffefff

08003cf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2241      	movs	r2, #65	@ 0x41
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d139      	bne.n	8003d7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2240      	movs	r2, #64	@ 0x40
 8003d0a:	5c9b      	ldrb	r3, [r3, r2]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e033      	b.n	8003d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	2101      	movs	r1, #1
 8003d1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2241      	movs	r2, #65	@ 0x41
 8003d20:	2124      	movs	r1, #36	@ 0x24
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	@ (8003d84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	@ 0x41
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2240      	movs	r2, #64	@ 0x40
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffff0ff 	.word	0xfffff0ff

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b5b0      	push	{r4, r5, r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f000 fb6c 	bl	8004474 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9c:	4bc8      	ldr	r3, [pc, #800]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	220c      	movs	r2, #12
 8003da2:	4013      	ands	r3, r2
 8003da4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da6:	4bc6      	ldr	r3, [pc, #792]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	025b      	lsls	r3, r3, #9
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	d100      	bne.n	8003dbe <HAL_RCC_OscConfig+0x36>
 8003dbc:	e07d      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d007      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d112      	bne.n	8003df0 <HAL_RCC_OscConfig+0x68>
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	4bba      	ldr	r3, [pc, #744]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d100      	bne.n	8003de2 <HAL_RCC_OscConfig+0x5a>
 8003de0:	e06a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x130>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d166      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f000 fb42 	bl	8004474 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	025b      	lsls	r3, r3, #9
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x84>
 8003dfc:	4bb0      	ldr	r3, [pc, #704]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4baf      	ldr	r3, [pc, #700]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e02:	2180      	movs	r1, #128	@ 0x80
 8003e04:	0249      	lsls	r1, r1, #9
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e027      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	23a0      	movs	r3, #160	@ 0xa0
 8003e12:	02db      	lsls	r3, r3, #11
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10e      	bne.n	8003e36 <HAL_RCC_OscConfig+0xae>
 8003e18:	4ba9      	ldr	r3, [pc, #676]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4ba8      	ldr	r3, [pc, #672]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e1e:	2180      	movs	r1, #128	@ 0x80
 8003e20:	02c9      	lsls	r1, r1, #11
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	4ba6      	ldr	r3, [pc, #664]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4ba5      	ldr	r3, [pc, #660]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e2c:	2180      	movs	r1, #128	@ 0x80
 8003e2e:	0249      	lsls	r1, r1, #9
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e012      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e36:	4ba2      	ldr	r3, [pc, #648]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4ba1      	ldr	r3, [pc, #644]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	49a1      	ldr	r1, [pc, #644]	@ (80040c4 <HAL_RCC_OscConfig+0x33c>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	4b9f      	ldr	r3, [pc, #636]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4b9b      	ldr	r3, [pc, #620]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b9a      	ldr	r3, [pc, #616]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e56:	499c      	ldr	r1, [pc, #624]	@ (80040c8 <HAL_RCC_OscConfig+0x340>)
 8003e58:	400a      	ands	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d014      	beq.n	8003e8e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7ff f906 	bl	8003074 <HAL_GetTick>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e6e:	f7ff f901 	bl	8003074 <HAL_GetTick>
 8003e72:	0002      	movs	r2, r0
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	@ 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2f9      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e80:	4b8f      	ldr	r3, [pc, #572]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	029b      	lsls	r3, r3, #10
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0xe6>
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7ff f8f1 	bl	8003074 <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7ff f8ec 	bl	8003074 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e2e4      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eaa:	4b85      	ldr	r3, [pc, #532]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	029b      	lsls	r3, r3, #10
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x110>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x13e>
 8003ec4:	e099      	b.n	8003ffa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	2220      	movs	r2, #32
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b79      	ldr	r3, [pc, #484]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003eda:	2120      	movs	r1, #32
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4393      	bics	r3, r2
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d005      	beq.n	8003efa <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d13e      	bne.n	8003f72 <HAL_RCC_OscConfig+0x1ea>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003efa:	4b71      	ldr	r3, [pc, #452]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4013      	ands	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_RCC_OscConfig+0x186>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e2b2      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x344>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	021a      	lsls	r2, r3, #8
 8003f1e:	4b68      	ldr	r3, [pc, #416]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f24:	4b66      	ldr	r3, [pc, #408]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2209      	movs	r2, #9
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	4b64      	ldr	r3, [pc, #400]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f36:	f000 fbeb 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	4b60      	ldr	r3, [pc, #384]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	220f      	movs	r2, #15
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a62      	ldr	r2, [pc, #392]	@ (80040d0 <HAL_RCC_OscConfig+0x348>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	000a      	movs	r2, r1
 8003f4c:	40da      	lsrs	r2, r3
 8003f4e:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <HAL_RCC_OscConfig+0x34c>)
 8003f50:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f52:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x350>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2513      	movs	r5, #19
 8003f58:	197c      	adds	r4, r7, r5
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff f844 	bl	8002fe8 <HAL_InitTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f64:	197b      	adds	r3, r7, r5
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d046      	beq.n	8003ffa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003f6c:	197b      	adds	r3, r7, r5
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	e280      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d027      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f78:	4b51      	ldr	r3, [pc, #324]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2209      	movs	r2, #9
 8003f7e:	4393      	bics	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	4b4f      	ldr	r3, [pc, #316]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7ff f873 	bl	8003074 <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7ff f86e 	bl	8003074 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e266      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa6:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2204      	movs	r2, #4
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0f1      	beq.n	8003f94 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a45      	ldr	r2, [pc, #276]	@ (80040cc <HAL_RCC_OscConfig+0x344>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e018      	b.n	8003ffa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7ff f84e 	bl	8003074 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fde:	f7ff f849 	bl	8003074 <HAL_GetTick>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e241      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff0:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d1f1      	bne.n	8003fde <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2210      	movs	r2, #16
 8004000:	4013      	ands	r3, r2
 8004002:	d100      	bne.n	8004006 <HAL_RCC_OscConfig+0x27e>
 8004004:	e0a1      	b.n	800414a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d140      	bne.n	800408e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800400c:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d005      	beq.n	8004024 <HAL_RCC_OscConfig+0x29c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e227      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004024:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <HAL_RCC_OscConfig+0x354>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1a      	ldr	r2, [r3, #32]
 8004032:	4b23      	ldr	r3, [pc, #140]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004038:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	0a19      	lsrs	r1, r3, #8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	061a      	lsls	r2, r3, #24
 8004046:	4b1e      	ldr	r3, [pc, #120]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	0b5b      	lsrs	r3, r3, #13
 8004052:	3301      	adds	r3, #1
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	0212      	lsls	r2, r2, #8
 8004058:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800405a:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	210f      	movs	r1, #15
 8004062:	400b      	ands	r3, r1
 8004064:	491a      	ldr	r1, [pc, #104]	@ (80040d0 <HAL_RCC_OscConfig+0x348>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <HAL_RCC_OscConfig+0x34c>)
 800406c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800406e:	4b1a      	ldr	r3, [pc, #104]	@ (80040d8 <HAL_RCC_OscConfig+0x350>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2513      	movs	r5, #19
 8004074:	197c      	adds	r4, r7, r5
 8004076:	0018      	movs	r0, r3
 8004078:	f7fe ffb6 	bl	8002fe8 <HAL_InitTick>
 800407c:	0003      	movs	r3, r0
 800407e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004080:	197b      	adds	r3, r7, r5
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d060      	beq.n	800414a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004088:	197b      	adds	r3, r7, r5
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	e1f2      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03f      	beq.n	8004116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCC_OscConfig+0x338>)
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	0049      	lsls	r1, r1, #1
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe ffe6 	bl	8003074 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ae:	f7fe ffe1 	bl	8003074 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d911      	bls.n	80040e0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1d9      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
 80040c0:	40021000 	.word	0x40021000
 80040c4:	fffeffff 	.word	0xfffeffff
 80040c8:	fffbffff 	.word	0xfffbffff
 80040cc:	ffffe0ff 	.word	0xffffe0ff
 80040d0:	08008d0c 	.word	0x08008d0c
 80040d4:	20000008 	.word	0x20000008
 80040d8:	2000000c 	.word	0x2000000c
 80040dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040e0:	4bc9      	ldr	r3, [pc, #804]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	d0e0      	beq.n	80040ae <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ec:	4bc6      	ldr	r3, [pc, #792]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4ac6      	ldr	r2, [pc, #792]	@ (800440c <HAL_RCC_OscConfig+0x684>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	4bc3      	ldr	r3, [pc, #780]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004100:	4bc1      	ldr	r3, [pc, #772]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	0a19      	lsrs	r1, r3, #8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	061a      	lsls	r2, r3, #24
 800410e:	4bbe      	ldr	r3, [pc, #760]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	e019      	b.n	800414a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004116:	4bbc      	ldr	r3, [pc, #752]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4bbb      	ldr	r3, [pc, #748]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800411c:	49bc      	ldr	r1, [pc, #752]	@ (8004410 <HAL_RCC_OscConfig+0x688>)
 800411e:	400a      	ands	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe ffa7 	bl	8003074 <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412c:	f7fe ffa2 	bl	8003074 <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e19a      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800413e:	4bb2      	ldr	r3, [pc, #712]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2208      	movs	r2, #8
 8004150:	4013      	ands	r3, r2
 8004152:	d036      	beq.n	80041c2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415c:	4baa      	ldr	r3, [pc, #680]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800415e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004160:	4ba9      	ldr	r3, [pc, #676]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004162:	2101      	movs	r1, #1
 8004164:	430a      	orrs	r2, r1
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004168:	f7fe ff84 	bl	8003074 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004172:	f7fe ff7f 	bl	8003074 <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e177      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004184:	4ba0      	ldr	r3, [pc, #640]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004188:	2202      	movs	r2, #2
 800418a:	4013      	ands	r3, r2
 800418c:	d0f1      	beq.n	8004172 <HAL_RCC_OscConfig+0x3ea>
 800418e:	e018      	b.n	80041c2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004190:	4b9d      	ldr	r3, [pc, #628]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004192:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004194:	4b9c      	ldr	r3, [pc, #624]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004196:	2101      	movs	r1, #1
 8004198:	438a      	bics	r2, r1
 800419a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419c:	f7fe ff6a 	bl	8003074 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fe ff65 	bl	8003074 <HAL_GetTick>
 80041aa:	0002      	movs	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e15d      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041b8:	4b93      	ldr	r3, [pc, #588]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d1f1      	bne.n	80041a6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2204      	movs	r2, #4
 80041c8:	4013      	ands	r3, r2
 80041ca:	d100      	bne.n	80041ce <HAL_RCC_OscConfig+0x446>
 80041cc:	e0ae      	b.n	800432c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2023      	movs	r0, #35	@ 0x23
 80041d0:	183b      	adds	r3, r7, r0
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80041d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	055b      	lsls	r3, r3, #21
 80041de:	4013      	ands	r3, r2
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b89      	ldr	r3, [pc, #548]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80041e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e6:	4b88      	ldr	r3, [pc, #544]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	0549      	lsls	r1, r1, #21
 80041ec:	430a      	orrs	r2, r1
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b87      	ldr	r3, [pc, #540]	@ (8004414 <HAL_RCC_OscConfig+0x68c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	d11a      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b84      	ldr	r3, [pc, #528]	@ (8004414 <HAL_RCC_OscConfig+0x68c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b83      	ldr	r3, [pc, #524]	@ (8004414 <HAL_RCC_OscConfig+0x68c>)
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	0049      	lsls	r1, r1, #1
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004210:	f7fe ff30 	bl	8003074 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe ff2b 	bl	8003074 <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	@ 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e123      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b79      	ldr	r3, [pc, #484]	@ (8004414 <HAL_RCC_OscConfig+0x68c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	@ 0x80
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	2380      	movs	r3, #128	@ 0x80
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x4cc>
 8004244:	4b70      	ldr	r3, [pc, #448]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004248:	4b6f      	ldr	r3, [pc, #444]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	0049      	lsls	r1, r1, #1
 800424e:	430a      	orrs	r2, r1
 8004250:	651a      	str	r2, [r3, #80]	@ 0x50
 8004252:	e031      	b.n	80042b8 <HAL_RCC_OscConfig+0x530>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10c      	bne.n	8004276 <HAL_RCC_OscConfig+0x4ee>
 800425c:	4b6a      	ldr	r3, [pc, #424]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800425e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004260:	4b69      	ldr	r3, [pc, #420]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004262:	496b      	ldr	r1, [pc, #428]	@ (8004410 <HAL_RCC_OscConfig+0x688>)
 8004264:	400a      	ands	r2, r1
 8004266:	651a      	str	r2, [r3, #80]	@ 0x50
 8004268:	4b67      	ldr	r3, [pc, #412]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800426a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800426c:	4b66      	ldr	r3, [pc, #408]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800426e:	496a      	ldr	r1, [pc, #424]	@ (8004418 <HAL_RCC_OscConfig+0x690>)
 8004270:	400a      	ands	r2, r1
 8004272:	651a      	str	r2, [r3, #80]	@ 0x50
 8004274:	e020      	b.n	80042b8 <HAL_RCC_OscConfig+0x530>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	23a0      	movs	r3, #160	@ 0xa0
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	429a      	cmp	r2, r3
 8004280:	d10e      	bne.n	80042a0 <HAL_RCC_OscConfig+0x518>
 8004282:	4b61      	ldr	r3, [pc, #388]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004286:	4b60      	ldr	r3, [pc, #384]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004288:	2180      	movs	r1, #128	@ 0x80
 800428a:	00c9      	lsls	r1, r1, #3
 800428c:	430a      	orrs	r2, r1
 800428e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004290:	4b5d      	ldr	r3, [pc, #372]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004294:	4b5c      	ldr	r3, [pc, #368]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004296:	2180      	movs	r1, #128	@ 0x80
 8004298:	0049      	lsls	r1, r1, #1
 800429a:	430a      	orrs	r2, r1
 800429c:	651a      	str	r2, [r3, #80]	@ 0x50
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0x530>
 80042a0:	4b59      	ldr	r3, [pc, #356]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80042a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a4:	4b58      	ldr	r3, [pc, #352]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80042a6:	495a      	ldr	r1, [pc, #360]	@ (8004410 <HAL_RCC_OscConfig+0x688>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80042ac:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80042ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042b0:	4b55      	ldr	r3, [pc, #340]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80042b2:	4959      	ldr	r1, [pc, #356]	@ (8004418 <HAL_RCC_OscConfig+0x690>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fe fed8 	bl	8003074 <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c8:	e009      	b.n	80042de <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fe fed3 	bl	8003074 <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	4a51      	ldr	r2, [pc, #324]	@ (800441c <HAL_RCC_OscConfig+0x694>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0ca      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042de:	4b4a      	ldr	r3, [pc, #296]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80042e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4013      	ands	r3, r2
 80042e8:	d0ef      	beq.n	80042ca <HAL_RCC_OscConfig+0x542>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fe fec2 	bl	8003074 <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f4:	e009      	b.n	800430a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fe febd 	bl	8003074 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	4a46      	ldr	r2, [pc, #280]	@ (800441c <HAL_RCC_OscConfig+0x694>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0b4      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800430a:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800430c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d1ef      	bne.n	80042f6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004316:	2323      	movs	r3, #35	@ 0x23
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004324:	4b38      	ldr	r3, [pc, #224]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004326:	493e      	ldr	r1, [pc, #248]	@ (8004420 <HAL_RCC_OscConfig+0x698>)
 8004328:	400a      	ands	r2, r1
 800432a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d100      	bne.n	8004336 <HAL_RCC_OscConfig+0x5ae>
 8004334:	e09d      	b.n	8004472 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d100      	bne.n	800433e <HAL_RCC_OscConfig+0x5b6>
 800433c:	e076      	b.n	800442c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	2b02      	cmp	r3, #2
 8004344:	d145      	bne.n	80043d2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004346:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b2f      	ldr	r3, [pc, #188]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800434c:	4935      	ldr	r1, [pc, #212]	@ (8004424 <HAL_RCC_OscConfig+0x69c>)
 800434e:	400a      	ands	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fe fe8f 	bl	8003074 <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435c:	f7fe fe8a 	bl	8003074 <HAL_GetTick>
 8004360:	0002      	movs	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e082      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800436e:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	049b      	lsls	r3, r3, #18
 8004376:	4013      	ands	r3, r2
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437a:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a2a      	ldr	r2, [pc, #168]	@ (8004428 <HAL_RCC_OscConfig+0x6a0>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	431a      	orrs	r2, r3
 8004394:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 8004396:	430a      	orrs	r2, r1
 8004398:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439a:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	0449      	lsls	r1, r1, #17
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fe fe64 	bl	8003074 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe fe5f 	bl	8003074 <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e057      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	049b      	lsls	r3, r3, #18
 80043cc:	4013      	ands	r3, r2
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x62a>
 80043d0:	e04f      	b.n	8004472 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80043d8:	4912      	ldr	r1, [pc, #72]	@ (8004424 <HAL_RCC_OscConfig+0x69c>)
 80043da:	400a      	ands	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe fe49 	bl	8003074 <HAL_GetTick>
 80043e2:	0003      	movs	r3, r0
 80043e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe fe44 	bl	8003074 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e03c      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043fa:	4b03      	ldr	r3, [pc, #12]	@ (8004408 <HAL_RCC_OscConfig+0x680>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	049b      	lsls	r3, r3, #18
 8004402:	4013      	ands	r3, r2
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x660>
 8004406:	e034      	b.n	8004472 <HAL_RCC_OscConfig+0x6ea>
 8004408:	40021000 	.word	0x40021000
 800440c:	ffff1fff 	.word	0xffff1fff
 8004410:	fffffeff 	.word	0xfffffeff
 8004414:	40007000 	.word	0x40007000
 8004418:	fffffbff 	.word	0xfffffbff
 800441c:	00001388 	.word	0x00001388
 8004420:	efffffff 	.word	0xefffffff
 8004424:	feffffff 	.word	0xfeffffff
 8004428:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <HAL_RCC_OscConfig+0x6f4>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	025b      	lsls	r3, r3, #9
 8004444:	401a      	ands	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	429a      	cmp	r2, r3
 800444c:	d10f      	bne.n	800446e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	23f0      	movs	r3, #240	@ 0xf0
 8004452:	039b      	lsls	r3, r3, #14
 8004454:	401a      	ands	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d107      	bne.n	800446e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	23c0      	movs	r3, #192	@ 0xc0
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	401a      	ands	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b00a      	add	sp, #40	@ 0x28
 800447a:	bdb0      	pop	{r4, r5, r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e128      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b96      	ldr	r3, [pc, #600]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d91e      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b93      	ldr	r3, [pc, #588]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4393      	bics	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	4b90      	ldr	r3, [pc, #576]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044b4:	f7fe fdde 	bl	8003074 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044be:	f7fe fdd9 	bl	8003074 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	4a8a      	ldr	r2, [pc, #552]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e109      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b87      	ldr	r3, [pc, #540]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1ee      	bne.n	80044be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2202      	movs	r2, #2
 80044e6:	4013      	ands	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ea:	4b83      	ldr	r3, [pc, #524]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	22f0      	movs	r2, #240	@ 0xf0
 80044f0:	4393      	bics	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b7f      	ldr	r3, [pc, #508]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d100      	bne.n	800450a <HAL_RCC_ClockConfig+0x8a>
 8004508:	e089      	b.n	800461e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004512:	4b79      	ldr	r3, [pc, #484]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	4013      	ands	r3, r2
 800451c:	d120      	bne.n	8004560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0e1      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800452a:	4b73      	ldr	r3, [pc, #460]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	049b      	lsls	r3, r3, #18
 8004532:	4013      	ands	r3, r2
 8004534:	d114      	bne.n	8004560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0d5      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d106      	bne.n	8004550 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004542:	4b6d      	ldr	r3, [pc, #436]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2204      	movs	r2, #4
 8004548:	4013      	ands	r3, r2
 800454a:	d109      	bne.n	8004560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0ca      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004550:	4b69      	ldr	r3, [pc, #420]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4013      	ands	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0c2      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004560:	4b65      	ldr	r3, [pc, #404]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2203      	movs	r2, #3
 8004566:	4393      	bics	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4b62      	ldr	r3, [pc, #392]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004570:	430a      	orrs	r2, r1
 8004572:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fe fd7e 	bl	8003074 <HAL_GetTick>
 8004578:	0003      	movs	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d111      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004584:	e009      	b.n	800459a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004586:	f7fe fd75 	bl	8003074 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	4a58      	ldr	r2, [pc, #352]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0a5      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800459a:	4b57      	ldr	r3, [pc, #348]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	220c      	movs	r2, #12
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d1ef      	bne.n	8004586 <HAL_RCC_ClockConfig+0x106>
 80045a6:	e03a      	b.n	800461e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d111      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b0:	e009      	b.n	80045c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b2:	f7fe fd5f 	bl	8003074 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	4a4d      	ldr	r2, [pc, #308]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e08f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c6:	4b4c      	ldr	r3, [pc, #304]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	220c      	movs	r2, #12
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d1ef      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x132>
 80045d2:	e024      	b.n	800461e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11b      	bne.n	8004614 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045dc:	e009      	b.n	80045f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fe fd49 	bl	8003074 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a42      	ldr	r2, [pc, #264]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e079      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f2:	4b41      	ldr	r3, [pc, #260]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	220c      	movs	r2, #12
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d1ef      	bne.n	80045de <HAL_RCC_ClockConfig+0x15e>
 80045fe:	e00e      	b.n	800461e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fe fd38 	bl	8003074 <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	4a3a      	ldr	r2, [pc, #232]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e068      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004614:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	220c      	movs	r2, #12
 800461a:	4013      	ands	r3, r2
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461e:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	4013      	ands	r3, r2
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d21e      	bcs.n	800466a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462c:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	4393      	bics	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	4b2e      	ldr	r3, [pc, #184]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800463e:	f7fe fd19 	bl	8003074 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	e009      	b.n	800465c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fe fd14 	bl	8003074 <HAL_GetTick>
 800464c:	0002      	movs	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e044      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2204      	movs	r2, #4
 8004670:	4013      	ands	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004674:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_RCC_ClockConfig+0x27c>)
 800467a:	4013      	ands	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2208      	movs	r2, #8
 800468e:	4013      	ands	r3, r2
 8004690:	d00a      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004692:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4a1a      	ldr	r2, [pc, #104]	@ (8004700 <HAL_RCC_ClockConfig+0x280>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00da      	lsls	r2, r3, #3
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a8:	f000 f832 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046ac:	0001      	movs	r1, r0
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <HAL_RCC_ClockConfig+0x278>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	220f      	movs	r2, #15
 80046b6:	4013      	ands	r3, r2
 80046b8:	4a12      	ldr	r2, [pc, #72]	@ (8004704 <HAL_RCC_ClockConfig+0x284>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	000a      	movs	r2, r1
 80046be:	40da      	lsrs	r2, r3
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_RCC_ClockConfig+0x288>)
 80046c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_RCC_ClockConfig+0x28c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	250b      	movs	r5, #11
 80046ca:	197c      	adds	r4, r7, r5
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fe fc8b 	bl	8002fe8 <HAL_InitTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80046d6:	197b      	adds	r3, r7, r5
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bdb0      	pop	{r4, r5, r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	40022000 	.word	0x40022000
 80046f4:	00001388 	.word	0x00001388
 80046f8:	40021000 	.word	0x40021000
 80046fc:	fffff8ff 	.word	0xfffff8ff
 8004700:	ffffc7ff 	.word	0xffffc7ff
 8004704:	08008d0c 	.word	0x08008d0c
 8004708:	20000008 	.word	0x20000008
 800470c:	2000000c 	.word	0x2000000c

08004710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004716:	4b3c      	ldr	r3, [pc, #240]	@ (8004808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	220c      	movs	r2, #12
 8004720:	4013      	ands	r3, r2
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d013      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x3e>
 8004726:	d85c      	bhi.n	80047e2 <HAL_RCC_GetSysClockFreq+0xd2>
 8004728:	2b04      	cmp	r3, #4
 800472a:	d002      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x22>
 800472c:	2b08      	cmp	r3, #8
 800472e:	d00b      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x38>
 8004730:	e057      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004732:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2210      	movs	r2, #16
 8004738:	4013      	ands	r3, r2
 800473a:	d002      	beq.n	8004742 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800473c:	4b33      	ldr	r3, [pc, #204]	@ (800480c <HAL_RCC_GetSysClockFreq+0xfc>)
 800473e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004740:	e05d      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004742:	4b33      	ldr	r3, [pc, #204]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x100>)
 8004744:	613b      	str	r3, [r7, #16]
      break;
 8004746:	e05a      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004748:	4b32      	ldr	r3, [pc, #200]	@ (8004814 <HAL_RCC_GetSysClockFreq+0x104>)
 800474a:	613b      	str	r3, [r7, #16]
      break;
 800474c:	e057      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	0c9b      	lsrs	r3, r3, #18
 8004752:	220f      	movs	r2, #15
 8004754:	4013      	ands	r3, r2
 8004756:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	0d9b      	lsrs	r3, r3, #22
 8004760:	2203      	movs	r2, #3
 8004762:	4013      	ands	r3, r2
 8004764:	3301      	adds	r3, #1
 8004766:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004768:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <HAL_RCC_GetSysClockFreq+0xf8>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	025b      	lsls	r3, r3, #9
 8004770:	4013      	ands	r3, r2
 8004772:	d00f      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	000a      	movs	r2, r1
 8004778:	0152      	lsls	r2, r2, #5
 800477a:	1a52      	subs	r2, r2, r1
 800477c:	0193      	lsls	r3, r2, #6
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	185b      	adds	r3, r3, r1
 8004784:	025b      	lsls	r3, r3, #9
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7fb fcd9 	bl	8000140 <__udivsi3>
 800478e:	0003      	movs	r3, r0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e023      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004794:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	4013      	ands	r3, r2
 800479c:	d00f      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	000a      	movs	r2, r1
 80047a2:	0152      	lsls	r2, r2, #5
 80047a4:	1a52      	subs	r2, r2, r1
 80047a6:	0193      	lsls	r3, r2, #6
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	185b      	adds	r3, r3, r1
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f7fb fcc4 	bl	8000140 <__udivsi3>
 80047b8:	0003      	movs	r3, r0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e00e      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	000a      	movs	r2, r1
 80047c2:	0152      	lsls	r2, r2, #5
 80047c4:	1a52      	subs	r2, r2, r1
 80047c6:	0193      	lsls	r3, r2, #6
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	185b      	adds	r3, r3, r1
 80047ce:	029b      	lsls	r3, r3, #10
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7fb fcb4 	bl	8000140 <__udivsi3>
 80047d8:	0003      	movs	r3, r0
 80047da:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]
      break;
 80047e0:	e00d      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	2207      	movs	r2, #7
 80047ea:	4013      	ands	r3, r2
 80047ec:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	2280      	movs	r2, #128	@ 0x80
 80047f4:	0212      	lsls	r2, r2, #8
 80047f6:	409a      	lsls	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
      break;
 80047fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047fe:	693b      	ldr	r3, [r7, #16]
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b006      	add	sp, #24
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	003d0900 	.word	0x003d0900
 8004810:	00f42400 	.word	0x00f42400
 8004814:	007a1200 	.word	0x007a1200
 8004818:	08008d24 	.word	0x08008d24

0800481c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004820:	4b02      	ldr	r3, [pc, #8]	@ (800482c <HAL_RCC_GetHCLKFreq+0x10>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff2 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004838:	0001      	movs	r1, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	2207      	movs	r2, #7
 8004842:	4013      	ands	r3, r2
 8004844:	4a04      	ldr	r2, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	40d9      	lsrs	r1, r3
 800484a:	000b      	movs	r3, r1
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	40021000 	.word	0x40021000
 8004858:	08008d1c 	.word	0x08008d1c

0800485c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004860:	f7ff ffdc 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004864:	0001      	movs	r1, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0adb      	lsrs	r3, r3, #11
 800486c:	2207      	movs	r2, #7
 800486e:	4013      	ands	r3, r2
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004872:	5cd3      	ldrb	r3, [r2, r3]
 8004874:	40d9      	lsrs	r1, r3
 8004876:	000b      	movs	r3, r1
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	40021000 	.word	0x40021000
 8004884:	08008d1c 	.word	0x08008d1c

08004888 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004890:	2017      	movs	r0, #23
 8004892:	183b      	adds	r3, r7, r0
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2220      	movs	r2, #32
 800489e:	4013      	ands	r3, r2
 80048a0:	d100      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80048a2:	e0c7      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a4:	4b84      	ldr	r3, [pc, #528]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80048a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	055b      	lsls	r3, r3, #21
 80048ac:	4013      	ands	r3, r2
 80048ae:	d109      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b81      	ldr	r3, [pc, #516]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80048b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048b4:	4b80      	ldr	r3, [pc, #512]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80048b6:	2180      	movs	r1, #128	@ 0x80
 80048b8:	0549      	lsls	r1, r1, #21
 80048ba:	430a      	orrs	r2, r1
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b7d      	ldr	r3, [pc, #500]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	d11a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d0:	4b7a      	ldr	r3, [pc, #488]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b79      	ldr	r3, [pc, #484]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048d6:	2180      	movs	r1, #128	@ 0x80
 80048d8:	0049      	lsls	r1, r1, #1
 80048da:	430a      	orrs	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fe fbc9 	bl	8003074 <HAL_GetTick>
 80048e2:	0003      	movs	r3, r0
 80048e4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fe fbc4 	bl	8003074 <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	@ 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0d9      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b70      	ldr	r3, [pc, #448]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004906:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	23c0      	movs	r3, #192	@ 0xc0
 800490c:	039b      	lsls	r3, r3, #14
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	23c0      	movs	r3, #192	@ 0xc0
 8004918:	039b      	lsls	r3, r3, #14
 800491a:	4013      	ands	r3, r2
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	429a      	cmp	r2, r3
 8004920:	d013      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	23c0      	movs	r3, #192	@ 0xc0
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	401a      	ands	r2, r3
 800492c:	23c0      	movs	r3, #192	@ 0xc0
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	429a      	cmp	r2, r3
 8004932:	d10a      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004934:	4b60      	ldr	r3, [pc, #384]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	401a      	ands	r2, r3
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	429a      	cmp	r2, r3
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0b1      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800494a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800494c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800494e:	23c0      	movs	r3, #192	@ 0xc0
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	4013      	ands	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03b      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	23c0      	movs	r3, #192	@ 0xc0
 8004962:	029b      	lsls	r3, r3, #10
 8004964:	4013      	ands	r3, r2
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d033      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	4013      	ands	r3, r2
 8004974:	d02e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004976:	4b50      	ldr	r3, [pc, #320]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497a:	4a51      	ldr	r2, [pc, #324]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800497c:	4013      	ands	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004980:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004984:	4b4c      	ldr	r3, [pc, #304]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004986:	2180      	movs	r1, #128	@ 0x80
 8004988:	0309      	lsls	r1, r1, #12
 800498a:	430a      	orrs	r2, r1
 800498c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800498e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004992:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004994:	494b      	ldr	r1, [pc, #300]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004996:	400a      	ands	r2, r1
 8004998:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800499a:	4b47      	ldr	r3, [pc, #284]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	2380      	movs	r3, #128	@ 0x80
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	d014      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fe fb63 	bl	8003074 <HAL_GetTick>
 80049ae:	0003      	movs	r3, r0
 80049b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b2:	e009      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7fe fb5e 	bl	8003074 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a42      	ldr	r2, [pc, #264]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e072      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049c8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d0ef      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2220      	movs	r2, #32
 80049da:	4013      	ands	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	23c0      	movs	r3, #192	@ 0xc0
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	401a      	ands	r2, r3
 80049e8:	23c0      	movs	r3, #192	@ 0xc0
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x182>
 80049f0:	4b31      	ldr	r3, [pc, #196]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a35      	ldr	r2, [pc, #212]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	23c0      	movs	r3, #192	@ 0xc0
 8004a00:	039b      	lsls	r3, r3, #14
 8004a02:	401a      	ands	r2, r3
 8004a04:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	23c0      	movs	r3, #192	@ 0xc0
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	401a      	ands	r2, r3
 8004a18:	4b27      	ldr	r3, [pc, #156]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a1e:	2317      	movs	r3, #23
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b23      	ldr	r3, [pc, #140]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a2c:	4b22      	ldr	r3, [pc, #136]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a2e:	4928      	ldr	r1, [pc, #160]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	220c      	movs	r2, #12
 8004a44:	4393      	bics	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2204      	movs	r2, #4
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a5c:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	0019      	movs	r1, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4b13      	ldr	r3, [pc, #76]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4013      	ands	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	4013      	ands	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004a98:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b006      	add	sp, #24
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	fffcffff 	.word	0xfffcffff
 8004ac4:	fff7ffff 	.word	0xfff7ffff
 8004ac8:	00001388 	.word	0x00001388
 8004acc:	ffcfffff 	.word	0xffcfffff
 8004ad0:	efffffff 	.word	0xefffffff
 8004ad4:	fffff3ff 	.word	0xfffff3ff
 8004ad8:	ffffcfff 	.word	0xffffcfff
 8004adc:	fff3ffff 	.word	0xfff3ffff

08004ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e044      	b.n	8004b7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2278      	movs	r2, #120	@ 0x78
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fe f8c3 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2224      	movs	r2, #36	@ 0x24
 8004b0e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 fe90 	bl	8005850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 fc42 	bl	80053bc <UART_SetConfig>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e01c      	b.n	8004b7c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	490d      	ldr	r1, [pc, #52]	@ (8004b84 <HAL_UART_Init+0xa4>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	212a      	movs	r1, #42	@ 0x2a
 8004b5e:	438a      	bics	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 ff1f 	bl	80059b8 <UART_CheckIdleState>
 8004b7a:	0003      	movs	r3, r0
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	ffffb7ff 	.word	0xffffb7ff

08004b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	1dbb      	adds	r3, r7, #6
 8004b96:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d000      	beq.n	8004ba2 <HAL_UART_Transmit+0x1a>
 8004ba0:	e08c      	b.n	8004cbc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_UART_Transmit+0x28>
 8004ba8:	1dbb      	adds	r3, r7, #6
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e084      	b.n	8004cbe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	2380      	movs	r3, #128	@ 0x80
 8004bba:	015b      	lsls	r3, r3, #5
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d109      	bne.n	8004bd4 <HAL_UART_Transmit+0x4c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e074      	b.n	8004cbe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2284      	movs	r2, #132	@ 0x84
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2221      	movs	r2, #33	@ 0x21
 8004be0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fe fa47 	bl	8003074 <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1dba      	adds	r2, r7, #6
 8004bee:	2150      	movs	r1, #80	@ 0x50
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1dba      	adds	r2, r7, #6
 8004bf8:	2152      	movs	r1, #82	@ 0x52
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	2380      	movs	r3, #128	@ 0x80
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x94>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c24:	e02f      	b.n	8004c86 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	0013      	movs	r3, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	f000 ff68 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03b      	b.n	8004cbe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	001a      	movs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	05d2      	lsls	r2, r2, #23
 8004c58:	0dd2      	lsrs	r2, r2, #23
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e007      	b.n	8004c74 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2252      	movs	r2, #82	@ 0x52
 8004c78:	5a9b      	ldrh	r3, [r3, r2]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b299      	uxth	r1, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2252      	movs	r2, #82	@ 0x52
 8004c84:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2252      	movs	r2, #82	@ 0x52
 8004c8a:	5a9b      	ldrh	r3, [r3, r2]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1c9      	bne.n	8004c26 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	0013      	movs	r3, r2
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	@ 0x40
 8004ca0:	f000 ff32 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e005      	b.n	8004cbe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b008      	add	sp, #32
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	589b      	ldr	r3, [r3, r2]
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d14a      	bne.n	8004d76 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_UART_Receive_IT+0x26>
 8004ce6:	1dbb      	adds	r3, r7, #6
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e042      	b.n	8004d78 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	2380      	movs	r3, #128	@ 0x80
 8004cf8:	015b      	lsls	r3, r3, #5
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d109      	bne.n	8004d12 <HAL_UART_Receive_IT+0x4a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d001      	beq.n	8004d12 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e032      	b.n	8004d78 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <HAL_UART_Receive_IT+0xb8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d020      	beq.n	8004d64 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d019      	beq.n	8004d64 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d30:	f3ef 8310 	mrs	r3, PRIMASK
 8004d34:	613b      	str	r3, [r7, #16]
  return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2180      	movs	r1, #128	@ 0x80
 8004d52:	04c9      	lsls	r1, r1, #19
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	881a      	ldrh	r2, [r3, #0]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f000 ff3b 	bl	8005be8 <UART_Start_Receive_IT>
 8004d72:	0003      	movs	r3, r0
 8004d74:	e000      	b.n	8004d78 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b008      	add	sp, #32
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40004800 	.word	0x40004800

08004d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b0ab      	sub	sp, #172	@ 0xac
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	22a4      	movs	r2, #164	@ 0xa4
 8004d94:	18b9      	adds	r1, r7, r2
 8004d96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	20a0      	movs	r0, #160	@ 0xa0
 8004da0:	1839      	adds	r1, r7, r0
 8004da2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	219c      	movs	r1, #156	@ 0x9c
 8004dac:	1879      	adds	r1, r7, r1
 8004dae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004db0:	0011      	movs	r1, r2
 8004db2:	18bb      	adds	r3, r7, r2
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a99      	ldr	r2, [pc, #612]	@ (800501c <HAL_UART_IRQHandler+0x298>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	2298      	movs	r2, #152	@ 0x98
 8004dbc:	18bc      	adds	r4, r7, r2
 8004dbe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004dc0:	18bb      	adds	r3, r7, r2
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d114      	bne.n	8004df2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00a      	beq.n	8004df2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d100      	bne.n	8004de6 <HAL_UART_IRQHandler+0x62>
 8004de4:	e2be      	b.n	8005364 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	0010      	movs	r0, r2
 8004dee:	4798      	blx	r3
      }
      return;
 8004df0:	e2b8      	b.n	8005364 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004df2:	2398      	movs	r3, #152	@ 0x98
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d100      	bne.n	8004dfe <HAL_UART_IRQHandler+0x7a>
 8004dfc:	e114      	b.n	8005028 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dfe:	239c      	movs	r3, #156	@ 0x9c
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2201      	movs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e0a:	23a0      	movs	r3, #160	@ 0xa0
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a83      	ldr	r2, [pc, #524]	@ (8005020 <HAL_UART_IRQHandler+0x29c>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	d100      	bne.n	8004e18 <HAL_UART_IRQHandler+0x94>
 8004e16:	e107      	b.n	8005028 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e18:	23a4      	movs	r3, #164	@ 0xa4
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4013      	ands	r3, r2
 8004e22:	d012      	beq.n	8004e4a <HAL_UART_IRQHandler+0xc6>
 8004e24:	23a0      	movs	r3, #160	@ 0xa0
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2284      	movs	r2, #132	@ 0x84
 8004e3e:	589b      	ldr	r3, [r3, r2]
 8004e40:	2201      	movs	r2, #1
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2184      	movs	r1, #132	@ 0x84
 8004e48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e4a:	23a4      	movs	r3, #164	@ 0xa4
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	4013      	ands	r3, r2
 8004e54:	d011      	beq.n	8004e7a <HAL_UART_IRQHandler+0xf6>
 8004e56:	239c      	movs	r3, #156	@ 0x9c
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2202      	movs	r2, #2
 8004e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2284      	movs	r2, #132	@ 0x84
 8004e6e:	589b      	ldr	r3, [r3, r2]
 8004e70:	2204      	movs	r2, #4
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2184      	movs	r1, #132	@ 0x84
 8004e78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e7a:	23a4      	movs	r3, #164	@ 0xa4
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	4013      	ands	r3, r2
 8004e84:	d011      	beq.n	8004eaa <HAL_UART_IRQHandler+0x126>
 8004e86:	239c      	movs	r3, #156	@ 0x9c
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2204      	movs	r2, #4
 8004e98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2284      	movs	r2, #132	@ 0x84
 8004e9e:	589b      	ldr	r3, [r3, r2]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2184      	movs	r1, #132	@ 0x84
 8004ea8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eaa:	23a4      	movs	r3, #164	@ 0xa4
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d017      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eb6:	23a0      	movs	r3, #160	@ 0xa0
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d105      	bne.n	8004ece <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ec2:	239c      	movs	r3, #156	@ 0x9c
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2284      	movs	r2, #132	@ 0x84
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	2208      	movs	r2, #8
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2184      	movs	r1, #132	@ 0x84
 8004ee4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ee6:	23a4      	movs	r3, #164	@ 0xa4
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_UART_IRQHandler+0x198>
 8004ef4:	23a0      	movs	r3, #160	@ 0xa0
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	2380      	movs	r3, #128	@ 0x80
 8004efc:	04db      	lsls	r3, r3, #19
 8004efe:	4013      	ands	r3, r2
 8004f00:	d00c      	beq.n	8004f1c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2280      	movs	r2, #128	@ 0x80
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2284      	movs	r2, #132	@ 0x84
 8004f10:	589b      	ldr	r3, [r3, r2]
 8004f12:	2220      	movs	r2, #32
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2184      	movs	r1, #132	@ 0x84
 8004f1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2284      	movs	r2, #132	@ 0x84
 8004f20:	589b      	ldr	r3, [r3, r2]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d100      	bne.n	8004f28 <HAL_UART_IRQHandler+0x1a4>
 8004f26:	e21f      	b.n	8005368 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f28:	23a4      	movs	r3, #164	@ 0xa4
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	4013      	ands	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f34:	23a0      	movs	r3, #160	@ 0xa0
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d008      	beq.n	8004f52 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	0010      	movs	r0, r2
 8004f50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2284      	movs	r2, #132	@ 0x84
 8004f56:	589b      	ldr	r3, [r3, r2]
 8004f58:	2194      	movs	r1, #148	@ 0x94
 8004f5a:	187a      	adds	r2, r7, r1
 8004f5c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2240      	movs	r2, #64	@ 0x40
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b40      	cmp	r3, #64	@ 0x40
 8004f6a:	d004      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2228      	movs	r2, #40	@ 0x28
 8004f72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f74:	d047      	beq.n	8005006 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 feff 	bl	8005d7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2240      	movs	r2, #64	@ 0x40
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	d137      	bne.n	8004ffc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f90:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f94:	2090      	movs	r0, #144	@ 0x90
 8004f96:	183a      	adds	r2, r7, r0
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2140      	movs	r1, #64	@ 0x40
 8004fb2:	438a      	bics	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	183b      	adds	r3, r7, r0
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd0:	4a14      	ldr	r2, [pc, #80]	@ (8005024 <HAL_UART_IRQHandler+0x2a0>)
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fe fb73 	bl	80036c4 <HAL_DMA_Abort_IT>
 8004fde:	1e03      	subs	r3, r0, #0
 8004fe0:	d01a      	beq.n	8005018 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fec:	0018      	movs	r0, r3
 8004fee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	e012      	b.n	8005018 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 f9cd 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffa:	e00d      	b.n	8005018 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 f9c8 	bl	8005394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	e008      	b.n	8005018 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	0018      	movs	r0, r3
 800500a:	f000 f9c3 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2284      	movs	r2, #132	@ 0x84
 8005012:	2100      	movs	r1, #0
 8005014:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005016:	e1a7      	b.n	8005368 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	46c0      	nop			@ (mov r8, r8)
    return;
 800501a:	e1a5      	b.n	8005368 <HAL_UART_IRQHandler+0x5e4>
 800501c:	0000080f 	.word	0x0000080f
 8005020:	04000120 	.word	0x04000120
 8005024:	08005e45 	.word	0x08005e45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502c:	2b01      	cmp	r3, #1
 800502e:	d000      	beq.n	8005032 <HAL_UART_IRQHandler+0x2ae>
 8005030:	e159      	b.n	80052e6 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005032:	23a4      	movs	r3, #164	@ 0xa4
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	4013      	ands	r3, r2
 800503c:	d100      	bne.n	8005040 <HAL_UART_IRQHandler+0x2bc>
 800503e:	e152      	b.n	80052e6 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005040:	23a0      	movs	r3, #160	@ 0xa0
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2210      	movs	r2, #16
 8005048:	4013      	ands	r3, r2
 800504a:	d100      	bne.n	800504e <HAL_UART_IRQHandler+0x2ca>
 800504c:	e14b      	b.n	80052e6 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2210      	movs	r2, #16
 8005054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	4013      	ands	r3, r2
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	d000      	beq.n	8005066 <HAL_UART_IRQHandler+0x2e2>
 8005064:	e0bf      	b.n	80051e6 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	217e      	movs	r1, #126	@ 0x7e
 8005070:	187b      	adds	r3, r7, r1
 8005072:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005074:	187b      	adds	r3, r7, r1
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d100      	bne.n	800507e <HAL_UART_IRQHandler+0x2fa>
 800507c:	e095      	b.n	80051aa <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2258      	movs	r2, #88	@ 0x58
 8005082:	5a9b      	ldrh	r3, [r3, r2]
 8005084:	187a      	adds	r2, r7, r1
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d300      	bcc.n	800508e <HAL_UART_IRQHandler+0x30a>
 800508c:	e08d      	b.n	80051aa <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	187a      	adds	r2, r7, r1
 8005092:	215a      	movs	r1, #90	@ 0x5a
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2220      	movs	r2, #32
 80050a2:	4013      	ands	r3, r2
 80050a4:	d16f      	bne.n	8005186 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a6:	f3ef 8310 	mrs	r3, PRIMASK
 80050aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050b0:	2301      	movs	r3, #1
 80050b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	49ad      	ldr	r1, [pc, #692]	@ (800537c <HAL_UART_IRQHandler+0x5f8>)
 80050c8:	400a      	ands	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80050de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80050e2:	2301      	movs	r3, #1
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005100:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510a:	f3ef 8310 	mrs	r3, PRIMASK
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	673b      	str	r3, [r7, #112]	@ 0x70
 8005114:	2301      	movs	r3, #1
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2140      	movs	r1, #64	@ 0x40
 800512c:	438a      	bics	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005132:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2280      	movs	r2, #128	@ 0x80
 8005140:	2120      	movs	r1, #32
 8005142:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005154:	2301      	movs	r3, #1
 8005156:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2110      	movs	r1, #16
 800516c:	438a      	bics	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005172:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005180:	0018      	movs	r0, r3
 8005182:	f7fe fa5f 	bl	8003644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2258      	movs	r2, #88	@ 0x58
 8005190:	5a9a      	ldrh	r2, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	215a      	movs	r1, #90	@ 0x5a
 8005196:	5a5b      	ldrh	r3, [r3, r1]
 8005198:	b29b      	uxth	r3, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	0011      	movs	r1, r2
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 f8fe 	bl	80053a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051a8:	e0e0      	b.n	800536c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2258      	movs	r2, #88	@ 0x58
 80051ae:	5a9b      	ldrh	r3, [r3, r2]
 80051b0:	227e      	movs	r2, #126	@ 0x7e
 80051b2:	18ba      	adds	r2, r7, r2
 80051b4:	8812      	ldrh	r2, [r2, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d000      	beq.n	80051bc <HAL_UART_IRQHandler+0x438>
 80051ba:	e0d7      	b.n	800536c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2220      	movs	r2, #32
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d000      	beq.n	80051ce <HAL_UART_IRQHandler+0x44a>
 80051cc:	e0ce      	b.n	800536c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2258      	movs	r2, #88	@ 0x58
 80051d8:	5a9a      	ldrh	r2, [r3, r2]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0011      	movs	r1, r2
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 f8e0 	bl	80053a4 <HAL_UARTEx_RxEventCallback>
      return;
 80051e4:	e0c2      	b.n	800536c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2258      	movs	r2, #88	@ 0x58
 80051ea:	5a99      	ldrh	r1, [r3, r2]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	225a      	movs	r2, #90	@ 0x5a
 80051f0:	5a9b      	ldrh	r3, [r3, r2]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	208e      	movs	r0, #142	@ 0x8e
 80051f6:	183b      	adds	r3, r7, r0
 80051f8:	1a8a      	subs	r2, r1, r2
 80051fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	225a      	movs	r2, #90	@ 0x5a
 8005200:	5a9b      	ldrh	r3, [r3, r2]
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d100      	bne.n	800520a <HAL_UART_IRQHandler+0x486>
 8005208:	e0b2      	b.n	8005370 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800520a:	183b      	adds	r3, r7, r0
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d100      	bne.n	8005214 <HAL_UART_IRQHandler+0x490>
 8005212:	e0ad      	b.n	8005370 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	60fb      	str	r3, [r7, #12]
  return(result);
 800521a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521c:	2488      	movs	r4, #136	@ 0x88
 800521e:	193a      	adds	r2, r7, r4
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	2301      	movs	r3, #1
 8005224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			@ (mov r8, r8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4951      	ldr	r1, [pc, #324]	@ (8005380 <HAL_UART_IRQHandler+0x5fc>)
 800523a:	400a      	ands	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	193b      	adds	r3, r7, r4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524c:	f3ef 8310 	mrs	r3, PRIMASK
 8005250:	61bb      	str	r3, [r7, #24]
  return(result);
 8005252:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	2484      	movs	r4, #132	@ 0x84
 8005256:	193a      	adds	r2, r7, r4
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	2301      	movs	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	438a      	bics	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	193b      	adds	r3, r7, r4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2280      	movs	r2, #128	@ 0x80
 8005288:	2120      	movs	r1, #32
 800528a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005298:	f3ef 8310 	mrs	r3, PRIMASK
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	2480      	movs	r4, #128	@ 0x80
 80052a2:	193a      	adds	r2, r7, r4
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	2301      	movs	r3, #1
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			@ (mov r8, r8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2110      	movs	r1, #16
 80052be:	438a      	bics	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	0011      	movs	r1, r2
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 f860 	bl	80053a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052e4:	e044      	b.n	8005370 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052e6:	23a4      	movs	r3, #164	@ 0xa4
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	035b      	lsls	r3, r3, #13
 80052f0:	4013      	ands	r3, r2
 80052f2:	d010      	beq.n	8005316 <HAL_UART_IRQHandler+0x592>
 80052f4:	239c      	movs	r3, #156	@ 0x9c
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	03db      	lsls	r3, r3, #15
 80052fe:	4013      	ands	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	0352      	lsls	r2, r2, #13
 800530a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 ff9a 	bl	8006248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005314:	e02f      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005316:	23a4      	movs	r3, #164	@ 0xa4
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2280      	movs	r2, #128	@ 0x80
 800531e:	4013      	ands	r3, r2
 8005320:	d00f      	beq.n	8005342 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005322:	23a0      	movs	r3, #160	@ 0xa0
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	4013      	ands	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01e      	beq.n	8005374 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	0010      	movs	r0, r2
 800533e:	4798      	blx	r3
    }
    return;
 8005340:	e018      	b.n	8005374 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005342:	23a4      	movs	r3, #164	@ 0xa4
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2240      	movs	r2, #64	@ 0x40
 800534a:	4013      	ands	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_UART_IRQHandler+0x5f2>
 800534e:	23a0      	movs	r3, #160	@ 0xa0
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2240      	movs	r2, #64	@ 0x40
 8005356:	4013      	ands	r3, r2
 8005358:	d00d      	beq.n	8005376 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 fd84 	bl	8005e6a <UART_EndTransmit_IT>
    return;
 8005362:	e008      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005364:	46c0      	nop			@ (mov r8, r8)
 8005366:	e006      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	e004      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
      return;
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	e002      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	e000      	b.n	8005376 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005374:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005376:	46bd      	mov	sp, r7
 8005378:	b02b      	add	sp, #172	@ 0xac
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	fffffeff 	.word	0xfffffeff
 8005380:	fffffedf 	.word	0xfffffedf

08005384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800538c:	46c0      	nop			@ (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	000a      	movs	r2, r1
 80053ae:	1cbb      	adds	r3, r7, #2
 80053b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b5b0      	push	{r4, r5, r7, lr}
 80053be:	b08e      	sub	sp, #56	@ 0x38
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053c4:	231a      	movs	r3, #26
 80053c6:	2218      	movs	r2, #24
 80053c8:	189b      	adds	r3, r3, r2
 80053ca:	19db      	adds	r3, r3, r7
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	431a      	orrs	r2, r3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	431a      	orrs	r2, r3
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4ab4      	ldr	r2, [pc, #720]	@ (80056c0 <UART_SetConfig+0x304>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053fa:	430a      	orrs	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4aaf      	ldr	r2, [pc, #700]	@ (80056c4 <UART_SetConfig+0x308>)
 8005406:	4013      	ands	r3, r2
 8005408:	0019      	movs	r1, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4aa9      	ldr	r2, [pc, #676]	@ (80056c8 <UART_SetConfig+0x30c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800542c:	4313      	orrs	r3, r2
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	4aa5      	ldr	r2, [pc, #660]	@ (80056cc <UART_SetConfig+0x310>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4aa1      	ldr	r2, [pc, #644]	@ (80056d0 <UART_SetConfig+0x314>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d131      	bne.n	80054b4 <UART_SetConfig+0xf8>
 8005450:	4ba0      	ldr	r3, [pc, #640]	@ (80056d4 <UART_SetConfig+0x318>)
 8005452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005454:	220c      	movs	r2, #12
 8005456:	4013      	ands	r3, r2
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d01d      	beq.n	8005498 <UART_SetConfig+0xdc>
 800545c:	d823      	bhi.n	80054a6 <UART_SetConfig+0xea>
 800545e:	2b08      	cmp	r3, #8
 8005460:	d00c      	beq.n	800547c <UART_SetConfig+0xc0>
 8005462:	d820      	bhi.n	80054a6 <UART_SetConfig+0xea>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <UART_SetConfig+0xb2>
 8005468:	2b04      	cmp	r3, #4
 800546a:	d00e      	beq.n	800548a <UART_SetConfig+0xce>
 800546c:	e01b      	b.n	80054a6 <UART_SetConfig+0xea>
 800546e:	231b      	movs	r3, #27
 8005470:	2218      	movs	r2, #24
 8005472:	189b      	adds	r3, r3, r2
 8005474:	19db      	adds	r3, r3, r7
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e065      	b.n	8005548 <UART_SetConfig+0x18c>
 800547c:	231b      	movs	r3, #27
 800547e:	2218      	movs	r2, #24
 8005480:	189b      	adds	r3, r3, r2
 8005482:	19db      	adds	r3, r3, r7
 8005484:	2202      	movs	r2, #2
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e05e      	b.n	8005548 <UART_SetConfig+0x18c>
 800548a:	231b      	movs	r3, #27
 800548c:	2218      	movs	r2, #24
 800548e:	189b      	adds	r3, r3, r2
 8005490:	19db      	adds	r3, r3, r7
 8005492:	2204      	movs	r2, #4
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e057      	b.n	8005548 <UART_SetConfig+0x18c>
 8005498:	231b      	movs	r3, #27
 800549a:	2218      	movs	r2, #24
 800549c:	189b      	adds	r3, r3, r2
 800549e:	19db      	adds	r3, r3, r7
 80054a0:	2208      	movs	r2, #8
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e050      	b.n	8005548 <UART_SetConfig+0x18c>
 80054a6:	231b      	movs	r3, #27
 80054a8:	2218      	movs	r2, #24
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	19db      	adds	r3, r3, r7
 80054ae:	2210      	movs	r2, #16
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e049      	b.n	8005548 <UART_SetConfig+0x18c>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a83      	ldr	r2, [pc, #524]	@ (80056c8 <UART_SetConfig+0x30c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d13e      	bne.n	800553c <UART_SetConfig+0x180>
 80054be:	4b85      	ldr	r3, [pc, #532]	@ (80056d4 <UART_SetConfig+0x318>)
 80054c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c2:	23c0      	movs	r3, #192	@ 0xc0
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	4013      	ands	r3, r2
 80054c8:	22c0      	movs	r2, #192	@ 0xc0
 80054ca:	0112      	lsls	r2, r2, #4
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d027      	beq.n	8005520 <UART_SetConfig+0x164>
 80054d0:	22c0      	movs	r2, #192	@ 0xc0
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d82a      	bhi.n	800552e <UART_SetConfig+0x172>
 80054d8:	2280      	movs	r2, #128	@ 0x80
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	4293      	cmp	r3, r2
 80054de:	d011      	beq.n	8005504 <UART_SetConfig+0x148>
 80054e0:	2280      	movs	r2, #128	@ 0x80
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d822      	bhi.n	800552e <UART_SetConfig+0x172>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <UART_SetConfig+0x13a>
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	00d2      	lsls	r2, r2, #3
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <UART_SetConfig+0x156>
 80054f4:	e01b      	b.n	800552e <UART_SetConfig+0x172>
 80054f6:	231b      	movs	r3, #27
 80054f8:	2218      	movs	r2, #24
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	19db      	adds	r3, r3, r7
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e021      	b.n	8005548 <UART_SetConfig+0x18c>
 8005504:	231b      	movs	r3, #27
 8005506:	2218      	movs	r2, #24
 8005508:	189b      	adds	r3, r3, r2
 800550a:	19db      	adds	r3, r3, r7
 800550c:	2202      	movs	r2, #2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e01a      	b.n	8005548 <UART_SetConfig+0x18c>
 8005512:	231b      	movs	r3, #27
 8005514:	2218      	movs	r2, #24
 8005516:	189b      	adds	r3, r3, r2
 8005518:	19db      	adds	r3, r3, r7
 800551a:	2204      	movs	r2, #4
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e013      	b.n	8005548 <UART_SetConfig+0x18c>
 8005520:	231b      	movs	r3, #27
 8005522:	2218      	movs	r2, #24
 8005524:	189b      	adds	r3, r3, r2
 8005526:	19db      	adds	r3, r3, r7
 8005528:	2208      	movs	r2, #8
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e00c      	b.n	8005548 <UART_SetConfig+0x18c>
 800552e:	231b      	movs	r3, #27
 8005530:	2218      	movs	r2, #24
 8005532:	189b      	adds	r3, r3, r2
 8005534:	19db      	adds	r3, r3, r7
 8005536:	2210      	movs	r2, #16
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e005      	b.n	8005548 <UART_SetConfig+0x18c>
 800553c:	231b      	movs	r3, #27
 800553e:	2218      	movs	r2, #24
 8005540:	189b      	adds	r3, r3, r2
 8005542:	19db      	adds	r3, r3, r7
 8005544:	2210      	movs	r2, #16
 8005546:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5e      	ldr	r2, [pc, #376]	@ (80056c8 <UART_SetConfig+0x30c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d000      	beq.n	8005554 <UART_SetConfig+0x198>
 8005552:	e084      	b.n	800565e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005554:	231b      	movs	r3, #27
 8005556:	2218      	movs	r2, #24
 8005558:	189b      	adds	r3, r3, r2
 800555a:	19db      	adds	r3, r3, r7
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b08      	cmp	r3, #8
 8005560:	d01d      	beq.n	800559e <UART_SetConfig+0x1e2>
 8005562:	dc20      	bgt.n	80055a6 <UART_SetConfig+0x1ea>
 8005564:	2b04      	cmp	r3, #4
 8005566:	d015      	beq.n	8005594 <UART_SetConfig+0x1d8>
 8005568:	dc1d      	bgt.n	80055a6 <UART_SetConfig+0x1ea>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <UART_SetConfig+0x1b8>
 800556e:	2b02      	cmp	r3, #2
 8005570:	d005      	beq.n	800557e <UART_SetConfig+0x1c2>
 8005572:	e018      	b.n	80055a6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005574:	f7ff f95c 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8005578:	0003      	movs	r3, r0
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800557c:	e01c      	b.n	80055b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557e:	4b55      	ldr	r3, [pc, #340]	@ (80056d4 <UART_SetConfig+0x318>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2210      	movs	r2, #16
 8005584:	4013      	ands	r3, r2
 8005586:	d002      	beq.n	800558e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005588:	4b53      	ldr	r3, [pc, #332]	@ (80056d8 <UART_SetConfig+0x31c>)
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800558c:	e014      	b.n	80055b8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800558e:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <UART_SetConfig+0x320>)
 8005590:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005592:	e011      	b.n	80055b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005594:	f7ff f8bc 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8005598:	0003      	movs	r3, r0
 800559a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80055aa:	231a      	movs	r3, #26
 80055ac:	2218      	movs	r2, #24
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	19db      	adds	r3, r3, r7
 80055b2:	2201      	movs	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
        break;
 80055b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d100      	bne.n	80055c0 <UART_SetConfig+0x204>
 80055be:	e12f      	b.n	8005820 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	0013      	movs	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d305      	bcc.n	80055dc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d8:	429a      	cmp	r2, r3
 80055da:	d906      	bls.n	80055ea <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80055dc:	231a      	movs	r3, #26
 80055de:	2218      	movs	r2, #24
 80055e0:	189b      	adds	r3, r3, r2
 80055e2:	19db      	adds	r3, r3, r7
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e11a      	b.n	8005820 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	6939      	ldr	r1, [r7, #16]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	000b      	movs	r3, r1
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	0010      	movs	r0, r2
 80055fc:	0205      	lsls	r5, r0, #8
 80055fe:	431d      	orrs	r5, r3
 8005600:	000b      	movs	r3, r1
 8005602:	021c      	lsls	r4, r3, #8
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68b8      	ldr	r0, [r7, #8]
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	1900      	adds	r0, r0, r4
 8005616:	4169      	adcs	r1, r5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f7fa ff3f 	bl	80004a8 <__aeabi_uldivmod>
 800562a:	0002      	movs	r2, r0
 800562c:	000b      	movs	r3, r1
 800562e:	0013      	movs	r3, r2
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005634:	23c0      	movs	r3, #192	@ 0xc0
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d309      	bcc.n	8005650 <UART_SetConfig+0x294>
 800563c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	035b      	lsls	r3, r3, #13
 8005642:	429a      	cmp	r2, r3
 8005644:	d204      	bcs.n	8005650 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e0e7      	b.n	8005820 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005650:	231a      	movs	r3, #26
 8005652:	2218      	movs	r2, #24
 8005654:	189b      	adds	r3, r3, r2
 8005656:	19db      	adds	r3, r3, r7
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e0e0      	b.n	8005820 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	429a      	cmp	r2, r3
 8005668:	d000      	beq.n	800566c <UART_SetConfig+0x2b0>
 800566a:	e082      	b.n	8005772 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800566c:	231b      	movs	r3, #27
 800566e:	2218      	movs	r2, #24
 8005670:	189b      	adds	r3, r3, r2
 8005672:	19db      	adds	r3, r3, r7
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d834      	bhi.n	80056e4 <UART_SetConfig+0x328>
 800567a:	009a      	lsls	r2, r3, #2
 800567c:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <UART_SetConfig+0x324>)
 800567e:	18d3      	adds	r3, r2, r3
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005684:	f7ff f8d4 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8005688:	0003      	movs	r3, r0
 800568a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800568c:	e033      	b.n	80056f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568e:	f7ff f8e5 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 8005692:	0003      	movs	r3, r0
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005696:	e02e      	b.n	80056f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005698:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <UART_SetConfig+0x318>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2210      	movs	r2, #16
 800569e:	4013      	ands	r3, r2
 80056a0:	d002      	beq.n	80056a8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <UART_SetConfig+0x31c>)
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a6:	e026      	b.n	80056f6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <UART_SetConfig+0x320>)
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ac:	e023      	b.n	80056f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7ff f82f 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80056b2:	0003      	movs	r3, r0
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056b6:	e01e      	b.n	80056f6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056be:	e01a      	b.n	80056f6 <UART_SetConfig+0x33a>
 80056c0:	efff69f3 	.word	0xefff69f3
 80056c4:	ffffcfff 	.word	0xffffcfff
 80056c8:	40004800 	.word	0x40004800
 80056cc:	fffff4ff 	.word	0xfffff4ff
 80056d0:	40004400 	.word	0x40004400
 80056d4:	40021000 	.word	0x40021000
 80056d8:	003d0900 	.word	0x003d0900
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	08008d30 	.word	0x08008d30
      default:
        pclk = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80056e8:	231a      	movs	r3, #26
 80056ea:	2218      	movs	r2, #24
 80056ec:	189b      	adds	r3, r3, r2
 80056ee:	19db      	adds	r3, r3, r7
 80056f0:	2201      	movs	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
        break;
 80056f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d100      	bne.n	80056fe <UART_SetConfig+0x342>
 80056fc:	e090      	b.n	8005820 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005700:	005a      	lsls	r2, r3, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	18d2      	adds	r2, r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0019      	movs	r1, r3
 8005710:	0010      	movs	r0, r2
 8005712:	f7fa fd15 	bl	8000140 <__udivsi3>
 8005716:	0003      	movs	r3, r0
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	2b0f      	cmp	r3, #15
 800571e:	d921      	bls.n	8005764 <UART_SetConfig+0x3a8>
 8005720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	429a      	cmp	r2, r3
 8005728:	d21c      	bcs.n	8005764 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	b29a      	uxth	r2, r3
 800572e:	200e      	movs	r0, #14
 8005730:	2418      	movs	r4, #24
 8005732:	1903      	adds	r3, r0, r4
 8005734:	19db      	adds	r3, r3, r7
 8005736:	210f      	movs	r1, #15
 8005738:	438a      	bics	r2, r1
 800573a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	2207      	movs	r2, #7
 8005744:	4013      	ands	r3, r2
 8005746:	b299      	uxth	r1, r3
 8005748:	1903      	adds	r3, r0, r4
 800574a:	19db      	adds	r3, r3, r7
 800574c:	1902      	adds	r2, r0, r4
 800574e:	19d2      	adds	r2, r2, r7
 8005750:	8812      	ldrh	r2, [r2, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	1902      	adds	r2, r0, r4
 800575c:	19d2      	adds	r2, r2, r7
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e05d      	b.n	8005820 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005764:	231a      	movs	r3, #26
 8005766:	2218      	movs	r2, #24
 8005768:	189b      	adds	r3, r3, r2
 800576a:	19db      	adds	r3, r3, r7
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e056      	b.n	8005820 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005772:	231b      	movs	r3, #27
 8005774:	2218      	movs	r2, #24
 8005776:	189b      	adds	r3, r3, r2
 8005778:	19db      	adds	r3, r3, r7
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d822      	bhi.n	80057c6 <UART_SetConfig+0x40a>
 8005780:	009a      	lsls	r2, r3, #2
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <UART_SetConfig+0x484>)
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578a:	f7ff f851 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 800578e:	0003      	movs	r3, r0
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005792:	e021      	b.n	80057d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7ff f862 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 8005798:	0003      	movs	r3, r0
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800579c:	e01c      	b.n	80057d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579e:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <UART_SetConfig+0x488>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2210      	movs	r2, #16
 80057a4:	4013      	ands	r3, r2
 80057a6:	d002      	beq.n	80057ae <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057a8:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <UART_SetConfig+0x48c>)
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057ac:	e014      	b.n	80057d8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80057ae:	4b27      	ldr	r3, [pc, #156]	@ (800584c <UART_SetConfig+0x490>)
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057b2:	e011      	b.n	80057d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b4:	f7fe ffac 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80057b8:	0003      	movs	r3, r0
 80057ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057bc:	e00c      	b.n	80057d8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	2380      	movs	r3, #128	@ 0x80
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057c4:	e008      	b.n	80057d8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80057ca:	231a      	movs	r3, #26
 80057cc:	2218      	movs	r2, #24
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	19db      	adds	r3, r3, r7
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
        break;
 80057d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	085a      	lsrs	r2, r3, #1
 80057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e6:	18d2      	adds	r2, r2, r3
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	0019      	movs	r1, r3
 80057ee:	0010      	movs	r0, r2
 80057f0:	f7fa fca6 	bl	8000140 <__udivsi3>
 80057f4:	0003      	movs	r3, r0
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d90a      	bls.n	8005814 <UART_SetConfig+0x458>
 80057fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005800:	2380      	movs	r3, #128	@ 0x80
 8005802:	025b      	lsls	r3, r3, #9
 8005804:	429a      	cmp	r2, r3
 8005806:	d205      	bcs.n	8005814 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	b29a      	uxth	r2, r3
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	e005      	b.n	8005820 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005814:	231a      	movs	r3, #26
 8005816:	2218      	movs	r2, #24
 8005818:	189b      	adds	r3, r3, r2
 800581a:	19db      	adds	r3, r3, r7
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2200      	movs	r2, #0
 8005824:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2200      	movs	r2, #0
 800582a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800582c:	231a      	movs	r3, #26
 800582e:	2218      	movs	r2, #24
 8005830:	189b      	adds	r3, r3, r2
 8005832:	19db      	adds	r3, r3, r7
 8005834:	781b      	ldrb	r3, [r3, #0]
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b00e      	add	sp, #56	@ 0x38
 800583c:	bdb0      	pop	{r4, r5, r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	08008d54 	.word	0x08008d54
 8005844:	40021000 	.word	0x40021000
 8005848:	003d0900 	.word	0x003d0900
 800584c:	00f42400 	.word	0x00f42400

08005850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2208      	movs	r2, #8
 800585e:	4013      	ands	r3, r2
 8005860:	d00b      	beq.n	800587a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a4a      	ldr	r2, [pc, #296]	@ (8005994 <UART_AdvFeatureConfig+0x144>)
 800586a:	4013      	ands	r3, r2
 800586c:	0019      	movs	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	2201      	movs	r2, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d00b      	beq.n	800589c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4a43      	ldr	r2, [pc, #268]	@ (8005998 <UART_AdvFeatureConfig+0x148>)
 800588c:	4013      	ands	r3, r2
 800588e:	0019      	movs	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	2202      	movs	r2, #2
 80058a2:	4013      	ands	r3, r2
 80058a4:	d00b      	beq.n	80058be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a3b      	ldr	r2, [pc, #236]	@ (800599c <UART_AdvFeatureConfig+0x14c>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	2204      	movs	r2, #4
 80058c4:	4013      	ands	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4a34      	ldr	r2, [pc, #208]	@ (80059a0 <UART_AdvFeatureConfig+0x150>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	0019      	movs	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	2210      	movs	r2, #16
 80058e6:	4013      	ands	r3, r2
 80058e8:	d00b      	beq.n	8005902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <UART_AdvFeatureConfig+0x154>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	0019      	movs	r1, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2220      	movs	r2, #32
 8005908:	4013      	ands	r3, r2
 800590a:	d00b      	beq.n	8005924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	4a25      	ldr	r2, [pc, #148]	@ (80059a8 <UART_AdvFeatureConfig+0x158>)
 8005914:	4013      	ands	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	2240      	movs	r2, #64	@ 0x40
 800592a:	4013      	ands	r3, r2
 800592c:	d01d      	beq.n	800596a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <UART_AdvFeatureConfig+0x15c>)
 8005936:	4013      	ands	r3, r2
 8005938:	0019      	movs	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800594a:	2380      	movs	r3, #128	@ 0x80
 800594c:	035b      	lsls	r3, r3, #13
 800594e:	429a      	cmp	r2, r3
 8005950:	d10b      	bne.n	800596a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <UART_AdvFeatureConfig+0x160>)
 800595a:	4013      	ands	r3, r2
 800595c:	0019      	movs	r1, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	2280      	movs	r2, #128	@ 0x80
 8005970:	4013      	ands	r3, r2
 8005972:	d00b      	beq.n	800598c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4a0e      	ldr	r2, [pc, #56]	@ (80059b4 <UART_AdvFeatureConfig+0x164>)
 800597c:	4013      	ands	r3, r2
 800597e:	0019      	movs	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
}
 800598c:	46c0      	nop			@ (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}
 8005994:	ffff7fff 	.word	0xffff7fff
 8005998:	fffdffff 	.word	0xfffdffff
 800599c:	fffeffff 	.word	0xfffeffff
 80059a0:	fffbffff 	.word	0xfffbffff
 80059a4:	ffffefff 	.word	0xffffefff
 80059a8:	ffffdfff 	.word	0xffffdfff
 80059ac:	ffefffff 	.word	0xffefffff
 80059b0:	ff9fffff 	.word	0xff9fffff
 80059b4:	fff7ffff 	.word	0xfff7ffff

080059b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b092      	sub	sp, #72	@ 0x48
 80059bc:	af02      	add	r7, sp, #8
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2284      	movs	r2, #132	@ 0x84
 80059c4:	2100      	movs	r1, #0
 80059c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c8:	f7fd fb54 	bl	8003074 <HAL_GetTick>
 80059cc:	0003      	movs	r3, r0
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2208      	movs	r2, #8
 80059d8:	4013      	ands	r3, r2
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d12c      	bne.n	8005a38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	2280      	movs	r2, #128	@ 0x80
 80059e2:	0391      	lsls	r1, r2, #14
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4a46      	ldr	r2, [pc, #280]	@ (8005b00 <UART_CheckIdleState+0x148>)
 80059e8:	9200      	str	r2, [sp, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f000 f88c 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d021      	beq.n	8005a38 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f4:	f3ef 8310 	mrs	r3, PRIMASK
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059fe:	2301      	movs	r3, #1
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	f383 8810 	msr	PRIMASK, r3
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2180      	movs	r1, #128	@ 0x80
 8005a16:	438a      	bics	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	f383 8810 	msr	PRIMASK, r3
}
 8005a24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2278      	movs	r2, #120	@ 0x78
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e05f      	b.n	8005af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d146      	bne.n	8005ad4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a48:	2280      	movs	r2, #128	@ 0x80
 8005a4a:	03d1      	lsls	r1, r2, #15
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b00 <UART_CheckIdleState+0x148>)
 8005a50:	9200      	str	r2, [sp, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f000 f858 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8005a58:	1e03      	subs	r3, r0, #0
 8005a5a:	d03b      	beq.n	8005ad4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a66:	2301      	movs	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f383 8810 	msr	PRIMASK, r3
}
 8005a70:	46c0      	nop			@ (mov r8, r8)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4921      	ldr	r1, [pc, #132]	@ (8005b04 <UART_CheckIdleState+0x14c>)
 8005a7e:	400a      	ands	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f383 8810 	msr	PRIMASK, r3
}
 8005a8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a98:	2301      	movs	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2101      	movs	r1, #1
 8005ab0:	438a      	bics	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f383 8810 	msr	PRIMASK, r3
}
 8005abe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2280      	movs	r2, #128	@ 0x80
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2278      	movs	r2, #120	@ 0x78
 8005acc:	2100      	movs	r1, #0
 8005ace:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e011      	b.n	8005af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2280      	movs	r2, #128	@ 0x80
 8005ade:	2120      	movs	r1, #32
 8005ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2278      	movs	r2, #120	@ 0x78
 8005af2:	2100      	movs	r1, #0
 8005af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b010      	add	sp, #64	@ 0x40
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	01ffffff 	.word	0x01ffffff
 8005b04:	fffffedf 	.word	0xfffffedf

08005b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	1dfb      	adds	r3, r7, #7
 8005b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b18:	e051      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	d04e      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b20:	f7fd faa8 	bl	8003074 <HAL_GetTick>
 8005b24:	0002      	movs	r2, r0
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e051      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2204      	movs	r2, #4
 8005b42:	4013      	ands	r3, r2
 8005b44:	d03b      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b80      	cmp	r3, #128	@ 0x80
 8005b4a:	d038      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b40      	cmp	r3, #64	@ 0x40
 8005b50:	d035      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d111      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2208      	movs	r2, #8
 8005b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f000 f906 	bl	8005d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2284      	movs	r2, #132	@ 0x84
 8005b74:	2108      	movs	r1, #8
 8005b76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2278      	movs	r2, #120	@ 0x78
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e02c      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	401a      	ands	r2, r3
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d112      	bne.n	8005bbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2280      	movs	r2, #128	@ 0x80
 8005b9e:	0112      	lsls	r2, r2, #4
 8005ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 f8e9 	bl	8005d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2284      	movs	r2, #132	@ 0x84
 8005bae:	2120      	movs	r1, #32
 8005bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2278      	movs	r2, #120	@ 0x78
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e00f      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	425a      	negs	r2, r3
 8005bce:	4153      	adcs	r3, r2
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	1dfb      	adds	r3, r7, #7
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d09e      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b004      	add	sp, #16
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b090      	sub	sp, #64	@ 0x40
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	1dbb      	adds	r3, r7, #6
 8005bf4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1dba      	adds	r2, r7, #6
 8005c00:	2158      	movs	r1, #88	@ 0x58
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1dba      	adds	r2, r7, #6
 8005c0a:	215a      	movs	r1, #90	@ 0x5a
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	2380      	movs	r3, #128	@ 0x80
 8005c1c:	015b      	lsls	r3, r3, #5
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10d      	bne.n	8005c3e <UART_Start_Receive_IT+0x56>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <UART_Start_Receive_IT+0x4c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	225c      	movs	r2, #92	@ 0x5c
 8005c2e:	4950      	ldr	r1, [pc, #320]	@ (8005d70 <UART_Start_Receive_IT+0x188>)
 8005c30:	5299      	strh	r1, [r3, r2]
 8005c32:	e02e      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	225c      	movs	r2, #92	@ 0x5c
 8005c38:	21ff      	movs	r1, #255	@ 0xff
 8005c3a:	5299      	strh	r1, [r3, r2]
 8005c3c:	e029      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <UART_Start_Receive_IT+0x7a>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <UART_Start_Receive_IT+0x70>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	225c      	movs	r2, #92	@ 0x5c
 8005c52:	21ff      	movs	r1, #255	@ 0xff
 8005c54:	5299      	strh	r1, [r3, r2]
 8005c56:	e01c      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	225c      	movs	r2, #92	@ 0x5c
 8005c5c:	217f      	movs	r1, #127	@ 0x7f
 8005c5e:	5299      	strh	r1, [r3, r2]
 8005c60:	e017      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	055b      	lsls	r3, r3, #21
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d10d      	bne.n	8005c8a <UART_Start_Receive_IT+0xa2>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <UART_Start_Receive_IT+0x98>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	225c      	movs	r2, #92	@ 0x5c
 8005c7a:	217f      	movs	r1, #127	@ 0x7f
 8005c7c:	5299      	strh	r1, [r3, r2]
 8005c7e:	e008      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	225c      	movs	r2, #92	@ 0x5c
 8005c84:	213f      	movs	r1, #63	@ 0x3f
 8005c86:	5299      	strh	r1, [r3, r2]
 8005c88:	e003      	b.n	8005c92 <UART_Start_Receive_IT+0xaa>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	225c      	movs	r2, #92	@ 0x5c
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2284      	movs	r2, #132	@ 0x84
 8005c96:	2100      	movs	r1, #0
 8005c98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2280      	movs	r2, #128	@ 0x80
 8005c9e:	2122      	movs	r1, #34	@ 0x22
 8005ca0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cac:	2301      	movs	r3, #1
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	f383 8810 	msr	PRIMASK, r3
}
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	f383 8810 	msr	PRIMASK, r3
}
 8005cd2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	015b      	lsls	r3, r3, #5
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d107      	bne.n	8005cf0 <UART_Start_Receive_IT+0x108>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <UART_Start_Receive_IT+0x18c>)
 8005cec:	669a      	str	r2, [r3, #104]	@ 0x68
 8005cee:	e002      	b.n	8005cf6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	@ (8005d78 <UART_Start_Receive_IT+0x190>)
 8005cf4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005d02:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d08:	2301      	movs	r3, #1
 8005d0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	f383 8810 	msr	PRIMASK, r3
}
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2190      	movs	r1, #144	@ 0x90
 8005d20:	0049      	lsls	r1, r1, #1
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	e018      	b.n	8005d64 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	613b      	str	r3, [r7, #16]
  return(result);
 8005d38:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2120      	movs	r1, #32
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	0018      	movs	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b010      	add	sp, #64	@ 0x40
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	000001ff 	.word	0x000001ff
 8005d74:	08006085 	.word	0x08006085
 8005d78:	08005ec1 	.word	0x08005ec1

08005d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	@ 0x38
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d84:	f3ef 8310 	mrs	r3, PRIMASK
 8005d88:	617b      	str	r3, [r7, #20]
  return(result);
 8005d8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4926      	ldr	r1, [pc, #152]	@ (8005e40 <UART_EndRxTransfer+0xc4>)
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dba:	623b      	str	r3, [r7, #32]
  return(result);
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	438a      	bics	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d118      	bne.n	8005e22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df0:	f3ef 8310 	mrs	r3, PRIMASK
 8005df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005df6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			@ (mov r8, r8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2110      	movs	r1, #16
 8005e12:	438a      	bics	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	2120      	movs	r1, #32
 8005e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b00e      	add	sp, #56	@ 0x38
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	fffffedf 	.word	0xfffffedf

08005e44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	225a      	movs	r2, #90	@ 0x5a
 8005e56:	2100      	movs	r1, #0
 8005e58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7ff fa99 	bl	8005394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b004      	add	sp, #16
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f383 8810 	msr	PRIMASK, r3
}
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2140      	movs	r1, #64	@ 0x40
 8005e94:	438a      	bics	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ea2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7ff fa66 	bl	8005384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b006      	add	sp, #24
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b094      	sub	sp, #80	@ 0x50
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ec8:	204e      	movs	r0, #78	@ 0x4e
 8005eca:	183b      	adds	r3, r7, r0
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	215c      	movs	r1, #92	@ 0x5c
 8005ed0:	5a52      	ldrh	r2, [r2, r1]
 8005ed2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	@ 0x80
 8005ed8:	589b      	ldr	r3, [r3, r2]
 8005eda:	2b22      	cmp	r3, #34	@ 0x22
 8005edc:	d000      	beq.n	8005ee0 <UART_RxISR_8BIT+0x20>
 8005ede:	e0bf      	b.n	8006060 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ee6:	214c      	movs	r1, #76	@ 0x4c
 8005ee8:	187b      	adds	r3, r7, r1
 8005eea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005eec:	187b      	adds	r3, r7, r1
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b2d9      	uxtb	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efc:	400a      	ands	r2, r1
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	225a      	movs	r2, #90	@ 0x5a
 8005f10:	5a9b      	ldrh	r3, [r3, r2]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b299      	uxth	r1, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	225a      	movs	r2, #90	@ 0x5a
 8005f1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	225a      	movs	r2, #90	@ 0x5a
 8005f22:	5a9b      	ldrh	r3, [r3, r2]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d000      	beq.n	8005f2c <UART_RxISR_8BIT+0x6c>
 8005f2a:	e0a1      	b.n	8006070 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f36:	2301      	movs	r3, #1
 8005f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	f383 8810 	msr	PRIMASK, r3
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	494a      	ldr	r1, [pc, #296]	@ (8006078 <UART_RxISR_8BIT+0x1b8>)
 8005f4e:	400a      	ands	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	f383 8810 	msr	PRIMASK, r3
}
 8005f5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f62:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f68:	2301      	movs	r3, #1
 8005f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6e:	f383 8810 	msr	PRIMASK, r3
}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2101      	movs	r1, #1
 8005f80:	438a      	bics	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]
 8005f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	f383 8810 	msr	PRIMASK, r3
}
 8005f8e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2280      	movs	r2, #128	@ 0x80
 8005f94:	2120      	movs	r1, #32
 8005f96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a34      	ldr	r2, [pc, #208]	@ (800607c <UART_RxISR_8BIT+0x1bc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01f      	beq.n	8005fee <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d018      	beq.n	8005fee <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f383 8810 	msr	PRIMASK, r3
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4928      	ldr	r1, [pc, #160]	@ (8006080 <UART_RxISR_8BIT+0x1c0>)
 8005fde:	400a      	ands	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d12f      	bne.n	8006056 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8006000:	60fb      	str	r3, [r7, #12]
  return(result);
 8006002:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006006:	2301      	movs	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f383 8810 	msr	PRIMASK, r3
}
 8006010:	46c0      	nop			@ (mov r8, r8)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2110      	movs	r1, #16
 800601e:	438a      	bics	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	2b10      	cmp	r3, #16
 800603a:	d103      	bne.n	8006044 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2210      	movs	r2, #16
 8006042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2258      	movs	r2, #88	@ 0x58
 8006048:	5a9a      	ldrh	r2, [r3, r2]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0011      	movs	r1, r2
 800604e:	0018      	movs	r0, r3
 8006050:	f7ff f9a8 	bl	80053a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006054:	e00c      	b.n	8006070 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f7fc fd3f 	bl	8002adc <HAL_UART_RxCpltCallback>
}
 800605e:	e007      	b.n	8006070 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2108      	movs	r1, #8
 800606c:	430a      	orrs	r2, r1
 800606e:	619a      	str	r2, [r3, #24]
}
 8006070:	46c0      	nop			@ (mov r8, r8)
 8006072:	46bd      	mov	sp, r7
 8006074:	b014      	add	sp, #80	@ 0x50
 8006076:	bd80      	pop	{r7, pc}
 8006078:	fffffedf 	.word	0xfffffedf
 800607c:	40004800 	.word	0x40004800
 8006080:	fbffffff 	.word	0xfbffffff

08006084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b094      	sub	sp, #80	@ 0x50
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800608c:	204e      	movs	r0, #78	@ 0x4e
 800608e:	183b      	adds	r3, r7, r0
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	215c      	movs	r1, #92	@ 0x5c
 8006094:	5a52      	ldrh	r2, [r2, r1]
 8006096:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	@ 0x80
 800609c:	589b      	ldr	r3, [r3, r2]
 800609e:	2b22      	cmp	r3, #34	@ 0x22
 80060a0:	d000      	beq.n	80060a4 <UART_RxISR_16BIT+0x20>
 80060a2:	e0bf      	b.n	8006224 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060aa:	214c      	movs	r1, #76	@ 0x4c
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	183a      	adds	r2, r7, r0
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	4013      	ands	r3, r2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ca:	1c9a      	adds	r2, r3, #2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	225a      	movs	r2, #90	@ 0x5a
 80060d4:	5a9b      	ldrh	r3, [r3, r2]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b299      	uxth	r1, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	225a      	movs	r2, #90	@ 0x5a
 80060e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	225a      	movs	r2, #90	@ 0x5a
 80060e6:	5a9b      	ldrh	r3, [r3, r2]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d000      	beq.n	80060f0 <UART_RxISR_16BIT+0x6c>
 80060ee:	e0a1      	b.n	8006234 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f0:	f3ef 8310 	mrs	r3, PRIMASK
 80060f4:	623b      	str	r3, [r7, #32]
  return(result);
 80060f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060fa:	2301      	movs	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	494a      	ldr	r1, [pc, #296]	@ (800623c <UART_RxISR_16BIT+0x1b8>)
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006122:	f3ef 8310 	mrs	r3, PRIMASK
 8006126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	643b      	str	r3, [r7, #64]	@ 0x40
 800612c:	2301      	movs	r3, #1
 800612e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	f383 8810 	msr	PRIMASK, r3
}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2101      	movs	r1, #1
 8006144:	438a      	bics	r2, r1
 8006146:	609a      	str	r2, [r3, #8]
 8006148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	f383 8810 	msr	PRIMASK, r3
}
 8006152:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2280      	movs	r2, #128	@ 0x80
 8006158:	2120      	movs	r1, #32
 800615a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a34      	ldr	r2, [pc, #208]	@ (8006240 <UART_RxISR_16BIT+0x1bc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01f      	beq.n	80061b2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	4013      	ands	r3, r2
 800617e:	d018      	beq.n	80061b2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006180:	f3ef 8310 	mrs	r3, PRIMASK
 8006184:	617b      	str	r3, [r7, #20]
  return(result);
 8006186:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800618a:	2301      	movs	r3, #1
 800618c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4928      	ldr	r1, [pc, #160]	@ (8006244 <UART_RxISR_16BIT+0x1c0>)
 80061a2:	400a      	ands	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f383 8810 	msr	PRIMASK, r3
}
 80061b0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d12f      	bne.n	800621a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80061c6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ca:	2301      	movs	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2110      	movs	r1, #16
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	2210      	movs	r2, #16
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d103      	bne.n	8006208 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2210      	movs	r2, #16
 8006206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2258      	movs	r2, #88	@ 0x58
 800620c:	5a9a      	ldrh	r2, [r3, r2]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0011      	movs	r1, r2
 8006212:	0018      	movs	r0, r3
 8006214:	f7ff f8c6 	bl	80053a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006218:	e00c      	b.n	8006234 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f7fc fc5d 	bl	8002adc <HAL_UART_RxCpltCallback>
}
 8006222:	e007      	b.n	8006234 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2108      	movs	r1, #8
 8006230:	430a      	orrs	r2, r1
 8006232:	619a      	str	r2, [r3, #24]
}
 8006234:	46c0      	nop			@ (mov r8, r8)
 8006236:	46bd      	mov	sp, r7
 8006238:	b014      	add	sp, #80	@ 0x50
 800623a:	bd80      	pop	{r7, pc}
 800623c:	fffffedf 	.word	0xfffffedf
 8006240:	40004800 	.word	0x40004800
 8006244:	fbffffff 	.word	0xfbffffff

08006248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006250:	46c0      	nop			@ (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b002      	add	sp, #8
 8006256:	bd80      	pop	{r7, pc}

08006258 <__cvt>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	001f      	movs	r7, r3
 800625c:	2300      	movs	r3, #0
 800625e:	0016      	movs	r6, r2
 8006260:	b08b      	sub	sp, #44	@ 0x2c
 8006262:	429f      	cmp	r7, r3
 8006264:	da04      	bge.n	8006270 <__cvt+0x18>
 8006266:	2180      	movs	r1, #128	@ 0x80
 8006268:	0609      	lsls	r1, r1, #24
 800626a:	187b      	adds	r3, r7, r1
 800626c:	001f      	movs	r7, r3
 800626e:	232d      	movs	r3, #45	@ 0x2d
 8006270:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006272:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006274:	7013      	strb	r3, [r2, #0]
 8006276:	2320      	movs	r3, #32
 8006278:	2203      	movs	r2, #3
 800627a:	439d      	bics	r5, r3
 800627c:	2d46      	cmp	r5, #70	@ 0x46
 800627e:	d007      	beq.n	8006290 <__cvt+0x38>
 8006280:	002b      	movs	r3, r5
 8006282:	3b45      	subs	r3, #69	@ 0x45
 8006284:	4259      	negs	r1, r3
 8006286:	414b      	adcs	r3, r1
 8006288:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800628a:	3a01      	subs	r2, #1
 800628c:	18cb      	adds	r3, r1, r3
 800628e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006290:	ab09      	add	r3, sp, #36	@ 0x24
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	ab08      	add	r3, sp, #32
 8006296:	9303      	str	r3, [sp, #12]
 8006298:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800629a:	9200      	str	r2, [sp, #0]
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062a0:	0032      	movs	r2, r6
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	003b      	movs	r3, r7
 80062a6:	f000 fe5f 	bl	8006f68 <_dtoa_r>
 80062aa:	0004      	movs	r4, r0
 80062ac:	2d47      	cmp	r5, #71	@ 0x47
 80062ae:	d11b      	bne.n	80062e8 <__cvt+0x90>
 80062b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062b2:	07db      	lsls	r3, r3, #31
 80062b4:	d511      	bpl.n	80062da <__cvt+0x82>
 80062b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062b8:	18c3      	adds	r3, r0, r3
 80062ba:	9307      	str	r3, [sp, #28]
 80062bc:	2200      	movs	r2, #0
 80062be:	2300      	movs	r3, #0
 80062c0:	0030      	movs	r0, r6
 80062c2:	0039      	movs	r1, r7
 80062c4:	f7fa f8c2 	bl	800044c <__aeabi_dcmpeq>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d001      	beq.n	80062d0 <__cvt+0x78>
 80062cc:	9b07      	ldr	r3, [sp, #28]
 80062ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d0:	2230      	movs	r2, #48	@ 0x30
 80062d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d4:	9907      	ldr	r1, [sp, #28]
 80062d6:	428b      	cmp	r3, r1
 80062d8:	d320      	bcc.n	800631c <__cvt+0xc4>
 80062da:	0020      	movs	r0, r4
 80062dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80062e0:	1b1b      	subs	r3, r3, r4
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	b00b      	add	sp, #44	@ 0x2c
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ea:	18c3      	adds	r3, r0, r3
 80062ec:	9307      	str	r3, [sp, #28]
 80062ee:	2d46      	cmp	r5, #70	@ 0x46
 80062f0:	d1e4      	bne.n	80062bc <__cvt+0x64>
 80062f2:	7803      	ldrb	r3, [r0, #0]
 80062f4:	2b30      	cmp	r3, #48	@ 0x30
 80062f6:	d10c      	bne.n	8006312 <__cvt+0xba>
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	0030      	movs	r0, r6
 80062fe:	0039      	movs	r1, r7
 8006300:	f7fa f8a4 	bl	800044c <__aeabi_dcmpeq>
 8006304:	2800      	cmp	r0, #0
 8006306:	d104      	bne.n	8006312 <__cvt+0xba>
 8006308:	2301      	movs	r3, #1
 800630a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006314:	9a07      	ldr	r2, [sp, #28]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	18d3      	adds	r3, r2, r3
 800631a:	e7ce      	b.n	80062ba <__cvt+0x62>
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e7d6      	b.n	80062d2 <__cvt+0x7a>

08006324 <__exponent>:
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006326:	232b      	movs	r3, #43	@ 0x2b
 8006328:	b085      	sub	sp, #20
 800632a:	0005      	movs	r5, r0
 800632c:	1e0c      	subs	r4, r1, #0
 800632e:	7002      	strb	r2, [r0, #0]
 8006330:	da01      	bge.n	8006336 <__exponent+0x12>
 8006332:	424c      	negs	r4, r1
 8006334:	3302      	adds	r3, #2
 8006336:	706b      	strb	r3, [r5, #1]
 8006338:	2c09      	cmp	r4, #9
 800633a:	dd2c      	ble.n	8006396 <__exponent+0x72>
 800633c:	ab02      	add	r3, sp, #8
 800633e:	1dde      	adds	r6, r3, #7
 8006340:	0020      	movs	r0, r4
 8006342:	210a      	movs	r1, #10
 8006344:	f7fa f86c 	bl	8000420 <__aeabi_idivmod>
 8006348:	0037      	movs	r7, r6
 800634a:	3130      	adds	r1, #48	@ 0x30
 800634c:	3e01      	subs	r6, #1
 800634e:	0020      	movs	r0, r4
 8006350:	7031      	strb	r1, [r6, #0]
 8006352:	210a      	movs	r1, #10
 8006354:	9401      	str	r4, [sp, #4]
 8006356:	f7f9 ff7d 	bl	8000254 <__divsi3>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	0004      	movs	r4, r0
 800635e:	2b63      	cmp	r3, #99	@ 0x63
 8006360:	dcee      	bgt.n	8006340 <__exponent+0x1c>
 8006362:	1eba      	subs	r2, r7, #2
 8006364:	1ca8      	adds	r0, r5, #2
 8006366:	0001      	movs	r1, r0
 8006368:	0013      	movs	r3, r2
 800636a:	3430      	adds	r4, #48	@ 0x30
 800636c:	7014      	strb	r4, [r2, #0]
 800636e:	ac02      	add	r4, sp, #8
 8006370:	3407      	adds	r4, #7
 8006372:	429c      	cmp	r4, r3
 8006374:	d80a      	bhi.n	800638c <__exponent+0x68>
 8006376:	2300      	movs	r3, #0
 8006378:	4294      	cmp	r4, r2
 800637a:	d303      	bcc.n	8006384 <__exponent+0x60>
 800637c:	3309      	adds	r3, #9
 800637e:	aa02      	add	r2, sp, #8
 8006380:	189b      	adds	r3, r3, r2
 8006382:	1bdb      	subs	r3, r3, r7
 8006384:	18c0      	adds	r0, r0, r3
 8006386:	1b40      	subs	r0, r0, r5
 8006388:	b005      	add	sp, #20
 800638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638c:	781c      	ldrb	r4, [r3, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	700c      	strb	r4, [r1, #0]
 8006392:	3101      	adds	r1, #1
 8006394:	e7eb      	b.n	800636e <__exponent+0x4a>
 8006396:	2330      	movs	r3, #48	@ 0x30
 8006398:	18e4      	adds	r4, r4, r3
 800639a:	70ab      	strb	r3, [r5, #2]
 800639c:	1d28      	adds	r0, r5, #4
 800639e:	70ec      	strb	r4, [r5, #3]
 80063a0:	e7f1      	b.n	8006386 <__exponent+0x62>
	...

080063a4 <_printf_float>:
 80063a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a6:	b097      	sub	sp, #92	@ 0x5c
 80063a8:	000d      	movs	r5, r1
 80063aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80063ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80063ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80063b2:	f000 fcc9 	bl	8006d48 <_localeconv_r>
 80063b6:	6803      	ldr	r3, [r0, #0]
 80063b8:	0018      	movs	r0, r3
 80063ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80063bc:	f7f9 fea4 	bl	8000108 <strlen>
 80063c0:	2300      	movs	r3, #0
 80063c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80063c6:	7e2b      	ldrb	r3, [r5, #24]
 80063c8:	2207      	movs	r2, #7
 80063ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80063d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	05c9      	lsls	r1, r1, #23
 80063d6:	d545      	bpl.n	8006464 <_printf_float+0xc0>
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	4393      	bics	r3, r2
 80063dc:	001a      	movs	r2, r3
 80063de:	3208      	adds	r2, #8
 80063e0:	6022      	str	r2, [r4, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	681e      	ldr	r6, [r3, #0]
 80063e6:	685f      	ldr	r7, [r3, #4]
 80063e8:	007b      	lsls	r3, r7, #1
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80063ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80063f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80063f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80063f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80063f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80063f8:	4ba7      	ldr	r3, [pc, #668]	@ (8006698 <_printf_float+0x2f4>)
 80063fa:	4252      	negs	r2, r2
 80063fc:	f7fc f830 	bl	8002460 <__aeabi_dcmpun>
 8006400:	2800      	cmp	r0, #0
 8006402:	d131      	bne.n	8006468 <_printf_float+0xc4>
 8006404:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006406:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006408:	2201      	movs	r2, #1
 800640a:	4ba3      	ldr	r3, [pc, #652]	@ (8006698 <_printf_float+0x2f4>)
 800640c:	4252      	negs	r2, r2
 800640e:	f7fa f82d 	bl	800046c <__aeabi_dcmple>
 8006412:	2800      	cmp	r0, #0
 8006414:	d128      	bne.n	8006468 <_printf_float+0xc4>
 8006416:	2200      	movs	r2, #0
 8006418:	2300      	movs	r3, #0
 800641a:	0030      	movs	r0, r6
 800641c:	0039      	movs	r1, r7
 800641e:	f7fa f81b 	bl	8000458 <__aeabi_dcmplt>
 8006422:	2800      	cmp	r0, #0
 8006424:	d003      	beq.n	800642e <_printf_float+0x8a>
 8006426:	002b      	movs	r3, r5
 8006428:	222d      	movs	r2, #45	@ 0x2d
 800642a:	3343      	adds	r3, #67	@ 0x43
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006430:	4f9a      	ldr	r7, [pc, #616]	@ (800669c <_printf_float+0x2f8>)
 8006432:	2b47      	cmp	r3, #71	@ 0x47
 8006434:	d800      	bhi.n	8006438 <_printf_float+0x94>
 8006436:	4f9a      	ldr	r7, [pc, #616]	@ (80066a0 <_printf_float+0x2fc>)
 8006438:	2303      	movs	r3, #3
 800643a:	2400      	movs	r4, #0
 800643c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800643e:	612b      	str	r3, [r5, #16]
 8006440:	3301      	adds	r3, #1
 8006442:	439a      	bics	r2, r3
 8006444:	602a      	str	r2, [r5, #0]
 8006446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006448:	0029      	movs	r1, r5
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800644e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006450:	aa15      	add	r2, sp, #84	@ 0x54
 8006452:	f000 f9e5 	bl	8006820 <_printf_common>
 8006456:	3001      	adds	r0, #1
 8006458:	d000      	beq.n	800645c <_printf_float+0xb8>
 800645a:	e09e      	b.n	800659a <_printf_float+0x1f6>
 800645c:	2001      	movs	r0, #1
 800645e:	4240      	negs	r0, r0
 8006460:	b017      	add	sp, #92	@ 0x5c
 8006462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006464:	3307      	adds	r3, #7
 8006466:	e7b8      	b.n	80063da <_printf_float+0x36>
 8006468:	0032      	movs	r2, r6
 800646a:	003b      	movs	r3, r7
 800646c:	0030      	movs	r0, r6
 800646e:	0039      	movs	r1, r7
 8006470:	f7fb fff6 	bl	8002460 <__aeabi_dcmpun>
 8006474:	2800      	cmp	r0, #0
 8006476:	d00b      	beq.n	8006490 <_printf_float+0xec>
 8006478:	2f00      	cmp	r7, #0
 800647a:	da03      	bge.n	8006484 <_printf_float+0xe0>
 800647c:	002b      	movs	r3, r5
 800647e:	222d      	movs	r2, #45	@ 0x2d
 8006480:	3343      	adds	r3, #67	@ 0x43
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006486:	4f87      	ldr	r7, [pc, #540]	@ (80066a4 <_printf_float+0x300>)
 8006488:	2b47      	cmp	r3, #71	@ 0x47
 800648a:	d8d5      	bhi.n	8006438 <_printf_float+0x94>
 800648c:	4f86      	ldr	r7, [pc, #536]	@ (80066a8 <_printf_float+0x304>)
 800648e:	e7d3      	b.n	8006438 <_printf_float+0x94>
 8006490:	2220      	movs	r2, #32
 8006492:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006494:	686b      	ldr	r3, [r5, #4]
 8006496:	4394      	bics	r4, r2
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	d146      	bne.n	800652a <_printf_float+0x186>
 800649c:	3307      	adds	r3, #7
 800649e:	606b      	str	r3, [r5, #4]
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	9206      	str	r2, [sp, #24]
 80064ae:	aa14      	add	r2, sp, #80	@ 0x50
 80064b0:	9205      	str	r2, [sp, #20]
 80064b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80064b4:	a90a      	add	r1, sp, #40	@ 0x28
 80064b6:	9204      	str	r2, [sp, #16]
 80064b8:	aa13      	add	r2, sp, #76	@ 0x4c
 80064ba:	9203      	str	r2, [sp, #12]
 80064bc:	2223      	movs	r2, #35	@ 0x23
 80064be:	1852      	adds	r2, r2, r1
 80064c0:	9202      	str	r2, [sp, #8]
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	686b      	ldr	r3, [r5, #4]
 80064c6:	0032      	movs	r2, r6
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064cc:	003b      	movs	r3, r7
 80064ce:	f7ff fec3 	bl	8006258 <__cvt>
 80064d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064d4:	0007      	movs	r7, r0
 80064d6:	2c47      	cmp	r4, #71	@ 0x47
 80064d8:	d12d      	bne.n	8006536 <_printf_float+0x192>
 80064da:	1cd3      	adds	r3, r2, #3
 80064dc:	db02      	blt.n	80064e4 <_printf_float+0x140>
 80064de:	686b      	ldr	r3, [r5, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	dd47      	ble.n	8006574 <_printf_float+0x1d0>
 80064e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064e6:	3b02      	subs	r3, #2
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80064ec:	0028      	movs	r0, r5
 80064ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80064f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80064f2:	3901      	subs	r1, #1
 80064f4:	3050      	adds	r0, #80	@ 0x50
 80064f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80064f8:	f7ff ff14 	bl	8006324 <__exponent>
 80064fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064fe:	0004      	movs	r4, r0
 8006500:	1813      	adds	r3, r2, r0
 8006502:	612b      	str	r3, [r5, #16]
 8006504:	2a01      	cmp	r2, #1
 8006506:	dc02      	bgt.n	800650e <_printf_float+0x16a>
 8006508:	682a      	ldr	r2, [r5, #0]
 800650a:	07d2      	lsls	r2, r2, #31
 800650c:	d501      	bpl.n	8006512 <_printf_float+0x16e>
 800650e:	3301      	adds	r3, #1
 8006510:	612b      	str	r3, [r5, #16]
 8006512:	2323      	movs	r3, #35	@ 0x23
 8006514:	aa0a      	add	r2, sp, #40	@ 0x28
 8006516:	189b      	adds	r3, r3, r2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d100      	bne.n	8006520 <_printf_float+0x17c>
 800651e:	e792      	b.n	8006446 <_printf_float+0xa2>
 8006520:	002b      	movs	r3, r5
 8006522:	222d      	movs	r2, #45	@ 0x2d
 8006524:	3343      	adds	r3, #67	@ 0x43
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	e78d      	b.n	8006446 <_printf_float+0xa2>
 800652a:	2c47      	cmp	r4, #71	@ 0x47
 800652c:	d1b8      	bne.n	80064a0 <_printf_float+0xfc>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1b6      	bne.n	80064a0 <_printf_float+0xfc>
 8006532:	3301      	adds	r3, #1
 8006534:	e7b3      	b.n	800649e <_printf_float+0xfa>
 8006536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006538:	2b65      	cmp	r3, #101	@ 0x65
 800653a:	d9d7      	bls.n	80064ec <_printf_float+0x148>
 800653c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800653e:	2b66      	cmp	r3, #102	@ 0x66
 8006540:	d11a      	bne.n	8006578 <_printf_float+0x1d4>
 8006542:	686b      	ldr	r3, [r5, #4]
 8006544:	2a00      	cmp	r2, #0
 8006546:	dd09      	ble.n	800655c <_printf_float+0x1b8>
 8006548:	612a      	str	r2, [r5, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <_printf_float+0x1b0>
 800654e:	6829      	ldr	r1, [r5, #0]
 8006550:	07c9      	lsls	r1, r1, #31
 8006552:	d50b      	bpl.n	800656c <_printf_float+0x1c8>
 8006554:	3301      	adds	r3, #1
 8006556:	189b      	adds	r3, r3, r2
 8006558:	612b      	str	r3, [r5, #16]
 800655a:	e007      	b.n	800656c <_printf_float+0x1c8>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <_printf_float+0x1c4>
 8006560:	2201      	movs	r2, #1
 8006562:	6829      	ldr	r1, [r5, #0]
 8006564:	4211      	tst	r1, r2
 8006566:	d000      	beq.n	800656a <_printf_float+0x1c6>
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	612a      	str	r2, [r5, #16]
 800656c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800656e:	2400      	movs	r4, #0
 8006570:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006572:	e7ce      	b.n	8006512 <_printf_float+0x16e>
 8006574:	2367      	movs	r3, #103	@ 0x67
 8006576:	930c      	str	r3, [sp, #48]	@ 0x30
 8006578:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800657a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800657c:	4299      	cmp	r1, r3
 800657e:	db06      	blt.n	800658e <_printf_float+0x1ea>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6129      	str	r1, [r5, #16]
 8006584:	07db      	lsls	r3, r3, #31
 8006586:	d5f1      	bpl.n	800656c <_printf_float+0x1c8>
 8006588:	3101      	adds	r1, #1
 800658a:	6129      	str	r1, [r5, #16]
 800658c:	e7ee      	b.n	800656c <_printf_float+0x1c8>
 800658e:	2201      	movs	r2, #1
 8006590:	2900      	cmp	r1, #0
 8006592:	dce0      	bgt.n	8006556 <_printf_float+0x1b2>
 8006594:	1892      	adds	r2, r2, r2
 8006596:	1a52      	subs	r2, r2, r1
 8006598:	e7dd      	b.n	8006556 <_printf_float+0x1b2>
 800659a:	682a      	ldr	r2, [r5, #0]
 800659c:	0553      	lsls	r3, r2, #21
 800659e:	d408      	bmi.n	80065b2 <_printf_float+0x20e>
 80065a0:	692b      	ldr	r3, [r5, #16]
 80065a2:	003a      	movs	r2, r7
 80065a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80065aa:	47a0      	blx	r4
 80065ac:	3001      	adds	r0, #1
 80065ae:	d129      	bne.n	8006604 <_printf_float+0x260>
 80065b0:	e754      	b.n	800645c <_printf_float+0xb8>
 80065b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065b4:	2b65      	cmp	r3, #101	@ 0x65
 80065b6:	d800      	bhi.n	80065ba <_printf_float+0x216>
 80065b8:	e0db      	b.n	8006772 <_printf_float+0x3ce>
 80065ba:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80065bc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80065be:	2200      	movs	r2, #0
 80065c0:	2300      	movs	r3, #0
 80065c2:	f7f9 ff43 	bl	800044c <__aeabi_dcmpeq>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d033      	beq.n	8006632 <_printf_float+0x28e>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4a37      	ldr	r2, [pc, #220]	@ (80066ac <_printf_float+0x308>)
 80065ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80065d4:	47a0      	blx	r4
 80065d6:	3001      	adds	r0, #1
 80065d8:	d100      	bne.n	80065dc <_printf_float+0x238>
 80065da:	e73f      	b.n	800645c <_printf_float+0xb8>
 80065dc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80065de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065e0:	42b3      	cmp	r3, r6
 80065e2:	db02      	blt.n	80065ea <_printf_float+0x246>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	07db      	lsls	r3, r3, #31
 80065e8:	d50c      	bpl.n	8006604 <_printf_float+0x260>
 80065ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80065ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f4:	47a0      	blx	r4
 80065f6:	2400      	movs	r4, #0
 80065f8:	3001      	adds	r0, #1
 80065fa:	d100      	bne.n	80065fe <_printf_float+0x25a>
 80065fc:	e72e      	b.n	800645c <_printf_float+0xb8>
 80065fe:	1e73      	subs	r3, r6, #1
 8006600:	42a3      	cmp	r3, r4
 8006602:	dc0a      	bgt.n	800661a <_printf_float+0x276>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	079b      	lsls	r3, r3, #30
 8006608:	d500      	bpl.n	800660c <_printf_float+0x268>
 800660a:	e106      	b.n	800681a <_printf_float+0x476>
 800660c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800660e:	68e8      	ldr	r0, [r5, #12]
 8006610:	4298      	cmp	r0, r3
 8006612:	db00      	blt.n	8006616 <_printf_float+0x272>
 8006614:	e724      	b.n	8006460 <_printf_float+0xbc>
 8006616:	0018      	movs	r0, r3
 8006618:	e722      	b.n	8006460 <_printf_float+0xbc>
 800661a:	002a      	movs	r2, r5
 800661c:	2301      	movs	r3, #1
 800661e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006620:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006622:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006624:	321a      	adds	r2, #26
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	d100      	bne.n	800662e <_printf_float+0x28a>
 800662c:	e716      	b.n	800645c <_printf_float+0xb8>
 800662e:	3401      	adds	r4, #1
 8006630:	e7e5      	b.n	80065fe <_printf_float+0x25a>
 8006632:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc3b      	bgt.n	80066b0 <_printf_float+0x30c>
 8006638:	2301      	movs	r3, #1
 800663a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <_printf_float+0x308>)
 800663c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800663e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006640:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006642:	47a0      	blx	r4
 8006644:	3001      	adds	r0, #1
 8006646:	d100      	bne.n	800664a <_printf_float+0x2a6>
 8006648:	e708      	b.n	800645c <_printf_float+0xb8>
 800664a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800664c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800664e:	4333      	orrs	r3, r6
 8006650:	d102      	bne.n	8006658 <_printf_float+0x2b4>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d5d5      	bpl.n	8006604 <_printf_float+0x260>
 8006658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800665a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800665c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006660:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006662:	47a0      	blx	r4
 8006664:	2300      	movs	r3, #0
 8006666:	3001      	adds	r0, #1
 8006668:	d100      	bne.n	800666c <_printf_float+0x2c8>
 800666a:	e6f7      	b.n	800645c <_printf_float+0xb8>
 800666c:	930c      	str	r3, [sp, #48]	@ 0x30
 800666e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006672:	425b      	negs	r3, r3
 8006674:	4293      	cmp	r3, r2
 8006676:	dc01      	bgt.n	800667c <_printf_float+0x2d8>
 8006678:	0033      	movs	r3, r6
 800667a:	e792      	b.n	80065a2 <_printf_float+0x1fe>
 800667c:	002a      	movs	r2, r5
 800667e:	2301      	movs	r3, #1
 8006680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006684:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006686:	321a      	adds	r2, #26
 8006688:	47a0      	blx	r4
 800668a:	3001      	adds	r0, #1
 800668c:	d100      	bne.n	8006690 <_printf_float+0x2ec>
 800668e:	e6e5      	b.n	800645c <_printf_float+0xb8>
 8006690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006692:	3301      	adds	r3, #1
 8006694:	e7ea      	b.n	800666c <_printf_float+0x2c8>
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	7fefffff 	.word	0x7fefffff
 800669c:	08008d7c 	.word	0x08008d7c
 80066a0:	08008d78 	.word	0x08008d78
 80066a4:	08008d84 	.word	0x08008d84
 80066a8:	08008d80 	.word	0x08008d80
 80066ac:	08008d88 	.word	0x08008d88
 80066b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80066b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80066b6:	429e      	cmp	r6, r3
 80066b8:	dd00      	ble.n	80066bc <_printf_float+0x318>
 80066ba:	001e      	movs	r6, r3
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dc31      	bgt.n	8006724 <_printf_float+0x380>
 80066c0:	43f3      	mvns	r3, r6
 80066c2:	2400      	movs	r4, #0
 80066c4:	17db      	asrs	r3, r3, #31
 80066c6:	4033      	ands	r3, r6
 80066c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80066ca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80066cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ce:	1af3      	subs	r3, r6, r3
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	dc30      	bgt.n	8006736 <_printf_float+0x392>
 80066d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066d8:	429a      	cmp	r2, r3
 80066da:	dc38      	bgt.n	800674e <_printf_float+0x3aa>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	07db      	lsls	r3, r3, #31
 80066e0:	d435      	bmi.n	800674e <_printf_float+0x3aa>
 80066e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80066e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066e8:	1b9b      	subs	r3, r3, r6
 80066ea:	1b14      	subs	r4, r2, r4
 80066ec:	429c      	cmp	r4, r3
 80066ee:	dd00      	ble.n	80066f2 <_printf_float+0x34e>
 80066f0:	001c      	movs	r4, r3
 80066f2:	2c00      	cmp	r4, #0
 80066f4:	dc34      	bgt.n	8006760 <_printf_float+0x3bc>
 80066f6:	43e3      	mvns	r3, r4
 80066f8:	2600      	movs	r6, #0
 80066fa:	17db      	asrs	r3, r3, #31
 80066fc:	401c      	ands	r4, r3
 80066fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	1b1b      	subs	r3, r3, r4
 8006706:	42b3      	cmp	r3, r6
 8006708:	dc00      	bgt.n	800670c <_printf_float+0x368>
 800670a:	e77b      	b.n	8006604 <_printf_float+0x260>
 800670c:	002a      	movs	r2, r5
 800670e:	2301      	movs	r3, #1
 8006710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006714:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006716:	321a      	adds	r2, #26
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d100      	bne.n	8006720 <_printf_float+0x37c>
 800671e:	e69d      	b.n	800645c <_printf_float+0xb8>
 8006720:	3601      	adds	r6, #1
 8006722:	e7ec      	b.n	80066fe <_printf_float+0x35a>
 8006724:	0033      	movs	r3, r6
 8006726:	003a      	movs	r2, r7
 8006728:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800672a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800672c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800672e:	47a0      	blx	r4
 8006730:	3001      	adds	r0, #1
 8006732:	d1c5      	bne.n	80066c0 <_printf_float+0x31c>
 8006734:	e692      	b.n	800645c <_printf_float+0xb8>
 8006736:	002a      	movs	r2, r5
 8006738:	2301      	movs	r3, #1
 800673a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800673c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800673e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006740:	321a      	adds	r2, #26
 8006742:	47b0      	blx	r6
 8006744:	3001      	adds	r0, #1
 8006746:	d100      	bne.n	800674a <_printf_float+0x3a6>
 8006748:	e688      	b.n	800645c <_printf_float+0xb8>
 800674a:	3401      	adds	r4, #1
 800674c:	e7bd      	b.n	80066ca <_printf_float+0x326>
 800674e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006754:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006756:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006758:	47a0      	blx	r4
 800675a:	3001      	adds	r0, #1
 800675c:	d1c1      	bne.n	80066e2 <_printf_float+0x33e>
 800675e:	e67d      	b.n	800645c <_printf_float+0xb8>
 8006760:	19ba      	adds	r2, r7, r6
 8006762:	0023      	movs	r3, r4
 8006764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006768:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800676a:	47b0      	blx	r6
 800676c:	3001      	adds	r0, #1
 800676e:	d1c2      	bne.n	80066f6 <_printf_float+0x352>
 8006770:	e674      	b.n	800645c <_printf_float+0xb8>
 8006772:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006774:	930c      	str	r3, [sp, #48]	@ 0x30
 8006776:	2b01      	cmp	r3, #1
 8006778:	dc02      	bgt.n	8006780 <_printf_float+0x3dc>
 800677a:	2301      	movs	r3, #1
 800677c:	421a      	tst	r2, r3
 800677e:	d039      	beq.n	80067f4 <_printf_float+0x450>
 8006780:	2301      	movs	r3, #1
 8006782:	003a      	movs	r2, r7
 8006784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006788:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800678a:	47b0      	blx	r6
 800678c:	3001      	adds	r0, #1
 800678e:	d100      	bne.n	8006792 <_printf_float+0x3ee>
 8006790:	e664      	b.n	800645c <_printf_float+0xb8>
 8006792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006796:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800679a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800679c:	47b0      	blx	r6
 800679e:	3001      	adds	r0, #1
 80067a0:	d100      	bne.n	80067a4 <_printf_float+0x400>
 80067a2:	e65b      	b.n	800645c <_printf_float+0xb8>
 80067a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80067a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80067a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	3b01      	subs	r3, #1
 80067ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80067b0:	2300      	movs	r3, #0
 80067b2:	f7f9 fe4b 	bl	800044c <__aeabi_dcmpeq>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d11a      	bne.n	80067f0 <_printf_float+0x44c>
 80067ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067bc:	1c7a      	adds	r2, r7, #1
 80067be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80067c4:	47b0      	blx	r6
 80067c6:	3001      	adds	r0, #1
 80067c8:	d10e      	bne.n	80067e8 <_printf_float+0x444>
 80067ca:	e647      	b.n	800645c <_printf_float+0xb8>
 80067cc:	002a      	movs	r2, r5
 80067ce:	2301      	movs	r3, #1
 80067d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80067d6:	321a      	adds	r2, #26
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	d100      	bne.n	80067e0 <_printf_float+0x43c>
 80067de:	e63d      	b.n	800645c <_printf_float+0xb8>
 80067e0:	3601      	adds	r6, #1
 80067e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067e4:	429e      	cmp	r6, r3
 80067e6:	dbf1      	blt.n	80067cc <_printf_float+0x428>
 80067e8:	002a      	movs	r2, r5
 80067ea:	0023      	movs	r3, r4
 80067ec:	3250      	adds	r2, #80	@ 0x50
 80067ee:	e6d9      	b.n	80065a4 <_printf_float+0x200>
 80067f0:	2600      	movs	r6, #0
 80067f2:	e7f6      	b.n	80067e2 <_printf_float+0x43e>
 80067f4:	003a      	movs	r2, r7
 80067f6:	e7e2      	b.n	80067be <_printf_float+0x41a>
 80067f8:	002a      	movs	r2, r5
 80067fa:	2301      	movs	r3, #1
 80067fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006800:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006802:	3219      	adds	r2, #25
 8006804:	47b0      	blx	r6
 8006806:	3001      	adds	r0, #1
 8006808:	d100      	bne.n	800680c <_printf_float+0x468>
 800680a:	e627      	b.n	800645c <_printf_float+0xb8>
 800680c:	3401      	adds	r4, #1
 800680e:	68eb      	ldr	r3, [r5, #12]
 8006810:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	42a3      	cmp	r3, r4
 8006816:	dcef      	bgt.n	80067f8 <_printf_float+0x454>
 8006818:	e6f8      	b.n	800660c <_printf_float+0x268>
 800681a:	2400      	movs	r4, #0
 800681c:	e7f7      	b.n	800680e <_printf_float+0x46a>
 800681e:	46c0      	nop			@ (mov r8, r8)

08006820 <_printf_common>:
 8006820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006822:	0016      	movs	r6, r2
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	688a      	ldr	r2, [r1, #8]
 8006828:	690b      	ldr	r3, [r1, #16]
 800682a:	000c      	movs	r4, r1
 800682c:	9000      	str	r0, [sp, #0]
 800682e:	4293      	cmp	r3, r2
 8006830:	da00      	bge.n	8006834 <_printf_common+0x14>
 8006832:	0013      	movs	r3, r2
 8006834:	0022      	movs	r2, r4
 8006836:	6033      	str	r3, [r6, #0]
 8006838:	3243      	adds	r2, #67	@ 0x43
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	2a00      	cmp	r2, #0
 800683e:	d001      	beq.n	8006844 <_printf_common+0x24>
 8006840:	3301      	adds	r3, #1
 8006842:	6033      	str	r3, [r6, #0]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	069b      	lsls	r3, r3, #26
 8006848:	d502      	bpl.n	8006850 <_printf_common+0x30>
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	3302      	adds	r3, #2
 800684e:	6033      	str	r3, [r6, #0]
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	2306      	movs	r3, #6
 8006854:	0015      	movs	r5, r2
 8006856:	401d      	ands	r5, r3
 8006858:	421a      	tst	r2, r3
 800685a:	d027      	beq.n	80068ac <_printf_common+0x8c>
 800685c:	0023      	movs	r3, r4
 800685e:	3343      	adds	r3, #67	@ 0x43
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	1e5a      	subs	r2, r3, #1
 8006864:	4193      	sbcs	r3, r2
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	0692      	lsls	r2, r2, #26
 800686a:	d430      	bmi.n	80068ce <_printf_common+0xae>
 800686c:	0022      	movs	r2, r4
 800686e:	9901      	ldr	r1, [sp, #4]
 8006870:	9800      	ldr	r0, [sp, #0]
 8006872:	9d08      	ldr	r5, [sp, #32]
 8006874:	3243      	adds	r2, #67	@ 0x43
 8006876:	47a8      	blx	r5
 8006878:	3001      	adds	r0, #1
 800687a:	d025      	beq.n	80068c8 <_printf_common+0xa8>
 800687c:	2206      	movs	r2, #6
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	2500      	movs	r5, #0
 8006882:	4013      	ands	r3, r2
 8006884:	2b04      	cmp	r3, #4
 8006886:	d105      	bne.n	8006894 <_printf_common+0x74>
 8006888:	6833      	ldr	r3, [r6, #0]
 800688a:	68e5      	ldr	r5, [r4, #12]
 800688c:	1aed      	subs	r5, r5, r3
 800688e:	43eb      	mvns	r3, r5
 8006890:	17db      	asrs	r3, r3, #31
 8006892:	401d      	ands	r5, r3
 8006894:	68a3      	ldr	r3, [r4, #8]
 8006896:	6922      	ldr	r2, [r4, #16]
 8006898:	4293      	cmp	r3, r2
 800689a:	dd01      	ble.n	80068a0 <_printf_common+0x80>
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	18ed      	adds	r5, r5, r3
 80068a0:	2600      	movs	r6, #0
 80068a2:	42b5      	cmp	r5, r6
 80068a4:	d120      	bne.n	80068e8 <_printf_common+0xc8>
 80068a6:	2000      	movs	r0, #0
 80068a8:	e010      	b.n	80068cc <_printf_common+0xac>
 80068aa:	3501      	adds	r5, #1
 80068ac:	68e3      	ldr	r3, [r4, #12]
 80068ae:	6832      	ldr	r2, [r6, #0]
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	42ab      	cmp	r3, r5
 80068b4:	ddd2      	ble.n	800685c <_printf_common+0x3c>
 80068b6:	0022      	movs	r2, r4
 80068b8:	2301      	movs	r3, #1
 80068ba:	9901      	ldr	r1, [sp, #4]
 80068bc:	9800      	ldr	r0, [sp, #0]
 80068be:	9f08      	ldr	r7, [sp, #32]
 80068c0:	3219      	adds	r2, #25
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	d1f0      	bne.n	80068aa <_printf_common+0x8a>
 80068c8:	2001      	movs	r0, #1
 80068ca:	4240      	negs	r0, r0
 80068cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068ce:	2030      	movs	r0, #48	@ 0x30
 80068d0:	18e1      	adds	r1, r4, r3
 80068d2:	3143      	adds	r1, #67	@ 0x43
 80068d4:	7008      	strb	r0, [r1, #0]
 80068d6:	0021      	movs	r1, r4
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	3145      	adds	r1, #69	@ 0x45
 80068dc:	7809      	ldrb	r1, [r1, #0]
 80068de:	18a2      	adds	r2, r4, r2
 80068e0:	3243      	adds	r2, #67	@ 0x43
 80068e2:	3302      	adds	r3, #2
 80068e4:	7011      	strb	r1, [r2, #0]
 80068e6:	e7c1      	b.n	800686c <_printf_common+0x4c>
 80068e8:	0022      	movs	r2, r4
 80068ea:	2301      	movs	r3, #1
 80068ec:	9901      	ldr	r1, [sp, #4]
 80068ee:	9800      	ldr	r0, [sp, #0]
 80068f0:	9f08      	ldr	r7, [sp, #32]
 80068f2:	321a      	adds	r2, #26
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa8>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d1      	b.n	80068a2 <_printf_common+0x82>
	...

08006900 <_printf_i>:
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	b08b      	sub	sp, #44	@ 0x2c
 8006904:	9206      	str	r2, [sp, #24]
 8006906:	000a      	movs	r2, r1
 8006908:	3243      	adds	r2, #67	@ 0x43
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	9005      	str	r0, [sp, #20]
 800690e:	9203      	str	r2, [sp, #12]
 8006910:	7e0a      	ldrb	r2, [r1, #24]
 8006912:	000c      	movs	r4, r1
 8006914:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006916:	2a78      	cmp	r2, #120	@ 0x78
 8006918:	d809      	bhi.n	800692e <_printf_i+0x2e>
 800691a:	2a62      	cmp	r2, #98	@ 0x62
 800691c:	d80b      	bhi.n	8006936 <_printf_i+0x36>
 800691e:	2a00      	cmp	r2, #0
 8006920:	d100      	bne.n	8006924 <_printf_i+0x24>
 8006922:	e0ba      	b.n	8006a9a <_printf_i+0x19a>
 8006924:	497a      	ldr	r1, [pc, #488]	@ (8006b10 <_printf_i+0x210>)
 8006926:	9104      	str	r1, [sp, #16]
 8006928:	2a58      	cmp	r2, #88	@ 0x58
 800692a:	d100      	bne.n	800692e <_printf_i+0x2e>
 800692c:	e08e      	b.n	8006a4c <_printf_i+0x14c>
 800692e:	0025      	movs	r5, r4
 8006930:	3542      	adds	r5, #66	@ 0x42
 8006932:	702a      	strb	r2, [r5, #0]
 8006934:	e022      	b.n	800697c <_printf_i+0x7c>
 8006936:	0010      	movs	r0, r2
 8006938:	3863      	subs	r0, #99	@ 0x63
 800693a:	2815      	cmp	r0, #21
 800693c:	d8f7      	bhi.n	800692e <_printf_i+0x2e>
 800693e:	f7f9 fbf5 	bl	800012c <__gnu_thumb1_case_shi>
 8006942:	0016      	.short	0x0016
 8006944:	fff6001f 	.word	0xfff6001f
 8006948:	fff6fff6 	.word	0xfff6fff6
 800694c:	001ffff6 	.word	0x001ffff6
 8006950:	fff6fff6 	.word	0xfff6fff6
 8006954:	fff6fff6 	.word	0xfff6fff6
 8006958:	0036009f 	.word	0x0036009f
 800695c:	fff6007e 	.word	0xfff6007e
 8006960:	00b0fff6 	.word	0x00b0fff6
 8006964:	0036fff6 	.word	0x0036fff6
 8006968:	fff6fff6 	.word	0xfff6fff6
 800696c:	0082      	.short	0x0082
 800696e:	0025      	movs	r5, r4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	3542      	adds	r5, #66	@ 0x42
 8006974:	1d11      	adds	r1, r2, #4
 8006976:	6019      	str	r1, [r3, #0]
 8006978:	6813      	ldr	r3, [r2, #0]
 800697a:	702b      	strb	r3, [r5, #0]
 800697c:	2301      	movs	r3, #1
 800697e:	e09e      	b.n	8006abe <_printf_i+0x1be>
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	6809      	ldr	r1, [r1, #0]
 8006984:	1d02      	adds	r2, r0, #4
 8006986:	060d      	lsls	r5, r1, #24
 8006988:	d50b      	bpl.n	80069a2 <_printf_i+0xa2>
 800698a:	6806      	ldr	r6, [r0, #0]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	2e00      	cmp	r6, #0
 8006990:	da03      	bge.n	800699a <_printf_i+0x9a>
 8006992:	232d      	movs	r3, #45	@ 0x2d
 8006994:	9a03      	ldr	r2, [sp, #12]
 8006996:	4276      	negs	r6, r6
 8006998:	7013      	strb	r3, [r2, #0]
 800699a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b10 <_printf_i+0x210>)
 800699c:	270a      	movs	r7, #10
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	e018      	b.n	80069d4 <_printf_i+0xd4>
 80069a2:	6806      	ldr	r6, [r0, #0]
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	0649      	lsls	r1, r1, #25
 80069a8:	d5f1      	bpl.n	800698e <_printf_i+0x8e>
 80069aa:	b236      	sxth	r6, r6
 80069ac:	e7ef      	b.n	800698e <_printf_i+0x8e>
 80069ae:	6808      	ldr	r0, [r1, #0]
 80069b0:	6819      	ldr	r1, [r3, #0]
 80069b2:	c940      	ldmia	r1!, {r6}
 80069b4:	0605      	lsls	r5, r0, #24
 80069b6:	d402      	bmi.n	80069be <_printf_i+0xbe>
 80069b8:	0640      	lsls	r0, r0, #25
 80069ba:	d500      	bpl.n	80069be <_printf_i+0xbe>
 80069bc:	b2b6      	uxth	r6, r6
 80069be:	6019      	str	r1, [r3, #0]
 80069c0:	4b53      	ldr	r3, [pc, #332]	@ (8006b10 <_printf_i+0x210>)
 80069c2:	270a      	movs	r7, #10
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80069c8:	d100      	bne.n	80069cc <_printf_i+0xcc>
 80069ca:	3f02      	subs	r7, #2
 80069cc:	0023      	movs	r3, r4
 80069ce:	2200      	movs	r2, #0
 80069d0:	3343      	adds	r3, #67	@ 0x43
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	60a3      	str	r3, [r4, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	db06      	blt.n	80069ea <_printf_i+0xea>
 80069dc:	2104      	movs	r1, #4
 80069de:	6822      	ldr	r2, [r4, #0]
 80069e0:	9d03      	ldr	r5, [sp, #12]
 80069e2:	438a      	bics	r2, r1
 80069e4:	6022      	str	r2, [r4, #0]
 80069e6:	4333      	orrs	r3, r6
 80069e8:	d00c      	beq.n	8006a04 <_printf_i+0x104>
 80069ea:	9d03      	ldr	r5, [sp, #12]
 80069ec:	0030      	movs	r0, r6
 80069ee:	0039      	movs	r1, r7
 80069f0:	f7f9 fc2c 	bl	800024c <__aeabi_uidivmod>
 80069f4:	9b04      	ldr	r3, [sp, #16]
 80069f6:	3d01      	subs	r5, #1
 80069f8:	5c5b      	ldrb	r3, [r3, r1]
 80069fa:	702b      	strb	r3, [r5, #0]
 80069fc:	0033      	movs	r3, r6
 80069fe:	0006      	movs	r6, r0
 8006a00:	429f      	cmp	r7, r3
 8006a02:	d9f3      	bls.n	80069ec <_printf_i+0xec>
 8006a04:	2f08      	cmp	r7, #8
 8006a06:	d109      	bne.n	8006a1c <_printf_i+0x11c>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	07db      	lsls	r3, r3, #31
 8006a0c:	d506      	bpl.n	8006a1c <_printf_i+0x11c>
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	dc02      	bgt.n	8006a1c <_printf_i+0x11c>
 8006a16:	2330      	movs	r3, #48	@ 0x30
 8006a18:	3d01      	subs	r5, #1
 8006a1a:	702b      	strb	r3, [r5, #0]
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	1b5b      	subs	r3, r3, r5
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	0021      	movs	r1, r4
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	9805      	ldr	r0, [sp, #20]
 8006a2a:	9b06      	ldr	r3, [sp, #24]
 8006a2c:	aa09      	add	r2, sp, #36	@ 0x24
 8006a2e:	f7ff fef7 	bl	8006820 <_printf_common>
 8006a32:	3001      	adds	r0, #1
 8006a34:	d148      	bne.n	8006ac8 <_printf_i+0x1c8>
 8006a36:	2001      	movs	r0, #1
 8006a38:	4240      	negs	r0, r0
 8006a3a:	b00b      	add	sp, #44	@ 0x2c
 8006a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a3e:	2220      	movs	r2, #32
 8006a40:	6809      	ldr	r1, [r1, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	6022      	str	r2, [r4, #0]
 8006a46:	2278      	movs	r2, #120	@ 0x78
 8006a48:	4932      	ldr	r1, [pc, #200]	@ (8006b14 <_printf_i+0x214>)
 8006a4a:	9104      	str	r1, [sp, #16]
 8006a4c:	0021      	movs	r1, r4
 8006a4e:	3145      	adds	r1, #69	@ 0x45
 8006a50:	700a      	strb	r2, [r1, #0]
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	c940      	ldmia	r1!, {r6}
 8006a58:	0610      	lsls	r0, r2, #24
 8006a5a:	d402      	bmi.n	8006a62 <_printf_i+0x162>
 8006a5c:	0650      	lsls	r0, r2, #25
 8006a5e:	d500      	bpl.n	8006a62 <_printf_i+0x162>
 8006a60:	b2b6      	uxth	r6, r6
 8006a62:	6019      	str	r1, [r3, #0]
 8006a64:	07d3      	lsls	r3, r2, #31
 8006a66:	d502      	bpl.n	8006a6e <_printf_i+0x16e>
 8006a68:	2320      	movs	r3, #32
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d001      	beq.n	8006a76 <_printf_i+0x176>
 8006a72:	2710      	movs	r7, #16
 8006a74:	e7aa      	b.n	80069cc <_printf_i+0xcc>
 8006a76:	2220      	movs	r2, #32
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	4393      	bics	r3, r2
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	e7f8      	b.n	8006a72 <_printf_i+0x172>
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	680d      	ldr	r5, [r1, #0]
 8006a84:	1d10      	adds	r0, r2, #4
 8006a86:	6949      	ldr	r1, [r1, #20]
 8006a88:	6018      	str	r0, [r3, #0]
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	062e      	lsls	r6, r5, #24
 8006a8e:	d501      	bpl.n	8006a94 <_printf_i+0x194>
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <_printf_i+0x19a>
 8006a94:	066d      	lsls	r5, r5, #25
 8006a96:	d5fb      	bpl.n	8006a90 <_printf_i+0x190>
 8006a98:	8019      	strh	r1, [r3, #0]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9d03      	ldr	r5, [sp, #12]
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	e7bf      	b.n	8006a22 <_printf_i+0x122>
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	1d11      	adds	r1, r2, #4
 8006aa6:	6019      	str	r1, [r3, #0]
 8006aa8:	6815      	ldr	r5, [r2, #0]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	0028      	movs	r0, r5
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	f000 f9c9 	bl	8006e46 <memchr>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d001      	beq.n	8006abc <_printf_i+0x1bc>
 8006ab8:	1b40      	subs	r0, r0, r5
 8006aba:	6060      	str	r0, [r4, #4]
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9a03      	ldr	r2, [sp, #12]
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	e7ac      	b.n	8006a22 <_printf_i+0x122>
 8006ac8:	002a      	movs	r2, r5
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	9906      	ldr	r1, [sp, #24]
 8006ace:	9805      	ldr	r0, [sp, #20]
 8006ad0:	9d07      	ldr	r5, [sp, #28]
 8006ad2:	47a8      	blx	r5
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d0ae      	beq.n	8006a36 <_printf_i+0x136>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	d415      	bmi.n	8006b0a <_printf_i+0x20a>
 8006ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae0:	68e0      	ldr	r0, [r4, #12]
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	daa9      	bge.n	8006a3a <_printf_i+0x13a>
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	e7a7      	b.n	8006a3a <_printf_i+0x13a>
 8006aea:	0022      	movs	r2, r4
 8006aec:	2301      	movs	r3, #1
 8006aee:	9906      	ldr	r1, [sp, #24]
 8006af0:	9805      	ldr	r0, [sp, #20]
 8006af2:	9e07      	ldr	r6, [sp, #28]
 8006af4:	3219      	adds	r2, #25
 8006af6:	47b0      	blx	r6
 8006af8:	3001      	adds	r0, #1
 8006afa:	d09c      	beq.n	8006a36 <_printf_i+0x136>
 8006afc:	3501      	adds	r5, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dcf0      	bgt.n	8006aea <_printf_i+0x1ea>
 8006b08:	e7e9      	b.n	8006ade <_printf_i+0x1de>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	e7f7      	b.n	8006afe <_printf_i+0x1fe>
 8006b0e:	46c0      	nop			@ (mov r8, r8)
 8006b10:	08008d8a 	.word	0x08008d8a
 8006b14:	08008d9b 	.word	0x08008d9b

08006b18 <std>:
 8006b18:	2300      	movs	r3, #0
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	0004      	movs	r4, r0
 8006b1e:	6003      	str	r3, [r0, #0]
 8006b20:	6043      	str	r3, [r0, #4]
 8006b22:	6083      	str	r3, [r0, #8]
 8006b24:	8181      	strh	r1, [r0, #12]
 8006b26:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b28:	81c2      	strh	r2, [r0, #14]
 8006b2a:	6103      	str	r3, [r0, #16]
 8006b2c:	6143      	str	r3, [r0, #20]
 8006b2e:	6183      	str	r3, [r0, #24]
 8006b30:	0019      	movs	r1, r3
 8006b32:	2208      	movs	r2, #8
 8006b34:	305c      	adds	r0, #92	@ 0x5c
 8006b36:	f000 f8ff 	bl	8006d38 <memset>
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <std+0x50>)
 8006b3c:	6224      	str	r4, [r4, #32]
 8006b3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b40:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <std+0x54>)
 8006b42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b44:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <std+0x58>)
 8006b46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <std+0x5c>)
 8006b4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <std+0x60>)
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d005      	beq.n	8006b5e <std+0x46>
 8006b52:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <std+0x64>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d002      	beq.n	8006b5e <std+0x46>
 8006b58:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <std+0x68>)
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	d103      	bne.n	8006b66 <std+0x4e>
 8006b5e:	0020      	movs	r0, r4
 8006b60:	3058      	adds	r0, #88	@ 0x58
 8006b62:	f000 f96d 	bl	8006e40 <__retarget_lock_init_recursive>
 8006b66:	bd10      	pop	{r4, pc}
 8006b68:	08006ca1 	.word	0x08006ca1
 8006b6c:	08006cc9 	.word	0x08006cc9
 8006b70:	08006d01 	.word	0x08006d01
 8006b74:	08006d2d 	.word	0x08006d2d
 8006b78:	20000340 	.word	0x20000340
 8006b7c:	200003a8 	.word	0x200003a8
 8006b80:	20000410 	.word	0x20000410

08006b84 <stdio_exit_handler>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4a03      	ldr	r2, [pc, #12]	@ (8006b94 <stdio_exit_handler+0x10>)
 8006b88:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x14>)
 8006b8a:	4804      	ldr	r0, [pc, #16]	@ (8006b9c <stdio_exit_handler+0x18>)
 8006b8c:	f000 f86c 	bl	8006c68 <_fwalk_sglue>
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	46c0      	nop			@ (mov r8, r8)
 8006b94:	20000014 	.word	0x20000014
 8006b98:	08008599 	.word	0x08008599
 8006b9c:	20000024 	.word	0x20000024

08006ba0 <cleanup_stdio>:
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <cleanup_stdio+0x30>)
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	0004      	movs	r4, r0
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d001      	beq.n	8006bb0 <cleanup_stdio+0x10>
 8006bac:	f001 fcf4 	bl	8008598 <_fflush_r>
 8006bb0:	68a1      	ldr	r1, [r4, #8]
 8006bb2:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <cleanup_stdio+0x34>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <cleanup_stdio+0x1e>
 8006bb8:	0020      	movs	r0, r4
 8006bba:	f001 fced 	bl	8008598 <_fflush_r>
 8006bbe:	68e1      	ldr	r1, [r4, #12]
 8006bc0:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <cleanup_stdio+0x38>)
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d002      	beq.n	8006bcc <cleanup_stdio+0x2c>
 8006bc6:	0020      	movs	r0, r4
 8006bc8:	f001 fce6 	bl	8008598 <_fflush_r>
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	20000340 	.word	0x20000340
 8006bd4:	200003a8 	.word	0x200003a8
 8006bd8:	20000410 	.word	0x20000410

08006bdc <global_stdio_init.part.0>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <global_stdio_init.part.0+0x28>)
 8006be0:	4a09      	ldr	r2, [pc, #36]	@ (8006c08 <global_stdio_init.part.0+0x2c>)
 8006be2:	2104      	movs	r1, #4
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	4809      	ldr	r0, [pc, #36]	@ (8006c0c <global_stdio_init.part.0+0x30>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	f7ff ff95 	bl	8006b18 <std>
 8006bee:	2201      	movs	r2, #1
 8006bf0:	2109      	movs	r1, #9
 8006bf2:	4807      	ldr	r0, [pc, #28]	@ (8006c10 <global_stdio_init.part.0+0x34>)
 8006bf4:	f7ff ff90 	bl	8006b18 <std>
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	2112      	movs	r1, #18
 8006bfc:	4805      	ldr	r0, [pc, #20]	@ (8006c14 <global_stdio_init.part.0+0x38>)
 8006bfe:	f7ff ff8b 	bl	8006b18 <std>
 8006c02:	bd10      	pop	{r4, pc}
 8006c04:	20000478 	.word	0x20000478
 8006c08:	08006b85 	.word	0x08006b85
 8006c0c:	20000340 	.word	0x20000340
 8006c10:	200003a8 	.word	0x200003a8
 8006c14:	20000410 	.word	0x20000410

08006c18 <__sfp_lock_acquire>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4802      	ldr	r0, [pc, #8]	@ (8006c24 <__sfp_lock_acquire+0xc>)
 8006c1c:	f000 f911 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	20000481 	.word	0x20000481

08006c28 <__sfp_lock_release>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4802      	ldr	r0, [pc, #8]	@ (8006c34 <__sfp_lock_release+0xc>)
 8006c2c:	f000 f90a 	bl	8006e44 <__retarget_lock_release_recursive>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	20000481 	.word	0x20000481

08006c38 <__sinit>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	0004      	movs	r4, r0
 8006c3c:	f7ff ffec 	bl	8006c18 <__sfp_lock_acquire>
 8006c40:	6a23      	ldr	r3, [r4, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <__sinit+0x14>
 8006c46:	f7ff ffef 	bl	8006c28 <__sfp_lock_release>
 8006c4a:	bd10      	pop	{r4, pc}
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__sinit+0x28>)
 8006c4e:	6223      	str	r3, [r4, #32]
 8006c50:	4b04      	ldr	r3, [pc, #16]	@ (8006c64 <__sinit+0x2c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f6      	bne.n	8006c46 <__sinit+0xe>
 8006c58:	f7ff ffc0 	bl	8006bdc <global_stdio_init.part.0>
 8006c5c:	e7f3      	b.n	8006c46 <__sinit+0xe>
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	08006ba1 	.word	0x08006ba1
 8006c64:	20000478 	.word	0x20000478

08006c68 <_fwalk_sglue>:
 8006c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c6a:	0014      	movs	r4, r2
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	9000      	str	r0, [sp, #0]
 8006c70:	9101      	str	r1, [sp, #4]
 8006c72:	68a5      	ldr	r5, [r4, #8]
 8006c74:	6867      	ldr	r7, [r4, #4]
 8006c76:	3f01      	subs	r7, #1
 8006c78:	d504      	bpl.n	8006c84 <_fwalk_sglue+0x1c>
 8006c7a:	6824      	ldr	r4, [r4, #0]
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	d1f8      	bne.n	8006c72 <_fwalk_sglue+0xa>
 8006c80:	0030      	movs	r0, r6
 8006c82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c84:	89ab      	ldrh	r3, [r5, #12]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d908      	bls.n	8006c9c <_fwalk_sglue+0x34>
 8006c8a:	220e      	movs	r2, #14
 8006c8c:	5eab      	ldrsh	r3, [r5, r2]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	d004      	beq.n	8006c9c <_fwalk_sglue+0x34>
 8006c92:	0029      	movs	r1, r5
 8006c94:	9800      	ldr	r0, [sp, #0]
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	@ 0x68
 8006c9e:	e7ea      	b.n	8006c76 <_fwalk_sglue+0xe>

08006ca0 <__sread>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	000c      	movs	r4, r1
 8006ca4:	250e      	movs	r5, #14
 8006ca6:	5f49      	ldrsh	r1, [r1, r5]
 8006ca8:	f000 f878 	bl	8006d9c <_read_r>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	db03      	blt.n	8006cb8 <__sread+0x18>
 8006cb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006cb2:	181b      	adds	r3, r3, r0
 8006cb4:	6563      	str	r3, [r4, #84]	@ 0x54
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	4a02      	ldr	r2, [pc, #8]	@ (8006cc4 <__sread+0x24>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	e7f9      	b.n	8006cb6 <__sread+0x16>
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	ffffefff 	.word	0xffffefff

08006cc8 <__swrite>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	001f      	movs	r7, r3
 8006ccc:	898b      	ldrh	r3, [r1, #12]
 8006cce:	0005      	movs	r5, r0
 8006cd0:	000c      	movs	r4, r1
 8006cd2:	0016      	movs	r6, r2
 8006cd4:	05db      	lsls	r3, r3, #23
 8006cd6:	d505      	bpl.n	8006ce4 <__swrite+0x1c>
 8006cd8:	230e      	movs	r3, #14
 8006cda:	5ec9      	ldrsh	r1, [r1, r3]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2302      	movs	r3, #2
 8006ce0:	f000 f848 	bl	8006d74 <_lseek_r>
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	4a05      	ldr	r2, [pc, #20]	@ (8006cfc <__swrite+0x34>)
 8006ce8:	0028      	movs	r0, r5
 8006cea:	4013      	ands	r3, r2
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	0032      	movs	r2, r6
 8006cf0:	230e      	movs	r3, #14
 8006cf2:	5ee1      	ldrsh	r1, [r4, r3]
 8006cf4:	003b      	movs	r3, r7
 8006cf6:	f000 f865 	bl	8006dc4 <_write_r>
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfc:	ffffefff 	.word	0xffffefff

08006d00 <__sseek>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	000c      	movs	r4, r1
 8006d04:	250e      	movs	r5, #14
 8006d06:	5f49      	ldrsh	r1, [r1, r5]
 8006d08:	f000 f834 	bl	8006d74 <_lseek_r>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	1c42      	adds	r2, r0, #1
 8006d10:	d103      	bne.n	8006d1a <__sseek+0x1a>
 8006d12:	4a05      	ldr	r2, [pc, #20]	@ (8006d28 <__sseek+0x28>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
 8006d1a:	2280      	movs	r2, #128	@ 0x80
 8006d1c:	0152      	lsls	r2, r2, #5
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d24:	e7f8      	b.n	8006d18 <__sseek+0x18>
 8006d26:	46c0      	nop			@ (mov r8, r8)
 8006d28:	ffffefff 	.word	0xffffefff

08006d2c <__sclose>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	230e      	movs	r3, #14
 8006d30:	5ec9      	ldrsh	r1, [r1, r3]
 8006d32:	f000 f80d 	bl	8006d50 <_close_r>
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <memset>:
 8006d38:	0003      	movs	r3, r0
 8006d3a:	1882      	adds	r2, r0, r2
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <memset+0xa>
 8006d40:	4770      	bx	lr
 8006d42:	7019      	strb	r1, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	e7f9      	b.n	8006d3c <memset+0x4>

08006d48 <_localeconv_r>:
 8006d48:	4800      	ldr	r0, [pc, #0]	@ (8006d4c <_localeconv_r+0x4>)
 8006d4a:	4770      	bx	lr
 8006d4c:	20000160 	.word	0x20000160

08006d50 <_close_r>:
 8006d50:	2300      	movs	r3, #0
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	4d06      	ldr	r5, [pc, #24]	@ (8006d70 <_close_r+0x20>)
 8006d56:	0004      	movs	r4, r0
 8006d58:	0008      	movs	r0, r1
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	f7fc f87a 	bl	8002e54 <_close>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d103      	bne.n	8006d6c <_close_r+0x1c>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d000      	beq.n	8006d6c <_close_r+0x1c>
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	2000047c 	.word	0x2000047c

08006d74 <_lseek_r>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	0004      	movs	r4, r0
 8006d78:	0008      	movs	r0, r1
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4d05      	ldr	r5, [pc, #20]	@ (8006d98 <_lseek_r+0x24>)
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fc f887 	bl	8002e96 <_lseek>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d103      	bne.n	8006d94 <_lseek_r+0x20>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d000      	beq.n	8006d94 <_lseek_r+0x20>
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	2000047c 	.word	0x2000047c

08006d9c <_read_r>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	0004      	movs	r4, r0
 8006da0:	0008      	movs	r0, r1
 8006da2:	0011      	movs	r1, r2
 8006da4:	001a      	movs	r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	4d05      	ldr	r5, [pc, #20]	@ (8006dc0 <_read_r+0x24>)
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fc f819 	bl	8002de2 <_read>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d103      	bne.n	8006dbc <_read_r+0x20>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d000      	beq.n	8006dbc <_read_r+0x20>
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
 8006dbe:	46c0      	nop			@ (mov r8, r8)
 8006dc0:	2000047c 	.word	0x2000047c

08006dc4 <_write_r>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	0008      	movs	r0, r1
 8006dca:	0011      	movs	r1, r2
 8006dcc:	001a      	movs	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4d05      	ldr	r5, [pc, #20]	@ (8006de8 <_write_r+0x24>)
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fc f822 	bl	8002e1c <_write>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d103      	bne.n	8006de4 <_write_r+0x20>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d000      	beq.n	8006de4 <_write_r+0x20>
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	46c0      	nop			@ (mov r8, r8)
 8006de8:	2000047c 	.word	0x2000047c

08006dec <__errno>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	@ (8006df4 <__errno+0x8>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	4770      	bx	lr
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	20000020 	.word	0x20000020

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	4c0c      	ldr	r4, [pc, #48]	@ (8006e30 <__libc_init_array+0x38>)
 8006dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8006e34 <__libc_init_array+0x3c>)
 8006e00:	1b64      	subs	r4, r4, r5
 8006e02:	10a4      	asrs	r4, r4, #2
 8006e04:	42a6      	cmp	r6, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	2600      	movs	r6, #0
 8006e0a:	f001 ff4b 	bl	8008ca4 <_init>
 8006e0e:	4c0a      	ldr	r4, [pc, #40]	@ (8006e38 <__libc_init_array+0x40>)
 8006e10:	4d0a      	ldr	r5, [pc, #40]	@ (8006e3c <__libc_init_array+0x44>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	42a6      	cmp	r6, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	00b3      	lsls	r3, r6, #2
 8006e1e:	58eb      	ldr	r3, [r5, r3]
 8006e20:	4798      	blx	r3
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	00b3      	lsls	r3, r6, #2
 8006e28:	58eb      	ldr	r3, [r5, r3]
 8006e2a:	4798      	blx	r3
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	080090f4 	.word	0x080090f4
 8006e34:	080090f4 	.word	0x080090f4
 8006e38:	080090f8 	.word	0x080090f8
 8006e3c:	080090f4 	.word	0x080090f4

08006e40 <__retarget_lock_init_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_acquire_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <__retarget_lock_release_recursive>:
 8006e44:	4770      	bx	lr

08006e46 <memchr>:
 8006e46:	b2c9      	uxtb	r1, r1
 8006e48:	1882      	adds	r2, r0, r2
 8006e4a:	4290      	cmp	r0, r2
 8006e4c:	d101      	bne.n	8006e52 <memchr+0xc>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	4770      	bx	lr
 8006e52:	7803      	ldrb	r3, [r0, #0]
 8006e54:	428b      	cmp	r3, r1
 8006e56:	d0fb      	beq.n	8006e50 <memchr+0xa>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	e7f6      	b.n	8006e4a <memchr+0x4>

08006e5c <quorem>:
 8006e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5e:	6903      	ldr	r3, [r0, #16]
 8006e60:	690c      	ldr	r4, [r1, #16]
 8006e62:	b089      	sub	sp, #36	@ 0x24
 8006e64:	9003      	str	r0, [sp, #12]
 8006e66:	9106      	str	r1, [sp, #24]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	db63      	blt.n	8006f36 <quorem+0xda>
 8006e6e:	000b      	movs	r3, r1
 8006e70:	3c01      	subs	r4, #1
 8006e72:	3314      	adds	r3, #20
 8006e74:	00a5      	lsls	r5, r4, #2
 8006e76:	9304      	str	r3, [sp, #16]
 8006e78:	195b      	adds	r3, r3, r5
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	3314      	adds	r3, #20
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	195d      	adds	r5, r3, r5
 8006e84:	9b05      	ldr	r3, [sp, #20]
 8006e86:	682f      	ldr	r7, [r5, #0]
 8006e88:	681e      	ldr	r6, [r3, #0]
 8006e8a:	0038      	movs	r0, r7
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	0031      	movs	r1, r6
 8006e90:	f7f9 f956 	bl	8000140 <__udivsi3>
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	42b7      	cmp	r7, r6
 8006e98:	d327      	bcc.n	8006eea <quorem+0x8e>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	2700      	movs	r7, #0
 8006e9e:	469c      	mov	ip, r3
 8006ea0:	9e01      	ldr	r6, [sp, #4]
 8006ea2:	9707      	str	r7, [sp, #28]
 8006ea4:	4662      	mov	r2, ip
 8006ea6:	ca08      	ldmia	r2!, {r3}
 8006ea8:	6830      	ldr	r0, [r6, #0]
 8006eaa:	4694      	mov	ip, r2
 8006eac:	9a02      	ldr	r2, [sp, #8]
 8006eae:	b299      	uxth	r1, r3
 8006eb0:	4351      	muls	r1, r2
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	4353      	muls	r3, r2
 8006eb6:	19c9      	adds	r1, r1, r7
 8006eb8:	0c0a      	lsrs	r2, r1, #16
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	b289      	uxth	r1, r1
 8006ebe:	b282      	uxth	r2, r0
 8006ec0:	1a52      	subs	r2, r2, r1
 8006ec2:	9907      	ldr	r1, [sp, #28]
 8006ec4:	0c1f      	lsrs	r7, r3, #16
 8006ec6:	1852      	adds	r2, r2, r1
 8006ec8:	0c00      	lsrs	r0, r0, #16
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	1411      	asrs	r1, r2, #16
 8006ece:	1ac3      	subs	r3, r0, r3
 8006ed0:	185b      	adds	r3, r3, r1
 8006ed2:	1419      	asrs	r1, r3, #16
 8006ed4:	b292      	uxth	r2, r2
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	9107      	str	r1, [sp, #28]
 8006ede:	c604      	stmia	r6!, {r2}
 8006ee0:	4563      	cmp	r3, ip
 8006ee2:	d2df      	bcs.n	8006ea4 <quorem+0x48>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d02b      	beq.n	8006f42 <quorem+0xe6>
 8006eea:	9906      	ldr	r1, [sp, #24]
 8006eec:	9803      	ldr	r0, [sp, #12]
 8006eee:	f001 f9b7 	bl	8008260 <__mcmp>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	db1e      	blt.n	8006f34 <quorem+0xd8>
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	9d01      	ldr	r5, [sp, #4]
 8006efa:	9904      	ldr	r1, [sp, #16]
 8006efc:	c901      	ldmia	r1!, {r0}
 8006efe:	682b      	ldr	r3, [r5, #0]
 8006f00:	b287      	uxth	r7, r0
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	1bd2      	subs	r2, r2, r7
 8006f06:	1992      	adds	r2, r2, r6
 8006f08:	0c00      	lsrs	r0, r0, #16
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	1a1b      	subs	r3, r3, r0
 8006f0e:	1410      	asrs	r0, r2, #16
 8006f10:	181b      	adds	r3, r3, r0
 8006f12:	141e      	asrs	r6, r3, #16
 8006f14:	b292      	uxth	r2, r2
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	c504      	stmia	r5!, {r2}
 8006f1e:	428b      	cmp	r3, r1
 8006f20:	d2ec      	bcs.n	8006efc <quorem+0xa0>
 8006f22:	9a01      	ldr	r2, [sp, #4]
 8006f24:	00a3      	lsls	r3, r4, #2
 8006f26:	18d3      	adds	r3, r2, r3
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	d014      	beq.n	8006f58 <quorem+0xfc>
 8006f2e:	9b02      	ldr	r3, [sp, #8]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9302      	str	r3, [sp, #8]
 8006f34:	9802      	ldr	r0, [sp, #8]
 8006f36:	b009      	add	sp, #36	@ 0x24
 8006f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <quorem+0xee>
 8006f40:	3c01      	subs	r4, #1
 8006f42:	9b01      	ldr	r3, [sp, #4]
 8006f44:	3d04      	subs	r5, #4
 8006f46:	42ab      	cmp	r3, r5
 8006f48:	d3f7      	bcc.n	8006f3a <quorem+0xde>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	611c      	str	r4, [r3, #16]
 8006f4e:	e7cc      	b.n	8006eea <quorem+0x8e>
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d104      	bne.n	8006f60 <quorem+0x104>
 8006f56:	3c01      	subs	r4, #1
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	3b04      	subs	r3, #4
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d3f7      	bcc.n	8006f50 <quorem+0xf4>
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	611c      	str	r4, [r3, #16]
 8006f64:	e7e3      	b.n	8006f2e <quorem+0xd2>
	...

08006f68 <_dtoa_r>:
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6a:	0014      	movs	r4, r2
 8006f6c:	001d      	movs	r5, r3
 8006f6e:	69c6      	ldr	r6, [r0, #28]
 8006f70:	b09d      	sub	sp, #116	@ 0x74
 8006f72:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f74:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006f76:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006f78:	9003      	str	r0, [sp, #12]
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	d10f      	bne.n	8006f9e <_dtoa_r+0x36>
 8006f7e:	2010      	movs	r0, #16
 8006f80:	f000 fe2c 	bl	8007bdc <malloc>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	1e02      	subs	r2, r0, #0
 8006f88:	61d8      	str	r0, [r3, #28]
 8006f8a:	d104      	bne.n	8006f96 <_dtoa_r+0x2e>
 8006f8c:	21ef      	movs	r1, #239	@ 0xef
 8006f8e:	4bc7      	ldr	r3, [pc, #796]	@ (80072ac <_dtoa_r+0x344>)
 8006f90:	48c7      	ldr	r0, [pc, #796]	@ (80072b0 <_dtoa_r+0x348>)
 8006f92:	f001 fb49 	bl	8008628 <__assert_func>
 8006f96:	6046      	str	r6, [r0, #4]
 8006f98:	6086      	str	r6, [r0, #8]
 8006f9a:	6006      	str	r6, [r0, #0]
 8006f9c:	60c6      	str	r6, [r0, #12]
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d00b      	beq.n	8006fc0 <_dtoa_r+0x58>
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	2301      	movs	r3, #1
 8006fac:	4093      	lsls	r3, r2
 8006fae:	604a      	str	r2, [r1, #4]
 8006fb0:	608b      	str	r3, [r1, #8]
 8006fb2:	9803      	ldr	r0, [sp, #12]
 8006fb4:	f000 ff12 	bl	8007ddc <_Bfree>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	da1e      	bge.n	8007002 <_dtoa_r+0x9a>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	006b      	lsls	r3, r5, #1
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fce:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006fd0:	4bb8      	ldr	r3, [pc, #736]	@ (80072b4 <_dtoa_r+0x34c>)
 8006fd2:	4ab8      	ldr	r2, [pc, #736]	@ (80072b4 <_dtoa_r+0x34c>)
 8006fd4:	403b      	ands	r3, r7
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d116      	bne.n	8007008 <_dtoa_r+0xa0>
 8006fda:	4bb7      	ldr	r3, [pc, #732]	@ (80072b8 <_dtoa_r+0x350>)
 8006fdc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	033b      	lsls	r3, r7, #12
 8006fe2:	0b1b      	lsrs	r3, r3, #12
 8006fe4:	4323      	orrs	r3, r4
 8006fe6:	d101      	bne.n	8006fec <_dtoa_r+0x84>
 8006fe8:	f000 fd80 	bl	8007aec <_dtoa_r+0xb84>
 8006fec:	4bb3      	ldr	r3, [pc, #716]	@ (80072bc <_dtoa_r+0x354>)
 8006fee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ff0:	9308      	str	r3, [sp, #32]
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d002      	beq.n	8006ffc <_dtoa_r+0x94>
 8006ff6:	4bb2      	ldr	r3, [pc, #712]	@ (80072c0 <_dtoa_r+0x358>)
 8006ff8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	9808      	ldr	r0, [sp, #32]
 8006ffe:	b01d      	add	sp, #116	@ 0x74
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007002:	2300      	movs	r3, #0
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	e7e2      	b.n	8006fce <_dtoa_r+0x66>
 8007008:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800700a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800700c:	9212      	str	r2, [sp, #72]	@ 0x48
 800700e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007010:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007012:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	f7f9 fa18 	bl	800044c <__aeabi_dcmpeq>
 800701c:	1e06      	subs	r6, r0, #0
 800701e:	d00b      	beq.n	8007038 <_dtoa_r+0xd0>
 8007020:	2301      	movs	r3, #1
 8007022:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <_dtoa_r+0xca>
 800702c:	4ba5      	ldr	r3, [pc, #660]	@ (80072c4 <_dtoa_r+0x35c>)
 800702e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4ba5      	ldr	r3, [pc, #660]	@ (80072c8 <_dtoa_r+0x360>)
 8007034:	9308      	str	r3, [sp, #32]
 8007036:	e7e1      	b.n	8006ffc <_dtoa_r+0x94>
 8007038:	ab1a      	add	r3, sp, #104	@ 0x68
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	9803      	ldr	r0, [sp, #12]
 8007042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007046:	f001 f9c1 	bl	80083cc <__d2b>
 800704a:	007a      	lsls	r2, r7, #1
 800704c:	9005      	str	r0, [sp, #20]
 800704e:	0d52      	lsrs	r2, r2, #21
 8007050:	d100      	bne.n	8007054 <_dtoa_r+0xec>
 8007052:	e07b      	b.n	800714c <_dtoa_r+0x1e4>
 8007054:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007056:	9618      	str	r6, [sp, #96]	@ 0x60
 8007058:	0319      	lsls	r1, r3, #12
 800705a:	4b9c      	ldr	r3, [pc, #624]	@ (80072cc <_dtoa_r+0x364>)
 800705c:	0b09      	lsrs	r1, r1, #12
 800705e:	430b      	orrs	r3, r1
 8007060:	499b      	ldr	r1, [pc, #620]	@ (80072d0 <_dtoa_r+0x368>)
 8007062:	1857      	adds	r7, r2, r1
 8007064:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007066:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007068:	0019      	movs	r1, r3
 800706a:	2200      	movs	r2, #0
 800706c:	4b99      	ldr	r3, [pc, #612]	@ (80072d4 <_dtoa_r+0x36c>)
 800706e:	f7fa fded 	bl	8001c4c <__aeabi_dsub>
 8007072:	4a99      	ldr	r2, [pc, #612]	@ (80072d8 <_dtoa_r+0x370>)
 8007074:	4b99      	ldr	r3, [pc, #612]	@ (80072dc <_dtoa_r+0x374>)
 8007076:	f7fa fb03 	bl	8001680 <__aeabi_dmul>
 800707a:	4a99      	ldr	r2, [pc, #612]	@ (80072e0 <_dtoa_r+0x378>)
 800707c:	4b99      	ldr	r3, [pc, #612]	@ (80072e4 <_dtoa_r+0x37c>)
 800707e:	f7f9 faff 	bl	8000680 <__aeabi_dadd>
 8007082:	0004      	movs	r4, r0
 8007084:	0038      	movs	r0, r7
 8007086:	000d      	movs	r5, r1
 8007088:	f7fb fa48 	bl	800251c <__aeabi_i2d>
 800708c:	4a96      	ldr	r2, [pc, #600]	@ (80072e8 <_dtoa_r+0x380>)
 800708e:	4b97      	ldr	r3, [pc, #604]	@ (80072ec <_dtoa_r+0x384>)
 8007090:	f7fa faf6 	bl	8001680 <__aeabi_dmul>
 8007094:	0002      	movs	r2, r0
 8007096:	000b      	movs	r3, r1
 8007098:	0020      	movs	r0, r4
 800709a:	0029      	movs	r1, r5
 800709c:	f7f9 faf0 	bl	8000680 <__aeabi_dadd>
 80070a0:	0004      	movs	r4, r0
 80070a2:	000d      	movs	r5, r1
 80070a4:	f7fb f9fe 	bl	80024a4 <__aeabi_d2iz>
 80070a8:	2200      	movs	r2, #0
 80070aa:	9004      	str	r0, [sp, #16]
 80070ac:	2300      	movs	r3, #0
 80070ae:	0020      	movs	r0, r4
 80070b0:	0029      	movs	r1, r5
 80070b2:	f7f9 f9d1 	bl	8000458 <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d00b      	beq.n	80070d2 <_dtoa_r+0x16a>
 80070ba:	9804      	ldr	r0, [sp, #16]
 80070bc:	f7fb fa2e 	bl	800251c <__aeabi_i2d>
 80070c0:	002b      	movs	r3, r5
 80070c2:	0022      	movs	r2, r4
 80070c4:	f7f9 f9c2 	bl	800044c <__aeabi_dcmpeq>
 80070c8:	4243      	negs	r3, r0
 80070ca:	4158      	adcs	r0, r3
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	1a1b      	subs	r3, r3, r0
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	2301      	movs	r3, #1
 80070d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80070d6:	9b04      	ldr	r3, [sp, #16]
 80070d8:	2b16      	cmp	r3, #22
 80070da:	d810      	bhi.n	80070fe <_dtoa_r+0x196>
 80070dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80070de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80070e0:	9a04      	ldr	r2, [sp, #16]
 80070e2:	4b83      	ldr	r3, [pc, #524]	@ (80072f0 <_dtoa_r+0x388>)
 80070e4:	00d2      	lsls	r2, r2, #3
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f7f9 f9b4 	bl	8000458 <__aeabi_dcmplt>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d047      	beq.n	8007184 <_dtoa_r+0x21c>
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	2300      	movs	r3, #0
 80070fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80070fe:	2200      	movs	r2, #0
 8007100:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007102:	9206      	str	r2, [sp, #24]
 8007104:	1bdb      	subs	r3, r3, r7
 8007106:	1e5a      	subs	r2, r3, #1
 8007108:	d53e      	bpl.n	8007188 <_dtoa_r+0x220>
 800710a:	2201      	movs	r2, #1
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	9306      	str	r3, [sp, #24]
 8007110:	2300      	movs	r3, #0
 8007112:	930d      	str	r3, [sp, #52]	@ 0x34
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	db38      	blt.n	800718c <_dtoa_r+0x224>
 800711a:	9a04      	ldr	r2, [sp, #16]
 800711c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800711e:	4694      	mov	ip, r2
 8007120:	4463      	add	r3, ip
 8007122:	930d      	str	r3, [sp, #52]	@ 0x34
 8007124:	2300      	movs	r3, #0
 8007126:	9214      	str	r2, [sp, #80]	@ 0x50
 8007128:	930f      	str	r3, [sp, #60]	@ 0x3c
 800712a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800712c:	2401      	movs	r4, #1
 800712e:	2b09      	cmp	r3, #9
 8007130:	d862      	bhi.n	80071f8 <_dtoa_r+0x290>
 8007132:	2b05      	cmp	r3, #5
 8007134:	dd02      	ble.n	800713c <_dtoa_r+0x1d4>
 8007136:	2400      	movs	r4, #0
 8007138:	3b04      	subs	r3, #4
 800713a:	9322      	str	r3, [sp, #136]	@ 0x88
 800713c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800713e:	1e98      	subs	r0, r3, #2
 8007140:	2803      	cmp	r0, #3
 8007142:	d863      	bhi.n	800720c <_dtoa_r+0x2a4>
 8007144:	f7f8 ffe8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007148:	2b385654 	.word	0x2b385654
 800714c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800714e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007150:	18f6      	adds	r6, r6, r3
 8007152:	4b68      	ldr	r3, [pc, #416]	@ (80072f4 <_dtoa_r+0x38c>)
 8007154:	18f2      	adds	r2, r6, r3
 8007156:	2a20      	cmp	r2, #32
 8007158:	dd0f      	ble.n	800717a <_dtoa_r+0x212>
 800715a:	2340      	movs	r3, #64	@ 0x40
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	409f      	lsls	r7, r3
 8007160:	4b65      	ldr	r3, [pc, #404]	@ (80072f8 <_dtoa_r+0x390>)
 8007162:	0038      	movs	r0, r7
 8007164:	18f3      	adds	r3, r6, r3
 8007166:	40dc      	lsrs	r4, r3
 8007168:	4320      	orrs	r0, r4
 800716a:	f7fb fa05 	bl	8002578 <__aeabi_ui2d>
 800716e:	2201      	movs	r2, #1
 8007170:	4b62      	ldr	r3, [pc, #392]	@ (80072fc <_dtoa_r+0x394>)
 8007172:	1e77      	subs	r7, r6, #1
 8007174:	18cb      	adds	r3, r1, r3
 8007176:	9218      	str	r2, [sp, #96]	@ 0x60
 8007178:	e776      	b.n	8007068 <_dtoa_r+0x100>
 800717a:	2320      	movs	r3, #32
 800717c:	0020      	movs	r0, r4
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	4098      	lsls	r0, r3
 8007182:	e7f2      	b.n	800716a <_dtoa_r+0x202>
 8007184:	9015      	str	r0, [sp, #84]	@ 0x54
 8007186:	e7ba      	b.n	80070fe <_dtoa_r+0x196>
 8007188:	920d      	str	r2, [sp, #52]	@ 0x34
 800718a:	e7c3      	b.n	8007114 <_dtoa_r+0x1ac>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	9a04      	ldr	r2, [sp, #16]
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	4253      	negs	r3, r2
 8007196:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007198:	2300      	movs	r3, #0
 800719a:	9314      	str	r3, [sp, #80]	@ 0x50
 800719c:	e7c5      	b.n	800712a <_dtoa_r+0x1c2>
 800719e:	2301      	movs	r3, #1
 80071a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80071a4:	4694      	mov	ip, r2
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	4463      	add	r3, ip
 80071aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80071ac:	3301      	adds	r3, #1
 80071ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc08      	bgt.n	80071c6 <_dtoa_r+0x25e>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e006      	b.n	80071c6 <_dtoa_r+0x25e>
 80071b8:	2301      	movs	r3, #1
 80071ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80071bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd28      	ble.n	8007214 <_dtoa_r+0x2ac>
 80071c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80071c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c6:	9a03      	ldr	r2, [sp, #12]
 80071c8:	2100      	movs	r1, #0
 80071ca:	69d0      	ldr	r0, [r2, #28]
 80071cc:	2204      	movs	r2, #4
 80071ce:	0015      	movs	r5, r2
 80071d0:	3514      	adds	r5, #20
 80071d2:	429d      	cmp	r5, r3
 80071d4:	d923      	bls.n	800721e <_dtoa_r+0x2b6>
 80071d6:	6041      	str	r1, [r0, #4]
 80071d8:	9803      	ldr	r0, [sp, #12]
 80071da:	f000 fdbb 	bl	8007d54 <_Balloc>
 80071de:	9008      	str	r0, [sp, #32]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d11f      	bne.n	8007224 <_dtoa_r+0x2bc>
 80071e4:	21b0      	movs	r1, #176	@ 0xb0
 80071e6:	4b46      	ldr	r3, [pc, #280]	@ (8007300 <_dtoa_r+0x398>)
 80071e8:	4831      	ldr	r0, [pc, #196]	@ (80072b0 <_dtoa_r+0x348>)
 80071ea:	9a08      	ldr	r2, [sp, #32]
 80071ec:	31ff      	adds	r1, #255	@ 0xff
 80071ee:	e6d0      	b.n	8006f92 <_dtoa_r+0x2a>
 80071f0:	2300      	movs	r3, #0
 80071f2:	e7e2      	b.n	80071ba <_dtoa_r+0x252>
 80071f4:	2300      	movs	r3, #0
 80071f6:	e7d3      	b.n	80071a0 <_dtoa_r+0x238>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9410      	str	r4, [sp, #64]	@ 0x40
 80071fc:	9322      	str	r3, [sp, #136]	@ 0x88
 80071fe:	3b01      	subs	r3, #1
 8007200:	2200      	movs	r2, #0
 8007202:	930e      	str	r3, [sp, #56]	@ 0x38
 8007204:	9309      	str	r3, [sp, #36]	@ 0x24
 8007206:	3313      	adds	r3, #19
 8007208:	9223      	str	r2, [sp, #140]	@ 0x8c
 800720a:	e7dc      	b.n	80071c6 <_dtoa_r+0x25e>
 800720c:	2301      	movs	r3, #1
 800720e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007210:	3b02      	subs	r3, #2
 8007212:	e7f5      	b.n	8007200 <_dtoa_r+0x298>
 8007214:	2301      	movs	r3, #1
 8007216:	001a      	movs	r2, r3
 8007218:	930e      	str	r3, [sp, #56]	@ 0x38
 800721a:	9309      	str	r3, [sp, #36]	@ 0x24
 800721c:	e7f4      	b.n	8007208 <_dtoa_r+0x2a0>
 800721e:	3101      	adds	r1, #1
 8007220:	0052      	lsls	r2, r2, #1
 8007222:	e7d4      	b.n	80071ce <_dtoa_r+0x266>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	9a08      	ldr	r2, [sp, #32]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	2b0e      	cmp	r3, #14
 8007230:	d900      	bls.n	8007234 <_dtoa_r+0x2cc>
 8007232:	e0d6      	b.n	80073e2 <_dtoa_r+0x47a>
 8007234:	2c00      	cmp	r4, #0
 8007236:	d100      	bne.n	800723a <_dtoa_r+0x2d2>
 8007238:	e0d3      	b.n	80073e2 <_dtoa_r+0x47a>
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd63      	ble.n	8007308 <_dtoa_r+0x3a0>
 8007240:	210f      	movs	r1, #15
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <_dtoa_r+0x388>)
 8007246:	400a      	ands	r2, r1
 8007248:	00d2      	lsls	r2, r2, #3
 800724a:	189b      	adds	r3, r3, r2
 800724c:	681e      	ldr	r6, [r3, #0]
 800724e:	685f      	ldr	r7, [r3, #4]
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	2402      	movs	r4, #2
 8007254:	111d      	asrs	r5, r3, #4
 8007256:	05db      	lsls	r3, r3, #23
 8007258:	d50a      	bpl.n	8007270 <_dtoa_r+0x308>
 800725a:	4b2a      	ldr	r3, [pc, #168]	@ (8007304 <_dtoa_r+0x39c>)
 800725c:	400d      	ands	r5, r1
 800725e:	6a1a      	ldr	r2, [r3, #32]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007264:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007266:	f7f9 fdd1 	bl	8000e0c <__aeabi_ddiv>
 800726a:	900a      	str	r0, [sp, #40]	@ 0x28
 800726c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800726e:	3401      	adds	r4, #1
 8007270:	4b24      	ldr	r3, [pc, #144]	@ (8007304 <_dtoa_r+0x39c>)
 8007272:	930c      	str	r3, [sp, #48]	@ 0x30
 8007274:	2d00      	cmp	r5, #0
 8007276:	d108      	bne.n	800728a <_dtoa_r+0x322>
 8007278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800727a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800727c:	0032      	movs	r2, r6
 800727e:	003b      	movs	r3, r7
 8007280:	f7f9 fdc4 	bl	8000e0c <__aeabi_ddiv>
 8007284:	900a      	str	r0, [sp, #40]	@ 0x28
 8007286:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007288:	e059      	b.n	800733e <_dtoa_r+0x3d6>
 800728a:	2301      	movs	r3, #1
 800728c:	421d      	tst	r5, r3
 800728e:	d009      	beq.n	80072a4 <_dtoa_r+0x33c>
 8007290:	18e4      	adds	r4, r4, r3
 8007292:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007294:	0030      	movs	r0, r6
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	0039      	movs	r1, r7
 800729c:	f7fa f9f0 	bl	8001680 <__aeabi_dmul>
 80072a0:	0006      	movs	r6, r0
 80072a2:	000f      	movs	r7, r1
 80072a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072a6:	106d      	asrs	r5, r5, #1
 80072a8:	3308      	adds	r3, #8
 80072aa:	e7e2      	b.n	8007272 <_dtoa_r+0x30a>
 80072ac:	08008db9 	.word	0x08008db9
 80072b0:	08008dd0 	.word	0x08008dd0
 80072b4:	7ff00000 	.word	0x7ff00000
 80072b8:	0000270f 	.word	0x0000270f
 80072bc:	08008db5 	.word	0x08008db5
 80072c0:	08008db8 	.word	0x08008db8
 80072c4:	08008d89 	.word	0x08008d89
 80072c8:	08008d88 	.word	0x08008d88
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	fffffc01 	.word	0xfffffc01
 80072d4:	3ff80000 	.word	0x3ff80000
 80072d8:	636f4361 	.word	0x636f4361
 80072dc:	3fd287a7 	.word	0x3fd287a7
 80072e0:	8b60c8b3 	.word	0x8b60c8b3
 80072e4:	3fc68a28 	.word	0x3fc68a28
 80072e8:	509f79fb 	.word	0x509f79fb
 80072ec:	3fd34413 	.word	0x3fd34413
 80072f0:	08008f20 	.word	0x08008f20
 80072f4:	00000432 	.word	0x00000432
 80072f8:	00000412 	.word	0x00000412
 80072fc:	fe100000 	.word	0xfe100000
 8007300:	08008e28 	.word	0x08008e28
 8007304:	08008ef8 	.word	0x08008ef8
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	2402      	movs	r4, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d016      	beq.n	800733e <_dtoa_r+0x3d6>
 8007310:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007312:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007314:	220f      	movs	r2, #15
 8007316:	425d      	negs	r5, r3
 8007318:	402a      	ands	r2, r5
 800731a:	4bd5      	ldr	r3, [pc, #852]	@ (8007670 <_dtoa_r+0x708>)
 800731c:	00d2      	lsls	r2, r2, #3
 800731e:	189b      	adds	r3, r3, r2
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f7fa f9ac 	bl	8001680 <__aeabi_dmul>
 8007328:	2701      	movs	r7, #1
 800732a:	2300      	movs	r3, #0
 800732c:	900a      	str	r0, [sp, #40]	@ 0x28
 800732e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007330:	4ed0      	ldr	r6, [pc, #832]	@ (8007674 <_dtoa_r+0x70c>)
 8007332:	112d      	asrs	r5, r5, #4
 8007334:	2d00      	cmp	r5, #0
 8007336:	d000      	beq.n	800733a <_dtoa_r+0x3d2>
 8007338:	e095      	b.n	8007466 <_dtoa_r+0x4fe>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1a2      	bne.n	8007284 <_dtoa_r+0x31c>
 800733e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007340:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007342:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007344:	2b00      	cmp	r3, #0
 8007346:	d100      	bne.n	800734a <_dtoa_r+0x3e2>
 8007348:	e098      	b.n	800747c <_dtoa_r+0x514>
 800734a:	2200      	movs	r2, #0
 800734c:	0030      	movs	r0, r6
 800734e:	0039      	movs	r1, r7
 8007350:	4bc9      	ldr	r3, [pc, #804]	@ (8007678 <_dtoa_r+0x710>)
 8007352:	f7f9 f881 	bl	8000458 <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d100      	bne.n	800735c <_dtoa_r+0x3f4>
 800735a:	e08f      	b.n	800747c <_dtoa_r+0x514>
 800735c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d100      	bne.n	8007364 <_dtoa_r+0x3fc>
 8007362:	e08b      	b.n	800747c <_dtoa_r+0x514>
 8007364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd37      	ble.n	80073da <_dtoa_r+0x472>
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	2200      	movs	r2, #0
 800736e:	3b01      	subs	r3, #1
 8007370:	930c      	str	r3, [sp, #48]	@ 0x30
 8007372:	0030      	movs	r0, r6
 8007374:	4bc1      	ldr	r3, [pc, #772]	@ (800767c <_dtoa_r+0x714>)
 8007376:	0039      	movs	r1, r7
 8007378:	f7fa f982 	bl	8001680 <__aeabi_dmul>
 800737c:	900a      	str	r0, [sp, #40]	@ 0x28
 800737e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007382:	3401      	adds	r4, #1
 8007384:	0020      	movs	r0, r4
 8007386:	9311      	str	r3, [sp, #68]	@ 0x44
 8007388:	f7fb f8c8 	bl	800251c <__aeabi_i2d>
 800738c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	f7fa f976 	bl	8001680 <__aeabi_dmul>
 8007394:	4bba      	ldr	r3, [pc, #744]	@ (8007680 <_dtoa_r+0x718>)
 8007396:	2200      	movs	r2, #0
 8007398:	f7f9 f972 	bl	8000680 <__aeabi_dadd>
 800739c:	4bb9      	ldr	r3, [pc, #740]	@ (8007684 <_dtoa_r+0x71c>)
 800739e:	0006      	movs	r6, r0
 80073a0:	18cf      	adds	r7, r1, r3
 80073a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d16d      	bne.n	8007484 <_dtoa_r+0x51c>
 80073a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073ac:	2200      	movs	r2, #0
 80073ae:	4bb6      	ldr	r3, [pc, #728]	@ (8007688 <_dtoa_r+0x720>)
 80073b0:	f7fa fc4c 	bl	8001c4c <__aeabi_dsub>
 80073b4:	0032      	movs	r2, r6
 80073b6:	003b      	movs	r3, r7
 80073b8:	0004      	movs	r4, r0
 80073ba:	000d      	movs	r5, r1
 80073bc:	f7f9 f860 	bl	8000480 <__aeabi_dcmpgt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d000      	beq.n	80073c6 <_dtoa_r+0x45e>
 80073c4:	e2b6      	b.n	8007934 <_dtoa_r+0x9cc>
 80073c6:	2180      	movs	r1, #128	@ 0x80
 80073c8:	0609      	lsls	r1, r1, #24
 80073ca:	187b      	adds	r3, r7, r1
 80073cc:	0032      	movs	r2, r6
 80073ce:	0020      	movs	r0, r4
 80073d0:	0029      	movs	r1, r5
 80073d2:	f7f9 f841 	bl	8000458 <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d128      	bne.n	800742c <_dtoa_r+0x4c4>
 80073da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80073de:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da00      	bge.n	80073ea <_dtoa_r+0x482>
 80073e8:	e174      	b.n	80076d4 <_dtoa_r+0x76c>
 80073ea:	9a04      	ldr	r2, [sp, #16]
 80073ec:	2a0e      	cmp	r2, #14
 80073ee:	dd00      	ble.n	80073f2 <_dtoa_r+0x48a>
 80073f0:	e170      	b.n	80076d4 <_dtoa_r+0x76c>
 80073f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007670 <_dtoa_r+0x708>)
 80073f4:	00d2      	lsls	r2, r2, #3
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	685c      	ldr	r4, [r3, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9306      	str	r3, [sp, #24]
 80073fe:	9407      	str	r4, [sp, #28]
 8007400:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007402:	2b00      	cmp	r3, #0
 8007404:	db00      	blt.n	8007408 <_dtoa_r+0x4a0>
 8007406:	e0e7      	b.n	80075d8 <_dtoa_r+0x670>
 8007408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd00      	ble.n	8007410 <_dtoa_r+0x4a8>
 800740e:	e0e3      	b.n	80075d8 <_dtoa_r+0x670>
 8007410:	d10c      	bne.n	800742c <_dtoa_r+0x4c4>
 8007412:	9806      	ldr	r0, [sp, #24]
 8007414:	9907      	ldr	r1, [sp, #28]
 8007416:	2200      	movs	r2, #0
 8007418:	4b9b      	ldr	r3, [pc, #620]	@ (8007688 <_dtoa_r+0x720>)
 800741a:	f7fa f931 	bl	8001680 <__aeabi_dmul>
 800741e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007422:	f7f9 f837 	bl	8000494 <__aeabi_dcmpge>
 8007426:	2800      	cmp	r0, #0
 8007428:	d100      	bne.n	800742c <_dtoa_r+0x4c4>
 800742a:	e286      	b.n	800793a <_dtoa_r+0x9d2>
 800742c:	2600      	movs	r6, #0
 800742e:	0037      	movs	r7, r6
 8007430:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007432:	9c08      	ldr	r4, [sp, #32]
 8007434:	43db      	mvns	r3, r3
 8007436:	930c      	str	r3, [sp, #48]	@ 0x30
 8007438:	9704      	str	r7, [sp, #16]
 800743a:	2700      	movs	r7, #0
 800743c:	0031      	movs	r1, r6
 800743e:	9803      	ldr	r0, [sp, #12]
 8007440:	f000 fccc 	bl	8007ddc <_Bfree>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d100      	bne.n	800744c <_dtoa_r+0x4e4>
 800744a:	e0bb      	b.n	80075c4 <_dtoa_r+0x65c>
 800744c:	2f00      	cmp	r7, #0
 800744e:	d005      	beq.n	800745c <_dtoa_r+0x4f4>
 8007450:	429f      	cmp	r7, r3
 8007452:	d003      	beq.n	800745c <_dtoa_r+0x4f4>
 8007454:	0039      	movs	r1, r7
 8007456:	9803      	ldr	r0, [sp, #12]
 8007458:	f000 fcc0 	bl	8007ddc <_Bfree>
 800745c:	9904      	ldr	r1, [sp, #16]
 800745e:	9803      	ldr	r0, [sp, #12]
 8007460:	f000 fcbc 	bl	8007ddc <_Bfree>
 8007464:	e0ae      	b.n	80075c4 <_dtoa_r+0x65c>
 8007466:	423d      	tst	r5, r7
 8007468:	d005      	beq.n	8007476 <_dtoa_r+0x50e>
 800746a:	6832      	ldr	r2, [r6, #0]
 800746c:	6873      	ldr	r3, [r6, #4]
 800746e:	f7fa f907 	bl	8001680 <__aeabi_dmul>
 8007472:	003b      	movs	r3, r7
 8007474:	3401      	adds	r4, #1
 8007476:	106d      	asrs	r5, r5, #1
 8007478:	3608      	adds	r6, #8
 800747a:	e75b      	b.n	8007334 <_dtoa_r+0x3cc>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007482:	e77f      	b.n	8007384 <_dtoa_r+0x41c>
 8007484:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007486:	4b7a      	ldr	r3, [pc, #488]	@ (8007670 <_dtoa_r+0x708>)
 8007488:	3a01      	subs	r2, #1
 800748a:	00d2      	lsls	r2, r2, #3
 800748c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800748e:	189b      	adds	r3, r3, r2
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2900      	cmp	r1, #0
 8007496:	d04c      	beq.n	8007532 <_dtoa_r+0x5ca>
 8007498:	2000      	movs	r0, #0
 800749a:	497c      	ldr	r1, [pc, #496]	@ (800768c <_dtoa_r+0x724>)
 800749c:	f7f9 fcb6 	bl	8000e0c <__aeabi_ddiv>
 80074a0:	0032      	movs	r2, r6
 80074a2:	003b      	movs	r3, r7
 80074a4:	f7fa fbd2 	bl	8001c4c <__aeabi_dsub>
 80074a8:	9a08      	ldr	r2, [sp, #32]
 80074aa:	0006      	movs	r6, r0
 80074ac:	4694      	mov	ip, r2
 80074ae:	000f      	movs	r7, r1
 80074b0:	9b08      	ldr	r3, [sp, #32]
 80074b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80074b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074b6:	4463      	add	r3, ip
 80074b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80074ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074be:	f7fa fff1 	bl	80024a4 <__aeabi_d2iz>
 80074c2:	0005      	movs	r5, r0
 80074c4:	f7fb f82a 	bl	800251c <__aeabi_i2d>
 80074c8:	0002      	movs	r2, r0
 80074ca:	000b      	movs	r3, r1
 80074cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074d0:	f7fa fbbc 	bl	8001c4c <__aeabi_dsub>
 80074d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074d6:	3530      	adds	r5, #48	@ 0x30
 80074d8:	1c5c      	adds	r4, r3, #1
 80074da:	701d      	strb	r5, [r3, #0]
 80074dc:	0032      	movs	r2, r6
 80074de:	003b      	movs	r3, r7
 80074e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80074e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80074e4:	f7f8 ffb8 	bl	8000458 <__aeabi_dcmplt>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d16b      	bne.n	80075c4 <_dtoa_r+0x65c>
 80074ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f0:	2000      	movs	r0, #0
 80074f2:	4961      	ldr	r1, [pc, #388]	@ (8007678 <_dtoa_r+0x710>)
 80074f4:	f7fa fbaa 	bl	8001c4c <__aeabi_dsub>
 80074f8:	0032      	movs	r2, r6
 80074fa:	003b      	movs	r3, r7
 80074fc:	f7f8 ffac 	bl	8000458 <__aeabi_dcmplt>
 8007500:	2800      	cmp	r0, #0
 8007502:	d000      	beq.n	8007506 <_dtoa_r+0x59e>
 8007504:	e0c6      	b.n	8007694 <_dtoa_r+0x72c>
 8007506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007508:	42a3      	cmp	r3, r4
 800750a:	d100      	bne.n	800750e <_dtoa_r+0x5a6>
 800750c:	e765      	b.n	80073da <_dtoa_r+0x472>
 800750e:	2200      	movs	r2, #0
 8007510:	0030      	movs	r0, r6
 8007512:	0039      	movs	r1, r7
 8007514:	4b59      	ldr	r3, [pc, #356]	@ (800767c <_dtoa_r+0x714>)
 8007516:	f7fa f8b3 	bl	8001680 <__aeabi_dmul>
 800751a:	2200      	movs	r2, #0
 800751c:	0006      	movs	r6, r0
 800751e:	000f      	movs	r7, r1
 8007520:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007522:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007524:	4b55      	ldr	r3, [pc, #340]	@ (800767c <_dtoa_r+0x714>)
 8007526:	f7fa f8ab 	bl	8001680 <__aeabi_dmul>
 800752a:	9416      	str	r4, [sp, #88]	@ 0x58
 800752c:	900a      	str	r0, [sp, #40]	@ 0x28
 800752e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007530:	e7c3      	b.n	80074ba <_dtoa_r+0x552>
 8007532:	0030      	movs	r0, r6
 8007534:	0039      	movs	r1, r7
 8007536:	f7fa f8a3 	bl	8001680 <__aeabi_dmul>
 800753a:	9d08      	ldr	r5, [sp, #32]
 800753c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800753e:	002b      	movs	r3, r5
 8007540:	4694      	mov	ip, r2
 8007542:	9016      	str	r0, [sp, #88]	@ 0x58
 8007544:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007546:	4463      	add	r3, ip
 8007548:	9319      	str	r3, [sp, #100]	@ 0x64
 800754a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800754c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800754e:	f7fa ffa9 	bl	80024a4 <__aeabi_d2iz>
 8007552:	0004      	movs	r4, r0
 8007554:	f7fa ffe2 	bl	800251c <__aeabi_i2d>
 8007558:	000b      	movs	r3, r1
 800755a:	0002      	movs	r2, r0
 800755c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800755e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007560:	f7fa fb74 	bl	8001c4c <__aeabi_dsub>
 8007564:	3430      	adds	r4, #48	@ 0x30
 8007566:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007568:	702c      	strb	r4, [r5, #0]
 800756a:	3501      	adds	r5, #1
 800756c:	0006      	movs	r6, r0
 800756e:	000f      	movs	r7, r1
 8007570:	42ab      	cmp	r3, r5
 8007572:	d12a      	bne.n	80075ca <_dtoa_r+0x662>
 8007574:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007576:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800757c:	469c      	mov	ip, r3
 800757e:	2200      	movs	r2, #0
 8007580:	4b42      	ldr	r3, [pc, #264]	@ (800768c <_dtoa_r+0x724>)
 8007582:	4464      	add	r4, ip
 8007584:	f7f9 f87c 	bl	8000680 <__aeabi_dadd>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	0030      	movs	r0, r6
 800758e:	0039      	movs	r1, r7
 8007590:	f7f8 ff76 	bl	8000480 <__aeabi_dcmpgt>
 8007594:	2800      	cmp	r0, #0
 8007596:	d000      	beq.n	800759a <_dtoa_r+0x632>
 8007598:	e07c      	b.n	8007694 <_dtoa_r+0x72c>
 800759a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800759c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800759e:	2000      	movs	r0, #0
 80075a0:	493a      	ldr	r1, [pc, #232]	@ (800768c <_dtoa_r+0x724>)
 80075a2:	f7fa fb53 	bl	8001c4c <__aeabi_dsub>
 80075a6:	0002      	movs	r2, r0
 80075a8:	000b      	movs	r3, r1
 80075aa:	0030      	movs	r0, r6
 80075ac:	0039      	movs	r1, r7
 80075ae:	f7f8 ff53 	bl	8000458 <__aeabi_dcmplt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d100      	bne.n	80075b8 <_dtoa_r+0x650>
 80075b6:	e710      	b.n	80073da <_dtoa_r+0x472>
 80075b8:	0023      	movs	r3, r4
 80075ba:	3c01      	subs	r4, #1
 80075bc:	7822      	ldrb	r2, [r4, #0]
 80075be:	2a30      	cmp	r2, #48	@ 0x30
 80075c0:	d0fa      	beq.n	80075b8 <_dtoa_r+0x650>
 80075c2:	001c      	movs	r4, r3
 80075c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	e042      	b.n	8007650 <_dtoa_r+0x6e8>
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b2b      	ldr	r3, [pc, #172]	@ (800767c <_dtoa_r+0x714>)
 80075ce:	f7fa f857 	bl	8001680 <__aeabi_dmul>
 80075d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80075d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075d6:	e7b8      	b.n	800754a <_dtoa_r+0x5e2>
 80075d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075da:	9d08      	ldr	r5, [sp, #32]
 80075dc:	3b01      	subs	r3, #1
 80075de:	195b      	adds	r3, r3, r5
 80075e0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80075e2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80075e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e6:	9a06      	ldr	r2, [sp, #24]
 80075e8:	9b07      	ldr	r3, [sp, #28]
 80075ea:	0030      	movs	r0, r6
 80075ec:	0039      	movs	r1, r7
 80075ee:	f7f9 fc0d 	bl	8000e0c <__aeabi_ddiv>
 80075f2:	f7fa ff57 	bl	80024a4 <__aeabi_d2iz>
 80075f6:	9009      	str	r0, [sp, #36]	@ 0x24
 80075f8:	f7fa ff90 	bl	800251c <__aeabi_i2d>
 80075fc:	9a06      	ldr	r2, [sp, #24]
 80075fe:	9b07      	ldr	r3, [sp, #28]
 8007600:	f7fa f83e 	bl	8001680 <__aeabi_dmul>
 8007604:	0002      	movs	r2, r0
 8007606:	000b      	movs	r3, r1
 8007608:	0030      	movs	r0, r6
 800760a:	0039      	movs	r1, r7
 800760c:	f7fa fb1e 	bl	8001c4c <__aeabi_dsub>
 8007610:	002b      	movs	r3, r5
 8007612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007614:	3501      	adds	r5, #1
 8007616:	3230      	adds	r2, #48	@ 0x30
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800761c:	002c      	movs	r4, r5
 800761e:	429a      	cmp	r2, r3
 8007620:	d14b      	bne.n	80076ba <_dtoa_r+0x752>
 8007622:	0002      	movs	r2, r0
 8007624:	000b      	movs	r3, r1
 8007626:	f7f9 f82b 	bl	8000680 <__aeabi_dadd>
 800762a:	9a06      	ldr	r2, [sp, #24]
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	0006      	movs	r6, r0
 8007630:	000f      	movs	r7, r1
 8007632:	f7f8 ff25 	bl	8000480 <__aeabi_dcmpgt>
 8007636:	2800      	cmp	r0, #0
 8007638:	d12a      	bne.n	8007690 <_dtoa_r+0x728>
 800763a:	9a06      	ldr	r2, [sp, #24]
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	0030      	movs	r0, r6
 8007640:	0039      	movs	r1, r7
 8007642:	f7f8 ff03 	bl	800044c <__aeabi_dcmpeq>
 8007646:	2800      	cmp	r0, #0
 8007648:	d002      	beq.n	8007650 <_dtoa_r+0x6e8>
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	07dd      	lsls	r5, r3, #31
 800764e:	d41f      	bmi.n	8007690 <_dtoa_r+0x728>
 8007650:	9905      	ldr	r1, [sp, #20]
 8007652:	9803      	ldr	r0, [sp, #12]
 8007654:	f000 fbc2 	bl	8007ddc <_Bfree>
 8007658:	2300      	movs	r3, #0
 800765a:	7023      	strb	r3, [r4, #0]
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007660:	3301      	adds	r3, #1
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007666:	2b00      	cmp	r3, #0
 8007668:	d100      	bne.n	800766c <_dtoa_r+0x704>
 800766a:	e4c7      	b.n	8006ffc <_dtoa_r+0x94>
 800766c:	601c      	str	r4, [r3, #0]
 800766e:	e4c5      	b.n	8006ffc <_dtoa_r+0x94>
 8007670:	08008f20 	.word	0x08008f20
 8007674:	08008ef8 	.word	0x08008ef8
 8007678:	3ff00000 	.word	0x3ff00000
 800767c:	40240000 	.word	0x40240000
 8007680:	401c0000 	.word	0x401c0000
 8007684:	fcc00000 	.word	0xfcc00000
 8007688:	40140000 	.word	0x40140000
 800768c:	3fe00000 	.word	0x3fe00000
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	930c      	str	r3, [sp, #48]	@ 0x30
 8007694:	0023      	movs	r3, r4
 8007696:	001c      	movs	r4, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	2a39      	cmp	r2, #57	@ 0x39
 800769e:	d108      	bne.n	80076b2 <_dtoa_r+0x74a>
 80076a0:	9a08      	ldr	r2, [sp, #32]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d1f7      	bne.n	8007696 <_dtoa_r+0x72e>
 80076a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076a8:	9908      	ldr	r1, [sp, #32]
 80076aa:	3201      	adds	r2, #1
 80076ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80076ae:	2230      	movs	r2, #48	@ 0x30
 80076b0:	700a      	strb	r2, [r1, #0]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	3201      	adds	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e784      	b.n	80075c4 <_dtoa_r+0x65c>
 80076ba:	2200      	movs	r2, #0
 80076bc:	4bc6      	ldr	r3, [pc, #792]	@ (80079d8 <_dtoa_r+0xa70>)
 80076be:	f7f9 ffdf 	bl	8001680 <__aeabi_dmul>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	0006      	movs	r6, r0
 80076c8:	000f      	movs	r7, r1
 80076ca:	f7f8 febf 	bl	800044c <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d089      	beq.n	80075e6 <_dtoa_r+0x67e>
 80076d2:	e7bd      	b.n	8007650 <_dtoa_r+0x6e8>
 80076d4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80076d6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80076d8:	9c06      	ldr	r4, [sp, #24]
 80076da:	2f00      	cmp	r7, #0
 80076dc:	d014      	beq.n	8007708 <_dtoa_r+0x7a0>
 80076de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076e0:	2a01      	cmp	r2, #1
 80076e2:	dd00      	ble.n	80076e6 <_dtoa_r+0x77e>
 80076e4:	e0e4      	b.n	80078b0 <_dtoa_r+0x948>
 80076e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d100      	bne.n	80076ee <_dtoa_r+0x786>
 80076ec:	e0da      	b.n	80078a4 <_dtoa_r+0x93c>
 80076ee:	4abb      	ldr	r2, [pc, #748]	@ (80079dc <_dtoa_r+0xa74>)
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	9a06      	ldr	r2, [sp, #24]
 80076f4:	2101      	movs	r1, #1
 80076f6:	18d2      	adds	r2, r2, r3
 80076f8:	9206      	str	r2, [sp, #24]
 80076fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076fc:	9803      	ldr	r0, [sp, #12]
 80076fe:	18d3      	adds	r3, r2, r3
 8007700:	930d      	str	r3, [sp, #52]	@ 0x34
 8007702:	f000 fc23 	bl	8007f4c <__i2b>
 8007706:	0007      	movs	r7, r0
 8007708:	2c00      	cmp	r4, #0
 800770a:	d00e      	beq.n	800772a <_dtoa_r+0x7c2>
 800770c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd0b      	ble.n	800772a <_dtoa_r+0x7c2>
 8007712:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007714:	0023      	movs	r3, r4
 8007716:	4294      	cmp	r4, r2
 8007718:	dd00      	ble.n	800771c <_dtoa_r+0x7b4>
 800771a:	0013      	movs	r3, r2
 800771c:	9a06      	ldr	r2, [sp, #24]
 800771e:	1ae4      	subs	r4, r4, r3
 8007720:	1ad2      	subs	r2, r2, r3
 8007722:	9206      	str	r2, [sp, #24]
 8007724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	930d      	str	r3, [sp, #52]	@ 0x34
 800772a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d021      	beq.n	8007774 <_dtoa_r+0x80c>
 8007730:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d100      	bne.n	8007738 <_dtoa_r+0x7d0>
 8007736:	e0d3      	b.n	80078e0 <_dtoa_r+0x978>
 8007738:	9e05      	ldr	r6, [sp, #20]
 800773a:	2d00      	cmp	r5, #0
 800773c:	d014      	beq.n	8007768 <_dtoa_r+0x800>
 800773e:	0039      	movs	r1, r7
 8007740:	002a      	movs	r2, r5
 8007742:	9803      	ldr	r0, [sp, #12]
 8007744:	f000 fcc4 	bl	80080d0 <__pow5mult>
 8007748:	9a05      	ldr	r2, [sp, #20]
 800774a:	0001      	movs	r1, r0
 800774c:	0007      	movs	r7, r0
 800774e:	9803      	ldr	r0, [sp, #12]
 8007750:	f000 fc14 	bl	8007f7c <__multiply>
 8007754:	0006      	movs	r6, r0
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	9803      	ldr	r0, [sp, #12]
 800775a:	f000 fb3f 	bl	8007ddc <_Bfree>
 800775e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007760:	9605      	str	r6, [sp, #20]
 8007762:	1b5b      	subs	r3, r3, r5
 8007764:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007766:	d005      	beq.n	8007774 <_dtoa_r+0x80c>
 8007768:	0031      	movs	r1, r6
 800776a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800776c:	9803      	ldr	r0, [sp, #12]
 800776e:	f000 fcaf 	bl	80080d0 <__pow5mult>
 8007772:	9005      	str	r0, [sp, #20]
 8007774:	2101      	movs	r1, #1
 8007776:	9803      	ldr	r0, [sp, #12]
 8007778:	f000 fbe8 	bl	8007f4c <__i2b>
 800777c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800777e:	0006      	movs	r6, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d100      	bne.n	8007786 <_dtoa_r+0x81e>
 8007784:	e1bc      	b.n	8007b00 <_dtoa_r+0xb98>
 8007786:	001a      	movs	r2, r3
 8007788:	0001      	movs	r1, r0
 800778a:	9803      	ldr	r0, [sp, #12]
 800778c:	f000 fca0 	bl	80080d0 <__pow5mult>
 8007790:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007792:	0006      	movs	r6, r0
 8007794:	2500      	movs	r5, #0
 8007796:	2b01      	cmp	r3, #1
 8007798:	dc16      	bgt.n	80077c8 <_dtoa_r+0x860>
 800779a:	2500      	movs	r5, #0
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	42ab      	cmp	r3, r5
 80077a0:	d10e      	bne.n	80077c0 <_dtoa_r+0x858>
 80077a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a4:	031b      	lsls	r3, r3, #12
 80077a6:	42ab      	cmp	r3, r5
 80077a8:	d10a      	bne.n	80077c0 <_dtoa_r+0x858>
 80077aa:	4b8d      	ldr	r3, [pc, #564]	@ (80079e0 <_dtoa_r+0xa78>)
 80077ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077ae:	4213      	tst	r3, r2
 80077b0:	d006      	beq.n	80077c0 <_dtoa_r+0x858>
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	3501      	adds	r5, #1
 80077b6:	3301      	adds	r3, #1
 80077b8:	9306      	str	r3, [sp, #24]
 80077ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077bc:	3301      	adds	r3, #1
 80077be:	930d      	str	r3, [sp, #52]	@ 0x34
 80077c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077c2:	2001      	movs	r0, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <_dtoa_r+0x872>
 80077c8:	6933      	ldr	r3, [r6, #16]
 80077ca:	3303      	adds	r3, #3
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	18f3      	adds	r3, r6, r3
 80077d0:	6858      	ldr	r0, [r3, #4]
 80077d2:	f000 fb6b 	bl	8007eac <__hi0bits>
 80077d6:	2320      	movs	r3, #32
 80077d8:	1a18      	subs	r0, r3, r0
 80077da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077dc:	1818      	adds	r0, r3, r0
 80077de:	0002      	movs	r2, r0
 80077e0:	231f      	movs	r3, #31
 80077e2:	401a      	ands	r2, r3
 80077e4:	4218      	tst	r0, r3
 80077e6:	d100      	bne.n	80077ea <_dtoa_r+0x882>
 80077e8:	e081      	b.n	80078ee <_dtoa_r+0x986>
 80077ea:	3301      	adds	r3, #1
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	dd79      	ble.n	80078e6 <_dtoa_r+0x97e>
 80077f2:	231c      	movs	r3, #28
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	9a06      	ldr	r2, [sp, #24]
 80077f8:	18e4      	adds	r4, r4, r3
 80077fa:	18d2      	adds	r2, r2, r3
 80077fc:	9206      	str	r2, [sp, #24]
 80077fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007800:	18d3      	adds	r3, r2, r3
 8007802:	930d      	str	r3, [sp, #52]	@ 0x34
 8007804:	9b06      	ldr	r3, [sp, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd05      	ble.n	8007816 <_dtoa_r+0x8ae>
 800780a:	001a      	movs	r2, r3
 800780c:	9905      	ldr	r1, [sp, #20]
 800780e:	9803      	ldr	r0, [sp, #12]
 8007810:	f000 fcba 	bl	8008188 <__lshift>
 8007814:	9005      	str	r0, [sp, #20]
 8007816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007818:	2b00      	cmp	r3, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x8c0>
 800781c:	0031      	movs	r1, r6
 800781e:	001a      	movs	r2, r3
 8007820:	9803      	ldr	r0, [sp, #12]
 8007822:	f000 fcb1 	bl	8008188 <__lshift>
 8007826:	0006      	movs	r6, r0
 8007828:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800782a:	2b00      	cmp	r3, #0
 800782c:	d061      	beq.n	80078f2 <_dtoa_r+0x98a>
 800782e:	0031      	movs	r1, r6
 8007830:	9805      	ldr	r0, [sp, #20]
 8007832:	f000 fd15 	bl	8008260 <__mcmp>
 8007836:	2800      	cmp	r0, #0
 8007838:	da5b      	bge.n	80078f2 <_dtoa_r+0x98a>
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	220a      	movs	r2, #10
 800783e:	3b01      	subs	r3, #1
 8007840:	930c      	str	r3, [sp, #48]	@ 0x30
 8007842:	9905      	ldr	r1, [sp, #20]
 8007844:	2300      	movs	r3, #0
 8007846:	9803      	ldr	r0, [sp, #12]
 8007848:	f000 faec 	bl	8007e24 <__multadd>
 800784c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800784e:	9005      	str	r0, [sp, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d100      	bne.n	8007856 <_dtoa_r+0x8ee>
 8007854:	e15b      	b.n	8007b0e <_dtoa_r+0xba6>
 8007856:	2300      	movs	r3, #0
 8007858:	0039      	movs	r1, r7
 800785a:	220a      	movs	r2, #10
 800785c:	9803      	ldr	r0, [sp, #12]
 800785e:	f000 fae1 	bl	8007e24 <__multadd>
 8007862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007864:	0007      	movs	r7, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	dc4d      	bgt.n	8007906 <_dtoa_r+0x99e>
 800786a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800786c:	2b02      	cmp	r3, #2
 800786e:	dd46      	ble.n	80078fe <_dtoa_r+0x996>
 8007870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007872:	2b00      	cmp	r3, #0
 8007874:	d000      	beq.n	8007878 <_dtoa_r+0x910>
 8007876:	e5db      	b.n	8007430 <_dtoa_r+0x4c8>
 8007878:	0031      	movs	r1, r6
 800787a:	2205      	movs	r2, #5
 800787c:	9803      	ldr	r0, [sp, #12]
 800787e:	f000 fad1 	bl	8007e24 <__multadd>
 8007882:	0006      	movs	r6, r0
 8007884:	0001      	movs	r1, r0
 8007886:	9805      	ldr	r0, [sp, #20]
 8007888:	f000 fcea 	bl	8008260 <__mcmp>
 800788c:	2800      	cmp	r0, #0
 800788e:	dc00      	bgt.n	8007892 <_dtoa_r+0x92a>
 8007890:	e5ce      	b.n	8007430 <_dtoa_r+0x4c8>
 8007892:	9b08      	ldr	r3, [sp, #32]
 8007894:	9a08      	ldr	r2, [sp, #32]
 8007896:	1c5c      	adds	r4, r3, #1
 8007898:	2331      	movs	r3, #49	@ 0x31
 800789a:	7013      	strb	r3, [r2, #0]
 800789c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800789e:	3301      	adds	r3, #1
 80078a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80078a2:	e5c9      	b.n	8007438 <_dtoa_r+0x4d0>
 80078a4:	2336      	movs	r3, #54	@ 0x36
 80078a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	9c06      	ldr	r4, [sp, #24]
 80078ae:	e720      	b.n	80076f2 <_dtoa_r+0x78a>
 80078b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b2:	1e5d      	subs	r5, r3, #1
 80078b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b6:	42ab      	cmp	r3, r5
 80078b8:	db08      	blt.n	80078cc <_dtoa_r+0x964>
 80078ba:	1b5d      	subs	r5, r3, r5
 80078bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	daf4      	bge.n	80078ac <_dtoa_r+0x944>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c6:	1a9c      	subs	r4, r3, r2
 80078c8:	2300      	movs	r3, #0
 80078ca:	e712      	b.n	80076f2 <_dtoa_r+0x78a>
 80078cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078d0:	1aeb      	subs	r3, r5, r3
 80078d2:	18d3      	adds	r3, r2, r3
 80078d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80078d6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80078d8:	9c06      	ldr	r4, [sp, #24]
 80078da:	2500      	movs	r5, #0
 80078dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078de:	e708      	b.n	80076f2 <_dtoa_r+0x78a>
 80078e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078e2:	9905      	ldr	r1, [sp, #20]
 80078e4:	e742      	b.n	800776c <_dtoa_r+0x804>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d08c      	beq.n	8007804 <_dtoa_r+0x89c>
 80078ea:	331c      	adds	r3, #28
 80078ec:	e783      	b.n	80077f6 <_dtoa_r+0x88e>
 80078ee:	0013      	movs	r3, r2
 80078f0:	e7fb      	b.n	80078ea <_dtoa_r+0x982>
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	ddb5      	ble.n	800786a <_dtoa_r+0x902>
 80078fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d100      	bne.n	8007906 <_dtoa_r+0x99e>
 8007904:	e107      	b.n	8007b16 <_dtoa_r+0xbae>
 8007906:	2c00      	cmp	r4, #0
 8007908:	dd05      	ble.n	8007916 <_dtoa_r+0x9ae>
 800790a:	0039      	movs	r1, r7
 800790c:	0022      	movs	r2, r4
 800790e:	9803      	ldr	r0, [sp, #12]
 8007910:	f000 fc3a 	bl	8008188 <__lshift>
 8007914:	0007      	movs	r7, r0
 8007916:	9704      	str	r7, [sp, #16]
 8007918:	2d00      	cmp	r5, #0
 800791a:	d020      	beq.n	800795e <_dtoa_r+0x9f6>
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	9803      	ldr	r0, [sp, #12]
 8007920:	f000 fa18 	bl	8007d54 <_Balloc>
 8007924:	1e04      	subs	r4, r0, #0
 8007926:	d10c      	bne.n	8007942 <_dtoa_r+0x9da>
 8007928:	0022      	movs	r2, r4
 800792a:	4b2e      	ldr	r3, [pc, #184]	@ (80079e4 <_dtoa_r+0xa7c>)
 800792c:	482e      	ldr	r0, [pc, #184]	@ (80079e8 <_dtoa_r+0xa80>)
 800792e:	492f      	ldr	r1, [pc, #188]	@ (80079ec <_dtoa_r+0xa84>)
 8007930:	f7ff fb2f 	bl	8006f92 <_dtoa_r+0x2a>
 8007934:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007936:	0037      	movs	r7, r6
 8007938:	e7ab      	b.n	8007892 <_dtoa_r+0x92a>
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800793e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007940:	e7f9      	b.n	8007936 <_dtoa_r+0x9ce>
 8007942:	0039      	movs	r1, r7
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	310c      	adds	r1, #12
 8007948:	3202      	adds	r2, #2
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	300c      	adds	r0, #12
 800794e:	f000 fe61 	bl	8008614 <memcpy>
 8007952:	2201      	movs	r2, #1
 8007954:	0021      	movs	r1, r4
 8007956:	9803      	ldr	r0, [sp, #12]
 8007958:	f000 fc16 	bl	8008188 <__lshift>
 800795c:	9004      	str	r0, [sp, #16]
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	3b01      	subs	r3, #1
 8007966:	189b      	adds	r3, r3, r2
 8007968:	2201      	movs	r2, #1
 800796a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	4013      	ands	r3, r2
 8007970:	930e      	str	r3, [sp, #56]	@ 0x38
 8007972:	0031      	movs	r1, r6
 8007974:	9805      	ldr	r0, [sp, #20]
 8007976:	f7ff fa71 	bl	8006e5c <quorem>
 800797a:	0039      	movs	r1, r7
 800797c:	0005      	movs	r5, r0
 800797e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007980:	9805      	ldr	r0, [sp, #20]
 8007982:	f000 fc6d 	bl	8008260 <__mcmp>
 8007986:	9a04      	ldr	r2, [sp, #16]
 8007988:	900d      	str	r0, [sp, #52]	@ 0x34
 800798a:	0031      	movs	r1, r6
 800798c:	9803      	ldr	r0, [sp, #12]
 800798e:	f000 fc83 	bl	8008298 <__mdiff>
 8007992:	2201      	movs	r2, #1
 8007994:	68c3      	ldr	r3, [r0, #12]
 8007996:	0004      	movs	r4, r0
 8007998:	3530      	adds	r5, #48	@ 0x30
 800799a:	9209      	str	r2, [sp, #36]	@ 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <_dtoa_r+0xa42>
 80079a0:	0001      	movs	r1, r0
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	f000 fc5c 	bl	8008260 <__mcmp>
 80079a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80079aa:	0021      	movs	r1, r4
 80079ac:	9803      	ldr	r0, [sp, #12]
 80079ae:	f000 fa15 	bl	8007ddc <_Bfree>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079b6:	1c5c      	adds	r4, r3, #1
 80079b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ba:	4313      	orrs	r3, r2
 80079bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079be:	4313      	orrs	r3, r2
 80079c0:	d116      	bne.n	80079f0 <_dtoa_r+0xa88>
 80079c2:	2d39      	cmp	r5, #57	@ 0x39
 80079c4:	d02f      	beq.n	8007a26 <_dtoa_r+0xabe>
 80079c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dd01      	ble.n	80079d0 <_dtoa_r+0xa68>
 80079cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80079ce:	3531      	adds	r5, #49	@ 0x31
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	701d      	strb	r5, [r3, #0]
 80079d4:	e532      	b.n	800743c <_dtoa_r+0x4d4>
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	40240000 	.word	0x40240000
 80079dc:	00000433 	.word	0x00000433
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	08008e28 	.word	0x08008e28
 80079e8:	08008dd0 	.word	0x08008dd0
 80079ec:	000002ef 	.word	0x000002ef
 80079f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	db04      	blt.n	8007a00 <_dtoa_r+0xa98>
 80079f6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079f8:	4313      	orrs	r3, r2
 80079fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d11e      	bne.n	8007a3e <_dtoa_r+0xad6>
 8007a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dde4      	ble.n	80079d0 <_dtoa_r+0xa68>
 8007a06:	9905      	ldr	r1, [sp, #20]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	9803      	ldr	r0, [sp, #12]
 8007a0c:	f000 fbbc 	bl	8008188 <__lshift>
 8007a10:	0031      	movs	r1, r6
 8007a12:	9005      	str	r0, [sp, #20]
 8007a14:	f000 fc24 	bl	8008260 <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dc02      	bgt.n	8007a22 <_dtoa_r+0xaba>
 8007a1c:	d1d8      	bne.n	80079d0 <_dtoa_r+0xa68>
 8007a1e:	07eb      	lsls	r3, r5, #31
 8007a20:	d5d6      	bpl.n	80079d0 <_dtoa_r+0xa68>
 8007a22:	2d39      	cmp	r5, #57	@ 0x39
 8007a24:	d1d2      	bne.n	80079cc <_dtoa_r+0xa64>
 8007a26:	2339      	movs	r3, #57	@ 0x39
 8007a28:	9a06      	ldr	r2, [sp, #24]
 8007a2a:	7013      	strb	r3, [r2, #0]
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	001c      	movs	r4, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	2a39      	cmp	r2, #57	@ 0x39
 8007a36:	d050      	beq.n	8007ada <_dtoa_r+0xb72>
 8007a38:	3201      	adds	r2, #1
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e4fe      	b.n	800743c <_dtoa_r+0x4d4>
 8007a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd03      	ble.n	8007a4c <_dtoa_r+0xae4>
 8007a44:	2d39      	cmp	r5, #57	@ 0x39
 8007a46:	d0ee      	beq.n	8007a26 <_dtoa_r+0xabe>
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7c1      	b.n	80079d0 <_dtoa_r+0xa68>
 8007a4c:	9b06      	ldr	r3, [sp, #24]
 8007a4e:	9a06      	ldr	r2, [sp, #24]
 8007a50:	701d      	strb	r5, [r3, #0]
 8007a52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d02b      	beq.n	8007ab0 <_dtoa_r+0xb48>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	9905      	ldr	r1, [sp, #20]
 8007a5e:	9803      	ldr	r0, [sp, #12]
 8007a60:	f000 f9e0 	bl	8007e24 <__multadd>
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	9005      	str	r0, [sp, #20]
 8007a68:	429f      	cmp	r7, r3
 8007a6a:	d109      	bne.n	8007a80 <_dtoa_r+0xb18>
 8007a6c:	0039      	movs	r1, r7
 8007a6e:	2300      	movs	r3, #0
 8007a70:	220a      	movs	r2, #10
 8007a72:	9803      	ldr	r0, [sp, #12]
 8007a74:	f000 f9d6 	bl	8007e24 <__multadd>
 8007a78:	0007      	movs	r7, r0
 8007a7a:	9004      	str	r0, [sp, #16]
 8007a7c:	9406      	str	r4, [sp, #24]
 8007a7e:	e778      	b.n	8007972 <_dtoa_r+0xa0a>
 8007a80:	0039      	movs	r1, r7
 8007a82:	2300      	movs	r3, #0
 8007a84:	220a      	movs	r2, #10
 8007a86:	9803      	ldr	r0, [sp, #12]
 8007a88:	f000 f9cc 	bl	8007e24 <__multadd>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	0007      	movs	r7, r0
 8007a90:	220a      	movs	r2, #10
 8007a92:	9904      	ldr	r1, [sp, #16]
 8007a94:	9803      	ldr	r0, [sp, #12]
 8007a96:	f000 f9c5 	bl	8007e24 <__multadd>
 8007a9a:	9004      	str	r0, [sp, #16]
 8007a9c:	e7ee      	b.n	8007a7c <_dtoa_r+0xb14>
 8007a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa0:	2401      	movs	r4, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dd00      	ble.n	8007aa8 <_dtoa_r+0xb40>
 8007aa6:	001c      	movs	r4, r3
 8007aa8:	9704      	str	r7, [sp, #16]
 8007aaa:	2700      	movs	r7, #0
 8007aac:	9b08      	ldr	r3, [sp, #32]
 8007aae:	191c      	adds	r4, r3, r4
 8007ab0:	9905      	ldr	r1, [sp, #20]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	9803      	ldr	r0, [sp, #12]
 8007ab6:	f000 fb67 	bl	8008188 <__lshift>
 8007aba:	0031      	movs	r1, r6
 8007abc:	9005      	str	r0, [sp, #20]
 8007abe:	f000 fbcf 	bl	8008260 <__mcmp>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	dcb2      	bgt.n	8007a2c <_dtoa_r+0xac4>
 8007ac6:	d101      	bne.n	8007acc <_dtoa_r+0xb64>
 8007ac8:	07ed      	lsls	r5, r5, #31
 8007aca:	d4af      	bmi.n	8007a2c <_dtoa_r+0xac4>
 8007acc:	0023      	movs	r3, r4
 8007ace:	001c      	movs	r4, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	2a30      	cmp	r2, #48	@ 0x30
 8007ad6:	d0fa      	beq.n	8007ace <_dtoa_r+0xb66>
 8007ad8:	e4b0      	b.n	800743c <_dtoa_r+0x4d4>
 8007ada:	9a08      	ldr	r2, [sp, #32]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d1a6      	bne.n	8007a2e <_dtoa_r+0xac6>
 8007ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ae6:	2331      	movs	r3, #49	@ 0x31
 8007ae8:	7013      	strb	r3, [r2, #0]
 8007aea:	e4a7      	b.n	800743c <_dtoa_r+0x4d4>
 8007aec:	4b14      	ldr	r3, [pc, #80]	@ (8007b40 <_dtoa_r+0xbd8>)
 8007aee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007af0:	9308      	str	r3, [sp, #32]
 8007af2:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <_dtoa_r+0xbdc>)
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d001      	beq.n	8007afc <_dtoa_r+0xb94>
 8007af8:	f7ff fa7e 	bl	8006ff8 <_dtoa_r+0x90>
 8007afc:	f7ff fa7e 	bl	8006ffc <_dtoa_r+0x94>
 8007b00:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	dc00      	bgt.n	8007b08 <_dtoa_r+0xba0>
 8007b06:	e648      	b.n	800779a <_dtoa_r+0x832>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007b0c:	e665      	b.n	80077da <_dtoa_r+0x872>
 8007b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc00      	bgt.n	8007b16 <_dtoa_r+0xbae>
 8007b14:	e6a9      	b.n	800786a <_dtoa_r+0x902>
 8007b16:	2400      	movs	r4, #0
 8007b18:	0031      	movs	r1, r6
 8007b1a:	9805      	ldr	r0, [sp, #20]
 8007b1c:	f7ff f99e 	bl	8006e5c <quorem>
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	3030      	adds	r0, #48	@ 0x30
 8007b24:	5518      	strb	r0, [r3, r4]
 8007b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b28:	3401      	adds	r4, #1
 8007b2a:	0005      	movs	r5, r0
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	ddb6      	ble.n	8007a9e <_dtoa_r+0xb36>
 8007b30:	2300      	movs	r3, #0
 8007b32:	220a      	movs	r2, #10
 8007b34:	9905      	ldr	r1, [sp, #20]
 8007b36:	9803      	ldr	r0, [sp, #12]
 8007b38:	f000 f974 	bl	8007e24 <__multadd>
 8007b3c:	9005      	str	r0, [sp, #20]
 8007b3e:	e7eb      	b.n	8007b18 <_dtoa_r+0xbb0>
 8007b40:	08008dac 	.word	0x08008dac
 8007b44:	08008db4 	.word	0x08008db4

08007b48 <_free_r>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	0005      	movs	r5, r0
 8007b4c:	1e0c      	subs	r4, r1, #0
 8007b4e:	d010      	beq.n	8007b72 <_free_r+0x2a>
 8007b50:	3c04      	subs	r4, #4
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da00      	bge.n	8007b5a <_free_r+0x12>
 8007b58:	18e4      	adds	r4, r4, r3
 8007b5a:	0028      	movs	r0, r5
 8007b5c:	f000 f8ea 	bl	8007d34 <__malloc_lock>
 8007b60:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd8 <_free_r+0x90>)
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d105      	bne.n	8007b74 <_free_r+0x2c>
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	6014      	str	r4, [r2, #0]
 8007b6c:	0028      	movs	r0, r5
 8007b6e:	f000 f8e9 	bl	8007d44 <__malloc_unlock>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d908      	bls.n	8007b8a <_free_r+0x42>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	1821      	adds	r1, r4, r0
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	d1f3      	bne.n	8007b68 <_free_r+0x20>
 8007b80:	6819      	ldr	r1, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	1809      	adds	r1, r1, r0
 8007b86:	6021      	str	r1, [r4, #0]
 8007b88:	e7ee      	b.n	8007b68 <_free_r+0x20>
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <_free_r+0x4e>
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	d9f9      	bls.n	8007b8a <_free_r+0x42>
 8007b96:	6811      	ldr	r1, [r2, #0]
 8007b98:	1850      	adds	r0, r2, r1
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	d10b      	bne.n	8007bb6 <_free_r+0x6e>
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	1809      	adds	r1, r1, r0
 8007ba2:	1850      	adds	r0, r2, r1
 8007ba4:	6011      	str	r1, [r2, #0]
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	d1e0      	bne.n	8007b6c <_free_r+0x24>
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	1841      	adds	r1, r0, r1
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	6053      	str	r3, [r2, #4]
 8007bb4:	e7da      	b.n	8007b6c <_free_r+0x24>
 8007bb6:	42a0      	cmp	r0, r4
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x78>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	e7d5      	b.n	8007b6c <_free_r+0x24>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	d103      	bne.n	8007bd0 <_free_r+0x88>
 8007bc8:	6819      	ldr	r1, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	1809      	adds	r1, r1, r0
 8007bce:	6021      	str	r1, [r4, #0]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6054      	str	r4, [r2, #4]
 8007bd4:	e7ca      	b.n	8007b6c <_free_r+0x24>
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	20000488 	.word	0x20000488

08007bdc <malloc>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4b03      	ldr	r3, [pc, #12]	@ (8007bec <malloc+0x10>)
 8007be0:	0001      	movs	r1, r0
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	f000 f826 	bl	8007c34 <_malloc_r>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	46c0      	nop			@ (mov r8, r8)
 8007bec:	20000020 	.word	0x20000020

08007bf0 <sbrk_aligned>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8007c30 <sbrk_aligned+0x40>)
 8007bf4:	000d      	movs	r5, r1
 8007bf6:	6831      	ldr	r1, [r6, #0]
 8007bf8:	0004      	movs	r4, r0
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d102      	bne.n	8007c04 <sbrk_aligned+0x14>
 8007bfe:	f000 fcf7 	bl	80085f0 <_sbrk_r>
 8007c02:	6030      	str	r0, [r6, #0]
 8007c04:	0029      	movs	r1, r5
 8007c06:	0020      	movs	r0, r4
 8007c08:	f000 fcf2 	bl	80085f0 <_sbrk_r>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d103      	bne.n	8007c18 <sbrk_aligned+0x28>
 8007c10:	2501      	movs	r5, #1
 8007c12:	426d      	negs	r5, r5
 8007c14:	0028      	movs	r0, r5
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	2303      	movs	r3, #3
 8007c1a:	1cc5      	adds	r5, r0, #3
 8007c1c:	439d      	bics	r5, r3
 8007c1e:	42a8      	cmp	r0, r5
 8007c20:	d0f8      	beq.n	8007c14 <sbrk_aligned+0x24>
 8007c22:	1a29      	subs	r1, r5, r0
 8007c24:	0020      	movs	r0, r4
 8007c26:	f000 fce3 	bl	80085f0 <_sbrk_r>
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d1f2      	bne.n	8007c14 <sbrk_aligned+0x24>
 8007c2e:	e7ef      	b.n	8007c10 <sbrk_aligned+0x20>
 8007c30:	20000484 	.word	0x20000484

08007c34 <_malloc_r>:
 8007c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c36:	2203      	movs	r2, #3
 8007c38:	1ccb      	adds	r3, r1, #3
 8007c3a:	4393      	bics	r3, r2
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	0005      	movs	r5, r0
 8007c40:	001f      	movs	r7, r3
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	d234      	bcs.n	8007cb0 <_malloc_r+0x7c>
 8007c46:	270c      	movs	r7, #12
 8007c48:	42b9      	cmp	r1, r7
 8007c4a:	d833      	bhi.n	8007cb4 <_malloc_r+0x80>
 8007c4c:	0028      	movs	r0, r5
 8007c4e:	f000 f871 	bl	8007d34 <__malloc_lock>
 8007c52:	4e37      	ldr	r6, [pc, #220]	@ (8007d30 <_malloc_r+0xfc>)
 8007c54:	6833      	ldr	r3, [r6, #0]
 8007c56:	001c      	movs	r4, r3
 8007c58:	2c00      	cmp	r4, #0
 8007c5a:	d12f      	bne.n	8007cbc <_malloc_r+0x88>
 8007c5c:	0039      	movs	r1, r7
 8007c5e:	0028      	movs	r0, r5
 8007c60:	f7ff ffc6 	bl	8007bf0 <sbrk_aligned>
 8007c64:	0004      	movs	r4, r0
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d15f      	bne.n	8007d2a <_malloc_r+0xf6>
 8007c6a:	6834      	ldr	r4, [r6, #0]
 8007c6c:	9400      	str	r4, [sp, #0]
 8007c6e:	9b00      	ldr	r3, [sp, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d14a      	bne.n	8007d0a <_malloc_r+0xd6>
 8007c74:	2c00      	cmp	r4, #0
 8007c76:	d052      	beq.n	8007d1e <_malloc_r+0xea>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	0028      	movs	r0, r5
 8007c7c:	18e3      	adds	r3, r4, r3
 8007c7e:	9900      	ldr	r1, [sp, #0]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	f000 fcb5 	bl	80085f0 <_sbrk_r>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	d148      	bne.n	8007d1e <_malloc_r+0xea>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	0028      	movs	r0, r5
 8007c90:	1aff      	subs	r7, r7, r3
 8007c92:	0039      	movs	r1, r7
 8007c94:	f7ff ffac 	bl	8007bf0 <sbrk_aligned>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d040      	beq.n	8007d1e <_malloc_r+0xea>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	19db      	adds	r3, r3, r7
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	6833      	ldr	r3, [r6, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	d133      	bne.n	8007d12 <_malloc_r+0xde>
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	6033      	str	r3, [r6, #0]
 8007cae:	e019      	b.n	8007ce4 <_malloc_r+0xb0>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dac9      	bge.n	8007c48 <_malloc_r+0x14>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cbc:	6821      	ldr	r1, [r4, #0]
 8007cbe:	1bc9      	subs	r1, r1, r7
 8007cc0:	d420      	bmi.n	8007d04 <_malloc_r+0xd0>
 8007cc2:	290b      	cmp	r1, #11
 8007cc4:	d90a      	bls.n	8007cdc <_malloc_r+0xa8>
 8007cc6:	19e2      	adds	r2, r4, r7
 8007cc8:	6027      	str	r7, [r4, #0]
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	d104      	bne.n	8007cd8 <_malloc_r+0xa4>
 8007cce:	6032      	str	r2, [r6, #0]
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	6011      	str	r1, [r2, #0]
 8007cd4:	6053      	str	r3, [r2, #4]
 8007cd6:	e005      	b.n	8007ce4 <_malloc_r+0xb0>
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	e7f9      	b.n	8007cd0 <_malloc_r+0x9c>
 8007cdc:	6862      	ldr	r2, [r4, #4]
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	d10e      	bne.n	8007d00 <_malloc_r+0xcc>
 8007ce2:	6032      	str	r2, [r6, #0]
 8007ce4:	0028      	movs	r0, r5
 8007ce6:	f000 f82d 	bl	8007d44 <__malloc_unlock>
 8007cea:	0020      	movs	r0, r4
 8007cec:	2207      	movs	r2, #7
 8007cee:	300b      	adds	r0, #11
 8007cf0:	1d23      	adds	r3, r4, #4
 8007cf2:	4390      	bics	r0, r2
 8007cf4:	1ac2      	subs	r2, r0, r3
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	d0df      	beq.n	8007cba <_malloc_r+0x86>
 8007cfa:	1a1b      	subs	r3, r3, r0
 8007cfc:	50a3      	str	r3, [r4, r2]
 8007cfe:	e7dc      	b.n	8007cba <_malloc_r+0x86>
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	e7ef      	b.n	8007ce4 <_malloc_r+0xb0>
 8007d04:	0023      	movs	r3, r4
 8007d06:	6864      	ldr	r4, [r4, #4]
 8007d08:	e7a6      	b.n	8007c58 <_malloc_r+0x24>
 8007d0a:	9c00      	ldr	r4, [sp, #0]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	e7ad      	b.n	8007c6e <_malloc_r+0x3a>
 8007d12:	001a      	movs	r2, r3
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	d1fb      	bne.n	8007d12 <_malloc_r+0xde>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e7da      	b.n	8007cd4 <_malloc_r+0xa0>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	0028      	movs	r0, r5
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f000 f80e 	bl	8007d44 <__malloc_unlock>
 8007d28:	e7c6      	b.n	8007cb8 <_malloc_r+0x84>
 8007d2a:	6007      	str	r7, [r0, #0]
 8007d2c:	e7da      	b.n	8007ce4 <_malloc_r+0xb0>
 8007d2e:	46c0      	nop			@ (mov r8, r8)
 8007d30:	20000488 	.word	0x20000488

08007d34 <__malloc_lock>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4802      	ldr	r0, [pc, #8]	@ (8007d40 <__malloc_lock+0xc>)
 8007d38:	f7ff f883 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	46c0      	nop			@ (mov r8, r8)
 8007d40:	20000480 	.word	0x20000480

08007d44 <__malloc_unlock>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4802      	ldr	r0, [pc, #8]	@ (8007d50 <__malloc_unlock+0xc>)
 8007d48:	f7ff f87c 	bl	8006e44 <__retarget_lock_release_recursive>
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	20000480 	.word	0x20000480

08007d54 <_Balloc>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	69c5      	ldr	r5, [r0, #28]
 8007d58:	0006      	movs	r6, r0
 8007d5a:	000c      	movs	r4, r1
 8007d5c:	2d00      	cmp	r5, #0
 8007d5e:	d10e      	bne.n	8007d7e <_Balloc+0x2a>
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff ff3b 	bl	8007bdc <malloc>
 8007d66:	1e02      	subs	r2, r0, #0
 8007d68:	61f0      	str	r0, [r6, #28]
 8007d6a:	d104      	bne.n	8007d76 <_Balloc+0x22>
 8007d6c:	216b      	movs	r1, #107	@ 0x6b
 8007d6e:	4b19      	ldr	r3, [pc, #100]	@ (8007dd4 <_Balloc+0x80>)
 8007d70:	4819      	ldr	r0, [pc, #100]	@ (8007dd8 <_Balloc+0x84>)
 8007d72:	f000 fc59 	bl	8008628 <__assert_func>
 8007d76:	6045      	str	r5, [r0, #4]
 8007d78:	6085      	str	r5, [r0, #8]
 8007d7a:	6005      	str	r5, [r0, #0]
 8007d7c:	60c5      	str	r5, [r0, #12]
 8007d7e:	69f5      	ldr	r5, [r6, #28]
 8007d80:	68eb      	ldr	r3, [r5, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d013      	beq.n	8007dae <_Balloc+0x5a>
 8007d86:	69f3      	ldr	r3, [r6, #28]
 8007d88:	00a2      	lsls	r2, r4, #2
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d118      	bne.n	8007dc6 <_Balloc+0x72>
 8007d94:	2101      	movs	r1, #1
 8007d96:	000d      	movs	r5, r1
 8007d98:	40a5      	lsls	r5, r4
 8007d9a:	1d6a      	adds	r2, r5, #5
 8007d9c:	0030      	movs	r0, r6
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	f000 fc60 	bl	8008664 <_calloc_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d00c      	beq.n	8007dc2 <_Balloc+0x6e>
 8007da8:	6044      	str	r4, [r0, #4]
 8007daa:	6085      	str	r5, [r0, #8]
 8007dac:	e00d      	b.n	8007dca <_Balloc+0x76>
 8007dae:	2221      	movs	r2, #33	@ 0x21
 8007db0:	2104      	movs	r1, #4
 8007db2:	0030      	movs	r0, r6
 8007db4:	f000 fc56 	bl	8008664 <_calloc_r>
 8007db8:	69f3      	ldr	r3, [r6, #28]
 8007dba:	60e8      	str	r0, [r5, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e1      	bne.n	8007d86 <_Balloc+0x32>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	6802      	ldr	r2, [r0, #0]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	60c3      	str	r3, [r0, #12]
 8007dd0:	e7f8      	b.n	8007dc4 <_Balloc+0x70>
 8007dd2:	46c0      	nop			@ (mov r8, r8)
 8007dd4:	08008db9 	.word	0x08008db9
 8007dd8:	08008e39 	.word	0x08008e39

08007ddc <_Bfree>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	69c6      	ldr	r6, [r0, #28]
 8007de0:	0005      	movs	r5, r0
 8007de2:	000c      	movs	r4, r1
 8007de4:	2e00      	cmp	r6, #0
 8007de6:	d10e      	bne.n	8007e06 <_Bfree+0x2a>
 8007de8:	2010      	movs	r0, #16
 8007dea:	f7ff fef7 	bl	8007bdc <malloc>
 8007dee:	1e02      	subs	r2, r0, #0
 8007df0:	61e8      	str	r0, [r5, #28]
 8007df2:	d104      	bne.n	8007dfe <_Bfree+0x22>
 8007df4:	218f      	movs	r1, #143	@ 0x8f
 8007df6:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <_Bfree+0x40>)
 8007df8:	4809      	ldr	r0, [pc, #36]	@ (8007e20 <_Bfree+0x44>)
 8007dfa:	f000 fc15 	bl	8008628 <__assert_func>
 8007dfe:	6046      	str	r6, [r0, #4]
 8007e00:	6086      	str	r6, [r0, #8]
 8007e02:	6006      	str	r6, [r0, #0]
 8007e04:	60c6      	str	r6, [r0, #12]
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d007      	beq.n	8007e1a <_Bfree+0x3e>
 8007e0a:	69eb      	ldr	r3, [r5, #28]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	0092      	lsls	r2, r2, #2
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	601c      	str	r4, [r3, #0]
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	08008db9 	.word	0x08008db9
 8007e20:	08008e39 	.word	0x08008e39

08007e24 <__multadd>:
 8007e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e26:	000f      	movs	r7, r1
 8007e28:	9001      	str	r0, [sp, #4]
 8007e2a:	000c      	movs	r4, r1
 8007e2c:	001e      	movs	r6, r3
 8007e2e:	2000      	movs	r0, #0
 8007e30:	690d      	ldr	r5, [r1, #16]
 8007e32:	3714      	adds	r7, #20
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	3001      	adds	r0, #1
 8007e38:	b299      	uxth	r1, r3
 8007e3a:	4351      	muls	r1, r2
 8007e3c:	0c1b      	lsrs	r3, r3, #16
 8007e3e:	4353      	muls	r3, r2
 8007e40:	1989      	adds	r1, r1, r6
 8007e42:	0c0e      	lsrs	r6, r1, #16
 8007e44:	199b      	adds	r3, r3, r6
 8007e46:	0c1e      	lsrs	r6, r3, #16
 8007e48:	b289      	uxth	r1, r1
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	185b      	adds	r3, r3, r1
 8007e4e:	c708      	stmia	r7!, {r3}
 8007e50:	4285      	cmp	r5, r0
 8007e52:	dcef      	bgt.n	8007e34 <__multadd+0x10>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	d022      	beq.n	8007e9e <__multadd+0x7a>
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	42ab      	cmp	r3, r5
 8007e5c:	dc19      	bgt.n	8007e92 <__multadd+0x6e>
 8007e5e:	6861      	ldr	r1, [r4, #4]
 8007e60:	9801      	ldr	r0, [sp, #4]
 8007e62:	3101      	adds	r1, #1
 8007e64:	f7ff ff76 	bl	8007d54 <_Balloc>
 8007e68:	1e07      	subs	r7, r0, #0
 8007e6a:	d105      	bne.n	8007e78 <__multadd+0x54>
 8007e6c:	003a      	movs	r2, r7
 8007e6e:	21ba      	movs	r1, #186	@ 0xba
 8007e70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <__multadd+0x80>)
 8007e72:	480d      	ldr	r0, [pc, #52]	@ (8007ea8 <__multadd+0x84>)
 8007e74:	f000 fbd8 	bl	8008628 <__assert_func>
 8007e78:	0021      	movs	r1, r4
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	310c      	adds	r1, #12
 8007e7e:	3202      	adds	r2, #2
 8007e80:	0092      	lsls	r2, r2, #2
 8007e82:	300c      	adds	r0, #12
 8007e84:	f000 fbc6 	bl	8008614 <memcpy>
 8007e88:	0021      	movs	r1, r4
 8007e8a:	9801      	ldr	r0, [sp, #4]
 8007e8c:	f7ff ffa6 	bl	8007ddc <_Bfree>
 8007e90:	003c      	movs	r4, r7
 8007e92:	1d2b      	adds	r3, r5, #4
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	18e3      	adds	r3, r4, r3
 8007e98:	3501      	adds	r5, #1
 8007e9a:	605e      	str	r6, [r3, #4]
 8007e9c:	6125      	str	r5, [r4, #16]
 8007e9e:	0020      	movs	r0, r4
 8007ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ea2:	46c0      	nop			@ (mov r8, r8)
 8007ea4:	08008e28 	.word	0x08008e28
 8007ea8:	08008e39 	.word	0x08008e39

08007eac <__hi0bits>:
 8007eac:	2280      	movs	r2, #128	@ 0x80
 8007eae:	0003      	movs	r3, r0
 8007eb0:	0252      	lsls	r2, r2, #9
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d201      	bcs.n	8007ebc <__hi0bits+0x10>
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	3010      	adds	r0, #16
 8007ebc:	2280      	movs	r2, #128	@ 0x80
 8007ebe:	0452      	lsls	r2, r2, #17
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d201      	bcs.n	8007ec8 <__hi0bits+0x1c>
 8007ec4:	3008      	adds	r0, #8
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	0552      	lsls	r2, r2, #21
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d201      	bcs.n	8007ed4 <__hi0bits+0x28>
 8007ed0:	3004      	adds	r0, #4
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	2280      	movs	r2, #128	@ 0x80
 8007ed6:	05d2      	lsls	r2, r2, #23
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d201      	bcs.n	8007ee0 <__hi0bits+0x34>
 8007edc:	3002      	adds	r0, #2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	db03      	blt.n	8007eec <__hi0bits+0x40>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	4213      	tst	r3, r2
 8007ee8:	d100      	bne.n	8007eec <__hi0bits+0x40>
 8007eea:	2020      	movs	r0, #32
 8007eec:	4770      	bx	lr

08007eee <__lo0bits>:
 8007eee:	6803      	ldr	r3, [r0, #0]
 8007ef0:	0001      	movs	r1, r0
 8007ef2:	2207      	movs	r2, #7
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	4010      	ands	r0, r2
 8007ef8:	4213      	tst	r3, r2
 8007efa:	d00d      	beq.n	8007f18 <__lo0bits+0x2a>
 8007efc:	3a06      	subs	r2, #6
 8007efe:	2000      	movs	r0, #0
 8007f00:	4213      	tst	r3, r2
 8007f02:	d105      	bne.n	8007f10 <__lo0bits+0x22>
 8007f04:	3002      	adds	r0, #2
 8007f06:	4203      	tst	r3, r0
 8007f08:	d003      	beq.n	8007f12 <__lo0bits+0x24>
 8007f0a:	40d3      	lsrs	r3, r2
 8007f0c:	0010      	movs	r0, r2
 8007f0e:	600b      	str	r3, [r1, #0]
 8007f10:	4770      	bx	lr
 8007f12:	089b      	lsrs	r3, r3, #2
 8007f14:	600b      	str	r3, [r1, #0]
 8007f16:	e7fb      	b.n	8007f10 <__lo0bits+0x22>
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d101      	bne.n	8007f22 <__lo0bits+0x34>
 8007f1e:	2010      	movs	r0, #16
 8007f20:	0c1b      	lsrs	r3, r3, #16
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	d101      	bne.n	8007f2c <__lo0bits+0x3e>
 8007f28:	3008      	adds	r0, #8
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	071a      	lsls	r2, r3, #28
 8007f2e:	d101      	bne.n	8007f34 <__lo0bits+0x46>
 8007f30:	3004      	adds	r0, #4
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	079a      	lsls	r2, r3, #30
 8007f36:	d101      	bne.n	8007f3c <__lo0bits+0x4e>
 8007f38:	3002      	adds	r0, #2
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	07da      	lsls	r2, r3, #31
 8007f3e:	d4e9      	bmi.n	8007f14 <__lo0bits+0x26>
 8007f40:	3001      	adds	r0, #1
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	d1e6      	bne.n	8007f14 <__lo0bits+0x26>
 8007f46:	2020      	movs	r0, #32
 8007f48:	e7e2      	b.n	8007f10 <__lo0bits+0x22>
	...

08007f4c <__i2b>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	000c      	movs	r4, r1
 8007f50:	2101      	movs	r1, #1
 8007f52:	f7ff feff 	bl	8007d54 <_Balloc>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d107      	bne.n	8007f6a <__i2b+0x1e>
 8007f5a:	2146      	movs	r1, #70	@ 0x46
 8007f5c:	4c05      	ldr	r4, [pc, #20]	@ (8007f74 <__i2b+0x28>)
 8007f5e:	0002      	movs	r2, r0
 8007f60:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <__i2b+0x2c>)
 8007f62:	0020      	movs	r0, r4
 8007f64:	31ff      	adds	r1, #255	@ 0xff
 8007f66:	f000 fb5f 	bl	8008628 <__assert_func>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	6144      	str	r4, [r0, #20]
 8007f6e:	6103      	str	r3, [r0, #16]
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	08008e39 	.word	0x08008e39
 8007f78:	08008e28 	.word	0x08008e28

08007f7c <__multiply>:
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	0014      	movs	r4, r2
 8007f80:	690a      	ldr	r2, [r1, #16]
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	000d      	movs	r5, r1
 8007f86:	b089      	sub	sp, #36	@ 0x24
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	db02      	blt.n	8007f92 <__multiply+0x16>
 8007f8c:	0023      	movs	r3, r4
 8007f8e:	000c      	movs	r4, r1
 8007f90:	001d      	movs	r5, r3
 8007f92:	6927      	ldr	r7, [r4, #16]
 8007f94:	692e      	ldr	r6, [r5, #16]
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	19bb      	adds	r3, r7, r6
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	19ba      	adds	r2, r7, r6
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	da00      	bge.n	8007fa6 <__multiply+0x2a>
 8007fa4:	3101      	adds	r1, #1
 8007fa6:	f7ff fed5 	bl	8007d54 <_Balloc>
 8007faa:	4684      	mov	ip, r0
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d106      	bne.n	8007fbe <__multiply+0x42>
 8007fb0:	21b1      	movs	r1, #177	@ 0xb1
 8007fb2:	4662      	mov	r2, ip
 8007fb4:	4b44      	ldr	r3, [pc, #272]	@ (80080c8 <__multiply+0x14c>)
 8007fb6:	4845      	ldr	r0, [pc, #276]	@ (80080cc <__multiply+0x150>)
 8007fb8:	0049      	lsls	r1, r1, #1
 8007fba:	f000 fb35 	bl	8008628 <__assert_func>
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	19bb      	adds	r3, r7, r6
 8007fc2:	3214      	adds	r2, #20
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	18d3      	adds	r3, r2, r3
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	0013      	movs	r3, r2
 8007fce:	9801      	ldr	r0, [sp, #4]
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d328      	bcc.n	8008026 <__multiply+0xaa>
 8007fd4:	0023      	movs	r3, r4
 8007fd6:	00bf      	lsls	r7, r7, #2
 8007fd8:	3314      	adds	r3, #20
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	3514      	adds	r5, #20
 8007fde:	19db      	adds	r3, r3, r7
 8007fe0:	00b6      	lsls	r6, r6, #2
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	19ab      	adds	r3, r5, r6
 8007fe6:	9307      	str	r3, [sp, #28]
 8007fe8:	2304      	movs	r3, #4
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	0023      	movs	r3, r4
 8007fee:	9902      	ldr	r1, [sp, #8]
 8007ff0:	3315      	adds	r3, #21
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d305      	bcc.n	8008002 <__multiply+0x86>
 8007ff6:	1b0c      	subs	r4, r1, r4
 8007ff8:	3c15      	subs	r4, #21
 8007ffa:	08a4      	lsrs	r4, r4, #2
 8007ffc:	3401      	adds	r4, #1
 8007ffe:	00a3      	lsls	r3, r4, #2
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	9b07      	ldr	r3, [sp, #28]
 8008004:	429d      	cmp	r5, r3
 8008006:	d310      	bcc.n	800802a <__multiply+0xae>
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd05      	ble.n	800801a <__multiply+0x9e>
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	3b04      	subs	r3, #4
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d052      	beq.n	80080c0 <__multiply+0x144>
 800801a:	4663      	mov	r3, ip
 800801c:	4660      	mov	r0, ip
 800801e:	9a00      	ldr	r2, [sp, #0]
 8008020:	611a      	str	r2, [r3, #16]
 8008022:	b009      	add	sp, #36	@ 0x24
 8008024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008026:	c302      	stmia	r3!, {r1}
 8008028:	e7d1      	b.n	8007fce <__multiply+0x52>
 800802a:	682c      	ldr	r4, [r5, #0]
 800802c:	b2a4      	uxth	r4, r4
 800802e:	2c00      	cmp	r4, #0
 8008030:	d01f      	beq.n	8008072 <__multiply+0xf6>
 8008032:	2300      	movs	r3, #0
 8008034:	0017      	movs	r7, r2
 8008036:	9e04      	ldr	r6, [sp, #16]
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	ce08      	ldmia	r6!, {r3}
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	9306      	str	r3, [sp, #24]
 8008040:	466b      	mov	r3, sp
 8008042:	8b1b      	ldrh	r3, [r3, #24]
 8008044:	b288      	uxth	r0, r1
 8008046:	4363      	muls	r3, r4
 8008048:	181b      	adds	r3, r3, r0
 800804a:	9803      	ldr	r0, [sp, #12]
 800804c:	0c09      	lsrs	r1, r1, #16
 800804e:	181b      	adds	r3, r3, r0
 8008050:	9806      	ldr	r0, [sp, #24]
 8008052:	0c00      	lsrs	r0, r0, #16
 8008054:	4360      	muls	r0, r4
 8008056:	1840      	adds	r0, r0, r1
 8008058:	0c19      	lsrs	r1, r3, #16
 800805a:	1841      	adds	r1, r0, r1
 800805c:	0c08      	lsrs	r0, r1, #16
 800805e:	b29b      	uxth	r3, r3
 8008060:	0409      	lsls	r1, r1, #16
 8008062:	4319      	orrs	r1, r3
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	9003      	str	r0, [sp, #12]
 8008068:	c702      	stmia	r7!, {r1}
 800806a:	42b3      	cmp	r3, r6
 800806c:	d8e5      	bhi.n	800803a <__multiply+0xbe>
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	50d0      	str	r0, [r2, r3]
 8008072:	682c      	ldr	r4, [r5, #0]
 8008074:	0c24      	lsrs	r4, r4, #16
 8008076:	d020      	beq.n	80080ba <__multiply+0x13e>
 8008078:	2100      	movs	r1, #0
 800807a:	0010      	movs	r0, r2
 800807c:	6813      	ldr	r3, [r2, #0]
 800807e:	9e04      	ldr	r6, [sp, #16]
 8008080:	9103      	str	r1, [sp, #12]
 8008082:	6831      	ldr	r1, [r6, #0]
 8008084:	6807      	ldr	r7, [r0, #0]
 8008086:	b289      	uxth	r1, r1
 8008088:	4361      	muls	r1, r4
 800808a:	0c3f      	lsrs	r7, r7, #16
 800808c:	19c9      	adds	r1, r1, r7
 800808e:	9f03      	ldr	r7, [sp, #12]
 8008090:	b29b      	uxth	r3, r3
 8008092:	19c9      	adds	r1, r1, r7
 8008094:	040f      	lsls	r7, r1, #16
 8008096:	431f      	orrs	r7, r3
 8008098:	6007      	str	r7, [r0, #0]
 800809a:	ce80      	ldmia	r6!, {r7}
 800809c:	6843      	ldr	r3, [r0, #4]
 800809e:	0c3f      	lsrs	r7, r7, #16
 80080a0:	4367      	muls	r7, r4
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	0c09      	lsrs	r1, r1, #16
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	185b      	adds	r3, r3, r1
 80080aa:	0c19      	lsrs	r1, r3, #16
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	9902      	ldr	r1, [sp, #8]
 80080b0:	3004      	adds	r0, #4
 80080b2:	42b1      	cmp	r1, r6
 80080b4:	d8e5      	bhi.n	8008082 <__multiply+0x106>
 80080b6:	9905      	ldr	r1, [sp, #20]
 80080b8:	5053      	str	r3, [r2, r1]
 80080ba:	3504      	adds	r5, #4
 80080bc:	3204      	adds	r2, #4
 80080be:	e7a0      	b.n	8008002 <__multiply+0x86>
 80080c0:	9b00      	ldr	r3, [sp, #0]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	e79f      	b.n	8008008 <__multiply+0x8c>
 80080c8:	08008e28 	.word	0x08008e28
 80080cc:	08008e39 	.word	0x08008e39

080080d0 <__pow5mult>:
 80080d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d2:	2303      	movs	r3, #3
 80080d4:	0015      	movs	r5, r2
 80080d6:	0007      	movs	r7, r0
 80080d8:	000e      	movs	r6, r1
 80080da:	401a      	ands	r2, r3
 80080dc:	421d      	tst	r5, r3
 80080de:	d008      	beq.n	80080f2 <__pow5mult+0x22>
 80080e0:	4925      	ldr	r1, [pc, #148]	@ (8008178 <__pow5mult+0xa8>)
 80080e2:	3a01      	subs	r2, #1
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	5852      	ldr	r2, [r2, r1]
 80080e8:	2300      	movs	r3, #0
 80080ea:	0031      	movs	r1, r6
 80080ec:	f7ff fe9a 	bl	8007e24 <__multadd>
 80080f0:	0006      	movs	r6, r0
 80080f2:	10ad      	asrs	r5, r5, #2
 80080f4:	d03d      	beq.n	8008172 <__pow5mult+0xa2>
 80080f6:	69fc      	ldr	r4, [r7, #28]
 80080f8:	2c00      	cmp	r4, #0
 80080fa:	d10f      	bne.n	800811c <__pow5mult+0x4c>
 80080fc:	2010      	movs	r0, #16
 80080fe:	f7ff fd6d 	bl	8007bdc <malloc>
 8008102:	1e02      	subs	r2, r0, #0
 8008104:	61f8      	str	r0, [r7, #28]
 8008106:	d105      	bne.n	8008114 <__pow5mult+0x44>
 8008108:	21b4      	movs	r1, #180	@ 0xb4
 800810a:	4b1c      	ldr	r3, [pc, #112]	@ (800817c <__pow5mult+0xac>)
 800810c:	481c      	ldr	r0, [pc, #112]	@ (8008180 <__pow5mult+0xb0>)
 800810e:	31ff      	adds	r1, #255	@ 0xff
 8008110:	f000 fa8a 	bl	8008628 <__assert_func>
 8008114:	6044      	str	r4, [r0, #4]
 8008116:	6084      	str	r4, [r0, #8]
 8008118:	6004      	str	r4, [r0, #0]
 800811a:	60c4      	str	r4, [r0, #12]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	689c      	ldr	r4, [r3, #8]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	2c00      	cmp	r4, #0
 8008124:	d108      	bne.n	8008138 <__pow5mult+0x68>
 8008126:	0038      	movs	r0, r7
 8008128:	4916      	ldr	r1, [pc, #88]	@ (8008184 <__pow5mult+0xb4>)
 800812a:	f7ff ff0f 	bl	8007f4c <__i2b>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	0004      	movs	r4, r0
 8008132:	6098      	str	r0, [r3, #8]
 8008134:	2300      	movs	r3, #0
 8008136:	6003      	str	r3, [r0, #0]
 8008138:	2301      	movs	r3, #1
 800813a:	421d      	tst	r5, r3
 800813c:	d00a      	beq.n	8008154 <__pow5mult+0x84>
 800813e:	0031      	movs	r1, r6
 8008140:	0022      	movs	r2, r4
 8008142:	0038      	movs	r0, r7
 8008144:	f7ff ff1a 	bl	8007f7c <__multiply>
 8008148:	0031      	movs	r1, r6
 800814a:	9001      	str	r0, [sp, #4]
 800814c:	0038      	movs	r0, r7
 800814e:	f7ff fe45 	bl	8007ddc <_Bfree>
 8008152:	9e01      	ldr	r6, [sp, #4]
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	d00c      	beq.n	8008172 <__pow5mult+0xa2>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	2800      	cmp	r0, #0
 800815c:	d107      	bne.n	800816e <__pow5mult+0x9e>
 800815e:	0022      	movs	r2, r4
 8008160:	0021      	movs	r1, r4
 8008162:	0038      	movs	r0, r7
 8008164:	f7ff ff0a 	bl	8007f7c <__multiply>
 8008168:	2300      	movs	r3, #0
 800816a:	6020      	str	r0, [r4, #0]
 800816c:	6003      	str	r3, [r0, #0]
 800816e:	0004      	movs	r4, r0
 8008170:	e7e2      	b.n	8008138 <__pow5mult+0x68>
 8008172:	0030      	movs	r0, r6
 8008174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	08008eec 	.word	0x08008eec
 800817c:	08008db9 	.word	0x08008db9
 8008180:	08008e39 	.word	0x08008e39
 8008184:	00000271 	.word	0x00000271

08008188 <__lshift>:
 8008188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800818a:	000c      	movs	r4, r1
 800818c:	0016      	movs	r6, r2
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	1157      	asrs	r7, r2, #5
 8008192:	b085      	sub	sp, #20
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	3301      	adds	r3, #1
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	6849      	ldr	r1, [r1, #4]
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	9002      	str	r0, [sp, #8]
 80081a2:	9a00      	ldr	r2, [sp, #0]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	db10      	blt.n	80081ca <__lshift+0x42>
 80081a8:	9802      	ldr	r0, [sp, #8]
 80081aa:	f7ff fdd3 	bl	8007d54 <_Balloc>
 80081ae:	2300      	movs	r3, #0
 80081b0:	0001      	movs	r1, r0
 80081b2:	0005      	movs	r5, r0
 80081b4:	001a      	movs	r2, r3
 80081b6:	3114      	adds	r1, #20
 80081b8:	4298      	cmp	r0, r3
 80081ba:	d10c      	bne.n	80081d6 <__lshift+0x4e>
 80081bc:	21ef      	movs	r1, #239	@ 0xef
 80081be:	002a      	movs	r2, r5
 80081c0:	4b25      	ldr	r3, [pc, #148]	@ (8008258 <__lshift+0xd0>)
 80081c2:	4826      	ldr	r0, [pc, #152]	@ (800825c <__lshift+0xd4>)
 80081c4:	0049      	lsls	r1, r1, #1
 80081c6:	f000 fa2f 	bl	8008628 <__assert_func>
 80081ca:	3101      	adds	r1, #1
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	e7e8      	b.n	80081a2 <__lshift+0x1a>
 80081d0:	0098      	lsls	r0, r3, #2
 80081d2:	500a      	str	r2, [r1, r0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	42bb      	cmp	r3, r7
 80081d8:	dbfa      	blt.n	80081d0 <__lshift+0x48>
 80081da:	43fb      	mvns	r3, r7
 80081dc:	17db      	asrs	r3, r3, #31
 80081de:	401f      	ands	r7, r3
 80081e0:	00bf      	lsls	r7, r7, #2
 80081e2:	0023      	movs	r3, r4
 80081e4:	201f      	movs	r0, #31
 80081e6:	19c9      	adds	r1, r1, r7
 80081e8:	0037      	movs	r7, r6
 80081ea:	6922      	ldr	r2, [r4, #16]
 80081ec:	3314      	adds	r3, #20
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	189a      	adds	r2, r3, r2
 80081f2:	4007      	ands	r7, r0
 80081f4:	4206      	tst	r6, r0
 80081f6:	d029      	beq.n	800824c <__lshift+0xc4>
 80081f8:	3001      	adds	r0, #1
 80081fa:	1bc0      	subs	r0, r0, r7
 80081fc:	9003      	str	r0, [sp, #12]
 80081fe:	468c      	mov	ip, r1
 8008200:	2000      	movs	r0, #0
 8008202:	681e      	ldr	r6, [r3, #0]
 8008204:	40be      	lsls	r6, r7
 8008206:	4306      	orrs	r6, r0
 8008208:	4660      	mov	r0, ip
 800820a:	c040      	stmia	r0!, {r6}
 800820c:	4684      	mov	ip, r0
 800820e:	9e03      	ldr	r6, [sp, #12]
 8008210:	cb01      	ldmia	r3!, {r0}
 8008212:	40f0      	lsrs	r0, r6
 8008214:	429a      	cmp	r2, r3
 8008216:	d8f4      	bhi.n	8008202 <__lshift+0x7a>
 8008218:	0026      	movs	r6, r4
 800821a:	3615      	adds	r6, #21
 800821c:	2304      	movs	r3, #4
 800821e:	42b2      	cmp	r2, r6
 8008220:	d304      	bcc.n	800822c <__lshift+0xa4>
 8008222:	1b13      	subs	r3, r2, r4
 8008224:	3b15      	subs	r3, #21
 8008226:	089b      	lsrs	r3, r3, #2
 8008228:	3301      	adds	r3, #1
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	50c8      	str	r0, [r1, r3]
 800822e:	2800      	cmp	r0, #0
 8008230:	d002      	beq.n	8008238 <__lshift+0xb0>
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	3302      	adds	r3, #2
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	9802      	ldr	r0, [sp, #8]
 800823c:	3b01      	subs	r3, #1
 800823e:	0021      	movs	r1, r4
 8008240:	612b      	str	r3, [r5, #16]
 8008242:	f7ff fdcb 	bl	8007ddc <_Bfree>
 8008246:	0028      	movs	r0, r5
 8008248:	b005      	add	sp, #20
 800824a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824c:	cb01      	ldmia	r3!, {r0}
 800824e:	c101      	stmia	r1!, {r0}
 8008250:	429a      	cmp	r2, r3
 8008252:	d8fb      	bhi.n	800824c <__lshift+0xc4>
 8008254:	e7f0      	b.n	8008238 <__lshift+0xb0>
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	08008e28 	.word	0x08008e28
 800825c:	08008e39 	.word	0x08008e39

08008260 <__mcmp>:
 8008260:	b530      	push	{r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	6904      	ldr	r4, [r0, #16]
 8008266:	0002      	movs	r2, r0
 8008268:	1ae0      	subs	r0, r4, r3
 800826a:	429c      	cmp	r4, r3
 800826c:	d10f      	bne.n	800828e <__mcmp+0x2e>
 800826e:	3214      	adds	r2, #20
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	3114      	adds	r1, #20
 8008274:	0014      	movs	r4, r2
 8008276:	18c9      	adds	r1, r1, r3
 8008278:	18d2      	adds	r2, r2, r3
 800827a:	3a04      	subs	r2, #4
 800827c:	3904      	subs	r1, #4
 800827e:	6815      	ldr	r5, [r2, #0]
 8008280:	680b      	ldr	r3, [r1, #0]
 8008282:	429d      	cmp	r5, r3
 8008284:	d004      	beq.n	8008290 <__mcmp+0x30>
 8008286:	2001      	movs	r0, #1
 8008288:	429d      	cmp	r5, r3
 800828a:	d200      	bcs.n	800828e <__mcmp+0x2e>
 800828c:	3802      	subs	r0, #2
 800828e:	bd30      	pop	{r4, r5, pc}
 8008290:	4294      	cmp	r4, r2
 8008292:	d3f2      	bcc.n	800827a <__mcmp+0x1a>
 8008294:	e7fb      	b.n	800828e <__mcmp+0x2e>
	...

08008298 <__mdiff>:
 8008298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829a:	000c      	movs	r4, r1
 800829c:	b087      	sub	sp, #28
 800829e:	9000      	str	r0, [sp, #0]
 80082a0:	0011      	movs	r1, r2
 80082a2:	0020      	movs	r0, r4
 80082a4:	0017      	movs	r7, r2
 80082a6:	f7ff ffdb 	bl	8008260 <__mcmp>
 80082aa:	1e05      	subs	r5, r0, #0
 80082ac:	d110      	bne.n	80082d0 <__mdiff+0x38>
 80082ae:	0001      	movs	r1, r0
 80082b0:	9800      	ldr	r0, [sp, #0]
 80082b2:	f7ff fd4f 	bl	8007d54 <_Balloc>
 80082b6:	1e02      	subs	r2, r0, #0
 80082b8:	d104      	bne.n	80082c4 <__mdiff+0x2c>
 80082ba:	4b40      	ldr	r3, [pc, #256]	@ (80083bc <__mdiff+0x124>)
 80082bc:	4840      	ldr	r0, [pc, #256]	@ (80083c0 <__mdiff+0x128>)
 80082be:	4941      	ldr	r1, [pc, #260]	@ (80083c4 <__mdiff+0x12c>)
 80082c0:	f000 f9b2 	bl	8008628 <__assert_func>
 80082c4:	2301      	movs	r3, #1
 80082c6:	6145      	str	r5, [r0, #20]
 80082c8:	6103      	str	r3, [r0, #16]
 80082ca:	0010      	movs	r0, r2
 80082cc:	b007      	add	sp, #28
 80082ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d0:	2600      	movs	r6, #0
 80082d2:	42b0      	cmp	r0, r6
 80082d4:	da03      	bge.n	80082de <__mdiff+0x46>
 80082d6:	0023      	movs	r3, r4
 80082d8:	003c      	movs	r4, r7
 80082da:	001f      	movs	r7, r3
 80082dc:	3601      	adds	r6, #1
 80082de:	6861      	ldr	r1, [r4, #4]
 80082e0:	9800      	ldr	r0, [sp, #0]
 80082e2:	f7ff fd37 	bl	8007d54 <_Balloc>
 80082e6:	1e02      	subs	r2, r0, #0
 80082e8:	d103      	bne.n	80082f2 <__mdiff+0x5a>
 80082ea:	4b34      	ldr	r3, [pc, #208]	@ (80083bc <__mdiff+0x124>)
 80082ec:	4834      	ldr	r0, [pc, #208]	@ (80083c0 <__mdiff+0x128>)
 80082ee:	4936      	ldr	r1, [pc, #216]	@ (80083c8 <__mdiff+0x130>)
 80082f0:	e7e6      	b.n	80082c0 <__mdiff+0x28>
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	3414      	adds	r4, #20
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	18e3      	adds	r3, r4, r3
 80082fc:	0021      	movs	r1, r4
 80082fe:	9401      	str	r4, [sp, #4]
 8008300:	003c      	movs	r4, r7
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3414      	adds	r4, #20
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	18e3      	adds	r3, r4, r3
 800830c:	9303      	str	r3, [sp, #12]
 800830e:	0003      	movs	r3, r0
 8008310:	60c6      	str	r6, [r0, #12]
 8008312:	468c      	mov	ip, r1
 8008314:	2000      	movs	r0, #0
 8008316:	3314      	adds	r3, #20
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	4663      	mov	r3, ip
 800831e:	cb20      	ldmia	r3!, {r5}
 8008320:	b2a9      	uxth	r1, r5
 8008322:	000e      	movs	r6, r1
 8008324:	469c      	mov	ip, r3
 8008326:	cc08      	ldmia	r4!, {r3}
 8008328:	0c2d      	lsrs	r5, r5, #16
 800832a:	b299      	uxth	r1, r3
 800832c:	1a71      	subs	r1, r6, r1
 800832e:	1809      	adds	r1, r1, r0
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	1408      	asrs	r0, r1, #16
 8008334:	1aeb      	subs	r3, r5, r3
 8008336:	181b      	adds	r3, r3, r0
 8008338:	1418      	asrs	r0, r3, #16
 800833a:	b289      	uxth	r1, r1
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	4319      	orrs	r1, r3
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	c302      	stmia	r3!, {r1}
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	42a3      	cmp	r3, r4
 800834a:	d8e7      	bhi.n	800831c <__mdiff+0x84>
 800834c:	0039      	movs	r1, r7
 800834e:	9c03      	ldr	r4, [sp, #12]
 8008350:	3115      	adds	r1, #21
 8008352:	2304      	movs	r3, #4
 8008354:	428c      	cmp	r4, r1
 8008356:	d304      	bcc.n	8008362 <__mdiff+0xca>
 8008358:	1be3      	subs	r3, r4, r7
 800835a:	3b15      	subs	r3, #21
 800835c:	089b      	lsrs	r3, r3, #2
 800835e:	3301      	adds	r3, #1
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	9901      	ldr	r1, [sp, #4]
 8008364:	18cd      	adds	r5, r1, r3
 8008366:	9904      	ldr	r1, [sp, #16]
 8008368:	002e      	movs	r6, r5
 800836a:	18cb      	adds	r3, r1, r3
 800836c:	001f      	movs	r7, r3
 800836e:	9902      	ldr	r1, [sp, #8]
 8008370:	428e      	cmp	r6, r1
 8008372:	d311      	bcc.n	8008398 <__mdiff+0x100>
 8008374:	9c02      	ldr	r4, [sp, #8]
 8008376:	1ee9      	subs	r1, r5, #3
 8008378:	2000      	movs	r0, #0
 800837a:	428c      	cmp	r4, r1
 800837c:	d304      	bcc.n	8008388 <__mdiff+0xf0>
 800837e:	0021      	movs	r1, r4
 8008380:	3103      	adds	r1, #3
 8008382:	1b49      	subs	r1, r1, r5
 8008384:	0889      	lsrs	r1, r1, #2
 8008386:	0088      	lsls	r0, r1, #2
 8008388:	181b      	adds	r3, r3, r0
 800838a:	3b04      	subs	r3, #4
 800838c:	6819      	ldr	r1, [r3, #0]
 800838e:	2900      	cmp	r1, #0
 8008390:	d010      	beq.n	80083b4 <__mdiff+0x11c>
 8008392:	9b00      	ldr	r3, [sp, #0]
 8008394:	6113      	str	r3, [r2, #16]
 8008396:	e798      	b.n	80082ca <__mdiff+0x32>
 8008398:	4684      	mov	ip, r0
 800839a:	ce02      	ldmia	r6!, {r1}
 800839c:	b288      	uxth	r0, r1
 800839e:	4460      	add	r0, ip
 80083a0:	1400      	asrs	r0, r0, #16
 80083a2:	0c0c      	lsrs	r4, r1, #16
 80083a4:	1904      	adds	r4, r0, r4
 80083a6:	4461      	add	r1, ip
 80083a8:	1420      	asrs	r0, r4, #16
 80083aa:	b289      	uxth	r1, r1
 80083ac:	0424      	lsls	r4, r4, #16
 80083ae:	4321      	orrs	r1, r4
 80083b0:	c702      	stmia	r7!, {r1}
 80083b2:	e7dc      	b.n	800836e <__mdiff+0xd6>
 80083b4:	9900      	ldr	r1, [sp, #0]
 80083b6:	3901      	subs	r1, #1
 80083b8:	9100      	str	r1, [sp, #0]
 80083ba:	e7e6      	b.n	800838a <__mdiff+0xf2>
 80083bc:	08008e28 	.word	0x08008e28
 80083c0:	08008e39 	.word	0x08008e39
 80083c4:	00000237 	.word	0x00000237
 80083c8:	00000245 	.word	0x00000245

080083cc <__d2b>:
 80083cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ce:	2101      	movs	r1, #1
 80083d0:	0016      	movs	r6, r2
 80083d2:	001f      	movs	r7, r3
 80083d4:	f7ff fcbe 	bl	8007d54 <_Balloc>
 80083d8:	1e04      	subs	r4, r0, #0
 80083da:	d105      	bne.n	80083e8 <__d2b+0x1c>
 80083dc:	0022      	movs	r2, r4
 80083de:	4b25      	ldr	r3, [pc, #148]	@ (8008474 <__d2b+0xa8>)
 80083e0:	4825      	ldr	r0, [pc, #148]	@ (8008478 <__d2b+0xac>)
 80083e2:	4926      	ldr	r1, [pc, #152]	@ (800847c <__d2b+0xb0>)
 80083e4:	f000 f920 	bl	8008628 <__assert_func>
 80083e8:	033b      	lsls	r3, r7, #12
 80083ea:	007d      	lsls	r5, r7, #1
 80083ec:	0b1b      	lsrs	r3, r3, #12
 80083ee:	0d6d      	lsrs	r5, r5, #21
 80083f0:	d002      	beq.n	80083f8 <__d2b+0x2c>
 80083f2:	2280      	movs	r2, #128	@ 0x80
 80083f4:	0352      	lsls	r2, r2, #13
 80083f6:	4313      	orrs	r3, r2
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d025      	beq.n	800844a <__d2b+0x7e>
 80083fe:	4668      	mov	r0, sp
 8008400:	9600      	str	r6, [sp, #0]
 8008402:	f7ff fd74 	bl	8007eee <__lo0bits>
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	9900      	ldr	r1, [sp, #0]
 800840a:	2800      	cmp	r0, #0
 800840c:	d01b      	beq.n	8008446 <__d2b+0x7a>
 800840e:	2220      	movs	r2, #32
 8008410:	001e      	movs	r6, r3
 8008412:	1a12      	subs	r2, r2, r0
 8008414:	4096      	lsls	r6, r2
 8008416:	0032      	movs	r2, r6
 8008418:	40c3      	lsrs	r3, r0
 800841a:	430a      	orrs	r2, r1
 800841c:	6162      	str	r2, [r4, #20]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	9e01      	ldr	r6, [sp, #4]
 8008422:	61a6      	str	r6, [r4, #24]
 8008424:	1e73      	subs	r3, r6, #1
 8008426:	419e      	sbcs	r6, r3
 8008428:	3601      	adds	r6, #1
 800842a:	6126      	str	r6, [r4, #16]
 800842c:	2d00      	cmp	r5, #0
 800842e:	d014      	beq.n	800845a <__d2b+0x8e>
 8008430:	2635      	movs	r6, #53	@ 0x35
 8008432:	4b13      	ldr	r3, [pc, #76]	@ (8008480 <__d2b+0xb4>)
 8008434:	18ed      	adds	r5, r5, r3
 8008436:	9b08      	ldr	r3, [sp, #32]
 8008438:	182d      	adds	r5, r5, r0
 800843a:	601d      	str	r5, [r3, #0]
 800843c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843e:	1a36      	subs	r6, r6, r0
 8008440:	601e      	str	r6, [r3, #0]
 8008442:	0020      	movs	r0, r4
 8008444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008446:	6161      	str	r1, [r4, #20]
 8008448:	e7ea      	b.n	8008420 <__d2b+0x54>
 800844a:	a801      	add	r0, sp, #4
 800844c:	f7ff fd4f 	bl	8007eee <__lo0bits>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	2601      	movs	r6, #1
 8008454:	6163      	str	r3, [r4, #20]
 8008456:	3020      	adds	r0, #32
 8008458:	e7e7      	b.n	800842a <__d2b+0x5e>
 800845a:	4b0a      	ldr	r3, [pc, #40]	@ (8008484 <__d2b+0xb8>)
 800845c:	18c0      	adds	r0, r0, r3
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	6018      	str	r0, [r3, #0]
 8008462:	4b09      	ldr	r3, [pc, #36]	@ (8008488 <__d2b+0xbc>)
 8008464:	18f3      	adds	r3, r6, r3
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	18e3      	adds	r3, r4, r3
 800846a:	6958      	ldr	r0, [r3, #20]
 800846c:	f7ff fd1e 	bl	8007eac <__hi0bits>
 8008470:	0176      	lsls	r6, r6, #5
 8008472:	e7e3      	b.n	800843c <__d2b+0x70>
 8008474:	08008e28 	.word	0x08008e28
 8008478:	08008e39 	.word	0x08008e39
 800847c:	0000030f 	.word	0x0000030f
 8008480:	fffffbcd 	.word	0xfffffbcd
 8008484:	fffffbce 	.word	0xfffffbce
 8008488:	3fffffff 	.word	0x3fffffff

0800848c <__sflush_r>:
 800848c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848e:	220c      	movs	r2, #12
 8008490:	5e8b      	ldrsh	r3, [r1, r2]
 8008492:	0005      	movs	r5, r0
 8008494:	000c      	movs	r4, r1
 8008496:	071a      	lsls	r2, r3, #28
 8008498:	d456      	bmi.n	8008548 <__sflush_r+0xbc>
 800849a:	684a      	ldr	r2, [r1, #4]
 800849c:	2a00      	cmp	r2, #0
 800849e:	dc02      	bgt.n	80084a6 <__sflush_r+0x1a>
 80084a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	dd4e      	ble.n	8008544 <__sflush_r+0xb8>
 80084a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	d04b      	beq.n	8008544 <__sflush_r+0xb8>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2080      	movs	r0, #128	@ 0x80
 80084b0:	682e      	ldr	r6, [r5, #0]
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	001a      	movs	r2, r3
 80084b6:	0140      	lsls	r0, r0, #5
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	4002      	ands	r2, r0
 80084bc:	4203      	tst	r3, r0
 80084be:	d033      	beq.n	8008528 <__sflush_r+0x9c>
 80084c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	075b      	lsls	r3, r3, #29
 80084c6:	d506      	bpl.n	80084d6 <__sflush_r+0x4a>
 80084c8:	6863      	ldr	r3, [r4, #4]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <__sflush_r+0x4a>
 80084d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	0028      	movs	r0, r5
 80084da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084dc:	6a21      	ldr	r1, [r4, #32]
 80084de:	47b8      	blx	r7
 80084e0:	89a2      	ldrh	r2, [r4, #12]
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d106      	bne.n	80084f4 <__sflush_r+0x68>
 80084e6:	6829      	ldr	r1, [r5, #0]
 80084e8:	291d      	cmp	r1, #29
 80084ea:	d846      	bhi.n	800857a <__sflush_r+0xee>
 80084ec:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <__sflush_r+0x108>)
 80084ee:	40cb      	lsrs	r3, r1
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d542      	bpl.n	800857a <__sflush_r+0xee>
 80084f4:	2300      	movs	r3, #0
 80084f6:	6063      	str	r3, [r4, #4]
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	04d2      	lsls	r2, r2, #19
 80084fe:	d505      	bpl.n	800850c <__sflush_r+0x80>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <__sflush_r+0x7e>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d100      	bne.n	800850c <__sflush_r+0x80>
 800850a:	6560      	str	r0, [r4, #84]	@ 0x54
 800850c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800850e:	602e      	str	r6, [r5, #0]
 8008510:	2900      	cmp	r1, #0
 8008512:	d017      	beq.n	8008544 <__sflush_r+0xb8>
 8008514:	0023      	movs	r3, r4
 8008516:	3344      	adds	r3, #68	@ 0x44
 8008518:	4299      	cmp	r1, r3
 800851a:	d002      	beq.n	8008522 <__sflush_r+0x96>
 800851c:	0028      	movs	r0, r5
 800851e:	f7ff fb13 	bl	8007b48 <_free_r>
 8008522:	2300      	movs	r3, #0
 8008524:	6363      	str	r3, [r4, #52]	@ 0x34
 8008526:	e00d      	b.n	8008544 <__sflush_r+0xb8>
 8008528:	2301      	movs	r3, #1
 800852a:	0028      	movs	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	0002      	movs	r2, r0
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d1c6      	bne.n	80084c2 <__sflush_r+0x36>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0c3      	beq.n	80084c2 <__sflush_r+0x36>
 800853a:	2b1d      	cmp	r3, #29
 800853c:	d001      	beq.n	8008542 <__sflush_r+0xb6>
 800853e:	2b16      	cmp	r3, #22
 8008540:	d11a      	bne.n	8008578 <__sflush_r+0xec>
 8008542:	602e      	str	r6, [r5, #0]
 8008544:	2000      	movs	r0, #0
 8008546:	e01e      	b.n	8008586 <__sflush_r+0xfa>
 8008548:	690e      	ldr	r6, [r1, #16]
 800854a:	2e00      	cmp	r6, #0
 800854c:	d0fa      	beq.n	8008544 <__sflush_r+0xb8>
 800854e:	680f      	ldr	r7, [r1, #0]
 8008550:	600e      	str	r6, [r1, #0]
 8008552:	1bba      	subs	r2, r7, r6
 8008554:	9201      	str	r2, [sp, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	079b      	lsls	r3, r3, #30
 800855a:	d100      	bne.n	800855e <__sflush_r+0xd2>
 800855c:	694a      	ldr	r2, [r1, #20]
 800855e:	60a2      	str	r2, [r4, #8]
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	ddee      	ble.n	8008544 <__sflush_r+0xb8>
 8008566:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008568:	0032      	movs	r2, r6
 800856a:	001f      	movs	r7, r3
 800856c:	0028      	movs	r0, r5
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	6a21      	ldr	r1, [r4, #32]
 8008572:	47b8      	blx	r7
 8008574:	2800      	cmp	r0, #0
 8008576:	dc07      	bgt.n	8008588 <__sflush_r+0xfc>
 8008578:	89a2      	ldrh	r2, [r4, #12]
 800857a:	2340      	movs	r3, #64	@ 0x40
 800857c:	2001      	movs	r0, #1
 800857e:	4313      	orrs	r3, r2
 8008580:	b21b      	sxth	r3, r3
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	4240      	negs	r0, r0
 8008586:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	1836      	adds	r6, r6, r0
 800858c:	1a1b      	subs	r3, r3, r0
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	e7e6      	b.n	8008560 <__sflush_r+0xd4>
 8008592:	46c0      	nop			@ (mov r8, r8)
 8008594:	20400001 	.word	0x20400001

08008598 <_fflush_r>:
 8008598:	690b      	ldr	r3, [r1, #16]
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	0005      	movs	r5, r0
 800859e:	000c      	movs	r4, r1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <_fflush_r+0x12>
 80085a4:	2500      	movs	r5, #0
 80085a6:	0028      	movs	r0, r5
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d004      	beq.n	80085b8 <_fflush_r+0x20>
 80085ae:	6a03      	ldr	r3, [r0, #32]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <_fflush_r+0x20>
 80085b4:	f7fe fb40 	bl	8006c38 <__sinit>
 80085b8:	220c      	movs	r2, #12
 80085ba:	5ea3      	ldrsh	r3, [r4, r2]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f1      	beq.n	80085a4 <_fflush_r+0xc>
 80085c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085c2:	07d2      	lsls	r2, r2, #31
 80085c4:	d404      	bmi.n	80085d0 <_fflush_r+0x38>
 80085c6:	059b      	lsls	r3, r3, #22
 80085c8:	d402      	bmi.n	80085d0 <_fflush_r+0x38>
 80085ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085cc:	f7fe fc39 	bl	8006e42 <__retarget_lock_acquire_recursive>
 80085d0:	0028      	movs	r0, r5
 80085d2:	0021      	movs	r1, r4
 80085d4:	f7ff ff5a 	bl	800848c <__sflush_r>
 80085d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085da:	0005      	movs	r5, r0
 80085dc:	07db      	lsls	r3, r3, #31
 80085de:	d4e2      	bmi.n	80085a6 <_fflush_r+0xe>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	059b      	lsls	r3, r3, #22
 80085e4:	d4df      	bmi.n	80085a6 <_fflush_r+0xe>
 80085e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e8:	f7fe fc2c 	bl	8006e44 <__retarget_lock_release_recursive>
 80085ec:	e7db      	b.n	80085a6 <_fflush_r+0xe>
	...

080085f0 <_sbrk_r>:
 80085f0:	2300      	movs	r3, #0
 80085f2:	b570      	push	{r4, r5, r6, lr}
 80085f4:	4d06      	ldr	r5, [pc, #24]	@ (8008610 <_sbrk_r+0x20>)
 80085f6:	0004      	movs	r4, r0
 80085f8:	0008      	movs	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7fa fc56 	bl	8002eac <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d103      	bne.n	800860c <_sbrk_r+0x1c>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d000      	beq.n	800860c <_sbrk_r+0x1c>
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	2000047c 	.word	0x2000047c

08008614 <memcpy>:
 8008614:	2300      	movs	r3, #0
 8008616:	b510      	push	{r4, lr}
 8008618:	429a      	cmp	r2, r3
 800861a:	d100      	bne.n	800861e <memcpy+0xa>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	5ccc      	ldrb	r4, [r1, r3]
 8008620:	54c4      	strb	r4, [r0, r3]
 8008622:	3301      	adds	r3, #1
 8008624:	e7f8      	b.n	8008618 <memcpy+0x4>
	...

08008628 <__assert_func>:
 8008628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800862a:	0014      	movs	r4, r2
 800862c:	001a      	movs	r2, r3
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <__assert_func+0x2c>)
 8008630:	0005      	movs	r5, r0
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	000e      	movs	r6, r1
 8008636:	68d8      	ldr	r0, [r3, #12]
 8008638:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <__assert_func+0x30>)
 800863a:	2c00      	cmp	r4, #0
 800863c:	d101      	bne.n	8008642 <__assert_func+0x1a>
 800863e:	4b07      	ldr	r3, [pc, #28]	@ (800865c <__assert_func+0x34>)
 8008640:	001c      	movs	r4, r3
 8008642:	4907      	ldr	r1, [pc, #28]	@ (8008660 <__assert_func+0x38>)
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	9402      	str	r4, [sp, #8]
 8008648:	002b      	movs	r3, r5
 800864a:	9600      	str	r6, [sp, #0]
 800864c:	f000 f856 	bl	80086fc <fiprintf>
 8008650:	f000 f864 	bl	800871c <abort>
 8008654:	20000020 	.word	0x20000020
 8008658:	08008e9c 	.word	0x08008e9c
 800865c:	08008ed7 	.word	0x08008ed7
 8008660:	08008ea9 	.word	0x08008ea9

08008664 <_calloc_r>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	0c0b      	lsrs	r3, r1, #16
 8008668:	0c15      	lsrs	r5, r2, #16
 800866a:	2b00      	cmp	r3, #0
 800866c:	d11e      	bne.n	80086ac <_calloc_r+0x48>
 800866e:	2d00      	cmp	r5, #0
 8008670:	d10c      	bne.n	800868c <_calloc_r+0x28>
 8008672:	b289      	uxth	r1, r1
 8008674:	b294      	uxth	r4, r2
 8008676:	434c      	muls	r4, r1
 8008678:	0021      	movs	r1, r4
 800867a:	f7ff fadb 	bl	8007c34 <_malloc_r>
 800867e:	1e05      	subs	r5, r0, #0
 8008680:	d01b      	beq.n	80086ba <_calloc_r+0x56>
 8008682:	0022      	movs	r2, r4
 8008684:	2100      	movs	r1, #0
 8008686:	f7fe fb57 	bl	8006d38 <memset>
 800868a:	e016      	b.n	80086ba <_calloc_r+0x56>
 800868c:	1c2b      	adds	r3, r5, #0
 800868e:	1c0c      	adds	r4, r1, #0
 8008690:	b289      	uxth	r1, r1
 8008692:	b292      	uxth	r2, r2
 8008694:	434a      	muls	r2, r1
 8008696:	b29b      	uxth	r3, r3
 8008698:	b2a1      	uxth	r1, r4
 800869a:	4359      	muls	r1, r3
 800869c:	0c14      	lsrs	r4, r2, #16
 800869e:	190c      	adds	r4, r1, r4
 80086a0:	0c23      	lsrs	r3, r4, #16
 80086a2:	d107      	bne.n	80086b4 <_calloc_r+0x50>
 80086a4:	0424      	lsls	r4, r4, #16
 80086a6:	b292      	uxth	r2, r2
 80086a8:	4314      	orrs	r4, r2
 80086aa:	e7e5      	b.n	8008678 <_calloc_r+0x14>
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	d101      	bne.n	80086b4 <_calloc_r+0x50>
 80086b0:	1c14      	adds	r4, r2, #0
 80086b2:	e7ed      	b.n	8008690 <_calloc_r+0x2c>
 80086b4:	230c      	movs	r3, #12
 80086b6:	2500      	movs	r5, #0
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	0028      	movs	r0, r5
 80086bc:	bd70      	pop	{r4, r5, r6, pc}

080086be <__ascii_mbtowc>:
 80086be:	b082      	sub	sp, #8
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d100      	bne.n	80086c6 <__ascii_mbtowc+0x8>
 80086c4:	a901      	add	r1, sp, #4
 80086c6:	1e10      	subs	r0, r2, #0
 80086c8:	d006      	beq.n	80086d8 <__ascii_mbtowc+0x1a>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7810      	ldrb	r0, [r2, #0]
 80086d4:	1e43      	subs	r3, r0, #1
 80086d6:	4198      	sbcs	r0, r3
 80086d8:	b002      	add	sp, #8
 80086da:	4770      	bx	lr
 80086dc:	2002      	movs	r0, #2
 80086de:	4240      	negs	r0, r0
 80086e0:	e7fa      	b.n	80086d8 <__ascii_mbtowc+0x1a>

080086e2 <__ascii_wctomb>:
 80086e2:	0003      	movs	r3, r0
 80086e4:	1e08      	subs	r0, r1, #0
 80086e6:	d005      	beq.n	80086f4 <__ascii_wctomb+0x12>
 80086e8:	2aff      	cmp	r2, #255	@ 0xff
 80086ea:	d904      	bls.n	80086f6 <__ascii_wctomb+0x14>
 80086ec:	228a      	movs	r2, #138	@ 0x8a
 80086ee:	2001      	movs	r0, #1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	4240      	negs	r0, r0
 80086f4:	4770      	bx	lr
 80086f6:	2001      	movs	r0, #1
 80086f8:	700a      	strb	r2, [r1, #0]
 80086fa:	e7fb      	b.n	80086f4 <__ascii_wctomb+0x12>

080086fc <fiprintf>:
 80086fc:	b40e      	push	{r1, r2, r3}
 80086fe:	b517      	push	{r0, r1, r2, r4, lr}
 8008700:	4c05      	ldr	r4, [pc, #20]	@ (8008718 <fiprintf+0x1c>)
 8008702:	ab05      	add	r3, sp, #20
 8008704:	cb04      	ldmia	r3!, {r2}
 8008706:	0001      	movs	r1, r0
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	f000 f834 	bl	8008778 <_vfiprintf_r>
 8008710:	bc1e      	pop	{r1, r2, r3, r4}
 8008712:	bc08      	pop	{r3}
 8008714:	b003      	add	sp, #12
 8008716:	4718      	bx	r3
 8008718:	20000020 	.word	0x20000020

0800871c <abort>:
 800871c:	2006      	movs	r0, #6
 800871e:	b510      	push	{r4, lr}
 8008720:	f000 fa10 	bl	8008b44 <raise>
 8008724:	2001      	movs	r0, #1
 8008726:	f7fa fb4f 	bl	8002dc8 <_exit>

0800872a <__sfputc_r>:
 800872a:	6893      	ldr	r3, [r2, #8]
 800872c:	b510      	push	{r4, lr}
 800872e:	3b01      	subs	r3, #1
 8008730:	6093      	str	r3, [r2, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	da04      	bge.n	8008740 <__sfputc_r+0x16>
 8008736:	6994      	ldr	r4, [r2, #24]
 8008738:	42a3      	cmp	r3, r4
 800873a:	db07      	blt.n	800874c <__sfputc_r+0x22>
 800873c:	290a      	cmp	r1, #10
 800873e:	d005      	beq.n	800874c <__sfputc_r+0x22>
 8008740:	6813      	ldr	r3, [r2, #0]
 8008742:	1c58      	adds	r0, r3, #1
 8008744:	6010      	str	r0, [r2, #0]
 8008746:	7019      	strb	r1, [r3, #0]
 8008748:	0008      	movs	r0, r1
 800874a:	bd10      	pop	{r4, pc}
 800874c:	f000 f930 	bl	80089b0 <__swbuf_r>
 8008750:	0001      	movs	r1, r0
 8008752:	e7f9      	b.n	8008748 <__sfputc_r+0x1e>

08008754 <__sfputs_r>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	0006      	movs	r6, r0
 8008758:	000f      	movs	r7, r1
 800875a:	0014      	movs	r4, r2
 800875c:	18d5      	adds	r5, r2, r3
 800875e:	42ac      	cmp	r4, r5
 8008760:	d101      	bne.n	8008766 <__sfputs_r+0x12>
 8008762:	2000      	movs	r0, #0
 8008764:	e007      	b.n	8008776 <__sfputs_r+0x22>
 8008766:	7821      	ldrb	r1, [r4, #0]
 8008768:	003a      	movs	r2, r7
 800876a:	0030      	movs	r0, r6
 800876c:	f7ff ffdd 	bl	800872a <__sfputc_r>
 8008770:	3401      	adds	r4, #1
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	d1f3      	bne.n	800875e <__sfputs_r+0xa>
 8008776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008778 <_vfiprintf_r>:
 8008778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800877a:	b0a1      	sub	sp, #132	@ 0x84
 800877c:	000f      	movs	r7, r1
 800877e:	0015      	movs	r5, r2
 8008780:	001e      	movs	r6, r3
 8008782:	9003      	str	r0, [sp, #12]
 8008784:	2800      	cmp	r0, #0
 8008786:	d004      	beq.n	8008792 <_vfiprintf_r+0x1a>
 8008788:	6a03      	ldr	r3, [r0, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <_vfiprintf_r+0x1a>
 800878e:	f7fe fa53 	bl	8006c38 <__sinit>
 8008792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008794:	07db      	lsls	r3, r3, #31
 8008796:	d405      	bmi.n	80087a4 <_vfiprintf_r+0x2c>
 8008798:	89bb      	ldrh	r3, [r7, #12]
 800879a:	059b      	lsls	r3, r3, #22
 800879c:	d402      	bmi.n	80087a4 <_vfiprintf_r+0x2c>
 800879e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087a0:	f7fe fb4f 	bl	8006e42 <__retarget_lock_acquire_recursive>
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	071b      	lsls	r3, r3, #28
 80087a8:	d502      	bpl.n	80087b0 <_vfiprintf_r+0x38>
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d113      	bne.n	80087d8 <_vfiprintf_r+0x60>
 80087b0:	0039      	movs	r1, r7
 80087b2:	9803      	ldr	r0, [sp, #12]
 80087b4:	f000 f93e 	bl	8008a34 <__swsetup_r>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d00d      	beq.n	80087d8 <_vfiprintf_r+0x60>
 80087bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087be:	07db      	lsls	r3, r3, #31
 80087c0:	d503      	bpl.n	80087ca <_vfiprintf_r+0x52>
 80087c2:	2001      	movs	r0, #1
 80087c4:	4240      	negs	r0, r0
 80087c6:	b021      	add	sp, #132	@ 0x84
 80087c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ca:	89bb      	ldrh	r3, [r7, #12]
 80087cc:	059b      	lsls	r3, r3, #22
 80087ce:	d4f8      	bmi.n	80087c2 <_vfiprintf_r+0x4a>
 80087d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087d2:	f7fe fb37 	bl	8006e44 <__retarget_lock_release_recursive>
 80087d6:	e7f4      	b.n	80087c2 <_vfiprintf_r+0x4a>
 80087d8:	2300      	movs	r3, #0
 80087da:	ac08      	add	r4, sp, #32
 80087dc:	6163      	str	r3, [r4, #20]
 80087de:	3320      	adds	r3, #32
 80087e0:	7663      	strb	r3, [r4, #25]
 80087e2:	3310      	adds	r3, #16
 80087e4:	76a3      	strb	r3, [r4, #26]
 80087e6:	9607      	str	r6, [sp, #28]
 80087e8:	002e      	movs	r6, r5
 80087ea:	7833      	ldrb	r3, [r6, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <_vfiprintf_r+0x7c>
 80087f0:	2b25      	cmp	r3, #37	@ 0x25
 80087f2:	d148      	bne.n	8008886 <_vfiprintf_r+0x10e>
 80087f4:	1b73      	subs	r3, r6, r5
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	42ae      	cmp	r6, r5
 80087fa:	d00b      	beq.n	8008814 <_vfiprintf_r+0x9c>
 80087fc:	002a      	movs	r2, r5
 80087fe:	0039      	movs	r1, r7
 8008800:	9803      	ldr	r0, [sp, #12]
 8008802:	f7ff ffa7 	bl	8008754 <__sfputs_r>
 8008806:	3001      	adds	r0, #1
 8008808:	d100      	bne.n	800880c <_vfiprintf_r+0x94>
 800880a:	e0ae      	b.n	800896a <_vfiprintf_r+0x1f2>
 800880c:	6963      	ldr	r3, [r4, #20]
 800880e:	9a05      	ldr	r2, [sp, #20]
 8008810:	189b      	adds	r3, r3, r2
 8008812:	6163      	str	r3, [r4, #20]
 8008814:	7833      	ldrb	r3, [r6, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d100      	bne.n	800881c <_vfiprintf_r+0xa4>
 800881a:	e0a6      	b.n	800896a <_vfiprintf_r+0x1f2>
 800881c:	2201      	movs	r2, #1
 800881e:	2300      	movs	r3, #0
 8008820:	4252      	negs	r2, r2
 8008822:	6062      	str	r2, [r4, #4]
 8008824:	a904      	add	r1, sp, #16
 8008826:	3254      	adds	r2, #84	@ 0x54
 8008828:	1852      	adds	r2, r2, r1
 800882a:	1c75      	adds	r5, r6, #1
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	60e3      	str	r3, [r4, #12]
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	7013      	strb	r3, [r2, #0]
 8008834:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008836:	4b59      	ldr	r3, [pc, #356]	@ (800899c <_vfiprintf_r+0x224>)
 8008838:	2205      	movs	r2, #5
 800883a:	0018      	movs	r0, r3
 800883c:	7829      	ldrb	r1, [r5, #0]
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	f7fe fb01 	bl	8006e46 <memchr>
 8008844:	1c6e      	adds	r6, r5, #1
 8008846:	2800      	cmp	r0, #0
 8008848:	d11f      	bne.n	800888a <_vfiprintf_r+0x112>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	06d3      	lsls	r3, r2, #27
 800884e:	d504      	bpl.n	800885a <_vfiprintf_r+0xe2>
 8008850:	2353      	movs	r3, #83	@ 0x53
 8008852:	a904      	add	r1, sp, #16
 8008854:	185b      	adds	r3, r3, r1
 8008856:	2120      	movs	r1, #32
 8008858:	7019      	strb	r1, [r3, #0]
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	d504      	bpl.n	8008868 <_vfiprintf_r+0xf0>
 800885e:	2353      	movs	r3, #83	@ 0x53
 8008860:	a904      	add	r1, sp, #16
 8008862:	185b      	adds	r3, r3, r1
 8008864:	212b      	movs	r1, #43	@ 0x2b
 8008866:	7019      	strb	r1, [r3, #0]
 8008868:	782b      	ldrb	r3, [r5, #0]
 800886a:	2b2a      	cmp	r3, #42	@ 0x2a
 800886c:	d016      	beq.n	800889c <_vfiprintf_r+0x124>
 800886e:	002e      	movs	r6, r5
 8008870:	2100      	movs	r1, #0
 8008872:	200a      	movs	r0, #10
 8008874:	68e3      	ldr	r3, [r4, #12]
 8008876:	7832      	ldrb	r2, [r6, #0]
 8008878:	1c75      	adds	r5, r6, #1
 800887a:	3a30      	subs	r2, #48	@ 0x30
 800887c:	2a09      	cmp	r2, #9
 800887e:	d950      	bls.n	8008922 <_vfiprintf_r+0x1aa>
 8008880:	2900      	cmp	r1, #0
 8008882:	d111      	bne.n	80088a8 <_vfiprintf_r+0x130>
 8008884:	e017      	b.n	80088b6 <_vfiprintf_r+0x13e>
 8008886:	3601      	adds	r6, #1
 8008888:	e7af      	b.n	80087ea <_vfiprintf_r+0x72>
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	1ac0      	subs	r0, r0, r3
 8008890:	2301      	movs	r3, #1
 8008892:	4083      	lsls	r3, r0
 8008894:	4313      	orrs	r3, r2
 8008896:	0035      	movs	r5, r6
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	e7cc      	b.n	8008836 <_vfiprintf_r+0xbe>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	1d19      	adds	r1, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	9107      	str	r1, [sp, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	db01      	blt.n	80088ac <_vfiprintf_r+0x134>
 80088a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088aa:	e004      	b.n	80088b6 <_vfiprintf_r+0x13e>
 80088ac:	425b      	negs	r3, r3
 80088ae:	60e3      	str	r3, [r4, #12]
 80088b0:	2302      	movs	r3, #2
 80088b2:	4313      	orrs	r3, r2
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	7833      	ldrb	r3, [r6, #0]
 80088b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80088ba:	d10c      	bne.n	80088d6 <_vfiprintf_r+0x15e>
 80088bc:	7873      	ldrb	r3, [r6, #1]
 80088be:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c0:	d134      	bne.n	800892c <_vfiprintf_r+0x1b4>
 80088c2:	9b07      	ldr	r3, [sp, #28]
 80088c4:	3602      	adds	r6, #2
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9207      	str	r2, [sp, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	da01      	bge.n	80088d4 <_vfiprintf_r+0x15c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	425b      	negs	r3, r3
 80088d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d6:	4d32      	ldr	r5, [pc, #200]	@ (80089a0 <_vfiprintf_r+0x228>)
 80088d8:	2203      	movs	r2, #3
 80088da:	0028      	movs	r0, r5
 80088dc:	7831      	ldrb	r1, [r6, #0]
 80088de:	f7fe fab2 	bl	8006e46 <memchr>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d006      	beq.n	80088f4 <_vfiprintf_r+0x17c>
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	1b40      	subs	r0, r0, r5
 80088ea:	4083      	lsls	r3, r0
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	3601      	adds	r6, #1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	7831      	ldrb	r1, [r6, #0]
 80088f6:	2206      	movs	r2, #6
 80088f8:	482a      	ldr	r0, [pc, #168]	@ (80089a4 <_vfiprintf_r+0x22c>)
 80088fa:	1c75      	adds	r5, r6, #1
 80088fc:	7621      	strb	r1, [r4, #24]
 80088fe:	f7fe faa2 	bl	8006e46 <memchr>
 8008902:	2800      	cmp	r0, #0
 8008904:	d040      	beq.n	8008988 <_vfiprintf_r+0x210>
 8008906:	4b28      	ldr	r3, [pc, #160]	@ (80089a8 <_vfiprintf_r+0x230>)
 8008908:	2b00      	cmp	r3, #0
 800890a:	d122      	bne.n	8008952 <_vfiprintf_r+0x1da>
 800890c:	2207      	movs	r2, #7
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	3307      	adds	r3, #7
 8008912:	4393      	bics	r3, r2
 8008914:	3308      	adds	r3, #8
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	6963      	ldr	r3, [r4, #20]
 800891a:	9a04      	ldr	r2, [sp, #16]
 800891c:	189b      	adds	r3, r3, r2
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	e762      	b.n	80087e8 <_vfiprintf_r+0x70>
 8008922:	4343      	muls	r3, r0
 8008924:	002e      	movs	r6, r5
 8008926:	2101      	movs	r1, #1
 8008928:	189b      	adds	r3, r3, r2
 800892a:	e7a4      	b.n	8008876 <_vfiprintf_r+0xfe>
 800892c:	2300      	movs	r3, #0
 800892e:	200a      	movs	r0, #10
 8008930:	0019      	movs	r1, r3
 8008932:	3601      	adds	r6, #1
 8008934:	6063      	str	r3, [r4, #4]
 8008936:	7832      	ldrb	r2, [r6, #0]
 8008938:	1c75      	adds	r5, r6, #1
 800893a:	3a30      	subs	r2, #48	@ 0x30
 800893c:	2a09      	cmp	r2, #9
 800893e:	d903      	bls.n	8008948 <_vfiprintf_r+0x1d0>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0c8      	beq.n	80088d6 <_vfiprintf_r+0x15e>
 8008944:	9109      	str	r1, [sp, #36]	@ 0x24
 8008946:	e7c6      	b.n	80088d6 <_vfiprintf_r+0x15e>
 8008948:	4341      	muls	r1, r0
 800894a:	002e      	movs	r6, r5
 800894c:	2301      	movs	r3, #1
 800894e:	1889      	adds	r1, r1, r2
 8008950:	e7f1      	b.n	8008936 <_vfiprintf_r+0x1be>
 8008952:	aa07      	add	r2, sp, #28
 8008954:	9200      	str	r2, [sp, #0]
 8008956:	0021      	movs	r1, r4
 8008958:	003a      	movs	r2, r7
 800895a:	4b14      	ldr	r3, [pc, #80]	@ (80089ac <_vfiprintf_r+0x234>)
 800895c:	9803      	ldr	r0, [sp, #12]
 800895e:	f7fd fd21 	bl	80063a4 <_printf_float>
 8008962:	9004      	str	r0, [sp, #16]
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	3301      	adds	r3, #1
 8008968:	d1d6      	bne.n	8008918 <_vfiprintf_r+0x1a0>
 800896a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800896c:	07db      	lsls	r3, r3, #31
 800896e:	d405      	bmi.n	800897c <_vfiprintf_r+0x204>
 8008970:	89bb      	ldrh	r3, [r7, #12]
 8008972:	059b      	lsls	r3, r3, #22
 8008974:	d402      	bmi.n	800897c <_vfiprintf_r+0x204>
 8008976:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008978:	f7fe fa64 	bl	8006e44 <__retarget_lock_release_recursive>
 800897c:	89bb      	ldrh	r3, [r7, #12]
 800897e:	065b      	lsls	r3, r3, #25
 8008980:	d500      	bpl.n	8008984 <_vfiprintf_r+0x20c>
 8008982:	e71e      	b.n	80087c2 <_vfiprintf_r+0x4a>
 8008984:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008986:	e71e      	b.n	80087c6 <_vfiprintf_r+0x4e>
 8008988:	aa07      	add	r2, sp, #28
 800898a:	9200      	str	r2, [sp, #0]
 800898c:	0021      	movs	r1, r4
 800898e:	003a      	movs	r2, r7
 8008990:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <_vfiprintf_r+0x234>)
 8008992:	9803      	ldr	r0, [sp, #12]
 8008994:	f7fd ffb4 	bl	8006900 <_printf_i>
 8008998:	e7e3      	b.n	8008962 <_vfiprintf_r+0x1ea>
 800899a:	46c0      	nop			@ (mov r8, r8)
 800899c:	08008ed8 	.word	0x08008ed8
 80089a0:	08008ede 	.word	0x08008ede
 80089a4:	08008ee2 	.word	0x08008ee2
 80089a8:	080063a5 	.word	0x080063a5
 80089ac:	08008755 	.word	0x08008755

080089b0 <__swbuf_r>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	0006      	movs	r6, r0
 80089b4:	000d      	movs	r5, r1
 80089b6:	0014      	movs	r4, r2
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d004      	beq.n	80089c6 <__swbuf_r+0x16>
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <__swbuf_r+0x16>
 80089c2:	f7fe f939 	bl	8006c38 <__sinit>
 80089c6:	69a3      	ldr	r3, [r4, #24]
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	071b      	lsls	r3, r3, #28
 80089ce:	d502      	bpl.n	80089d6 <__swbuf_r+0x26>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <__swbuf_r+0x3a>
 80089d6:	0021      	movs	r1, r4
 80089d8:	0030      	movs	r0, r6
 80089da:	f000 f82b 	bl	8008a34 <__swsetup_r>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d003      	beq.n	80089ea <__swbuf_r+0x3a>
 80089e2:	2501      	movs	r5, #1
 80089e4:	426d      	negs	r5, r5
 80089e6:	0028      	movs	r0, r5
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	b2ef      	uxtb	r7, r5
 80089f0:	1ac0      	subs	r0, r0, r3
 80089f2:	6963      	ldr	r3, [r4, #20]
 80089f4:	b2ed      	uxtb	r5, r5
 80089f6:	4283      	cmp	r3, r0
 80089f8:	dc05      	bgt.n	8008a06 <__swbuf_r+0x56>
 80089fa:	0021      	movs	r1, r4
 80089fc:	0030      	movs	r0, r6
 80089fe:	f7ff fdcb 	bl	8008598 <_fflush_r>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1ed      	bne.n	80089e2 <__swbuf_r+0x32>
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	3001      	adds	r0, #1
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	60a3      	str	r3, [r4, #8]
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	701f      	strb	r7, [r3, #0]
 8008a16:	6963      	ldr	r3, [r4, #20]
 8008a18:	4283      	cmp	r3, r0
 8008a1a:	d004      	beq.n	8008a26 <__swbuf_r+0x76>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d5e1      	bpl.n	80089e6 <__swbuf_r+0x36>
 8008a22:	2d0a      	cmp	r5, #10
 8008a24:	d1df      	bne.n	80089e6 <__swbuf_r+0x36>
 8008a26:	0021      	movs	r1, r4
 8008a28:	0030      	movs	r0, r6
 8008a2a:	f7ff fdb5 	bl	8008598 <_fflush_r>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0d9      	beq.n	80089e6 <__swbuf_r+0x36>
 8008a32:	e7d6      	b.n	80089e2 <__swbuf_r+0x32>

08008a34 <__swsetup_r>:
 8008a34:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <__swsetup_r+0xb8>)
 8008a36:	b570      	push	{r4, r5, r6, lr}
 8008a38:	0005      	movs	r5, r0
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	000c      	movs	r4, r1
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d004      	beq.n	8008a4c <__swsetup_r+0x18>
 8008a42:	6a03      	ldr	r3, [r0, #32]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <__swsetup_r+0x18>
 8008a48:	f7fe f8f6 	bl	8006c38 <__sinit>
 8008a4c:	220c      	movs	r2, #12
 8008a4e:	5ea3      	ldrsh	r3, [r4, r2]
 8008a50:	071a      	lsls	r2, r3, #28
 8008a52:	d423      	bmi.n	8008a9c <__swsetup_r+0x68>
 8008a54:	06da      	lsls	r2, r3, #27
 8008a56:	d407      	bmi.n	8008a68 <__swsetup_r+0x34>
 8008a58:	2209      	movs	r2, #9
 8008a5a:	602a      	str	r2, [r5, #0]
 8008a5c:	2240      	movs	r2, #64	@ 0x40
 8008a5e:	2001      	movs	r0, #1
 8008a60:	4313      	orrs	r3, r2
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	4240      	negs	r0, r0
 8008a66:	e03a      	b.n	8008ade <__swsetup_r+0xaa>
 8008a68:	075b      	lsls	r3, r3, #29
 8008a6a:	d513      	bpl.n	8008a94 <__swsetup_r+0x60>
 8008a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a6e:	2900      	cmp	r1, #0
 8008a70:	d008      	beq.n	8008a84 <__swsetup_r+0x50>
 8008a72:	0023      	movs	r3, r4
 8008a74:	3344      	adds	r3, #68	@ 0x44
 8008a76:	4299      	cmp	r1, r3
 8008a78:	d002      	beq.n	8008a80 <__swsetup_r+0x4c>
 8008a7a:	0028      	movs	r0, r5
 8008a7c:	f7ff f864 	bl	8007b48 <_free_r>
 8008a80:	2300      	movs	r3, #0
 8008a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a84:	2224      	movs	r2, #36	@ 0x24
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	4393      	bics	r3, r2
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	2308      	movs	r3, #8
 8008a96:	89a2      	ldrh	r2, [r4, #12]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <__swsetup_r+0x86>
 8008aa2:	21a0      	movs	r1, #160	@ 0xa0
 8008aa4:	2280      	movs	r2, #128	@ 0x80
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	0089      	lsls	r1, r1, #2
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	400b      	ands	r3, r1
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <__swsetup_r+0x86>
 8008ab2:	0021      	movs	r1, r4
 8008ab4:	0028      	movs	r0, r5
 8008ab6:	f000 f88f 	bl	8008bd8 <__smakebuf_r>
 8008aba:	220c      	movs	r2, #12
 8008abc:	5ea3      	ldrsh	r3, [r4, r2]
 8008abe:	2101      	movs	r1, #1
 8008ac0:	001a      	movs	r2, r3
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	420b      	tst	r3, r1
 8008ac6:	d00b      	beq.n	8008ae0 <__swsetup_r+0xac>
 8008ac8:	2200      	movs	r2, #0
 8008aca:	60a2      	str	r2, [r4, #8]
 8008acc:	6962      	ldr	r2, [r4, #20]
 8008ace:	4252      	negs	r2, r2
 8008ad0:	61a2      	str	r2, [r4, #24]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	4282      	cmp	r2, r0
 8008ad8:	d101      	bne.n	8008ade <__swsetup_r+0xaa>
 8008ada:	061a      	lsls	r2, r3, #24
 8008adc:	d4be      	bmi.n	8008a5c <__swsetup_r+0x28>
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	0799      	lsls	r1, r3, #30
 8008ae2:	d400      	bmi.n	8008ae6 <__swsetup_r+0xb2>
 8008ae4:	6962      	ldr	r2, [r4, #20]
 8008ae6:	60a2      	str	r2, [r4, #8]
 8008ae8:	e7f3      	b.n	8008ad2 <__swsetup_r+0x9e>
 8008aea:	46c0      	nop			@ (mov r8, r8)
 8008aec:	20000020 	.word	0x20000020

08008af0 <_raise_r>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	0004      	movs	r4, r0
 8008af4:	000d      	movs	r5, r1
 8008af6:	291f      	cmp	r1, #31
 8008af8:	d904      	bls.n	8008b04 <_raise_r+0x14>
 8008afa:	2316      	movs	r3, #22
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	2001      	movs	r0, #1
 8008b00:	4240      	negs	r0, r0
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <_raise_r+0x24>
 8008b0a:	008a      	lsls	r2, r1, #2
 8008b0c:	189b      	adds	r3, r3, r2
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d108      	bne.n	8008b26 <_raise_r+0x36>
 8008b14:	0020      	movs	r0, r4
 8008b16:	f000 f831 	bl	8008b7c <_getpid_r>
 8008b1a:	002a      	movs	r2, r5
 8008b1c:	0001      	movs	r1, r0
 8008b1e:	0020      	movs	r0, r4
 8008b20:	f000 f81a 	bl	8008b58 <_kill_r>
 8008b24:	e7ed      	b.n	8008b02 <_raise_r+0x12>
 8008b26:	2a01      	cmp	r2, #1
 8008b28:	d009      	beq.n	8008b3e <_raise_r+0x4e>
 8008b2a:	1c51      	adds	r1, r2, #1
 8008b2c:	d103      	bne.n	8008b36 <_raise_r+0x46>
 8008b2e:	2316      	movs	r3, #22
 8008b30:	6003      	str	r3, [r0, #0]
 8008b32:	2001      	movs	r0, #1
 8008b34:	e7e5      	b.n	8008b02 <_raise_r+0x12>
 8008b36:	2100      	movs	r1, #0
 8008b38:	0028      	movs	r0, r5
 8008b3a:	6019      	str	r1, [r3, #0]
 8008b3c:	4790      	blx	r2
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e7df      	b.n	8008b02 <_raise_r+0x12>
	...

08008b44 <raise>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4b03      	ldr	r3, [pc, #12]	@ (8008b54 <raise+0x10>)
 8008b48:	0001      	movs	r1, r0
 8008b4a:	6818      	ldr	r0, [r3, #0]
 8008b4c:	f7ff ffd0 	bl	8008af0 <_raise_r>
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	20000020 	.word	0x20000020

08008b58 <_kill_r>:
 8008b58:	2300      	movs	r3, #0
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	4d06      	ldr	r5, [pc, #24]	@ (8008b78 <_kill_r+0x20>)
 8008b5e:	0004      	movs	r4, r0
 8008b60:	0008      	movs	r0, r1
 8008b62:	0011      	movs	r1, r2
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	f7fa f91f 	bl	8002da8 <_kill>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d103      	bne.n	8008b76 <_kill_r+0x1e>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d000      	beq.n	8008b76 <_kill_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	2000047c 	.word	0x2000047c

08008b7c <_getpid_r>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	f7fa f90d 	bl	8002d9c <_getpid>
 8008b82:	bd10      	pop	{r4, pc}

08008b84 <__swhatbuf_r>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	000e      	movs	r6, r1
 8008b88:	001d      	movs	r5, r3
 8008b8a:	230e      	movs	r3, #14
 8008b8c:	5ec9      	ldrsh	r1, [r1, r3]
 8008b8e:	0014      	movs	r4, r2
 8008b90:	b096      	sub	sp, #88	@ 0x58
 8008b92:	2900      	cmp	r1, #0
 8008b94:	da0c      	bge.n	8008bb0 <__swhatbuf_r+0x2c>
 8008b96:	89b2      	ldrh	r2, [r6, #12]
 8008b98:	2380      	movs	r3, #128	@ 0x80
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	4019      	ands	r1, r3
 8008b9e:	421a      	tst	r2, r3
 8008ba0:	d114      	bne.n	8008bcc <__swhatbuf_r+0x48>
 8008ba2:	2380      	movs	r3, #128	@ 0x80
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	6029      	str	r1, [r5, #0]
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	b016      	add	sp, #88	@ 0x58
 8008bae:	bd70      	pop	{r4, r5, r6, pc}
 8008bb0:	466a      	mov	r2, sp
 8008bb2:	f000 f853 	bl	8008c5c <_fstat_r>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	dbed      	blt.n	8008b96 <__swhatbuf_r+0x12>
 8008bba:	23f0      	movs	r3, #240	@ 0xf0
 8008bbc:	9901      	ldr	r1, [sp, #4]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	4019      	ands	r1, r3
 8008bc2:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <__swhatbuf_r+0x50>)
 8008bc4:	18c9      	adds	r1, r1, r3
 8008bc6:	424b      	negs	r3, r1
 8008bc8:	4159      	adcs	r1, r3
 8008bca:	e7ea      	b.n	8008ba2 <__swhatbuf_r+0x1e>
 8008bcc:	2100      	movs	r1, #0
 8008bce:	2340      	movs	r3, #64	@ 0x40
 8008bd0:	e7e9      	b.n	8008ba6 <__swhatbuf_r+0x22>
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	ffffe000 	.word	0xffffe000

08008bd8 <__smakebuf_r>:
 8008bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bda:	2602      	movs	r6, #2
 8008bdc:	898b      	ldrh	r3, [r1, #12]
 8008bde:	0005      	movs	r5, r0
 8008be0:	000c      	movs	r4, r1
 8008be2:	b085      	sub	sp, #20
 8008be4:	4233      	tst	r3, r6
 8008be6:	d007      	beq.n	8008bf8 <__smakebuf_r+0x20>
 8008be8:	0023      	movs	r3, r4
 8008bea:	3347      	adds	r3, #71	@ 0x47
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	6163      	str	r3, [r4, #20]
 8008bf4:	b005      	add	sp, #20
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf8:	ab03      	add	r3, sp, #12
 8008bfa:	aa02      	add	r2, sp, #8
 8008bfc:	f7ff ffc2 	bl	8008b84 <__swhatbuf_r>
 8008c00:	9f02      	ldr	r7, [sp, #8]
 8008c02:	9001      	str	r0, [sp, #4]
 8008c04:	0039      	movs	r1, r7
 8008c06:	0028      	movs	r0, r5
 8008c08:	f7ff f814 	bl	8007c34 <_malloc_r>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d108      	bne.n	8008c22 <__smakebuf_r+0x4a>
 8008c10:	220c      	movs	r2, #12
 8008c12:	5ea3      	ldrsh	r3, [r4, r2]
 8008c14:	059a      	lsls	r2, r3, #22
 8008c16:	d4ed      	bmi.n	8008bf4 <__smakebuf_r+0x1c>
 8008c18:	2203      	movs	r2, #3
 8008c1a:	4393      	bics	r3, r2
 8008c1c:	431e      	orrs	r6, r3
 8008c1e:	81a6      	strh	r6, [r4, #12]
 8008c20:	e7e2      	b.n	8008be8 <__smakebuf_r+0x10>
 8008c22:	2380      	movs	r3, #128	@ 0x80
 8008c24:	89a2      	ldrh	r2, [r4, #12]
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	6120      	str	r0, [r4, #16]
 8008c30:	6167      	str	r7, [r4, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <__smakebuf_r+0x78>
 8008c36:	0028      	movs	r0, r5
 8008c38:	230e      	movs	r3, #14
 8008c3a:	5ee1      	ldrsh	r1, [r4, r3]
 8008c3c:	f000 f820 	bl	8008c80 <_isatty_r>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d005      	beq.n	8008c50 <__smakebuf_r+0x78>
 8008c44:	2303      	movs	r3, #3
 8008c46:	89a2      	ldrh	r2, [r4, #12]
 8008c48:	439a      	bics	r2, r3
 8008c4a:	3b02      	subs	r3, #2
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	9a01      	ldr	r2, [sp, #4]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	e7cc      	b.n	8008bf4 <__smakebuf_r+0x1c>
	...

08008c5c <_fstat_r>:
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	b570      	push	{r4, r5, r6, lr}
 8008c60:	4d06      	ldr	r5, [pc, #24]	@ (8008c7c <_fstat_r+0x20>)
 8008c62:	0004      	movs	r4, r0
 8008c64:	0008      	movs	r0, r1
 8008c66:	0011      	movs	r1, r2
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	f7fa f8fd 	bl	8002e68 <_fstat>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d103      	bne.n	8008c7a <_fstat_r+0x1e>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d000      	beq.n	8008c7a <_fstat_r+0x1e>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	2000047c 	.word	0x2000047c

08008c80 <_isatty_r>:
 8008c80:	2300      	movs	r3, #0
 8008c82:	b570      	push	{r4, r5, r6, lr}
 8008c84:	4d06      	ldr	r5, [pc, #24]	@ (8008ca0 <_isatty_r+0x20>)
 8008c86:	0004      	movs	r4, r0
 8008c88:	0008      	movs	r0, r1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	f7fa f8fa 	bl	8002e84 <_isatty>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d103      	bne.n	8008c9c <_isatty_r+0x1c>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d000      	beq.n	8008c9c <_isatty_r+0x1c>
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	46c0      	nop			@ (mov r8, r8)
 8008ca0:	2000047c 	.word	0x2000047c

08008ca4 <_init>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr

08008cb0 <_fini>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	46c0      	nop			@ (mov r8, r8)
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr
