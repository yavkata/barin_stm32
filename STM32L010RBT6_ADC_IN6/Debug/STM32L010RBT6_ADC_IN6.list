
STM32L010RBT6_ADC_IN6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08008a50  08008a50  00009a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f04  08008f04  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f04  08008f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f0c  08008f0c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d4  080090e8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080090e8  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fd5  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc3  00000000  00000000  000141d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00015d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000665  00000000  00000000  000165f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001230b  00000000  00000000  00016c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab2b  00000000  00000000  00028f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ba72  00000000  00000000  00033a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e98  00000000  00000000  0009f548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a23e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008a34 	.word	0x08008a34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08008a34 	.word	0x08008a34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb67 	bl	8001b10 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 faab 	bl	80019a8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb59 	bl	8001b10 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb4f 	bl	8001b10 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fad5 	bl	8001a30 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 facb 	bl	8001a30 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 fb76 	bl	8002bf8 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fb71 	bl	8002bf8 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	4646      	mov	r6, r8
 8000684:	464f      	mov	r7, r9
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0fc3      	lsrs	r3, r0, #31
 800068e:	0047      	lsls	r7, r0, #1
 8000690:	4698      	mov	r8, r3
 8000692:	1c0e      	adds	r6, r1, #0
 8000694:	0a6d      	lsrs	r5, r5, #9
 8000696:	0e3f      	lsrs	r7, r7, #24
 8000698:	d05b      	beq.n	8000752 <__aeabi_fdiv+0xd2>
 800069a:	2fff      	cmp	r7, #255	@ 0xff
 800069c:	d021      	beq.n	80006e2 <__aeabi_fdiv+0x62>
 800069e:	2380      	movs	r3, #128	@ 0x80
 80006a0:	00ed      	lsls	r5, r5, #3
 80006a2:	04db      	lsls	r3, r3, #19
 80006a4:	431d      	orrs	r5, r3
 80006a6:	2300      	movs	r3, #0
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	3f7f      	subs	r7, #127	@ 0x7f
 80006ae:	0274      	lsls	r4, r6, #9
 80006b0:	0073      	lsls	r3, r6, #1
 80006b2:	0a64      	lsrs	r4, r4, #9
 80006b4:	0e1b      	lsrs	r3, r3, #24
 80006b6:	0ff6      	lsrs	r6, r6, #31
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d020      	beq.n	80006fe <__aeabi_fdiv+0x7e>
 80006bc:	2bff      	cmp	r3, #255	@ 0xff
 80006be:	d043      	beq.n	8000748 <__aeabi_fdiv+0xc8>
 80006c0:	2280      	movs	r2, #128	@ 0x80
 80006c2:	2000      	movs	r0, #0
 80006c4:	00e4      	lsls	r4, r4, #3
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4314      	orrs	r4, r2
 80006ca:	3b7f      	subs	r3, #127	@ 0x7f
 80006cc:	4642      	mov	r2, r8
 80006ce:	1aff      	subs	r7, r7, r3
 80006d0:	464b      	mov	r3, r9
 80006d2:	4072      	eors	r2, r6
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d900      	bls.n	80006da <__aeabi_fdiv+0x5a>
 80006d8:	e09d      	b.n	8000816 <__aeabi_fdiv+0x196>
 80006da:	4971      	ldr	r1, [pc, #452]	@ (80008a0 <__aeabi_fdiv+0x220>)
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	58cb      	ldr	r3, [r1, r3]
 80006e0:	469f      	mov	pc, r3
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d15a      	bne.n	800079c <__aeabi_fdiv+0x11c>
 80006e6:	2308      	movs	r3, #8
 80006e8:	4699      	mov	r9, r3
 80006ea:	3b06      	subs	r3, #6
 80006ec:	0274      	lsls	r4, r6, #9
 80006ee:	469a      	mov	sl, r3
 80006f0:	0073      	lsls	r3, r6, #1
 80006f2:	27ff      	movs	r7, #255	@ 0xff
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	0ff6      	lsrs	r6, r6, #31
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1de      	bne.n	80006bc <__aeabi_fdiv+0x3c>
 80006fe:	2c00      	cmp	r4, #0
 8000700:	d13b      	bne.n	800077a <__aeabi_fdiv+0xfa>
 8000702:	2301      	movs	r3, #1
 8000704:	4642      	mov	r2, r8
 8000706:	4649      	mov	r1, r9
 8000708:	4072      	eors	r2, r6
 800070a:	4319      	orrs	r1, r3
 800070c:	290e      	cmp	r1, #14
 800070e:	d818      	bhi.n	8000742 <__aeabi_fdiv+0xc2>
 8000710:	4864      	ldr	r0, [pc, #400]	@ (80008a4 <__aeabi_fdiv+0x224>)
 8000712:	0089      	lsls	r1, r1, #2
 8000714:	5841      	ldr	r1, [r0, r1]
 8000716:	468f      	mov	pc, r1
 8000718:	4653      	mov	r3, sl
 800071a:	2b02      	cmp	r3, #2
 800071c:	d100      	bne.n	8000720 <__aeabi_fdiv+0xa0>
 800071e:	e0b8      	b.n	8000892 <__aeabi_fdiv+0x212>
 8000720:	2b03      	cmp	r3, #3
 8000722:	d06e      	beq.n	8000802 <__aeabi_fdiv+0x182>
 8000724:	4642      	mov	r2, r8
 8000726:	002c      	movs	r4, r5
 8000728:	2b01      	cmp	r3, #1
 800072a:	d140      	bne.n	80007ae <__aeabi_fdiv+0x12e>
 800072c:	2000      	movs	r0, #0
 800072e:	2400      	movs	r4, #0
 8000730:	05c0      	lsls	r0, r0, #23
 8000732:	4320      	orrs	r0, r4
 8000734:	07d2      	lsls	r2, r2, #31
 8000736:	4310      	orrs	r0, r2
 8000738:	bce0      	pop	{r5, r6, r7}
 800073a:	46ba      	mov	sl, r7
 800073c:	46b1      	mov	r9, r6
 800073e:	46a8      	mov	r8, r5
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000742:	20ff      	movs	r0, #255	@ 0xff
 8000744:	2400      	movs	r4, #0
 8000746:	e7f3      	b.n	8000730 <__aeabi_fdiv+0xb0>
 8000748:	2c00      	cmp	r4, #0
 800074a:	d120      	bne.n	800078e <__aeabi_fdiv+0x10e>
 800074c:	2302      	movs	r3, #2
 800074e:	3fff      	subs	r7, #255	@ 0xff
 8000750:	e7d8      	b.n	8000704 <__aeabi_fdiv+0x84>
 8000752:	2d00      	cmp	r5, #0
 8000754:	d105      	bne.n	8000762 <__aeabi_fdiv+0xe2>
 8000756:	2304      	movs	r3, #4
 8000758:	4699      	mov	r9, r3
 800075a:	3b03      	subs	r3, #3
 800075c:	2700      	movs	r7, #0
 800075e:	469a      	mov	sl, r3
 8000760:	e7a5      	b.n	80006ae <__aeabi_fdiv+0x2e>
 8000762:	0028      	movs	r0, r5
 8000764:	f002 fa2a 	bl	8002bbc <__clzsi2>
 8000768:	2776      	movs	r7, #118	@ 0x76
 800076a:	1f43      	subs	r3, r0, #5
 800076c:	409d      	lsls	r5, r3
 800076e:	2300      	movs	r3, #0
 8000770:	427f      	negs	r7, r7
 8000772:	4699      	mov	r9, r3
 8000774:	469a      	mov	sl, r3
 8000776:	1a3f      	subs	r7, r7, r0
 8000778:	e799      	b.n	80006ae <__aeabi_fdiv+0x2e>
 800077a:	0020      	movs	r0, r4
 800077c:	f002 fa1e 	bl	8002bbc <__clzsi2>
 8000780:	1f43      	subs	r3, r0, #5
 8000782:	409c      	lsls	r4, r3
 8000784:	2376      	movs	r3, #118	@ 0x76
 8000786:	425b      	negs	r3, r3
 8000788:	1a1b      	subs	r3, r3, r0
 800078a:	2000      	movs	r0, #0
 800078c:	e79e      	b.n	80006cc <__aeabi_fdiv+0x4c>
 800078e:	2303      	movs	r3, #3
 8000790:	464a      	mov	r2, r9
 8000792:	431a      	orrs	r2, r3
 8000794:	4691      	mov	r9, r2
 8000796:	2003      	movs	r0, #3
 8000798:	33fc      	adds	r3, #252	@ 0xfc
 800079a:	e797      	b.n	80006cc <__aeabi_fdiv+0x4c>
 800079c:	230c      	movs	r3, #12
 800079e:	4699      	mov	r9, r3
 80007a0:	3b09      	subs	r3, #9
 80007a2:	27ff      	movs	r7, #255	@ 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e782      	b.n	80006ae <__aeabi_fdiv+0x2e>
 80007a8:	2803      	cmp	r0, #3
 80007aa:	d02c      	beq.n	8000806 <__aeabi_fdiv+0x186>
 80007ac:	0032      	movs	r2, r6
 80007ae:	0038      	movs	r0, r7
 80007b0:	307f      	adds	r0, #127	@ 0x7f
 80007b2:	2800      	cmp	r0, #0
 80007b4:	dd47      	ble.n	8000846 <__aeabi_fdiv+0x1c6>
 80007b6:	0763      	lsls	r3, r4, #29
 80007b8:	d004      	beq.n	80007c4 <__aeabi_fdiv+0x144>
 80007ba:	230f      	movs	r3, #15
 80007bc:	4023      	ands	r3, r4
 80007be:	2b04      	cmp	r3, #4
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fdiv+0x144>
 80007c2:	3404      	adds	r4, #4
 80007c4:	0123      	lsls	r3, r4, #4
 80007c6:	d503      	bpl.n	80007d0 <__aeabi_fdiv+0x150>
 80007c8:	0038      	movs	r0, r7
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <__aeabi_fdiv+0x228>)
 80007cc:	3080      	adds	r0, #128	@ 0x80
 80007ce:	401c      	ands	r4, r3
 80007d0:	28fe      	cmp	r0, #254	@ 0xfe
 80007d2:	dcb6      	bgt.n	8000742 <__aeabi_fdiv+0xc2>
 80007d4:	01a4      	lsls	r4, r4, #6
 80007d6:	0a64      	lsrs	r4, r4, #9
 80007d8:	b2c0      	uxtb	r0, r0
 80007da:	e7a9      	b.n	8000730 <__aeabi_fdiv+0xb0>
 80007dc:	2480      	movs	r4, #128	@ 0x80
 80007de:	2200      	movs	r2, #0
 80007e0:	20ff      	movs	r0, #255	@ 0xff
 80007e2:	03e4      	lsls	r4, r4, #15
 80007e4:	e7a4      	b.n	8000730 <__aeabi_fdiv+0xb0>
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	03db      	lsls	r3, r3, #15
 80007ea:	421d      	tst	r5, r3
 80007ec:	d001      	beq.n	80007f2 <__aeabi_fdiv+0x172>
 80007ee:	421c      	tst	r4, r3
 80007f0:	d00b      	beq.n	800080a <__aeabi_fdiv+0x18a>
 80007f2:	2480      	movs	r4, #128	@ 0x80
 80007f4:	03e4      	lsls	r4, r4, #15
 80007f6:	432c      	orrs	r4, r5
 80007f8:	0264      	lsls	r4, r4, #9
 80007fa:	4642      	mov	r2, r8
 80007fc:	20ff      	movs	r0, #255	@ 0xff
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	e796      	b.n	8000730 <__aeabi_fdiv+0xb0>
 8000802:	4646      	mov	r6, r8
 8000804:	002c      	movs	r4, r5
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	03db      	lsls	r3, r3, #15
 800080a:	431c      	orrs	r4, r3
 800080c:	0264      	lsls	r4, r4, #9
 800080e:	0032      	movs	r2, r6
 8000810:	20ff      	movs	r0, #255	@ 0xff
 8000812:	0a64      	lsrs	r4, r4, #9
 8000814:	e78c      	b.n	8000730 <__aeabi_fdiv+0xb0>
 8000816:	016d      	lsls	r5, r5, #5
 8000818:	0160      	lsls	r0, r4, #5
 800081a:	4285      	cmp	r5, r0
 800081c:	d22d      	bcs.n	800087a <__aeabi_fdiv+0x1fa>
 800081e:	231b      	movs	r3, #27
 8000820:	2400      	movs	r4, #0
 8000822:	3f01      	subs	r7, #1
 8000824:	2601      	movs	r6, #1
 8000826:	0029      	movs	r1, r5
 8000828:	0064      	lsls	r4, r4, #1
 800082a:	006d      	lsls	r5, r5, #1
 800082c:	2900      	cmp	r1, #0
 800082e:	db01      	blt.n	8000834 <__aeabi_fdiv+0x1b4>
 8000830:	4285      	cmp	r5, r0
 8000832:	d301      	bcc.n	8000838 <__aeabi_fdiv+0x1b8>
 8000834:	1a2d      	subs	r5, r5, r0
 8000836:	4334      	orrs	r4, r6
 8000838:	3b01      	subs	r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f3      	bne.n	8000826 <__aeabi_fdiv+0x1a6>
 800083e:	1e6b      	subs	r3, r5, #1
 8000840:	419d      	sbcs	r5, r3
 8000842:	432c      	orrs	r4, r5
 8000844:	e7b3      	b.n	80007ae <__aeabi_fdiv+0x12e>
 8000846:	2301      	movs	r3, #1
 8000848:	1a1b      	subs	r3, r3, r0
 800084a:	2b1b      	cmp	r3, #27
 800084c:	dd00      	ble.n	8000850 <__aeabi_fdiv+0x1d0>
 800084e:	e76d      	b.n	800072c <__aeabi_fdiv+0xac>
 8000850:	0021      	movs	r1, r4
 8000852:	379e      	adds	r7, #158	@ 0x9e
 8000854:	40d9      	lsrs	r1, r3
 8000856:	40bc      	lsls	r4, r7
 8000858:	000b      	movs	r3, r1
 800085a:	1e61      	subs	r1, r4, #1
 800085c:	418c      	sbcs	r4, r1
 800085e:	4323      	orrs	r3, r4
 8000860:	0759      	lsls	r1, r3, #29
 8000862:	d004      	beq.n	800086e <__aeabi_fdiv+0x1ee>
 8000864:	210f      	movs	r1, #15
 8000866:	4019      	ands	r1, r3
 8000868:	2904      	cmp	r1, #4
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0x1ee>
 800086c:	3304      	adds	r3, #4
 800086e:	0159      	lsls	r1, r3, #5
 8000870:	d413      	bmi.n	800089a <__aeabi_fdiv+0x21a>
 8000872:	019b      	lsls	r3, r3, #6
 8000874:	2000      	movs	r0, #0
 8000876:	0a5c      	lsrs	r4, r3, #9
 8000878:	e75a      	b.n	8000730 <__aeabi_fdiv+0xb0>
 800087a:	231a      	movs	r3, #26
 800087c:	2401      	movs	r4, #1
 800087e:	1a2d      	subs	r5, r5, r0
 8000880:	e7d0      	b.n	8000824 <__aeabi_fdiv+0x1a4>
 8000882:	1e98      	subs	r0, r3, #2
 8000884:	4243      	negs	r3, r0
 8000886:	4158      	adcs	r0, r3
 8000888:	4240      	negs	r0, r0
 800088a:	0032      	movs	r2, r6
 800088c:	2400      	movs	r4, #0
 800088e:	b2c0      	uxtb	r0, r0
 8000890:	e74e      	b.n	8000730 <__aeabi_fdiv+0xb0>
 8000892:	4642      	mov	r2, r8
 8000894:	20ff      	movs	r0, #255	@ 0xff
 8000896:	2400      	movs	r4, #0
 8000898:	e74a      	b.n	8000730 <__aeabi_fdiv+0xb0>
 800089a:	2001      	movs	r0, #1
 800089c:	2400      	movs	r4, #0
 800089e:	e747      	b.n	8000730 <__aeabi_fdiv+0xb0>
 80008a0:	08008a64 	.word	0x08008a64
 80008a4:	08008aa4 	.word	0x08008aa4
 80008a8:	f7ffffff 	.word	0xf7ffffff

080008ac <__aeabi_fmul>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0044      	lsls	r4, r0, #1
 80008b6:	b5c0      	push	{r6, r7, lr}
 80008b8:	0246      	lsls	r6, r0, #9
 80008ba:	1c0f      	adds	r7, r1, #0
 80008bc:	0a76      	lsrs	r6, r6, #9
 80008be:	0e24      	lsrs	r4, r4, #24
 80008c0:	0fc5      	lsrs	r5, r0, #31
 80008c2:	2c00      	cmp	r4, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fmul+0x1c>
 80008c6:	e0da      	b.n	8000a7e <__aeabi_fmul+0x1d2>
 80008c8:	2cff      	cmp	r4, #255	@ 0xff
 80008ca:	d074      	beq.n	80009b6 <__aeabi_fmul+0x10a>
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	00f6      	lsls	r6, r6, #3
 80008d0:	04db      	lsls	r3, r3, #19
 80008d2:	431e      	orrs	r6, r3
 80008d4:	2300      	movs	r3, #0
 80008d6:	4699      	mov	r9, r3
 80008d8:	469a      	mov	sl, r3
 80008da:	3c7f      	subs	r4, #127	@ 0x7f
 80008dc:	027b      	lsls	r3, r7, #9
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	4698      	mov	r8, r3
 80008e2:	007b      	lsls	r3, r7, #1
 80008e4:	0e1b      	lsrs	r3, r3, #24
 80008e6:	0fff      	lsrs	r7, r7, #31
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d074      	beq.n	80009d6 <__aeabi_fmul+0x12a>
 80008ec:	2bff      	cmp	r3, #255	@ 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fmul+0x46>
 80008f0:	e08e      	b.n	8000a10 <__aeabi_fmul+0x164>
 80008f2:	4642      	mov	r2, r8
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	04c9      	lsls	r1, r1, #19
 80008fa:	4311      	orrs	r1, r2
 80008fc:	3b7f      	subs	r3, #127	@ 0x7f
 80008fe:	002a      	movs	r2, r5
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	464b      	mov	r3, r9
 8000904:	407a      	eors	r2, r7
 8000906:	4688      	mov	r8, r1
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	2b0a      	cmp	r3, #10
 800090c:	dc75      	bgt.n	80009fa <__aeabi_fmul+0x14e>
 800090e:	464b      	mov	r3, r9
 8000910:	2000      	movs	r0, #0
 8000912:	2b02      	cmp	r3, #2
 8000914:	dd0f      	ble.n	8000936 <__aeabi_fmul+0x8a>
 8000916:	4649      	mov	r1, r9
 8000918:	2301      	movs	r3, #1
 800091a:	408b      	lsls	r3, r1
 800091c:	21a6      	movs	r1, #166	@ 0xa6
 800091e:	00c9      	lsls	r1, r1, #3
 8000920:	420b      	tst	r3, r1
 8000922:	d169      	bne.n	80009f8 <__aeabi_fmul+0x14c>
 8000924:	2190      	movs	r1, #144	@ 0x90
 8000926:	0089      	lsls	r1, r1, #2
 8000928:	420b      	tst	r3, r1
 800092a:	d000      	beq.n	800092e <__aeabi_fmul+0x82>
 800092c:	e100      	b.n	8000b30 <__aeabi_fmul+0x284>
 800092e:	2188      	movs	r1, #136	@ 0x88
 8000930:	4219      	tst	r1, r3
 8000932:	d000      	beq.n	8000936 <__aeabi_fmul+0x8a>
 8000934:	e0f5      	b.n	8000b22 <__aeabi_fmul+0x276>
 8000936:	4641      	mov	r1, r8
 8000938:	0409      	lsls	r1, r1, #16
 800093a:	0c09      	lsrs	r1, r1, #16
 800093c:	4643      	mov	r3, r8
 800093e:	0008      	movs	r0, r1
 8000940:	0c35      	lsrs	r5, r6, #16
 8000942:	0436      	lsls	r6, r6, #16
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	0c36      	lsrs	r6, r6, #16
 8000948:	4370      	muls	r0, r6
 800094a:	4369      	muls	r1, r5
 800094c:	435e      	muls	r6, r3
 800094e:	435d      	muls	r5, r3
 8000950:	1876      	adds	r6, r6, r1
 8000952:	0c03      	lsrs	r3, r0, #16
 8000954:	199b      	adds	r3, r3, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d903      	bls.n	8000962 <__aeabi_fmul+0xb6>
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0249      	lsls	r1, r1, #9
 800095e:	468c      	mov	ip, r1
 8000960:	4465      	add	r5, ip
 8000962:	0400      	lsls	r0, r0, #16
 8000964:	0419      	lsls	r1, r3, #16
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	1809      	adds	r1, r1, r0
 800096a:	018e      	lsls	r6, r1, #6
 800096c:	1e70      	subs	r0, r6, #1
 800096e:	4186      	sbcs	r6, r0
 8000970:	0c1b      	lsrs	r3, r3, #16
 8000972:	0e89      	lsrs	r1, r1, #26
 8000974:	195b      	adds	r3, r3, r5
 8000976:	430e      	orrs	r6, r1
 8000978:	019b      	lsls	r3, r3, #6
 800097a:	431e      	orrs	r6, r3
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	d46c      	bmi.n	8000a5a <__aeabi_fmul+0x1ae>
 8000980:	0023      	movs	r3, r4
 8000982:	337f      	adds	r3, #127	@ 0x7f
 8000984:	2b00      	cmp	r3, #0
 8000986:	dc00      	bgt.n	800098a <__aeabi_fmul+0xde>
 8000988:	e0b1      	b.n	8000aee <__aeabi_fmul+0x242>
 800098a:	0015      	movs	r5, r2
 800098c:	0771      	lsls	r1, r6, #29
 800098e:	d00b      	beq.n	80009a8 <__aeabi_fmul+0xfc>
 8000990:	200f      	movs	r0, #15
 8000992:	0021      	movs	r1, r4
 8000994:	4030      	ands	r0, r6
 8000996:	2804      	cmp	r0, #4
 8000998:	d006      	beq.n	80009a8 <__aeabi_fmul+0xfc>
 800099a:	3604      	adds	r6, #4
 800099c:	0132      	lsls	r2, r6, #4
 800099e:	d503      	bpl.n	80009a8 <__aeabi_fmul+0xfc>
 80009a0:	4b6e      	ldr	r3, [pc, #440]	@ (8000b5c <__aeabi_fmul+0x2b0>)
 80009a2:	401e      	ands	r6, r3
 80009a4:	000b      	movs	r3, r1
 80009a6:	3380      	adds	r3, #128	@ 0x80
 80009a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80009aa:	dd00      	ble.n	80009ae <__aeabi_fmul+0x102>
 80009ac:	e0bd      	b.n	8000b2a <__aeabi_fmul+0x27e>
 80009ae:	01b2      	lsls	r2, r6, #6
 80009b0:	0a52      	lsrs	r2, r2, #9
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	e048      	b.n	8000a48 <__aeabi_fmul+0x19c>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_fmul+0x110>
 80009ba:	e092      	b.n	8000ae2 <__aeabi_fmul+0x236>
 80009bc:	2308      	movs	r3, #8
 80009be:	4699      	mov	r9, r3
 80009c0:	3b06      	subs	r3, #6
 80009c2:	469a      	mov	sl, r3
 80009c4:	027b      	lsls	r3, r7, #9
 80009c6:	0a5b      	lsrs	r3, r3, #9
 80009c8:	4698      	mov	r8, r3
 80009ca:	007b      	lsls	r3, r7, #1
 80009cc:	24ff      	movs	r4, #255	@ 0xff
 80009ce:	0e1b      	lsrs	r3, r3, #24
 80009d0:	0fff      	lsrs	r7, r7, #31
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d18a      	bne.n	80008ec <__aeabi_fmul+0x40>
 80009d6:	4642      	mov	r2, r8
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d164      	bne.n	8000aa6 <__aeabi_fmul+0x1fa>
 80009dc:	4649      	mov	r1, r9
 80009de:	3201      	adds	r2, #1
 80009e0:	4311      	orrs	r1, r2
 80009e2:	4689      	mov	r9, r1
 80009e4:	290a      	cmp	r1, #10
 80009e6:	dc08      	bgt.n	80009fa <__aeabi_fmul+0x14e>
 80009e8:	407d      	eors	r5, r7
 80009ea:	2001      	movs	r0, #1
 80009ec:	b2ea      	uxtb	r2, r5
 80009ee:	2902      	cmp	r1, #2
 80009f0:	dc91      	bgt.n	8000916 <__aeabi_fmul+0x6a>
 80009f2:	0015      	movs	r5, r2
 80009f4:	2200      	movs	r2, #0
 80009f6:	e027      	b.n	8000a48 <__aeabi_fmul+0x19c>
 80009f8:	0015      	movs	r5, r2
 80009fa:	4653      	mov	r3, sl
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_fmul+0x156>
 8000a00:	e093      	b.n	8000b2a <__aeabi_fmul+0x27e>
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d01a      	beq.n	8000a3c <__aeabi_fmul+0x190>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d12c      	bne.n	8000a64 <__aeabi_fmul+0x1b8>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e01b      	b.n	8000a48 <__aeabi_fmul+0x19c>
 8000a10:	4643      	mov	r3, r8
 8000a12:	34ff      	adds	r4, #255	@ 0xff
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d055      	beq.n	8000ac4 <__aeabi_fmul+0x218>
 8000a18:	2103      	movs	r1, #3
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	0019      	movs	r1, r3
 8000a20:	2b0a      	cmp	r3, #10
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_fmul+0x17a>
 8000a24:	e092      	b.n	8000b4c <__aeabi_fmul+0x2a0>
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fmul+0x180>
 8000a2a:	e08c      	b.n	8000b46 <__aeabi_fmul+0x29a>
 8000a2c:	2280      	movs	r2, #128	@ 0x80
 8000a2e:	03d2      	lsls	r2, r2, #15
 8000a30:	4216      	tst	r6, r2
 8000a32:	d003      	beq.n	8000a3c <__aeabi_fmul+0x190>
 8000a34:	4643      	mov	r3, r8
 8000a36:	4213      	tst	r3, r2
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fmul+0x190>
 8000a3a:	e07d      	b.n	8000b38 <__aeabi_fmul+0x28c>
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	03d2      	lsls	r2, r2, #15
 8000a40:	4332      	orrs	r2, r6
 8000a42:	0252      	lsls	r2, r2, #9
 8000a44:	0a52      	lsrs	r2, r2, #9
 8000a46:	23ff      	movs	r3, #255	@ 0xff
 8000a48:	05d8      	lsls	r0, r3, #23
 8000a4a:	07ed      	lsls	r5, r5, #31
 8000a4c:	4310      	orrs	r0, r2
 8000a4e:	4328      	orrs	r0, r5
 8000a50:	bce0      	pop	{r5, r6, r7}
 8000a52:	46ba      	mov	sl, r7
 8000a54:	46b1      	mov	r9, r6
 8000a56:	46a8      	mov	r8, r5
 8000a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	0015      	movs	r5, r2
 8000a5e:	0871      	lsrs	r1, r6, #1
 8000a60:	401e      	ands	r6, r3
 8000a62:	430e      	orrs	r6, r1
 8000a64:	0023      	movs	r3, r4
 8000a66:	3380      	adds	r3, #128	@ 0x80
 8000a68:	1c61      	adds	r1, r4, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd41      	ble.n	8000af2 <__aeabi_fmul+0x246>
 8000a6e:	0772      	lsls	r2, r6, #29
 8000a70:	d094      	beq.n	800099c <__aeabi_fmul+0xf0>
 8000a72:	220f      	movs	r2, #15
 8000a74:	4032      	ands	r2, r6
 8000a76:	2a04      	cmp	r2, #4
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fmul+0x1d0>
 8000a7a:	e78e      	b.n	800099a <__aeabi_fmul+0xee>
 8000a7c:	e78e      	b.n	800099c <__aeabi_fmul+0xf0>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d105      	bne.n	8000a8e <__aeabi_fmul+0x1e2>
 8000a82:	2304      	movs	r3, #4
 8000a84:	4699      	mov	r9, r3
 8000a86:	3b03      	subs	r3, #3
 8000a88:	2400      	movs	r4, #0
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	e726      	b.n	80008dc <__aeabi_fmul+0x30>
 8000a8e:	0030      	movs	r0, r6
 8000a90:	f002 f894 	bl	8002bbc <__clzsi2>
 8000a94:	2476      	movs	r4, #118	@ 0x76
 8000a96:	1f43      	subs	r3, r0, #5
 8000a98:	409e      	lsls	r6, r3
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	4264      	negs	r4, r4
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	1a24      	subs	r4, r4, r0
 8000aa4:	e71a      	b.n	80008dc <__aeabi_fmul+0x30>
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	f002 f888 	bl	8002bbc <__clzsi2>
 8000aac:	464b      	mov	r3, r9
 8000aae:	1a24      	subs	r4, r4, r0
 8000ab0:	3c76      	subs	r4, #118	@ 0x76
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	dca1      	bgt.n	80009fa <__aeabi_fmul+0x14e>
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	3805      	subs	r0, #5
 8000aba:	4083      	lsls	r3, r0
 8000abc:	407d      	eors	r5, r7
 8000abe:	4698      	mov	r8, r3
 8000ac0:	b2ea      	uxtb	r2, r5
 8000ac2:	e724      	b.n	800090e <__aeabi_fmul+0x62>
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	002a      	movs	r2, r5
 8000acc:	407a      	eors	r2, r7
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	dc92      	bgt.n	80009fa <__aeabi_fmul+0x14e>
 8000ad4:	4649      	mov	r1, r9
 8000ad6:	0015      	movs	r5, r2
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	d026      	beq.n	8000b2a <__aeabi_fmul+0x27e>
 8000adc:	4699      	mov	r9, r3
 8000ade:	2002      	movs	r0, #2
 8000ae0:	e719      	b.n	8000916 <__aeabi_fmul+0x6a>
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	3b09      	subs	r3, #9
 8000ae8:	24ff      	movs	r4, #255	@ 0xff
 8000aea:	469a      	mov	sl, r3
 8000aec:	e6f6      	b.n	80008dc <__aeabi_fmul+0x30>
 8000aee:	0015      	movs	r5, r2
 8000af0:	0021      	movs	r1, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b1b      	cmp	r3, #27
 8000af8:	dd00      	ble.n	8000afc <__aeabi_fmul+0x250>
 8000afa:	e786      	b.n	8000a0a <__aeabi_fmul+0x15e>
 8000afc:	319e      	adds	r1, #158	@ 0x9e
 8000afe:	0032      	movs	r2, r6
 8000b00:	408e      	lsls	r6, r1
 8000b02:	40da      	lsrs	r2, r3
 8000b04:	1e73      	subs	r3, r6, #1
 8000b06:	419e      	sbcs	r6, r3
 8000b08:	4332      	orrs	r2, r6
 8000b0a:	0753      	lsls	r3, r2, #29
 8000b0c:	d004      	beq.n	8000b18 <__aeabi_fmul+0x26c>
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fmul+0x26c>
 8000b16:	3204      	adds	r2, #4
 8000b18:	0153      	lsls	r3, r2, #5
 8000b1a:	d510      	bpl.n	8000b3e <__aeabi_fmul+0x292>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	e792      	b.n	8000a48 <__aeabi_fmul+0x19c>
 8000b22:	003d      	movs	r5, r7
 8000b24:	4646      	mov	r6, r8
 8000b26:	4682      	mov	sl, r0
 8000b28:	e767      	b.n	80009fa <__aeabi_fmul+0x14e>
 8000b2a:	23ff      	movs	r3, #255	@ 0xff
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e78b      	b.n	8000a48 <__aeabi_fmul+0x19c>
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	2500      	movs	r5, #0
 8000b34:	03d2      	lsls	r2, r2, #15
 8000b36:	e786      	b.n	8000a46 <__aeabi_fmul+0x19a>
 8000b38:	003d      	movs	r5, r7
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	e783      	b.n	8000a46 <__aeabi_fmul+0x19a>
 8000b3e:	0192      	lsls	r2, r2, #6
 8000b40:	2300      	movs	r3, #0
 8000b42:	0a52      	lsrs	r2, r2, #9
 8000b44:	e780      	b.n	8000a48 <__aeabi_fmul+0x19c>
 8000b46:	003d      	movs	r5, r7
 8000b48:	4646      	mov	r6, r8
 8000b4a:	e777      	b.n	8000a3c <__aeabi_fmul+0x190>
 8000b4c:	002a      	movs	r2, r5
 8000b4e:	2301      	movs	r3, #1
 8000b50:	407a      	eors	r2, r7
 8000b52:	408b      	lsls	r3, r1
 8000b54:	2003      	movs	r0, #3
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	e6e9      	b.n	800092e <__aeabi_fmul+0x82>
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	f7ffffff 	.word	0xf7ffffff

08000b60 <__aeabi_ui2f>:
 8000b60:	b510      	push	{r4, lr}
 8000b62:	1e04      	subs	r4, r0, #0
 8000b64:	d00d      	beq.n	8000b82 <__aeabi_ui2f+0x22>
 8000b66:	f002 f829 	bl	8002bbc <__clzsi2>
 8000b6a:	239e      	movs	r3, #158	@ 0x9e
 8000b6c:	1a1b      	subs	r3, r3, r0
 8000b6e:	2b96      	cmp	r3, #150	@ 0x96
 8000b70:	dc0c      	bgt.n	8000b8c <__aeabi_ui2f+0x2c>
 8000b72:	2808      	cmp	r0, #8
 8000b74:	d034      	beq.n	8000be0 <__aeabi_ui2f+0x80>
 8000b76:	3808      	subs	r0, #8
 8000b78:	4084      	lsls	r4, r0
 8000b7a:	0264      	lsls	r4, r4, #9
 8000b7c:	0a64      	lsrs	r4, r4, #9
 8000b7e:	b2d8      	uxtb	r0, r3
 8000b80:	e001      	b.n	8000b86 <__aeabi_ui2f+0x26>
 8000b82:	2000      	movs	r0, #0
 8000b84:	2400      	movs	r4, #0
 8000b86:	05c0      	lsls	r0, r0, #23
 8000b88:	4320      	orrs	r0, r4
 8000b8a:	bd10      	pop	{r4, pc}
 8000b8c:	2b99      	cmp	r3, #153	@ 0x99
 8000b8e:	dc13      	bgt.n	8000bb8 <__aeabi_ui2f+0x58>
 8000b90:	1f42      	subs	r2, r0, #5
 8000b92:	4094      	lsls	r4, r2
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <__aeabi_ui2f+0x88>)
 8000b96:	4022      	ands	r2, r4
 8000b98:	0761      	lsls	r1, r4, #29
 8000b9a:	d01c      	beq.n	8000bd6 <__aeabi_ui2f+0x76>
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4021      	ands	r1, r4
 8000ba0:	2904      	cmp	r1, #4
 8000ba2:	d018      	beq.n	8000bd6 <__aeabi_ui2f+0x76>
 8000ba4:	3204      	adds	r2, #4
 8000ba6:	08d4      	lsrs	r4, r2, #3
 8000ba8:	0152      	lsls	r2, r2, #5
 8000baa:	d515      	bpl.n	8000bd8 <__aeabi_ui2f+0x78>
 8000bac:	239f      	movs	r3, #159	@ 0x9f
 8000bae:	0264      	lsls	r4, r4, #9
 8000bb0:	1a18      	subs	r0, r3, r0
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	b2c0      	uxtb	r0, r0
 8000bb6:	e7e6      	b.n	8000b86 <__aeabi_ui2f+0x26>
 8000bb8:	0002      	movs	r2, r0
 8000bba:	0021      	movs	r1, r4
 8000bbc:	321b      	adds	r2, #27
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	1e51      	subs	r1, r2, #1
 8000bc4:	418a      	sbcs	r2, r1
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	40cc      	lsrs	r4, r1
 8000bcc:	4314      	orrs	r4, r2
 8000bce:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <__aeabi_ui2f+0x88>)
 8000bd0:	4022      	ands	r2, r4
 8000bd2:	0761      	lsls	r1, r4, #29
 8000bd4:	d1e2      	bne.n	8000b9c <__aeabi_ui2f+0x3c>
 8000bd6:	08d4      	lsrs	r4, r2, #3
 8000bd8:	0264      	lsls	r4, r4, #9
 8000bda:	0a64      	lsrs	r4, r4, #9
 8000bdc:	b2d8      	uxtb	r0, r3
 8000bde:	e7d2      	b.n	8000b86 <__aeabi_ui2f+0x26>
 8000be0:	0264      	lsls	r4, r4, #9
 8000be2:	0a64      	lsrs	r4, r4, #9
 8000be4:	308e      	adds	r0, #142	@ 0x8e
 8000be6:	e7ce      	b.n	8000b86 <__aeabi_ui2f+0x26>
 8000be8:	fbffffff 	.word	0xfbffffff

08000bec <__aeabi_dadd>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	b5c0      	push	{r6, r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	9101      	str	r1, [sp, #4]
 8000bfc:	030e      	lsls	r6, r1, #12
 8000bfe:	004c      	lsls	r4, r1, #1
 8000c00:	0fcd      	lsrs	r5, r1, #31
 8000c02:	0a71      	lsrs	r1, r6, #9
 8000c04:	9e00      	ldr	r6, [sp, #0]
 8000c06:	005f      	lsls	r7, r3, #1
 8000c08:	0f76      	lsrs	r6, r6, #29
 8000c0a:	430e      	orrs	r6, r1
 8000c0c:	9900      	ldr	r1, [sp, #0]
 8000c0e:	9200      	str	r2, [sp, #0]
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	00c9      	lsls	r1, r1, #3
 8000c14:	4689      	mov	r9, r1
 8000c16:	0319      	lsls	r1, r3, #12
 8000c18:	0d7b      	lsrs	r3, r7, #21
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	9b01      	ldr	r3, [sp, #4]
 8000c1e:	0a49      	lsrs	r1, r1, #9
 8000c20:	0fdb      	lsrs	r3, r3, #31
 8000c22:	469c      	mov	ip, r3
 8000c24:	9b00      	ldr	r3, [sp, #0]
 8000c26:	9a00      	ldr	r2, [sp, #0]
 8000c28:	0f5b      	lsrs	r3, r3, #29
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	0d64      	lsrs	r4, r4, #21
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	1a61      	subs	r1, r4, r1
 8000c34:	4565      	cmp	r5, ip
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x4e>
 8000c38:	e0a6      	b.n	8000d88 <__aeabi_dadd+0x19c>
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	dd72      	ble.n	8000d24 <__aeabi_dadd+0x138>
 8000c3e:	4647      	mov	r7, r8
 8000c40:	2f00      	cmp	r7, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x5a>
 8000c44:	e0dd      	b.n	8000e02 <__aeabi_dadd+0x216>
 8000c46:	4fcc      	ldr	r7, [pc, #816]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000c48:	42bc      	cmp	r4, r7
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x62>
 8000c4c:	e19a      	b.n	8000f84 <__aeabi_dadd+0x398>
 8000c4e:	2701      	movs	r7, #1
 8000c50:	2938      	cmp	r1, #56	@ 0x38
 8000c52:	dc17      	bgt.n	8000c84 <__aeabi_dadd+0x98>
 8000c54:	2780      	movs	r7, #128	@ 0x80
 8000c56:	043f      	lsls	r7, r7, #16
 8000c58:	433b      	orrs	r3, r7
 8000c5a:	291f      	cmp	r1, #31
 8000c5c:	dd00      	ble.n	8000c60 <__aeabi_dadd+0x74>
 8000c5e:	e1dd      	b.n	800101c <__aeabi_dadd+0x430>
 8000c60:	2720      	movs	r7, #32
 8000c62:	1a78      	subs	r0, r7, r1
 8000c64:	001f      	movs	r7, r3
 8000c66:	4087      	lsls	r7, r0
 8000c68:	46ba      	mov	sl, r7
 8000c6a:	0017      	movs	r7, r2
 8000c6c:	40cf      	lsrs	r7, r1
 8000c6e:	4684      	mov	ip, r0
 8000c70:	0038      	movs	r0, r7
 8000c72:	4657      	mov	r7, sl
 8000c74:	4307      	orrs	r7, r0
 8000c76:	4660      	mov	r0, ip
 8000c78:	4082      	lsls	r2, r0
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	1e50      	subs	r0, r2, #1
 8000c7e:	4182      	sbcs	r2, r0
 8000c80:	1af6      	subs	r6, r6, r3
 8000c82:	4317      	orrs	r7, r2
 8000c84:	464b      	mov	r3, r9
 8000c86:	1bdf      	subs	r7, r3, r7
 8000c88:	45b9      	cmp	r9, r7
 8000c8a:	4180      	sbcs	r0, r0
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	1a36      	subs	r6, r6, r0
 8000c90:	0233      	lsls	r3, r6, #8
 8000c92:	d400      	bmi.n	8000c96 <__aeabi_dadd+0xaa>
 8000c94:	e0ff      	b.n	8000e96 <__aeabi_dadd+0x2aa>
 8000c96:	0276      	lsls	r6, r6, #9
 8000c98:	0a76      	lsrs	r6, r6, #9
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0xb4>
 8000c9e:	e13c      	b.n	8000f1a <__aeabi_dadd+0x32e>
 8000ca0:	0030      	movs	r0, r6
 8000ca2:	f001 ff8b 	bl	8002bbc <__clzsi2>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	3b08      	subs	r3, #8
 8000caa:	2120      	movs	r1, #32
 8000cac:	0038      	movs	r0, r7
 8000cae:	1aca      	subs	r2, r1, r3
 8000cb0:	40d0      	lsrs	r0, r2
 8000cb2:	409e      	lsls	r6, r3
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	409f      	lsls	r7, r3
 8000cb8:	4332      	orrs	r2, r6
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dadd+0xd4>
 8000cbe:	e1a6      	b.n	800100e <__aeabi_dadd+0x422>
 8000cc0:	1b18      	subs	r0, r3, r4
 8000cc2:	3001      	adds	r0, #1
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	003e      	movs	r6, r7
 8000cc8:	408f      	lsls	r7, r1
 8000cca:	40c6      	lsrs	r6, r0
 8000ccc:	1e7b      	subs	r3, r7, #1
 8000cce:	419f      	sbcs	r7, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	408b      	lsls	r3, r1
 8000cd4:	4337      	orrs	r7, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	40c2      	lsrs	r2, r0
 8000cda:	003b      	movs	r3, r7
 8000cdc:	0016      	movs	r6, r2
 8000cde:	2400      	movs	r4, #0
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0xfa>
 8000ce4:	e1df      	b.n	80010a6 <__aeabi_dadd+0x4ba>
 8000ce6:	077b      	lsls	r3, r7, #29
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x100>
 8000cea:	e332      	b.n	8001352 <__aeabi_dadd+0x766>
 8000cec:	230f      	movs	r3, #15
 8000cee:	003a      	movs	r2, r7
 8000cf0:	403b      	ands	r3, r7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d004      	beq.n	8000d00 <__aeabi_dadd+0x114>
 8000cf6:	1d3a      	adds	r2, r7, #4
 8000cf8:	42ba      	cmp	r2, r7
 8000cfa:	41bf      	sbcs	r7, r7
 8000cfc:	427f      	negs	r7, r7
 8000cfe:	19f6      	adds	r6, r6, r7
 8000d00:	0233      	lsls	r3, r6, #8
 8000d02:	d400      	bmi.n	8000d06 <__aeabi_dadd+0x11a>
 8000d04:	e323      	b.n	800134e <__aeabi_dadd+0x762>
 8000d06:	4b9c      	ldr	r3, [pc, #624]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000d08:	3401      	adds	r4, #1
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x124>
 8000d0e:	e0b4      	b.n	8000e7a <__aeabi_dadd+0x28e>
 8000d10:	4b9a      	ldr	r3, [pc, #616]	@ (8000f7c <__aeabi_dadd+0x390>)
 8000d12:	0564      	lsls	r4, r4, #21
 8000d14:	401e      	ands	r6, r3
 8000d16:	0d64      	lsrs	r4, r4, #21
 8000d18:	0777      	lsls	r7, r6, #29
 8000d1a:	08d2      	lsrs	r2, r2, #3
 8000d1c:	0276      	lsls	r6, r6, #9
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	0b36      	lsrs	r6, r6, #12
 8000d22:	e0ac      	b.n	8000e7e <__aeabi_dadd+0x292>
 8000d24:	2900      	cmp	r1, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x13e>
 8000d28:	e07e      	b.n	8000e28 <__aeabi_dadd+0x23c>
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	1b09      	subs	r1, r1, r4
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dadd+0x148>
 8000d32:	e160      	b.n	8000ff6 <__aeabi_dadd+0x40a>
 8000d34:	0034      	movs	r4, r6
 8000d36:	4648      	mov	r0, r9
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x152>
 8000d3c:	e1c9      	b.n	80010d2 <__aeabi_dadd+0x4e6>
 8000d3e:	1e4c      	subs	r4, r1, #1
 8000d40:	2901      	cmp	r1, #1
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x15a>
 8000d44:	e22e      	b.n	80011a4 <__aeabi_dadd+0x5b8>
 8000d46:	4d8c      	ldr	r5, [pc, #560]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000d48:	42a9      	cmp	r1, r5
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x162>
 8000d4c:	e224      	b.n	8001198 <__aeabi_dadd+0x5ac>
 8000d4e:	2701      	movs	r7, #1
 8000d50:	2c38      	cmp	r4, #56	@ 0x38
 8000d52:	dc11      	bgt.n	8000d78 <__aeabi_dadd+0x18c>
 8000d54:	0021      	movs	r1, r4
 8000d56:	291f      	cmp	r1, #31
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_dadd+0x170>
 8000d5a:	e20b      	b.n	8001174 <__aeabi_dadd+0x588>
 8000d5c:	2420      	movs	r4, #32
 8000d5e:	0037      	movs	r7, r6
 8000d60:	4648      	mov	r0, r9
 8000d62:	1a64      	subs	r4, r4, r1
 8000d64:	40a7      	lsls	r7, r4
 8000d66:	40c8      	lsrs	r0, r1
 8000d68:	4307      	orrs	r7, r0
 8000d6a:	4648      	mov	r0, r9
 8000d6c:	40a0      	lsls	r0, r4
 8000d6e:	40ce      	lsrs	r6, r1
 8000d70:	1e44      	subs	r4, r0, #1
 8000d72:	41a0      	sbcs	r0, r4
 8000d74:	1b9b      	subs	r3, r3, r6
 8000d76:	4307      	orrs	r7, r0
 8000d78:	1bd7      	subs	r7, r2, r7
 8000d7a:	42ba      	cmp	r2, r7
 8000d7c:	4192      	sbcs	r2, r2
 8000d7e:	4252      	negs	r2, r2
 8000d80:	4665      	mov	r5, ip
 8000d82:	4644      	mov	r4, r8
 8000d84:	1a9e      	subs	r6, r3, r2
 8000d86:	e783      	b.n	8000c90 <__aeabi_dadd+0xa4>
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x1a2>
 8000d8c:	e09c      	b.n	8000ec8 <__aeabi_dadd+0x2dc>
 8000d8e:	4647      	mov	r7, r8
 8000d90:	2f00      	cmp	r7, #0
 8000d92:	d167      	bne.n	8000e64 <__aeabi_dadd+0x278>
 8000d94:	001f      	movs	r7, r3
 8000d96:	4317      	orrs	r7, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x1b0>
 8000d9a:	e0e4      	b.n	8000f66 <__aeabi_dadd+0x37a>
 8000d9c:	1e48      	subs	r0, r1, #1
 8000d9e:	2901      	cmp	r1, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x1b8>
 8000da2:	e19b      	b.n	80010dc <__aeabi_dadd+0x4f0>
 8000da4:	4f74      	ldr	r7, [pc, #464]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000da6:	42b9      	cmp	r1, r7
 8000da8:	d100      	bne.n	8000dac <__aeabi_dadd+0x1c0>
 8000daa:	e0eb      	b.n	8000f84 <__aeabi_dadd+0x398>
 8000dac:	2701      	movs	r7, #1
 8000dae:	0001      	movs	r1, r0
 8000db0:	2838      	cmp	r0, #56	@ 0x38
 8000db2:	dc11      	bgt.n	8000dd8 <__aeabi_dadd+0x1ec>
 8000db4:	291f      	cmp	r1, #31
 8000db6:	dd00      	ble.n	8000dba <__aeabi_dadd+0x1ce>
 8000db8:	e1c7      	b.n	800114a <__aeabi_dadd+0x55e>
 8000dba:	2720      	movs	r7, #32
 8000dbc:	1a78      	subs	r0, r7, r1
 8000dbe:	001f      	movs	r7, r3
 8000dc0:	4684      	mov	ip, r0
 8000dc2:	4087      	lsls	r7, r0
 8000dc4:	0010      	movs	r0, r2
 8000dc6:	40c8      	lsrs	r0, r1
 8000dc8:	4307      	orrs	r7, r0
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4082      	lsls	r2, r0
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	1e50      	subs	r0, r2, #1
 8000dd2:	4182      	sbcs	r2, r0
 8000dd4:	18f6      	adds	r6, r6, r3
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	444f      	add	r7, r9
 8000dda:	454f      	cmp	r7, r9
 8000ddc:	4180      	sbcs	r0, r0
 8000dde:	4240      	negs	r0, r0
 8000de0:	1836      	adds	r6, r6, r0
 8000de2:	0233      	lsls	r3, r6, #8
 8000de4:	d557      	bpl.n	8000e96 <__aeabi_dadd+0x2aa>
 8000de6:	4b64      	ldr	r3, [pc, #400]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000de8:	3401      	adds	r4, #1
 8000dea:	429c      	cmp	r4, r3
 8000dec:	d045      	beq.n	8000e7a <__aeabi_dadd+0x28e>
 8000dee:	2101      	movs	r1, #1
 8000df0:	4b62      	ldr	r3, [pc, #392]	@ (8000f7c <__aeabi_dadd+0x390>)
 8000df2:	087a      	lsrs	r2, r7, #1
 8000df4:	401e      	ands	r6, r3
 8000df6:	4039      	ands	r1, r7
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	07f7      	lsls	r7, r6, #31
 8000dfc:	4317      	orrs	r7, r2
 8000dfe:	0876      	lsrs	r6, r6, #1
 8000e00:	e771      	b.n	8000ce6 <__aeabi_dadd+0xfa>
 8000e02:	001f      	movs	r7, r3
 8000e04:	4317      	orrs	r7, r2
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x21e>
 8000e08:	e0ad      	b.n	8000f66 <__aeabi_dadd+0x37a>
 8000e0a:	1e4f      	subs	r7, r1, #1
 8000e0c:	46bc      	mov	ip, r7
 8000e0e:	2901      	cmp	r1, #1
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dadd+0x228>
 8000e12:	e182      	b.n	800111a <__aeabi_dadd+0x52e>
 8000e14:	4f58      	ldr	r7, [pc, #352]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000e16:	42b9      	cmp	r1, r7
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x230>
 8000e1a:	e190      	b.n	800113e <__aeabi_dadd+0x552>
 8000e1c:	4661      	mov	r1, ip
 8000e1e:	2701      	movs	r7, #1
 8000e20:	2938      	cmp	r1, #56	@ 0x38
 8000e22:	dd00      	ble.n	8000e26 <__aeabi_dadd+0x23a>
 8000e24:	e72e      	b.n	8000c84 <__aeabi_dadd+0x98>
 8000e26:	e718      	b.n	8000c5a <__aeabi_dadd+0x6e>
 8000e28:	4f55      	ldr	r7, [pc, #340]	@ (8000f80 <__aeabi_dadd+0x394>)
 8000e2a:	1c61      	adds	r1, r4, #1
 8000e2c:	4239      	tst	r1, r7
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x246>
 8000e30:	e0d0      	b.n	8000fd4 <__aeabi_dadd+0x3e8>
 8000e32:	0031      	movs	r1, r6
 8000e34:	4648      	mov	r0, r9
 8000e36:	001f      	movs	r7, r3
 8000e38:	4301      	orrs	r1, r0
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x256>
 8000e40:	e13d      	b.n	80010be <__aeabi_dadd+0x4d2>
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x25c>
 8000e46:	e1bc      	b.n	80011c2 <__aeabi_dadd+0x5d6>
 8000e48:	2f00      	cmp	r7, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x262>
 8000e4c:	e1bf      	b.n	80011ce <__aeabi_dadd+0x5e2>
 8000e4e:	464b      	mov	r3, r9
 8000e50:	2100      	movs	r1, #0
 8000e52:	08d8      	lsrs	r0, r3, #3
 8000e54:	0777      	lsls	r7, r6, #29
 8000e56:	4307      	orrs	r7, r0
 8000e58:	08f0      	lsrs	r0, r6, #3
 8000e5a:	0306      	lsls	r6, r0, #12
 8000e5c:	054c      	lsls	r4, r1, #21
 8000e5e:	0b36      	lsrs	r6, r6, #12
 8000e60:	0d64      	lsrs	r4, r4, #21
 8000e62:	e00c      	b.n	8000e7e <__aeabi_dadd+0x292>
 8000e64:	4f44      	ldr	r7, [pc, #272]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000e66:	42bc      	cmp	r4, r7
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dadd+0x280>
 8000e6a:	e08b      	b.n	8000f84 <__aeabi_dadd+0x398>
 8000e6c:	2701      	movs	r7, #1
 8000e6e:	2938      	cmp	r1, #56	@ 0x38
 8000e70:	dcb2      	bgt.n	8000dd8 <__aeabi_dadd+0x1ec>
 8000e72:	2780      	movs	r7, #128	@ 0x80
 8000e74:	043f      	lsls	r7, r7, #16
 8000e76:	433b      	orrs	r3, r7
 8000e78:	e79c      	b.n	8000db4 <__aeabi_dadd+0x1c8>
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	0524      	lsls	r4, r4, #20
 8000e80:	4334      	orrs	r4, r6
 8000e82:	07ed      	lsls	r5, r5, #31
 8000e84:	432c      	orrs	r4, r5
 8000e86:	0038      	movs	r0, r7
 8000e88:	0021      	movs	r1, r4
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bce0      	pop	{r5, r6, r7}
 8000e8e:	46ba      	mov	sl, r7
 8000e90:	46b1      	mov	r9, r6
 8000e92:	46a8      	mov	r8, r5
 8000e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e96:	077b      	lsls	r3, r7, #29
 8000e98:	d004      	beq.n	8000ea4 <__aeabi_dadd+0x2b8>
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	403b      	ands	r3, r7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_dadd+0x2b8>
 8000ea2:	e728      	b.n	8000cf6 <__aeabi_dadd+0x10a>
 8000ea4:	08f8      	lsrs	r0, r7, #3
 8000ea6:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000ea8:	0777      	lsls	r7, r6, #29
 8000eaa:	4307      	orrs	r7, r0
 8000eac:	08f0      	lsrs	r0, r6, #3
 8000eae:	429c      	cmp	r4, r3
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_dadd+0x2c8>
 8000eb2:	e24a      	b.n	800134a <__aeabi_dadd+0x75e>
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	4303      	orrs	r3, r0
 8000eb8:	d059      	beq.n	8000f6e <__aeabi_dadd+0x382>
 8000eba:	2680      	movs	r6, #128	@ 0x80
 8000ebc:	0336      	lsls	r6, r6, #12
 8000ebe:	4306      	orrs	r6, r0
 8000ec0:	0336      	lsls	r6, r6, #12
 8000ec2:	4c2d      	ldr	r4, [pc, #180]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000ec4:	0b36      	lsrs	r6, r6, #12
 8000ec6:	e7da      	b.n	8000e7e <__aeabi_dadd+0x292>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	d061      	beq.n	8000f90 <__aeabi_dadd+0x3a4>
 8000ecc:	4641      	mov	r1, r8
 8000ece:	1b09      	subs	r1, r1, r4
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_dadd+0x2ea>
 8000ed4:	e0b9      	b.n	800104a <__aeabi_dadd+0x45e>
 8000ed6:	4c28      	ldr	r4, [pc, #160]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x2f2>
 8000edc:	e1a5      	b.n	800122a <__aeabi_dadd+0x63e>
 8000ede:	2701      	movs	r7, #1
 8000ee0:	2938      	cmp	r1, #56	@ 0x38
 8000ee2:	dc13      	bgt.n	8000f0c <__aeabi_dadd+0x320>
 8000ee4:	2480      	movs	r4, #128	@ 0x80
 8000ee6:	0424      	lsls	r4, r4, #16
 8000ee8:	4326      	orrs	r6, r4
 8000eea:	291f      	cmp	r1, #31
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_dadd+0x304>
 8000eee:	e1c8      	b.n	8001282 <__aeabi_dadd+0x696>
 8000ef0:	2420      	movs	r4, #32
 8000ef2:	0037      	movs	r7, r6
 8000ef4:	4648      	mov	r0, r9
 8000ef6:	1a64      	subs	r4, r4, r1
 8000ef8:	40a7      	lsls	r7, r4
 8000efa:	40c8      	lsrs	r0, r1
 8000efc:	4307      	orrs	r7, r0
 8000efe:	4648      	mov	r0, r9
 8000f00:	40a0      	lsls	r0, r4
 8000f02:	40ce      	lsrs	r6, r1
 8000f04:	1e44      	subs	r4, r0, #1
 8000f06:	41a0      	sbcs	r0, r4
 8000f08:	199b      	adds	r3, r3, r6
 8000f0a:	4307      	orrs	r7, r0
 8000f0c:	18bf      	adds	r7, r7, r2
 8000f0e:	4297      	cmp	r7, r2
 8000f10:	4192      	sbcs	r2, r2
 8000f12:	4252      	negs	r2, r2
 8000f14:	4644      	mov	r4, r8
 8000f16:	18d6      	adds	r6, r2, r3
 8000f18:	e763      	b.n	8000de2 <__aeabi_dadd+0x1f6>
 8000f1a:	0038      	movs	r0, r7
 8000f1c:	f001 fe4e 	bl	8002bbc <__clzsi2>
 8000f20:	0003      	movs	r3, r0
 8000f22:	3318      	adds	r3, #24
 8000f24:	2b1f      	cmp	r3, #31
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_dadd+0x33e>
 8000f28:	e6bf      	b.n	8000caa <__aeabi_dadd+0xbe>
 8000f2a:	003a      	movs	r2, r7
 8000f2c:	3808      	subs	r0, #8
 8000f2e:	4082      	lsls	r2, r0
 8000f30:	429c      	cmp	r4, r3
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dadd+0x34a>
 8000f34:	e083      	b.n	800103e <__aeabi_dadd+0x452>
 8000f36:	1b1b      	subs	r3, r3, r4
 8000f38:	1c58      	adds	r0, r3, #1
 8000f3a:	281f      	cmp	r0, #31
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_dadd+0x354>
 8000f3e:	e1b4      	b.n	80012aa <__aeabi_dadd+0x6be>
 8000f40:	0017      	movs	r7, r2
 8000f42:	3b1f      	subs	r3, #31
 8000f44:	40df      	lsrs	r7, r3
 8000f46:	2820      	cmp	r0, #32
 8000f48:	d005      	beq.n	8000f56 <__aeabi_dadd+0x36a>
 8000f4a:	2340      	movs	r3, #64	@ 0x40
 8000f4c:	1a1b      	subs	r3, r3, r0
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	1e53      	subs	r3, r2, #1
 8000f52:	419a      	sbcs	r2, r3
 8000f54:	4317      	orrs	r7, r2
 8000f56:	2400      	movs	r4, #0
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_dadd+0x386>
 8000f5c:	077b      	lsls	r3, r7, #29
 8000f5e:	d000      	beq.n	8000f62 <__aeabi_dadd+0x376>
 8000f60:	e6c4      	b.n	8000cec <__aeabi_dadd+0x100>
 8000f62:	0026      	movs	r6, r4
 8000f64:	e79e      	b.n	8000ea4 <__aeabi_dadd+0x2b8>
 8000f66:	464b      	mov	r3, r9
 8000f68:	000c      	movs	r4, r1
 8000f6a:	08d8      	lsrs	r0, r3, #3
 8000f6c:	e79b      	b.n	8000ea6 <__aeabi_dadd+0x2ba>
 8000f6e:	2700      	movs	r7, #0
 8000f70:	4c01      	ldr	r4, [pc, #4]	@ (8000f78 <__aeabi_dadd+0x38c>)
 8000f72:	2600      	movs	r6, #0
 8000f74:	e783      	b.n	8000e7e <__aeabi_dadd+0x292>
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	ff7fffff 	.word	0xff7fffff
 8000f80:	000007fe 	.word	0x000007fe
 8000f84:	464b      	mov	r3, r9
 8000f86:	0777      	lsls	r7, r6, #29
 8000f88:	08d8      	lsrs	r0, r3, #3
 8000f8a:	4307      	orrs	r7, r0
 8000f8c:	08f0      	lsrs	r0, r6, #3
 8000f8e:	e791      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8000f90:	4fcd      	ldr	r7, [pc, #820]	@ (80012c8 <__aeabi_dadd+0x6dc>)
 8000f92:	1c61      	adds	r1, r4, #1
 8000f94:	4239      	tst	r1, r7
 8000f96:	d16b      	bne.n	8001070 <__aeabi_dadd+0x484>
 8000f98:	0031      	movs	r1, r6
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	4301      	orrs	r1, r0
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_dadd+0x3b8>
 8000fa2:	e14b      	b.n	800123c <__aeabi_dadd+0x650>
 8000fa4:	001f      	movs	r7, r3
 8000fa6:	4317      	orrs	r7, r2
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0x3c2>
 8000fac:	e181      	b.n	80012b2 <__aeabi_dadd+0x6c6>
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x3c8>
 8000fb2:	e74c      	b.n	8000e4e <__aeabi_dadd+0x262>
 8000fb4:	444a      	add	r2, r9
 8000fb6:	454a      	cmp	r2, r9
 8000fb8:	4180      	sbcs	r0, r0
 8000fba:	18f6      	adds	r6, r6, r3
 8000fbc:	4240      	negs	r0, r0
 8000fbe:	1836      	adds	r6, r6, r0
 8000fc0:	0233      	lsls	r3, r6, #8
 8000fc2:	d500      	bpl.n	8000fc6 <__aeabi_dadd+0x3da>
 8000fc4:	e1b0      	b.n	8001328 <__aeabi_dadd+0x73c>
 8000fc6:	0017      	movs	r7, r2
 8000fc8:	4691      	mov	r9, r2
 8000fca:	4337      	orrs	r7, r6
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_dadd+0x3e4>
 8000fce:	e73e      	b.n	8000e4e <__aeabi_dadd+0x262>
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	e754      	b.n	8000e7e <__aeabi_dadd+0x292>
 8000fd4:	4649      	mov	r1, r9
 8000fd6:	1a89      	subs	r1, r1, r2
 8000fd8:	4688      	mov	r8, r1
 8000fda:	45c1      	cmp	r9, r8
 8000fdc:	41bf      	sbcs	r7, r7
 8000fde:	1af1      	subs	r1, r6, r3
 8000fe0:	427f      	negs	r7, r7
 8000fe2:	1bc9      	subs	r1, r1, r7
 8000fe4:	020f      	lsls	r7, r1, #8
 8000fe6:	d461      	bmi.n	80010ac <__aeabi_dadd+0x4c0>
 8000fe8:	4647      	mov	r7, r8
 8000fea:	430f      	orrs	r7, r1
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x404>
 8000fee:	e0bd      	b.n	800116c <__aeabi_dadd+0x580>
 8000ff0:	000e      	movs	r6, r1
 8000ff2:	4647      	mov	r7, r8
 8000ff4:	e651      	b.n	8000c9a <__aeabi_dadd+0xae>
 8000ff6:	4cb5      	ldr	r4, [pc, #724]	@ (80012cc <__aeabi_dadd+0x6e0>)
 8000ff8:	45a0      	cmp	r8, r4
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x412>
 8000ffc:	e100      	b.n	8001200 <__aeabi_dadd+0x614>
 8000ffe:	2701      	movs	r7, #1
 8001000:	2938      	cmp	r1, #56	@ 0x38
 8001002:	dd00      	ble.n	8001006 <__aeabi_dadd+0x41a>
 8001004:	e6b8      	b.n	8000d78 <__aeabi_dadd+0x18c>
 8001006:	2480      	movs	r4, #128	@ 0x80
 8001008:	0424      	lsls	r4, r4, #16
 800100a:	4326      	orrs	r6, r4
 800100c:	e6a3      	b.n	8000d56 <__aeabi_dadd+0x16a>
 800100e:	4eb0      	ldr	r6, [pc, #704]	@ (80012d0 <__aeabi_dadd+0x6e4>)
 8001010:	1ae4      	subs	r4, r4, r3
 8001012:	4016      	ands	r6, r2
 8001014:	077b      	lsls	r3, r7, #29
 8001016:	d000      	beq.n	800101a <__aeabi_dadd+0x42e>
 8001018:	e73f      	b.n	8000e9a <__aeabi_dadd+0x2ae>
 800101a:	e743      	b.n	8000ea4 <__aeabi_dadd+0x2b8>
 800101c:	000f      	movs	r7, r1
 800101e:	0018      	movs	r0, r3
 8001020:	3f20      	subs	r7, #32
 8001022:	40f8      	lsrs	r0, r7
 8001024:	4684      	mov	ip, r0
 8001026:	2920      	cmp	r1, #32
 8001028:	d003      	beq.n	8001032 <__aeabi_dadd+0x446>
 800102a:	2740      	movs	r7, #64	@ 0x40
 800102c:	1a79      	subs	r1, r7, r1
 800102e:	408b      	lsls	r3, r1
 8001030:	431a      	orrs	r2, r3
 8001032:	1e53      	subs	r3, r2, #1
 8001034:	419a      	sbcs	r2, r3
 8001036:	4663      	mov	r3, ip
 8001038:	0017      	movs	r7, r2
 800103a:	431f      	orrs	r7, r3
 800103c:	e622      	b.n	8000c84 <__aeabi_dadd+0x98>
 800103e:	48a4      	ldr	r0, [pc, #656]	@ (80012d0 <__aeabi_dadd+0x6e4>)
 8001040:	1ae1      	subs	r1, r4, r3
 8001042:	4010      	ands	r0, r2
 8001044:	0747      	lsls	r7, r0, #29
 8001046:	08c0      	lsrs	r0, r0, #3
 8001048:	e707      	b.n	8000e5a <__aeabi_dadd+0x26e>
 800104a:	0034      	movs	r4, r6
 800104c:	4648      	mov	r0, r9
 800104e:	4304      	orrs	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_dadd+0x468>
 8001052:	e0fa      	b.n	800124a <__aeabi_dadd+0x65e>
 8001054:	1e4c      	subs	r4, r1, #1
 8001056:	2901      	cmp	r1, #1
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x470>
 800105a:	e0d7      	b.n	800120c <__aeabi_dadd+0x620>
 800105c:	4f9b      	ldr	r7, [pc, #620]	@ (80012cc <__aeabi_dadd+0x6e0>)
 800105e:	42b9      	cmp	r1, r7
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x478>
 8001062:	e0e2      	b.n	800122a <__aeabi_dadd+0x63e>
 8001064:	2701      	movs	r7, #1
 8001066:	2c38      	cmp	r4, #56	@ 0x38
 8001068:	dd00      	ble.n	800106c <__aeabi_dadd+0x480>
 800106a:	e74f      	b.n	8000f0c <__aeabi_dadd+0x320>
 800106c:	0021      	movs	r1, r4
 800106e:	e73c      	b.n	8000eea <__aeabi_dadd+0x2fe>
 8001070:	4c96      	ldr	r4, [pc, #600]	@ (80012cc <__aeabi_dadd+0x6e0>)
 8001072:	42a1      	cmp	r1, r4
 8001074:	d100      	bne.n	8001078 <__aeabi_dadd+0x48c>
 8001076:	e0dd      	b.n	8001234 <__aeabi_dadd+0x648>
 8001078:	444a      	add	r2, r9
 800107a:	454a      	cmp	r2, r9
 800107c:	4180      	sbcs	r0, r0
 800107e:	18f3      	adds	r3, r6, r3
 8001080:	4240      	negs	r0, r0
 8001082:	1818      	adds	r0, r3, r0
 8001084:	07c7      	lsls	r7, r0, #31
 8001086:	0852      	lsrs	r2, r2, #1
 8001088:	4317      	orrs	r7, r2
 800108a:	0846      	lsrs	r6, r0, #1
 800108c:	0752      	lsls	r2, r2, #29
 800108e:	d005      	beq.n	800109c <__aeabi_dadd+0x4b0>
 8001090:	220f      	movs	r2, #15
 8001092:	000c      	movs	r4, r1
 8001094:	403a      	ands	r2, r7
 8001096:	2a04      	cmp	r2, #4
 8001098:	d000      	beq.n	800109c <__aeabi_dadd+0x4b0>
 800109a:	e62c      	b.n	8000cf6 <__aeabi_dadd+0x10a>
 800109c:	0776      	lsls	r6, r6, #29
 800109e:	08ff      	lsrs	r7, r7, #3
 80010a0:	4337      	orrs	r7, r6
 80010a2:	0900      	lsrs	r0, r0, #4
 80010a4:	e6d9      	b.n	8000e5a <__aeabi_dadd+0x26e>
 80010a6:	2700      	movs	r7, #0
 80010a8:	2600      	movs	r6, #0
 80010aa:	e6e8      	b.n	8000e7e <__aeabi_dadd+0x292>
 80010ac:	4649      	mov	r1, r9
 80010ae:	1a57      	subs	r7, r2, r1
 80010b0:	42ba      	cmp	r2, r7
 80010b2:	4192      	sbcs	r2, r2
 80010b4:	1b9e      	subs	r6, r3, r6
 80010b6:	4252      	negs	r2, r2
 80010b8:	4665      	mov	r5, ip
 80010ba:	1ab6      	subs	r6, r6, r2
 80010bc:	e5ed      	b.n	8000c9a <__aeabi_dadd+0xae>
 80010be:	2900      	cmp	r1, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_dadd+0x4d8>
 80010c2:	e0c6      	b.n	8001252 <__aeabi_dadd+0x666>
 80010c4:	2f00      	cmp	r7, #0
 80010c6:	d167      	bne.n	8001198 <__aeabi_dadd+0x5ac>
 80010c8:	2680      	movs	r6, #128	@ 0x80
 80010ca:	2500      	movs	r5, #0
 80010cc:	4c7f      	ldr	r4, [pc, #508]	@ (80012cc <__aeabi_dadd+0x6e0>)
 80010ce:	0336      	lsls	r6, r6, #12
 80010d0:	e6d5      	b.n	8000e7e <__aeabi_dadd+0x292>
 80010d2:	4665      	mov	r5, ip
 80010d4:	000c      	movs	r4, r1
 80010d6:	001e      	movs	r6, r3
 80010d8:	08d0      	lsrs	r0, r2, #3
 80010da:	e6e4      	b.n	8000ea6 <__aeabi_dadd+0x2ba>
 80010dc:	444a      	add	r2, r9
 80010de:	454a      	cmp	r2, r9
 80010e0:	4180      	sbcs	r0, r0
 80010e2:	18f3      	adds	r3, r6, r3
 80010e4:	4240      	negs	r0, r0
 80010e6:	1818      	adds	r0, r3, r0
 80010e8:	0011      	movs	r1, r2
 80010ea:	0203      	lsls	r3, r0, #8
 80010ec:	d400      	bmi.n	80010f0 <__aeabi_dadd+0x504>
 80010ee:	e096      	b.n	800121e <__aeabi_dadd+0x632>
 80010f0:	4b77      	ldr	r3, [pc, #476]	@ (80012d0 <__aeabi_dadd+0x6e4>)
 80010f2:	0849      	lsrs	r1, r1, #1
 80010f4:	4018      	ands	r0, r3
 80010f6:	07c3      	lsls	r3, r0, #31
 80010f8:	430b      	orrs	r3, r1
 80010fa:	0844      	lsrs	r4, r0, #1
 80010fc:	0749      	lsls	r1, r1, #29
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0x516>
 8001100:	e129      	b.n	8001356 <__aeabi_dadd+0x76a>
 8001102:	220f      	movs	r2, #15
 8001104:	401a      	ands	r2, r3
 8001106:	2a04      	cmp	r2, #4
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x520>
 800110a:	e0ea      	b.n	80012e2 <__aeabi_dadd+0x6f6>
 800110c:	1d1f      	adds	r7, r3, #4
 800110e:	429f      	cmp	r7, r3
 8001110:	41b6      	sbcs	r6, r6
 8001112:	4276      	negs	r6, r6
 8001114:	1936      	adds	r6, r6, r4
 8001116:	2402      	movs	r4, #2
 8001118:	e6c4      	b.n	8000ea4 <__aeabi_dadd+0x2b8>
 800111a:	4649      	mov	r1, r9
 800111c:	1a8f      	subs	r7, r1, r2
 800111e:	45b9      	cmp	r9, r7
 8001120:	4180      	sbcs	r0, r0
 8001122:	1af6      	subs	r6, r6, r3
 8001124:	4240      	negs	r0, r0
 8001126:	1a36      	subs	r6, r6, r0
 8001128:	0233      	lsls	r3, r6, #8
 800112a:	d406      	bmi.n	800113a <__aeabi_dadd+0x54e>
 800112c:	0773      	lsls	r3, r6, #29
 800112e:	08ff      	lsrs	r7, r7, #3
 8001130:	2101      	movs	r1, #1
 8001132:	431f      	orrs	r7, r3
 8001134:	08f0      	lsrs	r0, r6, #3
 8001136:	e690      	b.n	8000e5a <__aeabi_dadd+0x26e>
 8001138:	4665      	mov	r5, ip
 800113a:	2401      	movs	r4, #1
 800113c:	e5ab      	b.n	8000c96 <__aeabi_dadd+0xaa>
 800113e:	464b      	mov	r3, r9
 8001140:	0777      	lsls	r7, r6, #29
 8001142:	08d8      	lsrs	r0, r3, #3
 8001144:	4307      	orrs	r7, r0
 8001146:	08f0      	lsrs	r0, r6, #3
 8001148:	e6b4      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 800114a:	000f      	movs	r7, r1
 800114c:	0018      	movs	r0, r3
 800114e:	3f20      	subs	r7, #32
 8001150:	40f8      	lsrs	r0, r7
 8001152:	4684      	mov	ip, r0
 8001154:	2920      	cmp	r1, #32
 8001156:	d003      	beq.n	8001160 <__aeabi_dadd+0x574>
 8001158:	2740      	movs	r7, #64	@ 0x40
 800115a:	1a79      	subs	r1, r7, r1
 800115c:	408b      	lsls	r3, r1
 800115e:	431a      	orrs	r2, r3
 8001160:	1e53      	subs	r3, r2, #1
 8001162:	419a      	sbcs	r2, r3
 8001164:	4663      	mov	r3, ip
 8001166:	0017      	movs	r7, r2
 8001168:	431f      	orrs	r7, r3
 800116a:	e635      	b.n	8000dd8 <__aeabi_dadd+0x1ec>
 800116c:	2500      	movs	r5, #0
 800116e:	2400      	movs	r4, #0
 8001170:	2600      	movs	r6, #0
 8001172:	e684      	b.n	8000e7e <__aeabi_dadd+0x292>
 8001174:	000c      	movs	r4, r1
 8001176:	0035      	movs	r5, r6
 8001178:	3c20      	subs	r4, #32
 800117a:	40e5      	lsrs	r5, r4
 800117c:	2920      	cmp	r1, #32
 800117e:	d005      	beq.n	800118c <__aeabi_dadd+0x5a0>
 8001180:	2440      	movs	r4, #64	@ 0x40
 8001182:	1a61      	subs	r1, r4, r1
 8001184:	408e      	lsls	r6, r1
 8001186:	4649      	mov	r1, r9
 8001188:	4331      	orrs	r1, r6
 800118a:	4689      	mov	r9, r1
 800118c:	4648      	mov	r0, r9
 800118e:	1e41      	subs	r1, r0, #1
 8001190:	4188      	sbcs	r0, r1
 8001192:	0007      	movs	r7, r0
 8001194:	432f      	orrs	r7, r5
 8001196:	e5ef      	b.n	8000d78 <__aeabi_dadd+0x18c>
 8001198:	08d2      	lsrs	r2, r2, #3
 800119a:	075f      	lsls	r7, r3, #29
 800119c:	4665      	mov	r5, ip
 800119e:	4317      	orrs	r7, r2
 80011a0:	08d8      	lsrs	r0, r3, #3
 80011a2:	e687      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 80011a4:	1a17      	subs	r7, r2, r0
 80011a6:	42ba      	cmp	r2, r7
 80011a8:	4192      	sbcs	r2, r2
 80011aa:	1b9e      	subs	r6, r3, r6
 80011ac:	4252      	negs	r2, r2
 80011ae:	1ab6      	subs	r6, r6, r2
 80011b0:	0233      	lsls	r3, r6, #8
 80011b2:	d4c1      	bmi.n	8001138 <__aeabi_dadd+0x54c>
 80011b4:	0773      	lsls	r3, r6, #29
 80011b6:	08ff      	lsrs	r7, r7, #3
 80011b8:	4665      	mov	r5, ip
 80011ba:	2101      	movs	r1, #1
 80011bc:	431f      	orrs	r7, r3
 80011be:	08f0      	lsrs	r0, r6, #3
 80011c0:	e64b      	b.n	8000e5a <__aeabi_dadd+0x26e>
 80011c2:	2f00      	cmp	r7, #0
 80011c4:	d07b      	beq.n	80012be <__aeabi_dadd+0x6d2>
 80011c6:	4665      	mov	r5, ip
 80011c8:	001e      	movs	r6, r3
 80011ca:	4691      	mov	r9, r2
 80011cc:	e63f      	b.n	8000e4e <__aeabi_dadd+0x262>
 80011ce:	1a81      	subs	r1, r0, r2
 80011d0:	4688      	mov	r8, r1
 80011d2:	45c1      	cmp	r9, r8
 80011d4:	41a4      	sbcs	r4, r4
 80011d6:	1af1      	subs	r1, r6, r3
 80011d8:	4264      	negs	r4, r4
 80011da:	1b09      	subs	r1, r1, r4
 80011dc:	2480      	movs	r4, #128	@ 0x80
 80011de:	0424      	lsls	r4, r4, #16
 80011e0:	4221      	tst	r1, r4
 80011e2:	d077      	beq.n	80012d4 <__aeabi_dadd+0x6e8>
 80011e4:	1a10      	subs	r0, r2, r0
 80011e6:	4282      	cmp	r2, r0
 80011e8:	4192      	sbcs	r2, r2
 80011ea:	0007      	movs	r7, r0
 80011ec:	1b9e      	subs	r6, r3, r6
 80011ee:	4252      	negs	r2, r2
 80011f0:	1ab6      	subs	r6, r6, r2
 80011f2:	4337      	orrs	r7, r6
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dadd+0x60c>
 80011f6:	e0a0      	b.n	800133a <__aeabi_dadd+0x74e>
 80011f8:	4665      	mov	r5, ip
 80011fa:	2400      	movs	r4, #0
 80011fc:	2600      	movs	r6, #0
 80011fe:	e63e      	b.n	8000e7e <__aeabi_dadd+0x292>
 8001200:	075f      	lsls	r7, r3, #29
 8001202:	08d2      	lsrs	r2, r2, #3
 8001204:	4665      	mov	r5, ip
 8001206:	4317      	orrs	r7, r2
 8001208:	08d8      	lsrs	r0, r3, #3
 800120a:	e653      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 800120c:	1881      	adds	r1, r0, r2
 800120e:	4291      	cmp	r1, r2
 8001210:	4192      	sbcs	r2, r2
 8001212:	18f0      	adds	r0, r6, r3
 8001214:	4252      	negs	r2, r2
 8001216:	1880      	adds	r0, r0, r2
 8001218:	0203      	lsls	r3, r0, #8
 800121a:	d500      	bpl.n	800121e <__aeabi_dadd+0x632>
 800121c:	e768      	b.n	80010f0 <__aeabi_dadd+0x504>
 800121e:	0747      	lsls	r7, r0, #29
 8001220:	08c9      	lsrs	r1, r1, #3
 8001222:	430f      	orrs	r7, r1
 8001224:	08c0      	lsrs	r0, r0, #3
 8001226:	2101      	movs	r1, #1
 8001228:	e617      	b.n	8000e5a <__aeabi_dadd+0x26e>
 800122a:	08d2      	lsrs	r2, r2, #3
 800122c:	075f      	lsls	r7, r3, #29
 800122e:	4317      	orrs	r7, r2
 8001230:	08d8      	lsrs	r0, r3, #3
 8001232:	e63f      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8001234:	000c      	movs	r4, r1
 8001236:	2600      	movs	r6, #0
 8001238:	2700      	movs	r7, #0
 800123a:	e620      	b.n	8000e7e <__aeabi_dadd+0x292>
 800123c:	2900      	cmp	r1, #0
 800123e:	d156      	bne.n	80012ee <__aeabi_dadd+0x702>
 8001240:	075f      	lsls	r7, r3, #29
 8001242:	08d2      	lsrs	r2, r2, #3
 8001244:	4317      	orrs	r7, r2
 8001246:	08d8      	lsrs	r0, r3, #3
 8001248:	e634      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 800124a:	000c      	movs	r4, r1
 800124c:	001e      	movs	r6, r3
 800124e:	08d0      	lsrs	r0, r2, #3
 8001250:	e629      	b.n	8000ea6 <__aeabi_dadd+0x2ba>
 8001252:	08c1      	lsrs	r1, r0, #3
 8001254:	0770      	lsls	r0, r6, #29
 8001256:	4301      	orrs	r1, r0
 8001258:	08f0      	lsrs	r0, r6, #3
 800125a:	2f00      	cmp	r7, #0
 800125c:	d062      	beq.n	8001324 <__aeabi_dadd+0x738>
 800125e:	2480      	movs	r4, #128	@ 0x80
 8001260:	0324      	lsls	r4, r4, #12
 8001262:	4220      	tst	r0, r4
 8001264:	d007      	beq.n	8001276 <__aeabi_dadd+0x68a>
 8001266:	08de      	lsrs	r6, r3, #3
 8001268:	4226      	tst	r6, r4
 800126a:	d104      	bne.n	8001276 <__aeabi_dadd+0x68a>
 800126c:	4665      	mov	r5, ip
 800126e:	0030      	movs	r0, r6
 8001270:	08d1      	lsrs	r1, r2, #3
 8001272:	075b      	lsls	r3, r3, #29
 8001274:	4319      	orrs	r1, r3
 8001276:	0f4f      	lsrs	r7, r1, #29
 8001278:	00c9      	lsls	r1, r1, #3
 800127a:	08c9      	lsrs	r1, r1, #3
 800127c:	077f      	lsls	r7, r7, #29
 800127e:	430f      	orrs	r7, r1
 8001280:	e618      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8001282:	000c      	movs	r4, r1
 8001284:	0030      	movs	r0, r6
 8001286:	3c20      	subs	r4, #32
 8001288:	40e0      	lsrs	r0, r4
 800128a:	4684      	mov	ip, r0
 800128c:	2920      	cmp	r1, #32
 800128e:	d005      	beq.n	800129c <__aeabi_dadd+0x6b0>
 8001290:	2440      	movs	r4, #64	@ 0x40
 8001292:	1a61      	subs	r1, r4, r1
 8001294:	408e      	lsls	r6, r1
 8001296:	4649      	mov	r1, r9
 8001298:	4331      	orrs	r1, r6
 800129a:	4689      	mov	r9, r1
 800129c:	4648      	mov	r0, r9
 800129e:	1e41      	subs	r1, r0, #1
 80012a0:	4188      	sbcs	r0, r1
 80012a2:	4661      	mov	r1, ip
 80012a4:	0007      	movs	r7, r0
 80012a6:	430f      	orrs	r7, r1
 80012a8:	e630      	b.n	8000f0c <__aeabi_dadd+0x320>
 80012aa:	2120      	movs	r1, #32
 80012ac:	2700      	movs	r7, #0
 80012ae:	1a09      	subs	r1, r1, r0
 80012b0:	e50e      	b.n	8000cd0 <__aeabi_dadd+0xe4>
 80012b2:	001e      	movs	r6, r3
 80012b4:	2f00      	cmp	r7, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_dadd+0x6ce>
 80012b8:	e522      	b.n	8000d00 <__aeabi_dadd+0x114>
 80012ba:	2400      	movs	r4, #0
 80012bc:	e758      	b.n	8001170 <__aeabi_dadd+0x584>
 80012be:	2500      	movs	r5, #0
 80012c0:	2400      	movs	r4, #0
 80012c2:	2600      	movs	r6, #0
 80012c4:	e5db      	b.n	8000e7e <__aeabi_dadd+0x292>
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	000007fe 	.word	0x000007fe
 80012cc:	000007ff 	.word	0x000007ff
 80012d0:	ff7fffff 	.word	0xff7fffff
 80012d4:	4647      	mov	r7, r8
 80012d6:	430f      	orrs	r7, r1
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x6f0>
 80012da:	e747      	b.n	800116c <__aeabi_dadd+0x580>
 80012dc:	000e      	movs	r6, r1
 80012de:	46c1      	mov	r9, r8
 80012e0:	e5b5      	b.n	8000e4e <__aeabi_dadd+0x262>
 80012e2:	08df      	lsrs	r7, r3, #3
 80012e4:	0764      	lsls	r4, r4, #29
 80012e6:	2102      	movs	r1, #2
 80012e8:	4327      	orrs	r7, r4
 80012ea:	0900      	lsrs	r0, r0, #4
 80012ec:	e5b5      	b.n	8000e5a <__aeabi_dadd+0x26e>
 80012ee:	0019      	movs	r1, r3
 80012f0:	08c0      	lsrs	r0, r0, #3
 80012f2:	0777      	lsls	r7, r6, #29
 80012f4:	4307      	orrs	r7, r0
 80012f6:	4311      	orrs	r1, r2
 80012f8:	08f0      	lsrs	r0, r6, #3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x714>
 80012fe:	e5d9      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0309      	lsls	r1, r1, #12
 8001304:	4208      	tst	r0, r1
 8001306:	d007      	beq.n	8001318 <__aeabi_dadd+0x72c>
 8001308:	08dc      	lsrs	r4, r3, #3
 800130a:	420c      	tst	r4, r1
 800130c:	d104      	bne.n	8001318 <__aeabi_dadd+0x72c>
 800130e:	08d2      	lsrs	r2, r2, #3
 8001310:	075b      	lsls	r3, r3, #29
 8001312:	431a      	orrs	r2, r3
 8001314:	0017      	movs	r7, r2
 8001316:	0020      	movs	r0, r4
 8001318:	0f7b      	lsrs	r3, r7, #29
 800131a:	00ff      	lsls	r7, r7, #3
 800131c:	08ff      	lsrs	r7, r7, #3
 800131e:	075b      	lsls	r3, r3, #29
 8001320:	431f      	orrs	r7, r3
 8001322:	e5c7      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8001324:	000f      	movs	r7, r1
 8001326:	e5c5      	b.n	8000eb4 <__aeabi_dadd+0x2c8>
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <__aeabi_dadd+0x788>)
 800132a:	08d2      	lsrs	r2, r2, #3
 800132c:	4033      	ands	r3, r6
 800132e:	075f      	lsls	r7, r3, #29
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	2401      	movs	r4, #1
 8001334:	4317      	orrs	r7, r2
 8001336:	0b1e      	lsrs	r6, r3, #12
 8001338:	e5a1      	b.n	8000e7e <__aeabi_dadd+0x292>
 800133a:	4226      	tst	r6, r4
 800133c:	d012      	beq.n	8001364 <__aeabi_dadd+0x778>
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <__aeabi_dadd+0x788>)
 8001340:	4665      	mov	r5, ip
 8001342:	0002      	movs	r2, r0
 8001344:	2401      	movs	r4, #1
 8001346:	401e      	ands	r6, r3
 8001348:	e4e6      	b.n	8000d18 <__aeabi_dadd+0x12c>
 800134a:	0021      	movs	r1, r4
 800134c:	e585      	b.n	8000e5a <__aeabi_dadd+0x26e>
 800134e:	0017      	movs	r7, r2
 8001350:	e5a8      	b.n	8000ea4 <__aeabi_dadd+0x2b8>
 8001352:	003a      	movs	r2, r7
 8001354:	e4d4      	b.n	8000d00 <__aeabi_dadd+0x114>
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	0764      	lsls	r4, r4, #29
 800135a:	431c      	orrs	r4, r3
 800135c:	0027      	movs	r7, r4
 800135e:	2102      	movs	r1, #2
 8001360:	0900      	lsrs	r0, r0, #4
 8001362:	e57a      	b.n	8000e5a <__aeabi_dadd+0x26e>
 8001364:	08c0      	lsrs	r0, r0, #3
 8001366:	0777      	lsls	r7, r6, #29
 8001368:	4307      	orrs	r7, r0
 800136a:	4665      	mov	r5, ip
 800136c:	2100      	movs	r1, #0
 800136e:	08f0      	lsrs	r0, r6, #3
 8001370:	e573      	b.n	8000e5a <__aeabi_dadd+0x26e>
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	ff7fffff 	.word	0xff7fffff

08001378 <__aeabi_ddiv>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	46de      	mov	lr, fp
 800137c:	4645      	mov	r5, r8
 800137e:	4657      	mov	r7, sl
 8001380:	464e      	mov	r6, r9
 8001382:	b5e0      	push	{r5, r6, r7, lr}
 8001384:	b087      	sub	sp, #28
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	030b      	lsls	r3, r1, #12
 800138c:	0b1b      	lsrs	r3, r3, #12
 800138e:	469b      	mov	fp, r3
 8001390:	0fca      	lsrs	r2, r1, #31
 8001392:	004b      	lsls	r3, r1, #1
 8001394:	0004      	movs	r4, r0
 8001396:	4680      	mov	r8, r0
 8001398:	0d5b      	lsrs	r3, r3, #21
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	d100      	bne.n	80013a0 <__aeabi_ddiv+0x28>
 800139e:	e098      	b.n	80014d2 <__aeabi_ddiv+0x15a>
 80013a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001594 <__aeabi_ddiv+0x21c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d037      	beq.n	8001416 <__aeabi_ddiv+0x9e>
 80013a6:	4659      	mov	r1, fp
 80013a8:	0f42      	lsrs	r2, r0, #29
 80013aa:	00c9      	lsls	r1, r1, #3
 80013ac:	430a      	orrs	r2, r1
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	0409      	lsls	r1, r1, #16
 80013b2:	4311      	orrs	r1, r2
 80013b4:	00c2      	lsls	r2, r0, #3
 80013b6:	4690      	mov	r8, r2
 80013b8:	4a77      	ldr	r2, [pc, #476]	@ (8001598 <__aeabi_ddiv+0x220>)
 80013ba:	4689      	mov	r9, r1
 80013bc:	4692      	mov	sl, r2
 80013be:	449a      	add	sl, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	2400      	movs	r4, #0
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	9e00      	ldr	r6, [sp, #0]
 80013c8:	9f01      	ldr	r7, [sp, #4]
 80013ca:	033b      	lsls	r3, r7, #12
 80013cc:	0b1b      	lsrs	r3, r3, #12
 80013ce:	469b      	mov	fp, r3
 80013d0:	007b      	lsls	r3, r7, #1
 80013d2:	0030      	movs	r0, r6
 80013d4:	0d5b      	lsrs	r3, r3, #21
 80013d6:	0ffd      	lsrs	r5, r7, #31
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d059      	beq.n	8001490 <__aeabi_ddiv+0x118>
 80013dc:	4a6d      	ldr	r2, [pc, #436]	@ (8001594 <__aeabi_ddiv+0x21c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d048      	beq.n	8001474 <__aeabi_ddiv+0xfc>
 80013e2:	4659      	mov	r1, fp
 80013e4:	0f72      	lsrs	r2, r6, #29
 80013e6:	00c9      	lsls	r1, r1, #3
 80013e8:	430a      	orrs	r2, r1
 80013ea:	2180      	movs	r1, #128	@ 0x80
 80013ec:	0409      	lsls	r1, r1, #16
 80013ee:	4311      	orrs	r1, r2
 80013f0:	468b      	mov	fp, r1
 80013f2:	4969      	ldr	r1, [pc, #420]	@ (8001598 <__aeabi_ddiv+0x220>)
 80013f4:	00f2      	lsls	r2, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4651      	mov	r1, sl
 80013fa:	4463      	add	r3, ip
 80013fc:	1acb      	subs	r3, r1, r3
 80013fe:	469a      	mov	sl, r3
 8001400:	2100      	movs	r1, #0
 8001402:	9e02      	ldr	r6, [sp, #8]
 8001404:	406e      	eors	r6, r5
 8001406:	b2f6      	uxtb	r6, r6
 8001408:	2c0f      	cmp	r4, #15
 800140a:	d900      	bls.n	800140e <__aeabi_ddiv+0x96>
 800140c:	e0ce      	b.n	80015ac <__aeabi_ddiv+0x234>
 800140e:	4b63      	ldr	r3, [pc, #396]	@ (800159c <__aeabi_ddiv+0x224>)
 8001410:	00a4      	lsls	r4, r4, #2
 8001412:	591b      	ldr	r3, [r3, r4]
 8001414:	469f      	mov	pc, r3
 8001416:	465a      	mov	r2, fp
 8001418:	4302      	orrs	r2, r0
 800141a:	4691      	mov	r9, r2
 800141c:	d000      	beq.n	8001420 <__aeabi_ddiv+0xa8>
 800141e:	e090      	b.n	8001542 <__aeabi_ddiv+0x1ca>
 8001420:	469a      	mov	sl, r3
 8001422:	2302      	movs	r3, #2
 8001424:	4690      	mov	r8, r2
 8001426:	2408      	movs	r4, #8
 8001428:	9303      	str	r3, [sp, #12]
 800142a:	e7cc      	b.n	80013c6 <__aeabi_ddiv+0x4e>
 800142c:	46cb      	mov	fp, r9
 800142e:	4642      	mov	r2, r8
 8001430:	9d02      	ldr	r5, [sp, #8]
 8001432:	9903      	ldr	r1, [sp, #12]
 8001434:	2902      	cmp	r1, #2
 8001436:	d100      	bne.n	800143a <__aeabi_ddiv+0xc2>
 8001438:	e1de      	b.n	80017f8 <__aeabi_ddiv+0x480>
 800143a:	2903      	cmp	r1, #3
 800143c:	d100      	bne.n	8001440 <__aeabi_ddiv+0xc8>
 800143e:	e08d      	b.n	800155c <__aeabi_ddiv+0x1e4>
 8001440:	2901      	cmp	r1, #1
 8001442:	d000      	beq.n	8001446 <__aeabi_ddiv+0xce>
 8001444:	e179      	b.n	800173a <__aeabi_ddiv+0x3c2>
 8001446:	002e      	movs	r6, r5
 8001448:	2200      	movs	r2, #0
 800144a:	2300      	movs	r3, #0
 800144c:	2400      	movs	r4, #0
 800144e:	4690      	mov	r8, r2
 8001450:	051b      	lsls	r3, r3, #20
 8001452:	4323      	orrs	r3, r4
 8001454:	07f6      	lsls	r6, r6, #31
 8001456:	4333      	orrs	r3, r6
 8001458:	4640      	mov	r0, r8
 800145a:	0019      	movs	r1, r3
 800145c:	b007      	add	sp, #28
 800145e:	bcf0      	pop	{r4, r5, r6, r7}
 8001460:	46bb      	mov	fp, r7
 8001462:	46b2      	mov	sl, r6
 8001464:	46a9      	mov	r9, r5
 8001466:	46a0      	mov	r8, r4
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	2200      	movs	r2, #0
 800146c:	2400      	movs	r4, #0
 800146e:	4690      	mov	r8, r2
 8001470:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <__aeabi_ddiv+0x21c>)
 8001472:	e7ed      	b.n	8001450 <__aeabi_ddiv+0xd8>
 8001474:	465a      	mov	r2, fp
 8001476:	9b00      	ldr	r3, [sp, #0]
 8001478:	431a      	orrs	r2, r3
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <__aeabi_ddiv+0x228>)
 800147c:	469c      	mov	ip, r3
 800147e:	44e2      	add	sl, ip
 8001480:	2a00      	cmp	r2, #0
 8001482:	d159      	bne.n	8001538 <__aeabi_ddiv+0x1c0>
 8001484:	2302      	movs	r3, #2
 8001486:	431c      	orrs	r4, r3
 8001488:	2300      	movs	r3, #0
 800148a:	2102      	movs	r1, #2
 800148c:	469b      	mov	fp, r3
 800148e:	e7b8      	b.n	8001402 <__aeabi_ddiv+0x8a>
 8001490:	465a      	mov	r2, fp
 8001492:	9b00      	ldr	r3, [sp, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	d049      	beq.n	800152c <__aeabi_ddiv+0x1b4>
 8001498:	465b      	mov	r3, fp
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <__aeabi_ddiv+0x128>
 800149e:	e19c      	b.n	80017da <__aeabi_ddiv+0x462>
 80014a0:	4658      	mov	r0, fp
 80014a2:	f001 fb8b 	bl	8002bbc <__clzsi2>
 80014a6:	0002      	movs	r2, r0
 80014a8:	0003      	movs	r3, r0
 80014aa:	3a0b      	subs	r2, #11
 80014ac:	271d      	movs	r7, #29
 80014ae:	9e00      	ldr	r6, [sp, #0]
 80014b0:	1aba      	subs	r2, r7, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4658      	mov	r0, fp
 80014b6:	40d6      	lsrs	r6, r2
 80014b8:	3908      	subs	r1, #8
 80014ba:	4088      	lsls	r0, r1
 80014bc:	0032      	movs	r2, r6
 80014be:	4302      	orrs	r2, r0
 80014c0:	4693      	mov	fp, r2
 80014c2:	9a00      	ldr	r2, [sp, #0]
 80014c4:	408a      	lsls	r2, r1
 80014c6:	4937      	ldr	r1, [pc, #220]	@ (80015a4 <__aeabi_ddiv+0x22c>)
 80014c8:	4453      	add	r3, sl
 80014ca:	468a      	mov	sl, r1
 80014cc:	2100      	movs	r1, #0
 80014ce:	449a      	add	sl, r3
 80014d0:	e797      	b.n	8001402 <__aeabi_ddiv+0x8a>
 80014d2:	465b      	mov	r3, fp
 80014d4:	4303      	orrs	r3, r0
 80014d6:	4699      	mov	r9, r3
 80014d8:	d021      	beq.n	800151e <__aeabi_ddiv+0x1a6>
 80014da:	465b      	mov	r3, fp
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d100      	bne.n	80014e2 <__aeabi_ddiv+0x16a>
 80014e0:	e169      	b.n	80017b6 <__aeabi_ddiv+0x43e>
 80014e2:	4658      	mov	r0, fp
 80014e4:	f001 fb6a 	bl	8002bbc <__clzsi2>
 80014e8:	230b      	movs	r3, #11
 80014ea:	425b      	negs	r3, r3
 80014ec:	469c      	mov	ip, r3
 80014ee:	0002      	movs	r2, r0
 80014f0:	4484      	add	ip, r0
 80014f2:	4666      	mov	r6, ip
 80014f4:	231d      	movs	r3, #29
 80014f6:	1b9b      	subs	r3, r3, r6
 80014f8:	0026      	movs	r6, r4
 80014fa:	0011      	movs	r1, r2
 80014fc:	4658      	mov	r0, fp
 80014fe:	40de      	lsrs	r6, r3
 8001500:	3908      	subs	r1, #8
 8001502:	4088      	lsls	r0, r1
 8001504:	0033      	movs	r3, r6
 8001506:	4303      	orrs	r3, r0
 8001508:	4699      	mov	r9, r3
 800150a:	0023      	movs	r3, r4
 800150c:	408b      	lsls	r3, r1
 800150e:	4698      	mov	r8, r3
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <__aeabi_ddiv+0x230>)
 8001512:	2400      	movs	r4, #0
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	469a      	mov	sl, r3
 8001518:	2300      	movs	r3, #0
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	e753      	b.n	80013c6 <__aeabi_ddiv+0x4e>
 800151e:	2300      	movs	r3, #0
 8001520:	4698      	mov	r8, r3
 8001522:	469a      	mov	sl, r3
 8001524:	3301      	adds	r3, #1
 8001526:	2404      	movs	r4, #4
 8001528:	9303      	str	r3, [sp, #12]
 800152a:	e74c      	b.n	80013c6 <__aeabi_ddiv+0x4e>
 800152c:	2301      	movs	r3, #1
 800152e:	431c      	orrs	r4, r3
 8001530:	2300      	movs	r3, #0
 8001532:	2101      	movs	r1, #1
 8001534:	469b      	mov	fp, r3
 8001536:	e764      	b.n	8001402 <__aeabi_ddiv+0x8a>
 8001538:	2303      	movs	r3, #3
 800153a:	0032      	movs	r2, r6
 800153c:	2103      	movs	r1, #3
 800153e:	431c      	orrs	r4, r3
 8001540:	e75f      	b.n	8001402 <__aeabi_ddiv+0x8a>
 8001542:	469a      	mov	sl, r3
 8001544:	2303      	movs	r3, #3
 8001546:	46d9      	mov	r9, fp
 8001548:	240c      	movs	r4, #12
 800154a:	9303      	str	r3, [sp, #12]
 800154c:	e73b      	b.n	80013c6 <__aeabi_ddiv+0x4e>
 800154e:	2300      	movs	r3, #0
 8001550:	2480      	movs	r4, #128	@ 0x80
 8001552:	4698      	mov	r8, r3
 8001554:	2600      	movs	r6, #0
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <__aeabi_ddiv+0x21c>)
 8001558:	0324      	lsls	r4, r4, #12
 800155a:	e779      	b.n	8001450 <__aeabi_ddiv+0xd8>
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	465b      	mov	r3, fp
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	431c      	orrs	r4, r3
 8001564:	0324      	lsls	r4, r4, #12
 8001566:	002e      	movs	r6, r5
 8001568:	4690      	mov	r8, r2
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <__aeabi_ddiv+0x21c>)
 800156c:	0b24      	lsrs	r4, r4, #12
 800156e:	e76f      	b.n	8001450 <__aeabi_ddiv+0xd8>
 8001570:	2480      	movs	r4, #128	@ 0x80
 8001572:	464b      	mov	r3, r9
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	4223      	tst	r3, r4
 8001578:	d002      	beq.n	8001580 <__aeabi_ddiv+0x208>
 800157a:	465b      	mov	r3, fp
 800157c:	4223      	tst	r3, r4
 800157e:	d0f0      	beq.n	8001562 <__aeabi_ddiv+0x1ea>
 8001580:	2480      	movs	r4, #128	@ 0x80
 8001582:	464b      	mov	r3, r9
 8001584:	0324      	lsls	r4, r4, #12
 8001586:	431c      	orrs	r4, r3
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	9e02      	ldr	r6, [sp, #8]
 800158c:	4b01      	ldr	r3, [pc, #4]	@ (8001594 <__aeabi_ddiv+0x21c>)
 800158e:	0b24      	lsrs	r4, r4, #12
 8001590:	e75e      	b.n	8001450 <__aeabi_ddiv+0xd8>
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	000007ff 	.word	0x000007ff
 8001598:	fffffc01 	.word	0xfffffc01
 800159c:	08008ae0 	.word	0x08008ae0
 80015a0:	fffff801 	.word	0xfffff801
 80015a4:	000003f3 	.word	0x000003f3
 80015a8:	fffffc0d 	.word	0xfffffc0d
 80015ac:	45cb      	cmp	fp, r9
 80015ae:	d200      	bcs.n	80015b2 <__aeabi_ddiv+0x23a>
 80015b0:	e0f8      	b.n	80017a4 <__aeabi_ddiv+0x42c>
 80015b2:	d100      	bne.n	80015b6 <__aeabi_ddiv+0x23e>
 80015b4:	e0f3      	b.n	800179e <__aeabi_ddiv+0x426>
 80015b6:	2301      	movs	r3, #1
 80015b8:	425b      	negs	r3, r3
 80015ba:	469c      	mov	ip, r3
 80015bc:	4644      	mov	r4, r8
 80015be:	4648      	mov	r0, r9
 80015c0:	2500      	movs	r5, #0
 80015c2:	44e2      	add	sl, ip
 80015c4:	465b      	mov	r3, fp
 80015c6:	0e17      	lsrs	r7, r2, #24
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c19      	lsrs	r1, r3, #16
 80015ce:	043b      	lsls	r3, r7, #16
 80015d0:	0212      	lsls	r2, r2, #8
 80015d2:	9700      	str	r7, [sp, #0]
 80015d4:	0c1f      	lsrs	r7, r3, #16
 80015d6:	4691      	mov	r9, r2
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9703      	str	r7, [sp, #12]
 80015dc:	f7fe fe36 	bl	800024c <__aeabi_uidivmod>
 80015e0:	0002      	movs	r2, r0
 80015e2:	437a      	muls	r2, r7
 80015e4:	040b      	lsls	r3, r1, #16
 80015e6:	0c21      	lsrs	r1, r4, #16
 80015e8:	4680      	mov	r8, r0
 80015ea:	4319      	orrs	r1, r3
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d909      	bls.n	8001604 <__aeabi_ddiv+0x28c>
 80015f0:	9f00      	ldr	r7, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	46bc      	mov	ip, r7
 80015f6:	425b      	negs	r3, r3
 80015f8:	4461      	add	r1, ip
 80015fa:	469c      	mov	ip, r3
 80015fc:	44e0      	add	r8, ip
 80015fe:	428f      	cmp	r7, r1
 8001600:	d800      	bhi.n	8001604 <__aeabi_ddiv+0x28c>
 8001602:	e15c      	b.n	80018be <__aeabi_ddiv+0x546>
 8001604:	1a88      	subs	r0, r1, r2
 8001606:	9902      	ldr	r1, [sp, #8]
 8001608:	f7fe fe20 	bl	800024c <__aeabi_uidivmod>
 800160c:	9a03      	ldr	r2, [sp, #12]
 800160e:	0424      	lsls	r4, r4, #16
 8001610:	4342      	muls	r2, r0
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	0c24      	lsrs	r4, r4, #16
 8001616:	0003      	movs	r3, r0
 8001618:	430c      	orrs	r4, r1
 800161a:	42a2      	cmp	r2, r4
 800161c:	d906      	bls.n	800162c <__aeabi_ddiv+0x2b4>
 800161e:	9900      	ldr	r1, [sp, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	468c      	mov	ip, r1
 8001624:	4464      	add	r4, ip
 8001626:	42a1      	cmp	r1, r4
 8001628:	d800      	bhi.n	800162c <__aeabi_ddiv+0x2b4>
 800162a:	e142      	b.n	80018b2 <__aeabi_ddiv+0x53a>
 800162c:	1aa0      	subs	r0, r4, r2
 800162e:	4642      	mov	r2, r8
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	4693      	mov	fp, r2
 8001636:	464b      	mov	r3, r9
 8001638:	4659      	mov	r1, fp
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	001f      	movs	r7, r3
 800163e:	9304      	str	r3, [sp, #16]
 8001640:	040b      	lsls	r3, r1, #16
 8001642:	4649      	mov	r1, r9
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	0c09      	lsrs	r1, r1, #16
 8001648:	000c      	movs	r4, r1
 800164a:	0c1b      	lsrs	r3, r3, #16
 800164c:	435c      	muls	r4, r3
 800164e:	0c12      	lsrs	r2, r2, #16
 8001650:	437b      	muls	r3, r7
 8001652:	4688      	mov	r8, r1
 8001654:	4351      	muls	r1, r2
 8001656:	437a      	muls	r2, r7
 8001658:	0c27      	lsrs	r7, r4, #16
 800165a:	46bc      	mov	ip, r7
 800165c:	185b      	adds	r3, r3, r1
 800165e:	4463      	add	r3, ip
 8001660:	4299      	cmp	r1, r3
 8001662:	d903      	bls.n	800166c <__aeabi_ddiv+0x2f4>
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	468c      	mov	ip, r1
 800166a:	4462      	add	r2, ip
 800166c:	0c19      	lsrs	r1, r3, #16
 800166e:	0424      	lsls	r4, r4, #16
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	0c24      	lsrs	r4, r4, #16
 8001674:	188a      	adds	r2, r1, r2
 8001676:	191c      	adds	r4, r3, r4
 8001678:	4290      	cmp	r0, r2
 800167a:	d302      	bcc.n	8001682 <__aeabi_ddiv+0x30a>
 800167c:	d116      	bne.n	80016ac <__aeabi_ddiv+0x334>
 800167e:	42a5      	cmp	r5, r4
 8001680:	d214      	bcs.n	80016ac <__aeabi_ddiv+0x334>
 8001682:	465b      	mov	r3, fp
 8001684:	9f00      	ldr	r7, [sp, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	444d      	add	r5, r9
 800168a:	9305      	str	r3, [sp, #20]
 800168c:	454d      	cmp	r5, r9
 800168e:	419b      	sbcs	r3, r3
 8001690:	46bc      	mov	ip, r7
 8001692:	425b      	negs	r3, r3
 8001694:	4463      	add	r3, ip
 8001696:	18c0      	adds	r0, r0, r3
 8001698:	4287      	cmp	r7, r0
 800169a:	d300      	bcc.n	800169e <__aeabi_ddiv+0x326>
 800169c:	e102      	b.n	80018a4 <__aeabi_ddiv+0x52c>
 800169e:	4282      	cmp	r2, r0
 80016a0:	d900      	bls.n	80016a4 <__aeabi_ddiv+0x32c>
 80016a2:	e129      	b.n	80018f8 <__aeabi_ddiv+0x580>
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x330>
 80016a6:	e124      	b.n	80018f2 <__aeabi_ddiv+0x57a>
 80016a8:	9b05      	ldr	r3, [sp, #20]
 80016aa:	469b      	mov	fp, r3
 80016ac:	1b2c      	subs	r4, r5, r4
 80016ae:	42a5      	cmp	r5, r4
 80016b0:	41ad      	sbcs	r5, r5
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	1a80      	subs	r0, r0, r2
 80016b6:	426d      	negs	r5, r5
 80016b8:	1b40      	subs	r0, r0, r5
 80016ba:	4283      	cmp	r3, r0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_ddiv+0x348>
 80016be:	e10f      	b.n	80018e0 <__aeabi_ddiv+0x568>
 80016c0:	9902      	ldr	r1, [sp, #8]
 80016c2:	f7fe fdc3 	bl	800024c <__aeabi_uidivmod>
 80016c6:	9a03      	ldr	r2, [sp, #12]
 80016c8:	040b      	lsls	r3, r1, #16
 80016ca:	4342      	muls	r2, r0
 80016cc:	0c21      	lsrs	r1, r4, #16
 80016ce:	0005      	movs	r5, r0
 80016d0:	4319      	orrs	r1, r3
 80016d2:	428a      	cmp	r2, r1
 80016d4:	d900      	bls.n	80016d8 <__aeabi_ddiv+0x360>
 80016d6:	e0cb      	b.n	8001870 <__aeabi_ddiv+0x4f8>
 80016d8:	1a88      	subs	r0, r1, r2
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	f7fe fdb6 	bl	800024c <__aeabi_uidivmod>
 80016e0:	9a03      	ldr	r2, [sp, #12]
 80016e2:	0424      	lsls	r4, r4, #16
 80016e4:	4342      	muls	r2, r0
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	0c24      	lsrs	r4, r4, #16
 80016ea:	0003      	movs	r3, r0
 80016ec:	430c      	orrs	r4, r1
 80016ee:	42a2      	cmp	r2, r4
 80016f0:	d900      	bls.n	80016f4 <__aeabi_ddiv+0x37c>
 80016f2:	e0ca      	b.n	800188a <__aeabi_ddiv+0x512>
 80016f4:	4641      	mov	r1, r8
 80016f6:	1aa4      	subs	r4, r4, r2
 80016f8:	042a      	lsls	r2, r5, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	9f04      	ldr	r7, [sp, #16]
 80016fe:	0413      	lsls	r3, r2, #16
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	4359      	muls	r1, r3
 8001704:	4640      	mov	r0, r8
 8001706:	437b      	muls	r3, r7
 8001708:	469c      	mov	ip, r3
 800170a:	0c15      	lsrs	r5, r2, #16
 800170c:	4368      	muls	r0, r5
 800170e:	0c0b      	lsrs	r3, r1, #16
 8001710:	4484      	add	ip, r0
 8001712:	4463      	add	r3, ip
 8001714:	437d      	muls	r5, r7
 8001716:	4298      	cmp	r0, r3
 8001718:	d903      	bls.n	8001722 <__aeabi_ddiv+0x3aa>
 800171a:	2080      	movs	r0, #128	@ 0x80
 800171c:	0240      	lsls	r0, r0, #9
 800171e:	4684      	mov	ip, r0
 8001720:	4465      	add	r5, ip
 8001722:	0c18      	lsrs	r0, r3, #16
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	0c09      	lsrs	r1, r1, #16
 800172a:	1940      	adds	r0, r0, r5
 800172c:	185b      	adds	r3, r3, r1
 800172e:	4284      	cmp	r4, r0
 8001730:	d327      	bcc.n	8001782 <__aeabi_ddiv+0x40a>
 8001732:	d023      	beq.n	800177c <__aeabi_ddiv+0x404>
 8001734:	2301      	movs	r3, #1
 8001736:	0035      	movs	r5, r6
 8001738:	431a      	orrs	r2, r3
 800173a:	4b94      	ldr	r3, [pc, #592]	@ (800198c <__aeabi_ddiv+0x614>)
 800173c:	4453      	add	r3, sl
 800173e:	2b00      	cmp	r3, #0
 8001740:	dd60      	ble.n	8001804 <__aeabi_ddiv+0x48c>
 8001742:	0751      	lsls	r1, r2, #29
 8001744:	d000      	beq.n	8001748 <__aeabi_ddiv+0x3d0>
 8001746:	e086      	b.n	8001856 <__aeabi_ddiv+0x4de>
 8001748:	002e      	movs	r6, r5
 800174a:	08d1      	lsrs	r1, r2, #3
 800174c:	465a      	mov	r2, fp
 800174e:	01d2      	lsls	r2, r2, #7
 8001750:	d506      	bpl.n	8001760 <__aeabi_ddiv+0x3e8>
 8001752:	465a      	mov	r2, fp
 8001754:	4b8e      	ldr	r3, [pc, #568]	@ (8001990 <__aeabi_ddiv+0x618>)
 8001756:	401a      	ands	r2, r3
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	4693      	mov	fp, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4453      	add	r3, sl
 8001760:	4a8c      	ldr	r2, [pc, #560]	@ (8001994 <__aeabi_ddiv+0x61c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	dd00      	ble.n	8001768 <__aeabi_ddiv+0x3f0>
 8001766:	e680      	b.n	800146a <__aeabi_ddiv+0xf2>
 8001768:	465a      	mov	r2, fp
 800176a:	0752      	lsls	r2, r2, #29
 800176c:	430a      	orrs	r2, r1
 800176e:	4690      	mov	r8, r2
 8001770:	465a      	mov	r2, fp
 8001772:	055b      	lsls	r3, r3, #21
 8001774:	0254      	lsls	r4, r2, #9
 8001776:	0b24      	lsrs	r4, r4, #12
 8001778:	0d5b      	lsrs	r3, r3, #21
 800177a:	e669      	b.n	8001450 <__aeabi_ddiv+0xd8>
 800177c:	0035      	movs	r5, r6
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0db      	beq.n	800173a <__aeabi_ddiv+0x3c2>
 8001782:	9d00      	ldr	r5, [sp, #0]
 8001784:	1e51      	subs	r1, r2, #1
 8001786:	46ac      	mov	ip, r5
 8001788:	4464      	add	r4, ip
 800178a:	42ac      	cmp	r4, r5
 800178c:	d200      	bcs.n	8001790 <__aeabi_ddiv+0x418>
 800178e:	e09e      	b.n	80018ce <__aeabi_ddiv+0x556>
 8001790:	4284      	cmp	r4, r0
 8001792:	d200      	bcs.n	8001796 <__aeabi_ddiv+0x41e>
 8001794:	e0e1      	b.n	800195a <__aeabi_ddiv+0x5e2>
 8001796:	d100      	bne.n	800179a <__aeabi_ddiv+0x422>
 8001798:	e0ee      	b.n	8001978 <__aeabi_ddiv+0x600>
 800179a:	000a      	movs	r2, r1
 800179c:	e7ca      	b.n	8001734 <__aeabi_ddiv+0x3bc>
 800179e:	4542      	cmp	r2, r8
 80017a0:	d900      	bls.n	80017a4 <__aeabi_ddiv+0x42c>
 80017a2:	e708      	b.n	80015b6 <__aeabi_ddiv+0x23e>
 80017a4:	464b      	mov	r3, r9
 80017a6:	07dc      	lsls	r4, r3, #31
 80017a8:	0858      	lsrs	r0, r3, #1
 80017aa:	4643      	mov	r3, r8
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	431c      	orrs	r4, r3
 80017b0:	4643      	mov	r3, r8
 80017b2:	07dd      	lsls	r5, r3, #31
 80017b4:	e706      	b.n	80015c4 <__aeabi_ddiv+0x24c>
 80017b6:	f001 fa01 	bl	8002bbc <__clzsi2>
 80017ba:	2315      	movs	r3, #21
 80017bc:	469c      	mov	ip, r3
 80017be:	4484      	add	ip, r0
 80017c0:	0002      	movs	r2, r0
 80017c2:	4663      	mov	r3, ip
 80017c4:	3220      	adds	r2, #32
 80017c6:	2b1c      	cmp	r3, #28
 80017c8:	dc00      	bgt.n	80017cc <__aeabi_ddiv+0x454>
 80017ca:	e692      	b.n	80014f2 <__aeabi_ddiv+0x17a>
 80017cc:	0023      	movs	r3, r4
 80017ce:	3808      	subs	r0, #8
 80017d0:	4083      	lsls	r3, r0
 80017d2:	4699      	mov	r9, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	4698      	mov	r8, r3
 80017d8:	e69a      	b.n	8001510 <__aeabi_ddiv+0x198>
 80017da:	f001 f9ef 	bl	8002bbc <__clzsi2>
 80017de:	0002      	movs	r2, r0
 80017e0:	0003      	movs	r3, r0
 80017e2:	3215      	adds	r2, #21
 80017e4:	3320      	adds	r3, #32
 80017e6:	2a1c      	cmp	r2, #28
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_ddiv+0x474>
 80017ea:	e65f      	b.n	80014ac <__aeabi_ddiv+0x134>
 80017ec:	9900      	ldr	r1, [sp, #0]
 80017ee:	3808      	subs	r0, #8
 80017f0:	4081      	lsls	r1, r0
 80017f2:	2200      	movs	r2, #0
 80017f4:	468b      	mov	fp, r1
 80017f6:	e666      	b.n	80014c6 <__aeabi_ddiv+0x14e>
 80017f8:	2200      	movs	r2, #0
 80017fa:	002e      	movs	r6, r5
 80017fc:	2400      	movs	r4, #0
 80017fe:	4690      	mov	r8, r2
 8001800:	4b65      	ldr	r3, [pc, #404]	@ (8001998 <__aeabi_ddiv+0x620>)
 8001802:	e625      	b.n	8001450 <__aeabi_ddiv+0xd8>
 8001804:	002e      	movs	r6, r5
 8001806:	2101      	movs	r1, #1
 8001808:	1ac9      	subs	r1, r1, r3
 800180a:	2938      	cmp	r1, #56	@ 0x38
 800180c:	dd00      	ble.n	8001810 <__aeabi_ddiv+0x498>
 800180e:	e61b      	b.n	8001448 <__aeabi_ddiv+0xd0>
 8001810:	291f      	cmp	r1, #31
 8001812:	dc7e      	bgt.n	8001912 <__aeabi_ddiv+0x59a>
 8001814:	4861      	ldr	r0, [pc, #388]	@ (800199c <__aeabi_ddiv+0x624>)
 8001816:	0014      	movs	r4, r2
 8001818:	4450      	add	r0, sl
 800181a:	465b      	mov	r3, fp
 800181c:	4082      	lsls	r2, r0
 800181e:	4083      	lsls	r3, r0
 8001820:	40cc      	lsrs	r4, r1
 8001822:	1e50      	subs	r0, r2, #1
 8001824:	4182      	sbcs	r2, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	431a      	orrs	r2, r3
 800182a:	465b      	mov	r3, fp
 800182c:	40cb      	lsrs	r3, r1
 800182e:	0751      	lsls	r1, r2, #29
 8001830:	d009      	beq.n	8001846 <__aeabi_ddiv+0x4ce>
 8001832:	210f      	movs	r1, #15
 8001834:	4011      	ands	r1, r2
 8001836:	2904      	cmp	r1, #4
 8001838:	d005      	beq.n	8001846 <__aeabi_ddiv+0x4ce>
 800183a:	1d11      	adds	r1, r2, #4
 800183c:	4291      	cmp	r1, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	4252      	negs	r2, r2
 8001842:	189b      	adds	r3, r3, r2
 8001844:	000a      	movs	r2, r1
 8001846:	0219      	lsls	r1, r3, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_ddiv+0x4d4>
 800184a:	e09b      	b.n	8001984 <__aeabi_ddiv+0x60c>
 800184c:	2200      	movs	r2, #0
 800184e:	2301      	movs	r3, #1
 8001850:	2400      	movs	r4, #0
 8001852:	4690      	mov	r8, r2
 8001854:	e5fc      	b.n	8001450 <__aeabi_ddiv+0xd8>
 8001856:	210f      	movs	r1, #15
 8001858:	4011      	ands	r1, r2
 800185a:	2904      	cmp	r1, #4
 800185c:	d100      	bne.n	8001860 <__aeabi_ddiv+0x4e8>
 800185e:	e773      	b.n	8001748 <__aeabi_ddiv+0x3d0>
 8001860:	1d11      	adds	r1, r2, #4
 8001862:	4291      	cmp	r1, r2
 8001864:	4192      	sbcs	r2, r2
 8001866:	4252      	negs	r2, r2
 8001868:	002e      	movs	r6, r5
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	4493      	add	fp, r2
 800186e:	e76d      	b.n	800174c <__aeabi_ddiv+0x3d4>
 8001870:	9b00      	ldr	r3, [sp, #0]
 8001872:	3d01      	subs	r5, #1
 8001874:	469c      	mov	ip, r3
 8001876:	4461      	add	r1, ip
 8001878:	428b      	cmp	r3, r1
 800187a:	d900      	bls.n	800187e <__aeabi_ddiv+0x506>
 800187c:	e72c      	b.n	80016d8 <__aeabi_ddiv+0x360>
 800187e:	428a      	cmp	r2, r1
 8001880:	d800      	bhi.n	8001884 <__aeabi_ddiv+0x50c>
 8001882:	e729      	b.n	80016d8 <__aeabi_ddiv+0x360>
 8001884:	1e85      	subs	r5, r0, #2
 8001886:	4461      	add	r1, ip
 8001888:	e726      	b.n	80016d8 <__aeabi_ddiv+0x360>
 800188a:	9900      	ldr	r1, [sp, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	468c      	mov	ip, r1
 8001890:	4464      	add	r4, ip
 8001892:	42a1      	cmp	r1, r4
 8001894:	d900      	bls.n	8001898 <__aeabi_ddiv+0x520>
 8001896:	e72d      	b.n	80016f4 <__aeabi_ddiv+0x37c>
 8001898:	42a2      	cmp	r2, r4
 800189a:	d800      	bhi.n	800189e <__aeabi_ddiv+0x526>
 800189c:	e72a      	b.n	80016f4 <__aeabi_ddiv+0x37c>
 800189e:	1e83      	subs	r3, r0, #2
 80018a0:	4464      	add	r4, ip
 80018a2:	e727      	b.n	80016f4 <__aeabi_ddiv+0x37c>
 80018a4:	4287      	cmp	r7, r0
 80018a6:	d000      	beq.n	80018aa <__aeabi_ddiv+0x532>
 80018a8:	e6fe      	b.n	80016a8 <__aeabi_ddiv+0x330>
 80018aa:	45a9      	cmp	r9, r5
 80018ac:	d900      	bls.n	80018b0 <__aeabi_ddiv+0x538>
 80018ae:	e6fb      	b.n	80016a8 <__aeabi_ddiv+0x330>
 80018b0:	e6f5      	b.n	800169e <__aeabi_ddiv+0x326>
 80018b2:	42a2      	cmp	r2, r4
 80018b4:	d800      	bhi.n	80018b8 <__aeabi_ddiv+0x540>
 80018b6:	e6b9      	b.n	800162c <__aeabi_ddiv+0x2b4>
 80018b8:	1e83      	subs	r3, r0, #2
 80018ba:	4464      	add	r4, ip
 80018bc:	e6b6      	b.n	800162c <__aeabi_ddiv+0x2b4>
 80018be:	428a      	cmp	r2, r1
 80018c0:	d800      	bhi.n	80018c4 <__aeabi_ddiv+0x54c>
 80018c2:	e69f      	b.n	8001604 <__aeabi_ddiv+0x28c>
 80018c4:	46bc      	mov	ip, r7
 80018c6:	1e83      	subs	r3, r0, #2
 80018c8:	4698      	mov	r8, r3
 80018ca:	4461      	add	r1, ip
 80018cc:	e69a      	b.n	8001604 <__aeabi_ddiv+0x28c>
 80018ce:	000a      	movs	r2, r1
 80018d0:	4284      	cmp	r4, r0
 80018d2:	d000      	beq.n	80018d6 <__aeabi_ddiv+0x55e>
 80018d4:	e72e      	b.n	8001734 <__aeabi_ddiv+0x3bc>
 80018d6:	454b      	cmp	r3, r9
 80018d8:	d000      	beq.n	80018dc <__aeabi_ddiv+0x564>
 80018da:	e72b      	b.n	8001734 <__aeabi_ddiv+0x3bc>
 80018dc:	0035      	movs	r5, r6
 80018de:	e72c      	b.n	800173a <__aeabi_ddiv+0x3c2>
 80018e0:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <__aeabi_ddiv+0x614>)
 80018e2:	4a2f      	ldr	r2, [pc, #188]	@ (80019a0 <__aeabi_ddiv+0x628>)
 80018e4:	4453      	add	r3, sl
 80018e6:	4592      	cmp	sl, r2
 80018e8:	db43      	blt.n	8001972 <__aeabi_ddiv+0x5fa>
 80018ea:	2201      	movs	r2, #1
 80018ec:	2100      	movs	r1, #0
 80018ee:	4493      	add	fp, r2
 80018f0:	e72c      	b.n	800174c <__aeabi_ddiv+0x3d4>
 80018f2:	42ac      	cmp	r4, r5
 80018f4:	d800      	bhi.n	80018f8 <__aeabi_ddiv+0x580>
 80018f6:	e6d7      	b.n	80016a8 <__aeabi_ddiv+0x330>
 80018f8:	2302      	movs	r3, #2
 80018fa:	425b      	negs	r3, r3
 80018fc:	469c      	mov	ip, r3
 80018fe:	9900      	ldr	r1, [sp, #0]
 8001900:	444d      	add	r5, r9
 8001902:	454d      	cmp	r5, r9
 8001904:	419b      	sbcs	r3, r3
 8001906:	44e3      	add	fp, ip
 8001908:	468c      	mov	ip, r1
 800190a:	425b      	negs	r3, r3
 800190c:	4463      	add	r3, ip
 800190e:	18c0      	adds	r0, r0, r3
 8001910:	e6cc      	b.n	80016ac <__aeabi_ddiv+0x334>
 8001912:	201f      	movs	r0, #31
 8001914:	4240      	negs	r0, r0
 8001916:	1ac3      	subs	r3, r0, r3
 8001918:	4658      	mov	r0, fp
 800191a:	40d8      	lsrs	r0, r3
 800191c:	2920      	cmp	r1, #32
 800191e:	d004      	beq.n	800192a <__aeabi_ddiv+0x5b2>
 8001920:	4659      	mov	r1, fp
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <__aeabi_ddiv+0x62c>)
 8001924:	4453      	add	r3, sl
 8001926:	4099      	lsls	r1, r3
 8001928:	430a      	orrs	r2, r1
 800192a:	1e53      	subs	r3, r2, #1
 800192c:	419a      	sbcs	r2, r3
 800192e:	2307      	movs	r3, #7
 8001930:	0019      	movs	r1, r3
 8001932:	4302      	orrs	r2, r0
 8001934:	2400      	movs	r4, #0
 8001936:	4011      	ands	r1, r2
 8001938:	4213      	tst	r3, r2
 800193a:	d009      	beq.n	8001950 <__aeabi_ddiv+0x5d8>
 800193c:	3308      	adds	r3, #8
 800193e:	4013      	ands	r3, r2
 8001940:	2b04      	cmp	r3, #4
 8001942:	d01d      	beq.n	8001980 <__aeabi_ddiv+0x608>
 8001944:	1d13      	adds	r3, r2, #4
 8001946:	4293      	cmp	r3, r2
 8001948:	4189      	sbcs	r1, r1
 800194a:	001a      	movs	r2, r3
 800194c:	4249      	negs	r1, r1
 800194e:	0749      	lsls	r1, r1, #29
 8001950:	08d2      	lsrs	r2, r2, #3
 8001952:	430a      	orrs	r2, r1
 8001954:	4690      	mov	r8, r2
 8001956:	2300      	movs	r3, #0
 8001958:	e57a      	b.n	8001450 <__aeabi_ddiv+0xd8>
 800195a:	4649      	mov	r1, r9
 800195c:	9f00      	ldr	r7, [sp, #0]
 800195e:	004d      	lsls	r5, r1, #1
 8001960:	454d      	cmp	r5, r9
 8001962:	4189      	sbcs	r1, r1
 8001964:	46bc      	mov	ip, r7
 8001966:	4249      	negs	r1, r1
 8001968:	4461      	add	r1, ip
 800196a:	46a9      	mov	r9, r5
 800196c:	3a02      	subs	r2, #2
 800196e:	1864      	adds	r4, r4, r1
 8001970:	e7ae      	b.n	80018d0 <__aeabi_ddiv+0x558>
 8001972:	2201      	movs	r2, #1
 8001974:	4252      	negs	r2, r2
 8001976:	e746      	b.n	8001806 <__aeabi_ddiv+0x48e>
 8001978:	4599      	cmp	r9, r3
 800197a:	d3ee      	bcc.n	800195a <__aeabi_ddiv+0x5e2>
 800197c:	000a      	movs	r2, r1
 800197e:	e7aa      	b.n	80018d6 <__aeabi_ddiv+0x55e>
 8001980:	2100      	movs	r1, #0
 8001982:	e7e5      	b.n	8001950 <__aeabi_ddiv+0x5d8>
 8001984:	0759      	lsls	r1, r3, #29
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	0b1c      	lsrs	r4, r3, #12
 800198a:	e7e1      	b.n	8001950 <__aeabi_ddiv+0x5d8>
 800198c:	000003ff 	.word	0x000003ff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	000007fe 	.word	0x000007fe
 8001998:	000007ff 	.word	0x000007ff
 800199c:	0000041e 	.word	0x0000041e
 80019a0:	fffffc02 	.word	0xfffffc02
 80019a4:	0000043e 	.word	0x0000043e

080019a8 <__eqdf2>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	000d      	movs	r5, r1
 80019b6:	0004      	movs	r4, r0
 80019b8:	0fe8      	lsrs	r0, r5, #31
 80019ba:	4683      	mov	fp, r0
 80019bc:	0309      	lsls	r1, r1, #12
 80019be:	0fd8      	lsrs	r0, r3, #31
 80019c0:	0b09      	lsrs	r1, r1, #12
 80019c2:	4682      	mov	sl, r0
 80019c4:	4819      	ldr	r0, [pc, #100]	@ (8001a2c <__eqdf2+0x84>)
 80019c6:	468c      	mov	ip, r1
 80019c8:	031f      	lsls	r7, r3, #12
 80019ca:	0069      	lsls	r1, r5, #1
 80019cc:	005e      	lsls	r6, r3, #1
 80019ce:	0d49      	lsrs	r1, r1, #21
 80019d0:	0b3f      	lsrs	r7, r7, #12
 80019d2:	0d76      	lsrs	r6, r6, #21
 80019d4:	4281      	cmp	r1, r0
 80019d6:	d018      	beq.n	8001a0a <__eqdf2+0x62>
 80019d8:	4286      	cmp	r6, r0
 80019da:	d00f      	beq.n	80019fc <__eqdf2+0x54>
 80019dc:	2001      	movs	r0, #1
 80019de:	42b1      	cmp	r1, r6
 80019e0:	d10d      	bne.n	80019fe <__eqdf2+0x56>
 80019e2:	45bc      	cmp	ip, r7
 80019e4:	d10b      	bne.n	80019fe <__eqdf2+0x56>
 80019e6:	4294      	cmp	r4, r2
 80019e8:	d109      	bne.n	80019fe <__eqdf2+0x56>
 80019ea:	45d3      	cmp	fp, sl
 80019ec:	d01c      	beq.n	8001a28 <__eqdf2+0x80>
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d105      	bne.n	80019fe <__eqdf2+0x56>
 80019f2:	4660      	mov	r0, ip
 80019f4:	4320      	orrs	r0, r4
 80019f6:	1e43      	subs	r3, r0, #1
 80019f8:	4198      	sbcs	r0, r3
 80019fa:	e000      	b.n	80019fe <__eqdf2+0x56>
 80019fc:	2001      	movs	r0, #1
 80019fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001a00:	46bb      	mov	fp, r7
 8001a02:	46b2      	mov	sl, r6
 8001a04:	46a9      	mov	r9, r5
 8001a06:	46a0      	mov	r8, r4
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	428e      	cmp	r6, r1
 8001a0e:	d1f6      	bne.n	80019fe <__eqdf2+0x56>
 8001a10:	4661      	mov	r1, ip
 8001a12:	4339      	orrs	r1, r7
 8001a14:	000f      	movs	r7, r1
 8001a16:	4317      	orrs	r7, r2
 8001a18:	4327      	orrs	r7, r4
 8001a1a:	d1f0      	bne.n	80019fe <__eqdf2+0x56>
 8001a1c:	465b      	mov	r3, fp
 8001a1e:	4652      	mov	r2, sl
 8001a20:	1a98      	subs	r0, r3, r2
 8001a22:	1e43      	subs	r3, r0, #1
 8001a24:	4198      	sbcs	r0, r3
 8001a26:	e7ea      	b.n	80019fe <__eqdf2+0x56>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	e7e8      	b.n	80019fe <__eqdf2+0x56>
 8001a2c:	000007ff 	.word	0x000007ff

08001a30 <__gedf2>:
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	4657      	mov	r7, sl
 8001a34:	464e      	mov	r6, r9
 8001a36:	4645      	mov	r5, r8
 8001a38:	46de      	mov	lr, fp
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
 8001a3c:	000d      	movs	r5, r1
 8001a3e:	030e      	lsls	r6, r1, #12
 8001a40:	0049      	lsls	r1, r1, #1
 8001a42:	0d49      	lsrs	r1, r1, #21
 8001a44:	468a      	mov	sl, r1
 8001a46:	0fdf      	lsrs	r7, r3, #31
 8001a48:	0fe9      	lsrs	r1, r5, #31
 8001a4a:	46bc      	mov	ip, r7
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	4f2f      	ldr	r7, [pc, #188]	@ (8001b0c <__gedf2+0xdc>)
 8001a50:	0004      	movs	r4, r0
 8001a52:	4680      	mov	r8, r0
 8001a54:	9101      	str	r1, [sp, #4]
 8001a56:	0058      	lsls	r0, r3, #1
 8001a58:	0319      	lsls	r1, r3, #12
 8001a5a:	4691      	mov	r9, r2
 8001a5c:	0b36      	lsrs	r6, r6, #12
 8001a5e:	0b09      	lsrs	r1, r1, #12
 8001a60:	0d40      	lsrs	r0, r0, #21
 8001a62:	45ba      	cmp	sl, r7
 8001a64:	d01d      	beq.n	8001aa2 <__gedf2+0x72>
 8001a66:	42b8      	cmp	r0, r7
 8001a68:	d00d      	beq.n	8001a86 <__gedf2+0x56>
 8001a6a:	4657      	mov	r7, sl
 8001a6c:	2f00      	cmp	r7, #0
 8001a6e:	d12a      	bne.n	8001ac6 <__gedf2+0x96>
 8001a70:	4334      	orrs	r4, r6
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d124      	bne.n	8001ac0 <__gedf2+0x90>
 8001a76:	430a      	orrs	r2, r1
 8001a78:	d036      	beq.n	8001ae8 <__gedf2+0xb8>
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d141      	bne.n	8001b02 <__gedf2+0xd2>
 8001a7e:	4663      	mov	r3, ip
 8001a80:	0058      	lsls	r0, r3, #1
 8001a82:	3801      	subs	r0, #1
 8001a84:	e015      	b.n	8001ab2 <__gedf2+0x82>
 8001a86:	4311      	orrs	r1, r2
 8001a88:	d138      	bne.n	8001afc <__gedf2+0xcc>
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <__gedf2+0x64>
 8001a90:	4326      	orrs	r6, r4
 8001a92:	d0f4      	beq.n	8001a7e <__gedf2+0x4e>
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	4563      	cmp	r3, ip
 8001a98:	d107      	bne.n	8001aaa <__gedf2+0x7a>
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	0058      	lsls	r0, r3, #1
 8001a9e:	3801      	subs	r0, #1
 8001aa0:	e007      	b.n	8001ab2 <__gedf2+0x82>
 8001aa2:	4326      	orrs	r6, r4
 8001aa4:	d12a      	bne.n	8001afc <__gedf2+0xcc>
 8001aa6:	4550      	cmp	r0, sl
 8001aa8:	d021      	beq.n	8001aee <__gedf2+0xbe>
 8001aaa:	2001      	movs	r0, #1
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	425f      	negs	r7, r3
 8001ab0:	4338      	orrs	r0, r7
 8001ab2:	b003      	add	sp, #12
 8001ab4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab6:	46bb      	mov	fp, r7
 8001ab8:	46b2      	mov	sl, r6
 8001aba:	46a9      	mov	r9, r5
 8001abc:	46a0      	mov	r8, r4
 8001abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d0dc      	beq.n	8001a7e <__gedf2+0x4e>
 8001ac4:	e7e6      	b.n	8001a94 <__gedf2+0x64>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d0ef      	beq.n	8001aaa <__gedf2+0x7a>
 8001aca:	9b01      	ldr	r3, [sp, #4]
 8001acc:	4563      	cmp	r3, ip
 8001ace:	d1ec      	bne.n	8001aaa <__gedf2+0x7a>
 8001ad0:	4582      	cmp	sl, r0
 8001ad2:	dcea      	bgt.n	8001aaa <__gedf2+0x7a>
 8001ad4:	dbe1      	blt.n	8001a9a <__gedf2+0x6a>
 8001ad6:	428e      	cmp	r6, r1
 8001ad8:	d8e7      	bhi.n	8001aaa <__gedf2+0x7a>
 8001ada:	d1de      	bne.n	8001a9a <__gedf2+0x6a>
 8001adc:	45c8      	cmp	r8, r9
 8001ade:	d8e4      	bhi.n	8001aaa <__gedf2+0x7a>
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	45c8      	cmp	r8, r9
 8001ae4:	d2e5      	bcs.n	8001ab2 <__gedf2+0x82>
 8001ae6:	e7d8      	b.n	8001a9a <__gedf2+0x6a>
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d0e2      	beq.n	8001ab2 <__gedf2+0x82>
 8001aec:	e7dd      	b.n	8001aaa <__gedf2+0x7a>
 8001aee:	4311      	orrs	r1, r2
 8001af0:	d104      	bne.n	8001afc <__gedf2+0xcc>
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	4563      	cmp	r3, ip
 8001af6:	d1d8      	bne.n	8001aaa <__gedf2+0x7a>
 8001af8:	2000      	movs	r0, #0
 8001afa:	e7da      	b.n	8001ab2 <__gedf2+0x82>
 8001afc:	2002      	movs	r0, #2
 8001afe:	4240      	negs	r0, r0
 8001b00:	e7d7      	b.n	8001ab2 <__gedf2+0x82>
 8001b02:	9b01      	ldr	r3, [sp, #4]
 8001b04:	4563      	cmp	r3, ip
 8001b06:	d0e6      	beq.n	8001ad6 <__gedf2+0xa6>
 8001b08:	e7cf      	b.n	8001aaa <__gedf2+0x7a>
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	000007ff 	.word	0x000007ff

08001b10 <__ledf2>:
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	4657      	mov	r7, sl
 8001b14:	464e      	mov	r6, r9
 8001b16:	4645      	mov	r5, r8
 8001b18:	46de      	mov	lr, fp
 8001b1a:	b5e0      	push	{r5, r6, r7, lr}
 8001b1c:	000d      	movs	r5, r1
 8001b1e:	030e      	lsls	r6, r1, #12
 8001b20:	0049      	lsls	r1, r1, #1
 8001b22:	0d49      	lsrs	r1, r1, #21
 8001b24:	468a      	mov	sl, r1
 8001b26:	0fdf      	lsrs	r7, r3, #31
 8001b28:	0fe9      	lsrs	r1, r5, #31
 8001b2a:	46bc      	mov	ip, r7
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	4f2e      	ldr	r7, [pc, #184]	@ (8001be8 <__ledf2+0xd8>)
 8001b30:	0004      	movs	r4, r0
 8001b32:	4680      	mov	r8, r0
 8001b34:	9101      	str	r1, [sp, #4]
 8001b36:	0058      	lsls	r0, r3, #1
 8001b38:	0319      	lsls	r1, r3, #12
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	0b36      	lsrs	r6, r6, #12
 8001b3e:	0b09      	lsrs	r1, r1, #12
 8001b40:	0d40      	lsrs	r0, r0, #21
 8001b42:	45ba      	cmp	sl, r7
 8001b44:	d01e      	beq.n	8001b84 <__ledf2+0x74>
 8001b46:	42b8      	cmp	r0, r7
 8001b48:	d00d      	beq.n	8001b66 <__ledf2+0x56>
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	2f00      	cmp	r7, #0
 8001b4e:	d127      	bne.n	8001ba0 <__ledf2+0x90>
 8001b50:	4334      	orrs	r4, r6
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d133      	bne.n	8001bbe <__ledf2+0xae>
 8001b56:	430a      	orrs	r2, r1
 8001b58:	d034      	beq.n	8001bc4 <__ledf2+0xb4>
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d140      	bne.n	8001be0 <__ledf2+0xd0>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	0058      	lsls	r0, r3, #1
 8001b62:	3801      	subs	r0, #1
 8001b64:	e015      	b.n	8001b92 <__ledf2+0x82>
 8001b66:	4311      	orrs	r1, r2
 8001b68:	d112      	bne.n	8001b90 <__ledf2+0x80>
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <__ledf2+0x64>
 8001b70:	4326      	orrs	r6, r4
 8001b72:	d0f4      	beq.n	8001b5e <__ledf2+0x4e>
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	4563      	cmp	r3, ip
 8001b78:	d01d      	beq.n	8001bb6 <__ledf2+0xa6>
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	9b01      	ldr	r3, [sp, #4]
 8001b7e:	425f      	negs	r7, r3
 8001b80:	4338      	orrs	r0, r7
 8001b82:	e006      	b.n	8001b92 <__ledf2+0x82>
 8001b84:	4326      	orrs	r6, r4
 8001b86:	d103      	bne.n	8001b90 <__ledf2+0x80>
 8001b88:	4550      	cmp	r0, sl
 8001b8a:	d1f6      	bne.n	8001b7a <__ledf2+0x6a>
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	d01c      	beq.n	8001bca <__ledf2+0xba>
 8001b90:	2002      	movs	r0, #2
 8001b92:	b003      	add	sp, #12
 8001b94:	bcf0      	pop	{r4, r5, r6, r7}
 8001b96:	46bb      	mov	fp, r7
 8001b98:	46b2      	mov	sl, r6
 8001b9a:	46a9      	mov	r9, r5
 8001b9c:	46a0      	mov	r8, r4
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d0ea      	beq.n	8001b7a <__ledf2+0x6a>
 8001ba4:	9b01      	ldr	r3, [sp, #4]
 8001ba6:	4563      	cmp	r3, ip
 8001ba8:	d1e7      	bne.n	8001b7a <__ledf2+0x6a>
 8001baa:	4582      	cmp	sl, r0
 8001bac:	dce5      	bgt.n	8001b7a <__ledf2+0x6a>
 8001bae:	db02      	blt.n	8001bb6 <__ledf2+0xa6>
 8001bb0:	428e      	cmp	r6, r1
 8001bb2:	d8e2      	bhi.n	8001b7a <__ledf2+0x6a>
 8001bb4:	d00e      	beq.n	8001bd4 <__ledf2+0xc4>
 8001bb6:	9b01      	ldr	r3, [sp, #4]
 8001bb8:	0058      	lsls	r0, r3, #1
 8001bba:	3801      	subs	r0, #1
 8001bbc:	e7e9      	b.n	8001b92 <__ledf2+0x82>
 8001bbe:	2c00      	cmp	r4, #0
 8001bc0:	d0cd      	beq.n	8001b5e <__ledf2+0x4e>
 8001bc2:	e7d7      	b.n	8001b74 <__ledf2+0x64>
 8001bc4:	2c00      	cmp	r4, #0
 8001bc6:	d0e4      	beq.n	8001b92 <__ledf2+0x82>
 8001bc8:	e7d7      	b.n	8001b7a <__ledf2+0x6a>
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4563      	cmp	r3, ip
 8001bd0:	d0df      	beq.n	8001b92 <__ledf2+0x82>
 8001bd2:	e7d2      	b.n	8001b7a <__ledf2+0x6a>
 8001bd4:	45c8      	cmp	r8, r9
 8001bd6:	d8d0      	bhi.n	8001b7a <__ledf2+0x6a>
 8001bd8:	2000      	movs	r0, #0
 8001bda:	45c8      	cmp	r8, r9
 8001bdc:	d2d9      	bcs.n	8001b92 <__ledf2+0x82>
 8001bde:	e7ea      	b.n	8001bb6 <__ledf2+0xa6>
 8001be0:	9b01      	ldr	r3, [sp, #4]
 8001be2:	4563      	cmp	r3, ip
 8001be4:	d0e4      	beq.n	8001bb0 <__ledf2+0xa0>
 8001be6:	e7c8      	b.n	8001b7a <__ledf2+0x6a>
 8001be8:	000007ff 	.word	0x000007ff

08001bec <__aeabi_dmul>:
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	4657      	mov	r7, sl
 8001bf0:	464e      	mov	r6, r9
 8001bf2:	46de      	mov	lr, fp
 8001bf4:	4645      	mov	r5, r8
 8001bf6:	b5e0      	push	{r5, r6, r7, lr}
 8001bf8:	001f      	movs	r7, r3
 8001bfa:	030b      	lsls	r3, r1, #12
 8001bfc:	0b1b      	lsrs	r3, r3, #12
 8001bfe:	0016      	movs	r6, r2
 8001c00:	469a      	mov	sl, r3
 8001c02:	0fca      	lsrs	r2, r1, #31
 8001c04:	004b      	lsls	r3, r1, #1
 8001c06:	0004      	movs	r4, r0
 8001c08:	4691      	mov	r9, r2
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	0d5b      	lsrs	r3, r3, #21
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dmul+0x26>
 8001c10:	e1cf      	b.n	8001fb2 <__aeabi_dmul+0x3c6>
 8001c12:	4acd      	ldr	r2, [pc, #820]	@ (8001f48 <__aeabi_dmul+0x35c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d055      	beq.n	8001cc4 <__aeabi_dmul+0xd8>
 8001c18:	4651      	mov	r1, sl
 8001c1a:	0f42      	lsrs	r2, r0, #29
 8001c1c:	00c9      	lsls	r1, r1, #3
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	0409      	lsls	r1, r1, #16
 8001c24:	4311      	orrs	r1, r2
 8001c26:	00c2      	lsls	r2, r0, #3
 8001c28:	4690      	mov	r8, r2
 8001c2a:	4ac8      	ldr	r2, [pc, #800]	@ (8001f4c <__aeabi_dmul+0x360>)
 8001c2c:	468a      	mov	sl, r1
 8001c2e:	4693      	mov	fp, r2
 8001c30:	449b      	add	fp, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	2500      	movs	r5, #0
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	033c      	lsls	r4, r7, #12
 8001c3a:	007b      	lsls	r3, r7, #1
 8001c3c:	0ffa      	lsrs	r2, r7, #31
 8001c3e:	9601      	str	r6, [sp, #4]
 8001c40:	0b24      	lsrs	r4, r4, #12
 8001c42:	0d5b      	lsrs	r3, r3, #21
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dmul+0x5e>
 8001c48:	e188      	b.n	8001f5c <__aeabi_dmul+0x370>
 8001c4a:	4abf      	ldr	r2, [pc, #764]	@ (8001f48 <__aeabi_dmul+0x35c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dmul+0x66>
 8001c50:	e092      	b.n	8001d78 <__aeabi_dmul+0x18c>
 8001c52:	4abe      	ldr	r2, [pc, #760]	@ (8001f4c <__aeabi_dmul+0x360>)
 8001c54:	4694      	mov	ip, r2
 8001c56:	4463      	add	r3, ip
 8001c58:	449b      	add	fp, r3
 8001c5a:	2d0a      	cmp	r5, #10
 8001c5c:	dc42      	bgt.n	8001ce4 <__aeabi_dmul+0xf8>
 8001c5e:	00e4      	lsls	r4, r4, #3
 8001c60:	0f73      	lsrs	r3, r6, #29
 8001c62:	4323      	orrs	r3, r4
 8001c64:	2480      	movs	r4, #128	@ 0x80
 8001c66:	4649      	mov	r1, r9
 8001c68:	0424      	lsls	r4, r4, #16
 8001c6a:	431c      	orrs	r4, r3
 8001c6c:	00f3      	lsls	r3, r6, #3
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9b00      	ldr	r3, [sp, #0]
 8001c72:	2000      	movs	r0, #0
 8001c74:	4059      	eors	r1, r3
 8001c76:	b2cb      	uxtb	r3, r1
 8001c78:	9303      	str	r3, [sp, #12]
 8001c7a:	2d02      	cmp	r5, #2
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_dmul+0x94>
 8001c7e:	e094      	b.n	8001daa <__aeabi_dmul+0x1be>
 8001c80:	2301      	movs	r3, #1
 8001c82:	40ab      	lsls	r3, r5
 8001c84:	001d      	movs	r5, r3
 8001c86:	23a6      	movs	r3, #166	@ 0xa6
 8001c88:	002a      	movs	r2, r5
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	421d      	tst	r5, r3
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dmul+0xa8>
 8001c92:	e229      	b.n	80020e8 <__aeabi_dmul+0x4fc>
 8001c94:	2390      	movs	r3, #144	@ 0x90
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	421d      	tst	r5, r3
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dmul+0xb2>
 8001c9c:	e24d      	b.n	800213a <__aeabi_dmul+0x54e>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2480      	movs	r4, #128	@ 0x80
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	0324      	lsls	r4, r4, #12
 8001ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8001f48 <__aeabi_dmul+0x35c>)
 8001ca8:	0010      	movs	r0, r2
 8001caa:	464a      	mov	r2, r9
 8001cac:	051b      	lsls	r3, r3, #20
 8001cae:	4323      	orrs	r3, r4
 8001cb0:	07d2      	lsls	r2, r2, #31
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	b005      	add	sp, #20
 8001cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001cba:	46bb      	mov	fp, r7
 8001cbc:	46b2      	mov	sl, r6
 8001cbe:	46a9      	mov	r9, r5
 8001cc0:	46a0      	mov	r8, r4
 8001cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	4302      	orrs	r2, r0
 8001cc8:	4690      	mov	r8, r2
 8001cca:	d000      	beq.n	8001cce <__aeabi_dmul+0xe2>
 8001ccc:	e1ac      	b.n	8002028 <__aeabi_dmul+0x43c>
 8001cce:	469b      	mov	fp, r3
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	4692      	mov	sl, r2
 8001cd4:	2508      	movs	r5, #8
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	e7ae      	b.n	8001c38 <__aeabi_dmul+0x4c>
 8001cda:	9b00      	ldr	r3, [sp, #0]
 8001cdc:	46a2      	mov	sl, r4
 8001cde:	4699      	mov	r9, r3
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	9b02      	ldr	r3, [sp, #8]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dmul+0x100>
 8001cea:	e1ca      	b.n	8002082 <__aeabi_dmul+0x496>
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dmul+0x106>
 8001cf0:	e192      	b.n	8002018 <__aeabi_dmul+0x42c>
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d110      	bne.n	8001d18 <__aeabi_dmul+0x12c>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	e7d4      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 8001cfe:	2201      	movs	r2, #1
 8001d00:	087b      	lsrs	r3, r7, #1
 8001d02:	403a      	ands	r2, r7
 8001d04:	4313      	orrs	r3, r2
 8001d06:	4652      	mov	r2, sl
 8001d08:	07d2      	lsls	r2, r2, #31
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	4653      	mov	r3, sl
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	469a      	mov	sl, r3
 8001d14:	9b03      	ldr	r3, [sp, #12]
 8001d16:	4699      	mov	r9, r3
 8001d18:	465b      	mov	r3, fp
 8001d1a:	1c58      	adds	r0, r3, #1
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	445b      	add	r3, fp
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_dmul+0x13c>
 8001d26:	e1b1      	b.n	800208c <__aeabi_dmul+0x4a0>
 8001d28:	4642      	mov	r2, r8
 8001d2a:	0752      	lsls	r2, r2, #29
 8001d2c:	d00b      	beq.n	8001d46 <__aeabi_dmul+0x15a>
 8001d2e:	220f      	movs	r2, #15
 8001d30:	4641      	mov	r1, r8
 8001d32:	400a      	ands	r2, r1
 8001d34:	2a04      	cmp	r2, #4
 8001d36:	d006      	beq.n	8001d46 <__aeabi_dmul+0x15a>
 8001d38:	4642      	mov	r2, r8
 8001d3a:	1d11      	adds	r1, r2, #4
 8001d3c:	4541      	cmp	r1, r8
 8001d3e:	4192      	sbcs	r2, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	4252      	negs	r2, r2
 8001d44:	4492      	add	sl, r2
 8001d46:	4652      	mov	r2, sl
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_dmul+0x16e>
 8001d4c:	4652      	mov	r2, sl
 8001d4e:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <__aeabi_dmul+0x364>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	4692      	mov	sl, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	18c3      	adds	r3, r0, r3
 8001d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f54 <__aeabi_dmul+0x368>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dmul+0x176>
 8001d60:	e18f      	b.n	8002082 <__aeabi_dmul+0x496>
 8001d62:	4642      	mov	r2, r8
 8001d64:	08d1      	lsrs	r1, r2, #3
 8001d66:	4652      	mov	r2, sl
 8001d68:	0752      	lsls	r2, r2, #29
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	4651      	mov	r1, sl
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	024c      	lsls	r4, r1, #9
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	0d5b      	lsrs	r3, r3, #21
 8001d76:	e797      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 8001d78:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <__aeabi_dmul+0x35c>)
 8001d7a:	4326      	orrs	r6, r4
 8001d7c:	469c      	mov	ip, r3
 8001d7e:	44e3      	add	fp, ip
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dmul+0x19a>
 8001d84:	e16f      	b.n	8002066 <__aeabi_dmul+0x47a>
 8001d86:	2303      	movs	r3, #3
 8001d88:	4649      	mov	r1, r9
 8001d8a:	431d      	orrs	r5, r3
 8001d8c:	9b00      	ldr	r3, [sp, #0]
 8001d8e:	4059      	eors	r1, r3
 8001d90:	b2cb      	uxtb	r3, r1
 8001d92:	9303      	str	r3, [sp, #12]
 8001d94:	2d0a      	cmp	r5, #10
 8001d96:	dd00      	ble.n	8001d9a <__aeabi_dmul+0x1ae>
 8001d98:	e133      	b.n	8002002 <__aeabi_dmul+0x416>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	40ab      	lsls	r3, r5
 8001d9e:	001d      	movs	r5, r3
 8001da0:	2303      	movs	r3, #3
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	2288      	movs	r2, #136	@ 0x88
 8001da6:	422a      	tst	r2, r5
 8001da8:	d197      	bne.n	8001cda <__aeabi_dmul+0xee>
 8001daa:	4642      	mov	r2, r8
 8001dac:	4643      	mov	r3, r8
 8001dae:	0412      	lsls	r2, r2, #16
 8001db0:	0c12      	lsrs	r2, r2, #16
 8001db2:	0016      	movs	r6, r2
 8001db4:	9801      	ldr	r0, [sp, #4]
 8001db6:	0c1d      	lsrs	r5, r3, #16
 8001db8:	0c03      	lsrs	r3, r0, #16
 8001dba:	0400      	lsls	r0, r0, #16
 8001dbc:	0c00      	lsrs	r0, r0, #16
 8001dbe:	4346      	muls	r6, r0
 8001dc0:	46b4      	mov	ip, r6
 8001dc2:	001e      	movs	r6, r3
 8001dc4:	436e      	muls	r6, r5
 8001dc6:	9600      	str	r6, [sp, #0]
 8001dc8:	0016      	movs	r6, r2
 8001dca:	0007      	movs	r7, r0
 8001dcc:	435e      	muls	r6, r3
 8001dce:	4661      	mov	r1, ip
 8001dd0:	46b0      	mov	r8, r6
 8001dd2:	436f      	muls	r7, r5
 8001dd4:	0c0e      	lsrs	r6, r1, #16
 8001dd6:	44b8      	add	r8, r7
 8001dd8:	4446      	add	r6, r8
 8001dda:	42b7      	cmp	r7, r6
 8001ddc:	d905      	bls.n	8001dea <__aeabi_dmul+0x1fe>
 8001dde:	2180      	movs	r1, #128	@ 0x80
 8001de0:	0249      	lsls	r1, r1, #9
 8001de2:	4688      	mov	r8, r1
 8001de4:	9f00      	ldr	r7, [sp, #0]
 8001de6:	4447      	add	r7, r8
 8001de8:	9700      	str	r7, [sp, #0]
 8001dea:	4661      	mov	r1, ip
 8001dec:	0409      	lsls	r1, r1, #16
 8001dee:	0c09      	lsrs	r1, r1, #16
 8001df0:	0c37      	lsrs	r7, r6, #16
 8001df2:	0436      	lsls	r6, r6, #16
 8001df4:	468c      	mov	ip, r1
 8001df6:	0031      	movs	r1, r6
 8001df8:	4461      	add	r1, ip
 8001dfa:	9101      	str	r1, [sp, #4]
 8001dfc:	0011      	movs	r1, r2
 8001dfe:	0c26      	lsrs	r6, r4, #16
 8001e00:	0424      	lsls	r4, r4, #16
 8001e02:	0c24      	lsrs	r4, r4, #16
 8001e04:	4361      	muls	r1, r4
 8001e06:	468c      	mov	ip, r1
 8001e08:	0021      	movs	r1, r4
 8001e0a:	4369      	muls	r1, r5
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	4661      	mov	r1, ip
 8001e10:	0c09      	lsrs	r1, r1, #16
 8001e12:	4688      	mov	r8, r1
 8001e14:	4372      	muls	r2, r6
 8001e16:	444a      	add	r2, r9
 8001e18:	4442      	add	r2, r8
 8001e1a:	4375      	muls	r5, r6
 8001e1c:	4591      	cmp	r9, r2
 8001e1e:	d903      	bls.n	8001e28 <__aeabi_dmul+0x23c>
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	0249      	lsls	r1, r1, #9
 8001e24:	4688      	mov	r8, r1
 8001e26:	4445      	add	r5, r8
 8001e28:	0c11      	lsrs	r1, r2, #16
 8001e2a:	4688      	mov	r8, r1
 8001e2c:	4661      	mov	r1, ip
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	0c09      	lsrs	r1, r1, #16
 8001e32:	468c      	mov	ip, r1
 8001e34:	0412      	lsls	r2, r2, #16
 8001e36:	4462      	add	r2, ip
 8001e38:	18b9      	adds	r1, r7, r2
 8001e3a:	9102      	str	r1, [sp, #8]
 8001e3c:	4651      	mov	r1, sl
 8001e3e:	0c09      	lsrs	r1, r1, #16
 8001e40:	468c      	mov	ip, r1
 8001e42:	4651      	mov	r1, sl
 8001e44:	040f      	lsls	r7, r1, #16
 8001e46:	0c3f      	lsrs	r7, r7, #16
 8001e48:	0039      	movs	r1, r7
 8001e4a:	4341      	muls	r1, r0
 8001e4c:	4445      	add	r5, r8
 8001e4e:	4688      	mov	r8, r1
 8001e50:	4661      	mov	r1, ip
 8001e52:	4341      	muls	r1, r0
 8001e54:	468a      	mov	sl, r1
 8001e56:	4641      	mov	r1, r8
 8001e58:	4660      	mov	r0, ip
 8001e5a:	0c09      	lsrs	r1, r1, #16
 8001e5c:	4689      	mov	r9, r1
 8001e5e:	4358      	muls	r0, r3
 8001e60:	437b      	muls	r3, r7
 8001e62:	4453      	add	r3, sl
 8001e64:	444b      	add	r3, r9
 8001e66:	459a      	cmp	sl, r3
 8001e68:	d903      	bls.n	8001e72 <__aeabi_dmul+0x286>
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	4689      	mov	r9, r1
 8001e70:	4448      	add	r0, r9
 8001e72:	0c19      	lsrs	r1, r3, #16
 8001e74:	4689      	mov	r9, r1
 8001e76:	4641      	mov	r1, r8
 8001e78:	0409      	lsls	r1, r1, #16
 8001e7a:	0c09      	lsrs	r1, r1, #16
 8001e7c:	4688      	mov	r8, r1
 8001e7e:	0039      	movs	r1, r7
 8001e80:	4361      	muls	r1, r4
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	4443      	add	r3, r8
 8001e86:	4688      	mov	r8, r1
 8001e88:	4661      	mov	r1, ip
 8001e8a:	434c      	muls	r4, r1
 8001e8c:	4371      	muls	r1, r6
 8001e8e:	468c      	mov	ip, r1
 8001e90:	4641      	mov	r1, r8
 8001e92:	4377      	muls	r7, r6
 8001e94:	0c0e      	lsrs	r6, r1, #16
 8001e96:	193f      	adds	r7, r7, r4
 8001e98:	19f6      	adds	r6, r6, r7
 8001e9a:	4448      	add	r0, r9
 8001e9c:	42b4      	cmp	r4, r6
 8001e9e:	d903      	bls.n	8001ea8 <__aeabi_dmul+0x2bc>
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	4689      	mov	r9, r1
 8001ea6:	44cc      	add	ip, r9
 8001ea8:	9902      	ldr	r1, [sp, #8]
 8001eaa:	9f00      	ldr	r7, [sp, #0]
 8001eac:	4689      	mov	r9, r1
 8001eae:	0431      	lsls	r1, r6, #16
 8001eb0:	444f      	add	r7, r9
 8001eb2:	4689      	mov	r9, r1
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4297      	cmp	r7, r2
 8001eb8:	4192      	sbcs	r2, r2
 8001eba:	040c      	lsls	r4, r1, #16
 8001ebc:	0c24      	lsrs	r4, r4, #16
 8001ebe:	444c      	add	r4, r9
 8001ec0:	18ff      	adds	r7, r7, r3
 8001ec2:	4252      	negs	r2, r2
 8001ec4:	1964      	adds	r4, r4, r5
 8001ec6:	18a1      	adds	r1, r4, r2
 8001ec8:	429f      	cmp	r7, r3
 8001eca:	419b      	sbcs	r3, r3
 8001ecc:	4688      	mov	r8, r1
 8001ece:	4682      	mov	sl, r0
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	4590      	cmp	r8, r2
 8001ed6:	4192      	sbcs	r2, r2
 8001ed8:	42ac      	cmp	r4, r5
 8001eda:	41a4      	sbcs	r4, r4
 8001edc:	44c2      	add	sl, r8
 8001ede:	44d1      	add	r9, sl
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	4264      	negs	r4, r4
 8001ee4:	4314      	orrs	r4, r2
 8001ee6:	4599      	cmp	r9, r3
 8001ee8:	419b      	sbcs	r3, r3
 8001eea:	4582      	cmp	sl, r0
 8001eec:	4192      	sbcs	r2, r2
 8001eee:	425b      	negs	r3, r3
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	0c36      	lsrs	r6, r6, #16
 8001ef8:	19a4      	adds	r4, r4, r6
 8001efa:	18e3      	adds	r3, r4, r3
 8001efc:	4463      	add	r3, ip
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	0dd2      	lsrs	r2, r2, #23
 8001f02:	431a      	orrs	r2, r3
 8001f04:	9901      	ldr	r1, [sp, #4]
 8001f06:	4692      	mov	sl, r2
 8001f08:	027a      	lsls	r2, r7, #9
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	1e50      	subs	r0, r2, #1
 8001f0e:	4182      	sbcs	r2, r0
 8001f10:	0dff      	lsrs	r7, r7, #23
 8001f12:	4317      	orrs	r7, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	0252      	lsls	r2, r2, #9
 8001f18:	4317      	orrs	r7, r2
 8001f1a:	46b8      	mov	r8, r7
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	d500      	bpl.n	8001f22 <__aeabi_dmul+0x336>
 8001f20:	e6ed      	b.n	8001cfe <__aeabi_dmul+0x112>
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <__aeabi_dmul+0x36c>)
 8001f24:	9a03      	ldr	r2, [sp, #12]
 8001f26:	445b      	add	r3, fp
 8001f28:	4691      	mov	r9, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	dc00      	bgt.n	8001f30 <__aeabi_dmul+0x344>
 8001f2e:	e0ac      	b.n	800208a <__aeabi_dmul+0x49e>
 8001f30:	003a      	movs	r2, r7
 8001f32:	0752      	lsls	r2, r2, #29
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dmul+0x34c>
 8001f36:	e710      	b.n	8001d5a <__aeabi_dmul+0x16e>
 8001f38:	220f      	movs	r2, #15
 8001f3a:	4658      	mov	r0, fp
 8001f3c:	403a      	ands	r2, r7
 8001f3e:	2a04      	cmp	r2, #4
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dmul+0x358>
 8001f42:	e6f9      	b.n	8001d38 <__aeabi_dmul+0x14c>
 8001f44:	e709      	b.n	8001d5a <__aeabi_dmul+0x16e>
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	000007ff 	.word	0x000007ff
 8001f4c:	fffffc01 	.word	0xfffffc01
 8001f50:	feffffff 	.word	0xfeffffff
 8001f54:	000007fe 	.word	0x000007fe
 8001f58:	000003ff 	.word	0x000003ff
 8001f5c:	0022      	movs	r2, r4
 8001f5e:	4332      	orrs	r2, r6
 8001f60:	d06f      	beq.n	8002042 <__aeabi_dmul+0x456>
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dmul+0x37c>
 8001f66:	e0c2      	b.n	80020ee <__aeabi_dmul+0x502>
 8001f68:	0020      	movs	r0, r4
 8001f6a:	f000 fe27 	bl	8002bbc <__clzsi2>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	0003      	movs	r3, r0
 8001f72:	3a0b      	subs	r2, #11
 8001f74:	201d      	movs	r0, #29
 8001f76:	1a82      	subs	r2, r0, r2
 8001f78:	0030      	movs	r0, r6
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	40d0      	lsrs	r0, r2
 8001f7e:	3908      	subs	r1, #8
 8001f80:	408c      	lsls	r4, r1
 8001f82:	0002      	movs	r2, r0
 8001f84:	4322      	orrs	r2, r4
 8001f86:	0034      	movs	r4, r6
 8001f88:	408c      	lsls	r4, r1
 8001f8a:	4659      	mov	r1, fp
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	4986      	ldr	r1, [pc, #536]	@ (80021a8 <__aeabi_dmul+0x5bc>)
 8001f90:	468b      	mov	fp, r1
 8001f92:	449b      	add	fp, r3
 8001f94:	2d0a      	cmp	r5, #10
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dmul+0x3ae>
 8001f98:	e6a4      	b.n	8001ce4 <__aeabi_dmul+0xf8>
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	9b00      	ldr	r3, [sp, #0]
 8001f9e:	9401      	str	r4, [sp, #4]
 8001fa0:	4059      	eors	r1, r3
 8001fa2:	b2cb      	uxtb	r3, r1
 8001fa4:	0014      	movs	r4, r2
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	9303      	str	r3, [sp, #12]
 8001faa:	2d02      	cmp	r5, #2
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dmul+0x3c4>
 8001fae:	e667      	b.n	8001c80 <__aeabi_dmul+0x94>
 8001fb0:	e6fb      	b.n	8001daa <__aeabi_dmul+0x1be>
 8001fb2:	4653      	mov	r3, sl
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	d03c      	beq.n	8002034 <__aeabi_dmul+0x448>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dmul+0x3d6>
 8001fc0:	e0a3      	b.n	800210a <__aeabi_dmul+0x51e>
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	f000 fdfa 	bl	8002bbc <__clzsi2>
 8001fc8:	230b      	movs	r3, #11
 8001fca:	425b      	negs	r3, r3
 8001fcc:	469c      	mov	ip, r3
 8001fce:	0002      	movs	r2, r0
 8001fd0:	4484      	add	ip, r0
 8001fd2:	0011      	movs	r1, r2
 8001fd4:	4650      	mov	r0, sl
 8001fd6:	3908      	subs	r1, #8
 8001fd8:	4088      	lsls	r0, r1
 8001fda:	231d      	movs	r3, #29
 8001fdc:	4680      	mov	r8, r0
 8001fde:	4660      	mov	r0, ip
 8001fe0:	1a1b      	subs	r3, r3, r0
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	40d8      	lsrs	r0, r3
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	4640      	mov	r0, r8
 8001fea:	4303      	orrs	r3, r0
 8001fec:	469a      	mov	sl, r3
 8001fee:	0023      	movs	r3, r4
 8001ff0:	408b      	lsls	r3, r1
 8001ff2:	4698      	mov	r8, r3
 8001ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80021a8 <__aeabi_dmul+0x5bc>)
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9302      	str	r3, [sp, #8]
 8002000:	e61a      	b.n	8001c38 <__aeabi_dmul+0x4c>
 8002002:	2d0f      	cmp	r5, #15
 8002004:	d000      	beq.n	8002008 <__aeabi_dmul+0x41c>
 8002006:	e0c9      	b.n	800219c <__aeabi_dmul+0x5b0>
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	4652      	mov	r2, sl
 800200c:	031b      	lsls	r3, r3, #12
 800200e:	421a      	tst	r2, r3
 8002010:	d002      	beq.n	8002018 <__aeabi_dmul+0x42c>
 8002012:	421c      	tst	r4, r3
 8002014:	d100      	bne.n	8002018 <__aeabi_dmul+0x42c>
 8002016:	e092      	b.n	800213e <__aeabi_dmul+0x552>
 8002018:	2480      	movs	r4, #128	@ 0x80
 800201a:	4653      	mov	r3, sl
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	431c      	orrs	r4, r3
 8002020:	0324      	lsls	r4, r4, #12
 8002022:	4642      	mov	r2, r8
 8002024:	0b24      	lsrs	r4, r4, #12
 8002026:	e63e      	b.n	8001ca6 <__aeabi_dmul+0xba>
 8002028:	469b      	mov	fp, r3
 800202a:	2303      	movs	r3, #3
 800202c:	4680      	mov	r8, r0
 800202e:	250c      	movs	r5, #12
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	e601      	b.n	8001c38 <__aeabi_dmul+0x4c>
 8002034:	2300      	movs	r3, #0
 8002036:	469a      	mov	sl, r3
 8002038:	469b      	mov	fp, r3
 800203a:	3301      	adds	r3, #1
 800203c:	2504      	movs	r5, #4
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	e5fa      	b.n	8001c38 <__aeabi_dmul+0x4c>
 8002042:	2101      	movs	r1, #1
 8002044:	430d      	orrs	r5, r1
 8002046:	2d0a      	cmp	r5, #10
 8002048:	dd00      	ble.n	800204c <__aeabi_dmul+0x460>
 800204a:	e64b      	b.n	8001ce4 <__aeabi_dmul+0xf8>
 800204c:	4649      	mov	r1, r9
 800204e:	9800      	ldr	r0, [sp, #0]
 8002050:	4041      	eors	r1, r0
 8002052:	b2c9      	uxtb	r1, r1
 8002054:	9103      	str	r1, [sp, #12]
 8002056:	2d02      	cmp	r5, #2
 8002058:	dc00      	bgt.n	800205c <__aeabi_dmul+0x470>
 800205a:	e096      	b.n	800218a <__aeabi_dmul+0x59e>
 800205c:	2300      	movs	r3, #0
 800205e:	2400      	movs	r4, #0
 8002060:	2001      	movs	r0, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	e60c      	b.n	8001c80 <__aeabi_dmul+0x94>
 8002066:	4649      	mov	r1, r9
 8002068:	2302      	movs	r3, #2
 800206a:	9a00      	ldr	r2, [sp, #0]
 800206c:	432b      	orrs	r3, r5
 800206e:	4051      	eors	r1, r2
 8002070:	b2ca      	uxtb	r2, r1
 8002072:	9203      	str	r2, [sp, #12]
 8002074:	2b0a      	cmp	r3, #10
 8002076:	dd00      	ble.n	800207a <__aeabi_dmul+0x48e>
 8002078:	e634      	b.n	8001ce4 <__aeabi_dmul+0xf8>
 800207a:	2d00      	cmp	r5, #0
 800207c:	d157      	bne.n	800212e <__aeabi_dmul+0x542>
 800207e:	9b03      	ldr	r3, [sp, #12]
 8002080:	4699      	mov	r9, r3
 8002082:	2400      	movs	r4, #0
 8002084:	2200      	movs	r2, #0
 8002086:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <__aeabi_dmul+0x5c0>)
 8002088:	e60e      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 800208a:	4658      	mov	r0, fp
 800208c:	2101      	movs	r1, #1
 800208e:	1ac9      	subs	r1, r1, r3
 8002090:	2938      	cmp	r1, #56	@ 0x38
 8002092:	dd00      	ble.n	8002096 <__aeabi_dmul+0x4aa>
 8002094:	e62f      	b.n	8001cf6 <__aeabi_dmul+0x10a>
 8002096:	291f      	cmp	r1, #31
 8002098:	dd56      	ble.n	8002148 <__aeabi_dmul+0x55c>
 800209a:	221f      	movs	r2, #31
 800209c:	4654      	mov	r4, sl
 800209e:	4252      	negs	r2, r2
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	40dc      	lsrs	r4, r3
 80020a4:	2920      	cmp	r1, #32
 80020a6:	d007      	beq.n	80020b8 <__aeabi_dmul+0x4cc>
 80020a8:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <__aeabi_dmul+0x5c4>)
 80020aa:	4642      	mov	r2, r8
 80020ac:	469c      	mov	ip, r3
 80020ae:	4653      	mov	r3, sl
 80020b0:	4460      	add	r0, ip
 80020b2:	4083      	lsls	r3, r0
 80020b4:	431a      	orrs	r2, r3
 80020b6:	4690      	mov	r8, r2
 80020b8:	4642      	mov	r2, r8
 80020ba:	2107      	movs	r1, #7
 80020bc:	1e53      	subs	r3, r2, #1
 80020be:	419a      	sbcs	r2, r3
 80020c0:	000b      	movs	r3, r1
 80020c2:	4322      	orrs	r2, r4
 80020c4:	4013      	ands	r3, r2
 80020c6:	2400      	movs	r4, #0
 80020c8:	4211      	tst	r1, r2
 80020ca:	d009      	beq.n	80020e0 <__aeabi_dmul+0x4f4>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d05d      	beq.n	8002190 <__aeabi_dmul+0x5a4>
 80020d4:	1d11      	adds	r1, r2, #4
 80020d6:	4291      	cmp	r1, r2
 80020d8:	419b      	sbcs	r3, r3
 80020da:	000a      	movs	r2, r1
 80020dc:	425b      	negs	r3, r3
 80020de:	075b      	lsls	r3, r3, #29
 80020e0:	08d2      	lsrs	r2, r2, #3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	e5df      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 80020e8:	9b03      	ldr	r3, [sp, #12]
 80020ea:	4699      	mov	r9, r3
 80020ec:	e5fa      	b.n	8001ce4 <__aeabi_dmul+0xf8>
 80020ee:	9801      	ldr	r0, [sp, #4]
 80020f0:	f000 fd64 	bl	8002bbc <__clzsi2>
 80020f4:	0002      	movs	r2, r0
 80020f6:	0003      	movs	r3, r0
 80020f8:	3215      	adds	r2, #21
 80020fa:	3320      	adds	r3, #32
 80020fc:	2a1c      	cmp	r2, #28
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dmul+0x516>
 8002100:	e738      	b.n	8001f74 <__aeabi_dmul+0x388>
 8002102:	9a01      	ldr	r2, [sp, #4]
 8002104:	3808      	subs	r0, #8
 8002106:	4082      	lsls	r2, r0
 8002108:	e73f      	b.n	8001f8a <__aeabi_dmul+0x39e>
 800210a:	f000 fd57 	bl	8002bbc <__clzsi2>
 800210e:	2315      	movs	r3, #21
 8002110:	469c      	mov	ip, r3
 8002112:	4484      	add	ip, r0
 8002114:	0002      	movs	r2, r0
 8002116:	4663      	mov	r3, ip
 8002118:	3220      	adds	r2, #32
 800211a:	2b1c      	cmp	r3, #28
 800211c:	dc00      	bgt.n	8002120 <__aeabi_dmul+0x534>
 800211e:	e758      	b.n	8001fd2 <__aeabi_dmul+0x3e6>
 8002120:	2300      	movs	r3, #0
 8002122:	4698      	mov	r8, r3
 8002124:	0023      	movs	r3, r4
 8002126:	3808      	subs	r0, #8
 8002128:	4083      	lsls	r3, r0
 800212a:	469a      	mov	sl, r3
 800212c:	e762      	b.n	8001ff4 <__aeabi_dmul+0x408>
 800212e:	001d      	movs	r5, r3
 8002130:	2300      	movs	r3, #0
 8002132:	2400      	movs	r4, #0
 8002134:	2002      	movs	r0, #2
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	e5a2      	b.n	8001c80 <__aeabi_dmul+0x94>
 800213a:	9002      	str	r0, [sp, #8]
 800213c:	e632      	b.n	8001da4 <__aeabi_dmul+0x1b8>
 800213e:	431c      	orrs	r4, r3
 8002140:	9b00      	ldr	r3, [sp, #0]
 8002142:	9a01      	ldr	r2, [sp, #4]
 8002144:	4699      	mov	r9, r3
 8002146:	e5ae      	b.n	8001ca6 <__aeabi_dmul+0xba>
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <__aeabi_dmul+0x5c8>)
 800214a:	4652      	mov	r2, sl
 800214c:	18c3      	adds	r3, r0, r3
 800214e:	4640      	mov	r0, r8
 8002150:	409a      	lsls	r2, r3
 8002152:	40c8      	lsrs	r0, r1
 8002154:	4302      	orrs	r2, r0
 8002156:	4640      	mov	r0, r8
 8002158:	4098      	lsls	r0, r3
 800215a:	0003      	movs	r3, r0
 800215c:	1e58      	subs	r0, r3, #1
 800215e:	4183      	sbcs	r3, r0
 8002160:	4654      	mov	r4, sl
 8002162:	431a      	orrs	r2, r3
 8002164:	40cc      	lsrs	r4, r1
 8002166:	0753      	lsls	r3, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x592>
 800216a:	230f      	movs	r3, #15
 800216c:	4013      	ands	r3, r2
 800216e:	2b04      	cmp	r3, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x592>
 8002172:	1d13      	adds	r3, r2, #4
 8002174:	4293      	cmp	r3, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	18a4      	adds	r4, r4, r2
 800217c:	001a      	movs	r2, r3
 800217e:	0223      	lsls	r3, r4, #8
 8002180:	d508      	bpl.n	8002194 <__aeabi_dmul+0x5a8>
 8002182:	2301      	movs	r3, #1
 8002184:	2400      	movs	r4, #0
 8002186:	2200      	movs	r2, #0
 8002188:	e58e      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 800218a:	4689      	mov	r9, r1
 800218c:	2400      	movs	r4, #0
 800218e:	e58b      	b.n	8001ca8 <__aeabi_dmul+0xbc>
 8002190:	2300      	movs	r3, #0
 8002192:	e7a5      	b.n	80020e0 <__aeabi_dmul+0x4f4>
 8002194:	0763      	lsls	r3, r4, #29
 8002196:	0264      	lsls	r4, r4, #9
 8002198:	0b24      	lsrs	r4, r4, #12
 800219a:	e7a1      	b.n	80020e0 <__aeabi_dmul+0x4f4>
 800219c:	9b00      	ldr	r3, [sp, #0]
 800219e:	46a2      	mov	sl, r4
 80021a0:	4699      	mov	r9, r3
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	4698      	mov	r8, r3
 80021a6:	e737      	b.n	8002018 <__aeabi_dmul+0x42c>
 80021a8:	fffffc0d 	.word	0xfffffc0d
 80021ac:	000007ff 	.word	0x000007ff
 80021b0:	0000043e 	.word	0x0000043e
 80021b4:	0000041e 	.word	0x0000041e

080021b8 <__aeabi_dsub>:
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	4657      	mov	r7, sl
 80021bc:	464e      	mov	r6, r9
 80021be:	4645      	mov	r5, r8
 80021c0:	46de      	mov	lr, fp
 80021c2:	b5e0      	push	{r5, r6, r7, lr}
 80021c4:	b083      	sub	sp, #12
 80021c6:	9000      	str	r0, [sp, #0]
 80021c8:	9101      	str	r1, [sp, #4]
 80021ca:	030c      	lsls	r4, r1, #12
 80021cc:	004d      	lsls	r5, r1, #1
 80021ce:	0fce      	lsrs	r6, r1, #31
 80021d0:	0a61      	lsrs	r1, r4, #9
 80021d2:	9c00      	ldr	r4, [sp, #0]
 80021d4:	005f      	lsls	r7, r3, #1
 80021d6:	0f64      	lsrs	r4, r4, #29
 80021d8:	430c      	orrs	r4, r1
 80021da:	9900      	ldr	r1, [sp, #0]
 80021dc:	9200      	str	r2, [sp, #0]
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	00c8      	lsls	r0, r1, #3
 80021e2:	0319      	lsls	r1, r3, #12
 80021e4:	0d7b      	lsrs	r3, r7, #21
 80021e6:	4699      	mov	r9, r3
 80021e8:	9b01      	ldr	r3, [sp, #4]
 80021ea:	4fcc      	ldr	r7, [pc, #816]	@ (800251c <__aeabi_dsub+0x364>)
 80021ec:	0fdb      	lsrs	r3, r3, #31
 80021ee:	469c      	mov	ip, r3
 80021f0:	0a4b      	lsrs	r3, r1, #9
 80021f2:	9900      	ldr	r1, [sp, #0]
 80021f4:	4680      	mov	r8, r0
 80021f6:	0f49      	lsrs	r1, r1, #29
 80021f8:	4319      	orrs	r1, r3
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	468b      	mov	fp, r1
 80021fe:	00da      	lsls	r2, r3, #3
 8002200:	4692      	mov	sl, r2
 8002202:	0d6d      	lsrs	r5, r5, #21
 8002204:	45b9      	cmp	r9, r7
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x52>
 8002208:	e0bf      	b.n	800238a <__aeabi_dsub+0x1d2>
 800220a:	2301      	movs	r3, #1
 800220c:	4661      	mov	r1, ip
 800220e:	4059      	eors	r1, r3
 8002210:	464b      	mov	r3, r9
 8002212:	468c      	mov	ip, r1
 8002214:	1aeb      	subs	r3, r5, r3
 8002216:	428e      	cmp	r6, r1
 8002218:	d075      	beq.n	8002306 <__aeabi_dsub+0x14e>
 800221a:	2b00      	cmp	r3, #0
 800221c:	dc00      	bgt.n	8002220 <__aeabi_dsub+0x68>
 800221e:	e2a3      	b.n	8002768 <__aeabi_dsub+0x5b0>
 8002220:	4649      	mov	r1, r9
 8002222:	2900      	cmp	r1, #0
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x70>
 8002226:	e0ce      	b.n	80023c6 <__aeabi_dsub+0x20e>
 8002228:	42bd      	cmp	r5, r7
 800222a:	d100      	bne.n	800222e <__aeabi_dsub+0x76>
 800222c:	e200      	b.n	8002630 <__aeabi_dsub+0x478>
 800222e:	2701      	movs	r7, #1
 8002230:	2b38      	cmp	r3, #56	@ 0x38
 8002232:	dc19      	bgt.n	8002268 <__aeabi_dsub+0xb0>
 8002234:	2780      	movs	r7, #128	@ 0x80
 8002236:	4659      	mov	r1, fp
 8002238:	043f      	lsls	r7, r7, #16
 800223a:	4339      	orrs	r1, r7
 800223c:	468b      	mov	fp, r1
 800223e:	2b1f      	cmp	r3, #31
 8002240:	dd00      	ble.n	8002244 <__aeabi_dsub+0x8c>
 8002242:	e1fa      	b.n	800263a <__aeabi_dsub+0x482>
 8002244:	2720      	movs	r7, #32
 8002246:	1af9      	subs	r1, r7, r3
 8002248:	468c      	mov	ip, r1
 800224a:	4659      	mov	r1, fp
 800224c:	4667      	mov	r7, ip
 800224e:	40b9      	lsls	r1, r7
 8002250:	000f      	movs	r7, r1
 8002252:	0011      	movs	r1, r2
 8002254:	40d9      	lsrs	r1, r3
 8002256:	430f      	orrs	r7, r1
 8002258:	4661      	mov	r1, ip
 800225a:	408a      	lsls	r2, r1
 800225c:	1e51      	subs	r1, r2, #1
 800225e:	418a      	sbcs	r2, r1
 8002260:	4659      	mov	r1, fp
 8002262:	40d9      	lsrs	r1, r3
 8002264:	4317      	orrs	r7, r2
 8002266:	1a64      	subs	r4, r4, r1
 8002268:	1bc7      	subs	r7, r0, r7
 800226a:	42b8      	cmp	r0, r7
 800226c:	4180      	sbcs	r0, r0
 800226e:	4240      	negs	r0, r0
 8002270:	1a24      	subs	r4, r4, r0
 8002272:	0223      	lsls	r3, r4, #8
 8002274:	d400      	bmi.n	8002278 <__aeabi_dsub+0xc0>
 8002276:	e140      	b.n	80024fa <__aeabi_dsub+0x342>
 8002278:	0264      	lsls	r4, r4, #9
 800227a:	0a64      	lsrs	r4, r4, #9
 800227c:	2c00      	cmp	r4, #0
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0xca>
 8002280:	e154      	b.n	800252c <__aeabi_dsub+0x374>
 8002282:	0020      	movs	r0, r4
 8002284:	f000 fc9a 	bl	8002bbc <__clzsi2>
 8002288:	0003      	movs	r3, r0
 800228a:	3b08      	subs	r3, #8
 800228c:	2120      	movs	r1, #32
 800228e:	0038      	movs	r0, r7
 8002290:	1aca      	subs	r2, r1, r3
 8002292:	40d0      	lsrs	r0, r2
 8002294:	409c      	lsls	r4, r3
 8002296:	0002      	movs	r2, r0
 8002298:	409f      	lsls	r7, r3
 800229a:	4322      	orrs	r2, r4
 800229c:	429d      	cmp	r5, r3
 800229e:	dd00      	ble.n	80022a2 <__aeabi_dsub+0xea>
 80022a0:	e1a6      	b.n	80025f0 <__aeabi_dsub+0x438>
 80022a2:	1b58      	subs	r0, r3, r5
 80022a4:	3001      	adds	r0, #1
 80022a6:	1a09      	subs	r1, r1, r0
 80022a8:	003c      	movs	r4, r7
 80022aa:	408f      	lsls	r7, r1
 80022ac:	40c4      	lsrs	r4, r0
 80022ae:	1e7b      	subs	r3, r7, #1
 80022b0:	419f      	sbcs	r7, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	408b      	lsls	r3, r1
 80022b6:	4327      	orrs	r7, r4
 80022b8:	431f      	orrs	r7, r3
 80022ba:	40c2      	lsrs	r2, r0
 80022bc:	003b      	movs	r3, r7
 80022be:	0014      	movs	r4, r2
 80022c0:	2500      	movs	r5, #0
 80022c2:	4313      	orrs	r3, r2
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x110>
 80022c6:	e1f7      	b.n	80026b8 <__aeabi_dsub+0x500>
 80022c8:	077b      	lsls	r3, r7, #29
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x116>
 80022cc:	e377      	b.n	80029be <__aeabi_dsub+0x806>
 80022ce:	230f      	movs	r3, #15
 80022d0:	0038      	movs	r0, r7
 80022d2:	403b      	ands	r3, r7
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d004      	beq.n	80022e2 <__aeabi_dsub+0x12a>
 80022d8:	1d38      	adds	r0, r7, #4
 80022da:	42b8      	cmp	r0, r7
 80022dc:	41bf      	sbcs	r7, r7
 80022de:	427f      	negs	r7, r7
 80022e0:	19e4      	adds	r4, r4, r7
 80022e2:	0223      	lsls	r3, r4, #8
 80022e4:	d400      	bmi.n	80022e8 <__aeabi_dsub+0x130>
 80022e6:	e368      	b.n	80029ba <__aeabi_dsub+0x802>
 80022e8:	4b8c      	ldr	r3, [pc, #560]	@ (800251c <__aeabi_dsub+0x364>)
 80022ea:	3501      	adds	r5, #1
 80022ec:	429d      	cmp	r5, r3
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x13a>
 80022f0:	e0f4      	b.n	80024dc <__aeabi_dsub+0x324>
 80022f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002520 <__aeabi_dsub+0x368>)
 80022f4:	056d      	lsls	r5, r5, #21
 80022f6:	401c      	ands	r4, r3
 80022f8:	0d6d      	lsrs	r5, r5, #21
 80022fa:	0767      	lsls	r7, r4, #29
 80022fc:	08c0      	lsrs	r0, r0, #3
 80022fe:	0264      	lsls	r4, r4, #9
 8002300:	4307      	orrs	r7, r0
 8002302:	0b24      	lsrs	r4, r4, #12
 8002304:	e0ec      	b.n	80024e0 <__aeabi_dsub+0x328>
 8002306:	2b00      	cmp	r3, #0
 8002308:	dc00      	bgt.n	800230c <__aeabi_dsub+0x154>
 800230a:	e329      	b.n	8002960 <__aeabi_dsub+0x7a8>
 800230c:	4649      	mov	r1, r9
 800230e:	2900      	cmp	r1, #0
 8002310:	d000      	beq.n	8002314 <__aeabi_dsub+0x15c>
 8002312:	e0d6      	b.n	80024c2 <__aeabi_dsub+0x30a>
 8002314:	4659      	mov	r1, fp
 8002316:	4311      	orrs	r1, r2
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x164>
 800231a:	e12e      	b.n	800257a <__aeabi_dsub+0x3c2>
 800231c:	1e59      	subs	r1, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x16c>
 8002322:	e1e6      	b.n	80026f2 <__aeabi_dsub+0x53a>
 8002324:	42bb      	cmp	r3, r7
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x172>
 8002328:	e182      	b.n	8002630 <__aeabi_dsub+0x478>
 800232a:	2701      	movs	r7, #1
 800232c:	000b      	movs	r3, r1
 800232e:	2938      	cmp	r1, #56	@ 0x38
 8002330:	dc14      	bgt.n	800235c <__aeabi_dsub+0x1a4>
 8002332:	2b1f      	cmp	r3, #31
 8002334:	dd00      	ble.n	8002338 <__aeabi_dsub+0x180>
 8002336:	e23c      	b.n	80027b2 <__aeabi_dsub+0x5fa>
 8002338:	2720      	movs	r7, #32
 800233a:	1af9      	subs	r1, r7, r3
 800233c:	468c      	mov	ip, r1
 800233e:	4659      	mov	r1, fp
 8002340:	4667      	mov	r7, ip
 8002342:	40b9      	lsls	r1, r7
 8002344:	000f      	movs	r7, r1
 8002346:	0011      	movs	r1, r2
 8002348:	40d9      	lsrs	r1, r3
 800234a:	430f      	orrs	r7, r1
 800234c:	4661      	mov	r1, ip
 800234e:	408a      	lsls	r2, r1
 8002350:	1e51      	subs	r1, r2, #1
 8002352:	418a      	sbcs	r2, r1
 8002354:	4659      	mov	r1, fp
 8002356:	40d9      	lsrs	r1, r3
 8002358:	4317      	orrs	r7, r2
 800235a:	1864      	adds	r4, r4, r1
 800235c:	183f      	adds	r7, r7, r0
 800235e:	4287      	cmp	r7, r0
 8002360:	4180      	sbcs	r0, r0
 8002362:	4240      	negs	r0, r0
 8002364:	1824      	adds	r4, r4, r0
 8002366:	0223      	lsls	r3, r4, #8
 8002368:	d400      	bmi.n	800236c <__aeabi_dsub+0x1b4>
 800236a:	e0c6      	b.n	80024fa <__aeabi_dsub+0x342>
 800236c:	4b6b      	ldr	r3, [pc, #428]	@ (800251c <__aeabi_dsub+0x364>)
 800236e:	3501      	adds	r5, #1
 8002370:	429d      	cmp	r5, r3
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x1be>
 8002374:	e0b2      	b.n	80024dc <__aeabi_dsub+0x324>
 8002376:	2101      	movs	r1, #1
 8002378:	4b69      	ldr	r3, [pc, #420]	@ (8002520 <__aeabi_dsub+0x368>)
 800237a:	087a      	lsrs	r2, r7, #1
 800237c:	401c      	ands	r4, r3
 800237e:	4039      	ands	r1, r7
 8002380:	430a      	orrs	r2, r1
 8002382:	07e7      	lsls	r7, r4, #31
 8002384:	4317      	orrs	r7, r2
 8002386:	0864      	lsrs	r4, r4, #1
 8002388:	e79e      	b.n	80022c8 <__aeabi_dsub+0x110>
 800238a:	4b66      	ldr	r3, [pc, #408]	@ (8002524 <__aeabi_dsub+0x36c>)
 800238c:	4311      	orrs	r1, r2
 800238e:	468a      	mov	sl, r1
 8002390:	18eb      	adds	r3, r5, r3
 8002392:	2900      	cmp	r1, #0
 8002394:	d028      	beq.n	80023e8 <__aeabi_dsub+0x230>
 8002396:	4566      	cmp	r6, ip
 8002398:	d02c      	beq.n	80023f4 <__aeabi_dsub+0x23c>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d05b      	beq.n	8002456 <__aeabi_dsub+0x29e>
 800239e:	2d00      	cmp	r5, #0
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x1ec>
 80023a2:	e12c      	b.n	80025fe <__aeabi_dsub+0x446>
 80023a4:	465b      	mov	r3, fp
 80023a6:	4666      	mov	r6, ip
 80023a8:	075f      	lsls	r7, r3, #29
 80023aa:	08d2      	lsrs	r2, r2, #3
 80023ac:	4317      	orrs	r7, r2
 80023ae:	08dd      	lsrs	r5, r3, #3
 80023b0:	003b      	movs	r3, r7
 80023b2:	432b      	orrs	r3, r5
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dsub+0x200>
 80023b6:	e0e2      	b.n	800257e <__aeabi_dsub+0x3c6>
 80023b8:	2480      	movs	r4, #128	@ 0x80
 80023ba:	0324      	lsls	r4, r4, #12
 80023bc:	432c      	orrs	r4, r5
 80023be:	0324      	lsls	r4, r4, #12
 80023c0:	4d56      	ldr	r5, [pc, #344]	@ (800251c <__aeabi_dsub+0x364>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e08c      	b.n	80024e0 <__aeabi_dsub+0x328>
 80023c6:	4659      	mov	r1, fp
 80023c8:	4311      	orrs	r1, r2
 80023ca:	d100      	bne.n	80023ce <__aeabi_dsub+0x216>
 80023cc:	e0d5      	b.n	800257a <__aeabi_dsub+0x3c2>
 80023ce:	1e59      	subs	r1, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x21e>
 80023d4:	e1b9      	b.n	800274a <__aeabi_dsub+0x592>
 80023d6:	42bb      	cmp	r3, r7
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x224>
 80023da:	e1b1      	b.n	8002740 <__aeabi_dsub+0x588>
 80023dc:	2701      	movs	r7, #1
 80023de:	000b      	movs	r3, r1
 80023e0:	2938      	cmp	r1, #56	@ 0x38
 80023e2:	dd00      	ble.n	80023e6 <__aeabi_dsub+0x22e>
 80023e4:	e740      	b.n	8002268 <__aeabi_dsub+0xb0>
 80023e6:	e72a      	b.n	800223e <__aeabi_dsub+0x86>
 80023e8:	4661      	mov	r1, ip
 80023ea:	2701      	movs	r7, #1
 80023ec:	4079      	eors	r1, r7
 80023ee:	468c      	mov	ip, r1
 80023f0:	4566      	cmp	r6, ip
 80023f2:	d1d2      	bne.n	800239a <__aeabi_dsub+0x1e2>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x242>
 80023f8:	e0c5      	b.n	8002586 <__aeabi_dsub+0x3ce>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d000      	beq.n	8002400 <__aeabi_dsub+0x248>
 80023fe:	e155      	b.n	80026ac <__aeabi_dsub+0x4f4>
 8002400:	464b      	mov	r3, r9
 8002402:	0025      	movs	r5, r4
 8002404:	4305      	orrs	r5, r0
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x252>
 8002408:	e212      	b.n	8002830 <__aeabi_dsub+0x678>
 800240a:	1e59      	subs	r1, r3, #1
 800240c:	468c      	mov	ip, r1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x25c>
 8002412:	e249      	b.n	80028a8 <__aeabi_dsub+0x6f0>
 8002414:	4d41      	ldr	r5, [pc, #260]	@ (800251c <__aeabi_dsub+0x364>)
 8002416:	42ab      	cmp	r3, r5
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x264>
 800241a:	e28f      	b.n	800293c <__aeabi_dsub+0x784>
 800241c:	2701      	movs	r7, #1
 800241e:	2938      	cmp	r1, #56	@ 0x38
 8002420:	dc11      	bgt.n	8002446 <__aeabi_dsub+0x28e>
 8002422:	4663      	mov	r3, ip
 8002424:	2b1f      	cmp	r3, #31
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0x272>
 8002428:	e25b      	b.n	80028e2 <__aeabi_dsub+0x72a>
 800242a:	4661      	mov	r1, ip
 800242c:	2320      	movs	r3, #32
 800242e:	0027      	movs	r7, r4
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	0005      	movs	r5, r0
 8002434:	4098      	lsls	r0, r3
 8002436:	409f      	lsls	r7, r3
 8002438:	40cd      	lsrs	r5, r1
 800243a:	1e43      	subs	r3, r0, #1
 800243c:	4198      	sbcs	r0, r3
 800243e:	40cc      	lsrs	r4, r1
 8002440:	432f      	orrs	r7, r5
 8002442:	4307      	orrs	r7, r0
 8002444:	44a3      	add	fp, r4
 8002446:	18bf      	adds	r7, r7, r2
 8002448:	4297      	cmp	r7, r2
 800244a:	4192      	sbcs	r2, r2
 800244c:	4252      	negs	r2, r2
 800244e:	445a      	add	r2, fp
 8002450:	0014      	movs	r4, r2
 8002452:	464d      	mov	r5, r9
 8002454:	e787      	b.n	8002366 <__aeabi_dsub+0x1ae>
 8002456:	4f34      	ldr	r7, [pc, #208]	@ (8002528 <__aeabi_dsub+0x370>)
 8002458:	1c6b      	adds	r3, r5, #1
 800245a:	423b      	tst	r3, r7
 800245c:	d000      	beq.n	8002460 <__aeabi_dsub+0x2a8>
 800245e:	e0b6      	b.n	80025ce <__aeabi_dsub+0x416>
 8002460:	4659      	mov	r1, fp
 8002462:	0023      	movs	r3, r4
 8002464:	4311      	orrs	r1, r2
 8002466:	000f      	movs	r7, r1
 8002468:	4303      	orrs	r3, r0
 800246a:	2d00      	cmp	r5, #0
 800246c:	d000      	beq.n	8002470 <__aeabi_dsub+0x2b8>
 800246e:	e126      	b.n	80026be <__aeabi_dsub+0x506>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x2be>
 8002474:	e1c0      	b.n	80027f8 <__aeabi_dsub+0x640>
 8002476:	2900      	cmp	r1, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x2c4>
 800247a:	e0a1      	b.n	80025c0 <__aeabi_dsub+0x408>
 800247c:	1a83      	subs	r3, r0, r2
 800247e:	4698      	mov	r8, r3
 8002480:	465b      	mov	r3, fp
 8002482:	4540      	cmp	r0, r8
 8002484:	41ad      	sbcs	r5, r5
 8002486:	1ae3      	subs	r3, r4, r3
 8002488:	426d      	negs	r5, r5
 800248a:	1b5b      	subs	r3, r3, r5
 800248c:	2580      	movs	r5, #128	@ 0x80
 800248e:	042d      	lsls	r5, r5, #16
 8002490:	422b      	tst	r3, r5
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x2de>
 8002494:	e14b      	b.n	800272e <__aeabi_dsub+0x576>
 8002496:	465b      	mov	r3, fp
 8002498:	1a10      	subs	r0, r2, r0
 800249a:	4282      	cmp	r2, r0
 800249c:	4192      	sbcs	r2, r2
 800249e:	1b1c      	subs	r4, r3, r4
 80024a0:	0007      	movs	r7, r0
 80024a2:	2601      	movs	r6, #1
 80024a4:	4663      	mov	r3, ip
 80024a6:	4252      	negs	r2, r2
 80024a8:	1aa4      	subs	r4, r4, r2
 80024aa:	4327      	orrs	r7, r4
 80024ac:	401e      	ands	r6, r3
 80024ae:	2f00      	cmp	r7, #0
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x2fc>
 80024b2:	e142      	b.n	800273a <__aeabi_dsub+0x582>
 80024b4:	422c      	tst	r4, r5
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x302>
 80024b8:	e26d      	b.n	8002996 <__aeabi_dsub+0x7de>
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <__aeabi_dsub+0x368>)
 80024bc:	2501      	movs	r5, #1
 80024be:	401c      	ands	r4, r3
 80024c0:	e71b      	b.n	80022fa <__aeabi_dsub+0x142>
 80024c2:	42bd      	cmp	r5, r7
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x310>
 80024c6:	e13b      	b.n	8002740 <__aeabi_dsub+0x588>
 80024c8:	2701      	movs	r7, #1
 80024ca:	2b38      	cmp	r3, #56	@ 0x38
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dsub+0x318>
 80024ce:	e745      	b.n	800235c <__aeabi_dsub+0x1a4>
 80024d0:	2780      	movs	r7, #128	@ 0x80
 80024d2:	4659      	mov	r1, fp
 80024d4:	043f      	lsls	r7, r7, #16
 80024d6:	4339      	orrs	r1, r7
 80024d8:	468b      	mov	fp, r1
 80024da:	e72a      	b.n	8002332 <__aeabi_dsub+0x17a>
 80024dc:	2400      	movs	r4, #0
 80024de:	2700      	movs	r7, #0
 80024e0:	052d      	lsls	r5, r5, #20
 80024e2:	4325      	orrs	r5, r4
 80024e4:	07f6      	lsls	r6, r6, #31
 80024e6:	4335      	orrs	r5, r6
 80024e8:	0038      	movs	r0, r7
 80024ea:	0029      	movs	r1, r5
 80024ec:	b003      	add	sp, #12
 80024ee:	bcf0      	pop	{r4, r5, r6, r7}
 80024f0:	46bb      	mov	fp, r7
 80024f2:	46b2      	mov	sl, r6
 80024f4:	46a9      	mov	r9, r5
 80024f6:	46a0      	mov	r8, r4
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	077b      	lsls	r3, r7, #29
 80024fc:	d004      	beq.n	8002508 <__aeabi_dsub+0x350>
 80024fe:	230f      	movs	r3, #15
 8002500:	403b      	ands	r3, r7
 8002502:	2b04      	cmp	r3, #4
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x350>
 8002506:	e6e7      	b.n	80022d8 <__aeabi_dsub+0x120>
 8002508:	002b      	movs	r3, r5
 800250a:	08f8      	lsrs	r0, r7, #3
 800250c:	4a03      	ldr	r2, [pc, #12]	@ (800251c <__aeabi_dsub+0x364>)
 800250e:	0767      	lsls	r7, r4, #29
 8002510:	4307      	orrs	r7, r0
 8002512:	08e5      	lsrs	r5, r4, #3
 8002514:	4293      	cmp	r3, r2
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x362>
 8002518:	e74a      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800251a:	e0a5      	b.n	8002668 <__aeabi_dsub+0x4b0>
 800251c:	000007ff 	.word	0x000007ff
 8002520:	ff7fffff 	.word	0xff7fffff
 8002524:	fffff801 	.word	0xfffff801
 8002528:	000007fe 	.word	0x000007fe
 800252c:	0038      	movs	r0, r7
 800252e:	f000 fb45 	bl	8002bbc <__clzsi2>
 8002532:	0003      	movs	r3, r0
 8002534:	3318      	adds	r3, #24
 8002536:	2b1f      	cmp	r3, #31
 8002538:	dc00      	bgt.n	800253c <__aeabi_dsub+0x384>
 800253a:	e6a7      	b.n	800228c <__aeabi_dsub+0xd4>
 800253c:	003a      	movs	r2, r7
 800253e:	3808      	subs	r0, #8
 8002540:	4082      	lsls	r2, r0
 8002542:	429d      	cmp	r5, r3
 8002544:	dd00      	ble.n	8002548 <__aeabi_dsub+0x390>
 8002546:	e08a      	b.n	800265e <__aeabi_dsub+0x4a6>
 8002548:	1b5b      	subs	r3, r3, r5
 800254a:	1c58      	adds	r0, r3, #1
 800254c:	281f      	cmp	r0, #31
 800254e:	dc00      	bgt.n	8002552 <__aeabi_dsub+0x39a>
 8002550:	e1d8      	b.n	8002904 <__aeabi_dsub+0x74c>
 8002552:	0017      	movs	r7, r2
 8002554:	3b1f      	subs	r3, #31
 8002556:	40df      	lsrs	r7, r3
 8002558:	2820      	cmp	r0, #32
 800255a:	d005      	beq.n	8002568 <__aeabi_dsub+0x3b0>
 800255c:	2340      	movs	r3, #64	@ 0x40
 800255e:	1a1b      	subs	r3, r3, r0
 8002560:	409a      	lsls	r2, r3
 8002562:	1e53      	subs	r3, r2, #1
 8002564:	419a      	sbcs	r2, r3
 8002566:	4317      	orrs	r7, r2
 8002568:	2500      	movs	r5, #0
 800256a:	2f00      	cmp	r7, #0
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x3b8>
 800256e:	e0e5      	b.n	800273c <__aeabi_dsub+0x584>
 8002570:	077b      	lsls	r3, r7, #29
 8002572:	d000      	beq.n	8002576 <__aeabi_dsub+0x3be>
 8002574:	e6ab      	b.n	80022ce <__aeabi_dsub+0x116>
 8002576:	002c      	movs	r4, r5
 8002578:	e7c6      	b.n	8002508 <__aeabi_dsub+0x350>
 800257a:	08c0      	lsrs	r0, r0, #3
 800257c:	e7c6      	b.n	800250c <__aeabi_dsub+0x354>
 800257e:	2700      	movs	r7, #0
 8002580:	2400      	movs	r4, #0
 8002582:	4dd1      	ldr	r5, [pc, #836]	@ (80028c8 <__aeabi_dsub+0x710>)
 8002584:	e7ac      	b.n	80024e0 <__aeabi_dsub+0x328>
 8002586:	4fd1      	ldr	r7, [pc, #836]	@ (80028cc <__aeabi_dsub+0x714>)
 8002588:	1c6b      	adds	r3, r5, #1
 800258a:	423b      	tst	r3, r7
 800258c:	d171      	bne.n	8002672 <__aeabi_dsub+0x4ba>
 800258e:	0023      	movs	r3, r4
 8002590:	4303      	orrs	r3, r0
 8002592:	2d00      	cmp	r5, #0
 8002594:	d000      	beq.n	8002598 <__aeabi_dsub+0x3e0>
 8002596:	e14e      	b.n	8002836 <__aeabi_dsub+0x67e>
 8002598:	4657      	mov	r7, sl
 800259a:	2b00      	cmp	r3, #0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x3e8>
 800259e:	e1b5      	b.n	800290c <__aeabi_dsub+0x754>
 80025a0:	2f00      	cmp	r7, #0
 80025a2:	d00d      	beq.n	80025c0 <__aeabi_dsub+0x408>
 80025a4:	1883      	adds	r3, r0, r2
 80025a6:	4283      	cmp	r3, r0
 80025a8:	4180      	sbcs	r0, r0
 80025aa:	445c      	add	r4, fp
 80025ac:	4240      	negs	r0, r0
 80025ae:	1824      	adds	r4, r4, r0
 80025b0:	0222      	lsls	r2, r4, #8
 80025b2:	d500      	bpl.n	80025b6 <__aeabi_dsub+0x3fe>
 80025b4:	e1c8      	b.n	8002948 <__aeabi_dsub+0x790>
 80025b6:	001f      	movs	r7, r3
 80025b8:	4698      	mov	r8, r3
 80025ba:	4327      	orrs	r7, r4
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x408>
 80025be:	e0bc      	b.n	800273a <__aeabi_dsub+0x582>
 80025c0:	4643      	mov	r3, r8
 80025c2:	0767      	lsls	r7, r4, #29
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	431f      	orrs	r7, r3
 80025c8:	08e5      	lsrs	r5, r4, #3
 80025ca:	2300      	movs	r3, #0
 80025cc:	e04c      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80025ce:	1a83      	subs	r3, r0, r2
 80025d0:	4698      	mov	r8, r3
 80025d2:	465b      	mov	r3, fp
 80025d4:	4540      	cmp	r0, r8
 80025d6:	41bf      	sbcs	r7, r7
 80025d8:	1ae3      	subs	r3, r4, r3
 80025da:	427f      	negs	r7, r7
 80025dc:	1bdb      	subs	r3, r3, r7
 80025de:	021f      	lsls	r7, r3, #8
 80025e0:	d47c      	bmi.n	80026dc <__aeabi_dsub+0x524>
 80025e2:	4647      	mov	r7, r8
 80025e4:	431f      	orrs	r7, r3
 80025e6:	d100      	bne.n	80025ea <__aeabi_dsub+0x432>
 80025e8:	e0a6      	b.n	8002738 <__aeabi_dsub+0x580>
 80025ea:	001c      	movs	r4, r3
 80025ec:	4647      	mov	r7, r8
 80025ee:	e645      	b.n	800227c <__aeabi_dsub+0xc4>
 80025f0:	4cb7      	ldr	r4, [pc, #732]	@ (80028d0 <__aeabi_dsub+0x718>)
 80025f2:	1aed      	subs	r5, r5, r3
 80025f4:	4014      	ands	r4, r2
 80025f6:	077b      	lsls	r3, r7, #29
 80025f8:	d000      	beq.n	80025fc <__aeabi_dsub+0x444>
 80025fa:	e780      	b.n	80024fe <__aeabi_dsub+0x346>
 80025fc:	e784      	b.n	8002508 <__aeabi_dsub+0x350>
 80025fe:	464b      	mov	r3, r9
 8002600:	0025      	movs	r5, r4
 8002602:	4305      	orrs	r5, r0
 8002604:	d066      	beq.n	80026d4 <__aeabi_dsub+0x51c>
 8002606:	1e5f      	subs	r7, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d100      	bne.n	800260e <__aeabi_dsub+0x456>
 800260c:	e0fc      	b.n	8002808 <__aeabi_dsub+0x650>
 800260e:	4dae      	ldr	r5, [pc, #696]	@ (80028c8 <__aeabi_dsub+0x710>)
 8002610:	42ab      	cmp	r3, r5
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x45e>
 8002614:	e15e      	b.n	80028d4 <__aeabi_dsub+0x71c>
 8002616:	4666      	mov	r6, ip
 8002618:	2f38      	cmp	r7, #56	@ 0x38
 800261a:	dc00      	bgt.n	800261e <__aeabi_dsub+0x466>
 800261c:	e0b4      	b.n	8002788 <__aeabi_dsub+0x5d0>
 800261e:	2001      	movs	r0, #1
 8002620:	1a17      	subs	r7, r2, r0
 8002622:	42ba      	cmp	r2, r7
 8002624:	4192      	sbcs	r2, r2
 8002626:	465b      	mov	r3, fp
 8002628:	4252      	negs	r2, r2
 800262a:	464d      	mov	r5, r9
 800262c:	1a9c      	subs	r4, r3, r2
 800262e:	e620      	b.n	8002272 <__aeabi_dsub+0xba>
 8002630:	0767      	lsls	r7, r4, #29
 8002632:	08c0      	lsrs	r0, r0, #3
 8002634:	4307      	orrs	r7, r0
 8002636:	08e5      	lsrs	r5, r4, #3
 8002638:	e6ba      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800263a:	001f      	movs	r7, r3
 800263c:	4659      	mov	r1, fp
 800263e:	3f20      	subs	r7, #32
 8002640:	40f9      	lsrs	r1, r7
 8002642:	000f      	movs	r7, r1
 8002644:	2b20      	cmp	r3, #32
 8002646:	d005      	beq.n	8002654 <__aeabi_dsub+0x49c>
 8002648:	2140      	movs	r1, #64	@ 0x40
 800264a:	1acb      	subs	r3, r1, r3
 800264c:	4659      	mov	r1, fp
 800264e:	4099      	lsls	r1, r3
 8002650:	430a      	orrs	r2, r1
 8002652:	4692      	mov	sl, r2
 8002654:	4653      	mov	r3, sl
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	4193      	sbcs	r3, r2
 800265a:	431f      	orrs	r7, r3
 800265c:	e604      	b.n	8002268 <__aeabi_dsub+0xb0>
 800265e:	1aeb      	subs	r3, r5, r3
 8002660:	4d9b      	ldr	r5, [pc, #620]	@ (80028d0 <__aeabi_dsub+0x718>)
 8002662:	4015      	ands	r5, r2
 8002664:	076f      	lsls	r7, r5, #29
 8002666:	08ed      	lsrs	r5, r5, #3
 8002668:	032c      	lsls	r4, r5, #12
 800266a:	055d      	lsls	r5, r3, #21
 800266c:	0b24      	lsrs	r4, r4, #12
 800266e:	0d6d      	lsrs	r5, r5, #21
 8002670:	e736      	b.n	80024e0 <__aeabi_dsub+0x328>
 8002672:	4d95      	ldr	r5, [pc, #596]	@ (80028c8 <__aeabi_dsub+0x710>)
 8002674:	42ab      	cmp	r3, r5
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x4c2>
 8002678:	e0d6      	b.n	8002828 <__aeabi_dsub+0x670>
 800267a:	1882      	adds	r2, r0, r2
 800267c:	0021      	movs	r1, r4
 800267e:	4282      	cmp	r2, r0
 8002680:	4180      	sbcs	r0, r0
 8002682:	4459      	add	r1, fp
 8002684:	4240      	negs	r0, r0
 8002686:	1808      	adds	r0, r1, r0
 8002688:	07c7      	lsls	r7, r0, #31
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	4317      	orrs	r7, r2
 800268e:	0844      	lsrs	r4, r0, #1
 8002690:	0752      	lsls	r2, r2, #29
 8002692:	d400      	bmi.n	8002696 <__aeabi_dsub+0x4de>
 8002694:	e185      	b.n	80029a2 <__aeabi_dsub+0x7ea>
 8002696:	220f      	movs	r2, #15
 8002698:	001d      	movs	r5, r3
 800269a:	403a      	ands	r2, r7
 800269c:	2a04      	cmp	r2, #4
 800269e:	d000      	beq.n	80026a2 <__aeabi_dsub+0x4ea>
 80026a0:	e61a      	b.n	80022d8 <__aeabi_dsub+0x120>
 80026a2:	08ff      	lsrs	r7, r7, #3
 80026a4:	0764      	lsls	r4, r4, #29
 80026a6:	4327      	orrs	r7, r4
 80026a8:	0905      	lsrs	r5, r0, #4
 80026aa:	e7dd      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80026ac:	465b      	mov	r3, fp
 80026ae:	08d2      	lsrs	r2, r2, #3
 80026b0:	075f      	lsls	r7, r3, #29
 80026b2:	4317      	orrs	r7, r2
 80026b4:	08dd      	lsrs	r5, r3, #3
 80026b6:	e67b      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 80026b8:	2700      	movs	r7, #0
 80026ba:	2400      	movs	r4, #0
 80026bc:	e710      	b.n	80024e0 <__aeabi_dsub+0x328>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d000      	beq.n	80026c4 <__aeabi_dsub+0x50c>
 80026c2:	e0d6      	b.n	8002872 <__aeabi_dsub+0x6ba>
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d000      	beq.n	80026ca <__aeabi_dsub+0x512>
 80026c8:	e12f      	b.n	800292a <__aeabi_dsub+0x772>
 80026ca:	2480      	movs	r4, #128	@ 0x80
 80026cc:	2600      	movs	r6, #0
 80026ce:	4d7e      	ldr	r5, [pc, #504]	@ (80028c8 <__aeabi_dsub+0x710>)
 80026d0:	0324      	lsls	r4, r4, #12
 80026d2:	e705      	b.n	80024e0 <__aeabi_dsub+0x328>
 80026d4:	4666      	mov	r6, ip
 80026d6:	465c      	mov	r4, fp
 80026d8:	08d0      	lsrs	r0, r2, #3
 80026da:	e717      	b.n	800250c <__aeabi_dsub+0x354>
 80026dc:	465b      	mov	r3, fp
 80026de:	1a17      	subs	r7, r2, r0
 80026e0:	42ba      	cmp	r2, r7
 80026e2:	4192      	sbcs	r2, r2
 80026e4:	1b1c      	subs	r4, r3, r4
 80026e6:	2601      	movs	r6, #1
 80026e8:	4663      	mov	r3, ip
 80026ea:	4252      	negs	r2, r2
 80026ec:	1aa4      	subs	r4, r4, r2
 80026ee:	401e      	ands	r6, r3
 80026f0:	e5c4      	b.n	800227c <__aeabi_dsub+0xc4>
 80026f2:	1883      	adds	r3, r0, r2
 80026f4:	4283      	cmp	r3, r0
 80026f6:	4180      	sbcs	r0, r0
 80026f8:	445c      	add	r4, fp
 80026fa:	4240      	negs	r0, r0
 80026fc:	1825      	adds	r5, r4, r0
 80026fe:	022a      	lsls	r2, r5, #8
 8002700:	d400      	bmi.n	8002704 <__aeabi_dsub+0x54c>
 8002702:	e0da      	b.n	80028ba <__aeabi_dsub+0x702>
 8002704:	4a72      	ldr	r2, [pc, #456]	@ (80028d0 <__aeabi_dsub+0x718>)
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	4015      	ands	r5, r2
 800270a:	07ea      	lsls	r2, r5, #31
 800270c:	431a      	orrs	r2, r3
 800270e:	0869      	lsrs	r1, r5, #1
 8002710:	075b      	lsls	r3, r3, #29
 8002712:	d400      	bmi.n	8002716 <__aeabi_dsub+0x55e>
 8002714:	e14a      	b.n	80029ac <__aeabi_dsub+0x7f4>
 8002716:	230f      	movs	r3, #15
 8002718:	4013      	ands	r3, r2
 800271a:	2b04      	cmp	r3, #4
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x568>
 800271e:	e0fc      	b.n	800291a <__aeabi_dsub+0x762>
 8002720:	1d17      	adds	r7, r2, #4
 8002722:	4297      	cmp	r7, r2
 8002724:	41a4      	sbcs	r4, r4
 8002726:	4264      	negs	r4, r4
 8002728:	2502      	movs	r5, #2
 800272a:	1864      	adds	r4, r4, r1
 800272c:	e6ec      	b.n	8002508 <__aeabi_dsub+0x350>
 800272e:	4647      	mov	r7, r8
 8002730:	001c      	movs	r4, r3
 8002732:	431f      	orrs	r7, r3
 8002734:	d000      	beq.n	8002738 <__aeabi_dsub+0x580>
 8002736:	e743      	b.n	80025c0 <__aeabi_dsub+0x408>
 8002738:	2600      	movs	r6, #0
 800273a:	2500      	movs	r5, #0
 800273c:	2400      	movs	r4, #0
 800273e:	e6cf      	b.n	80024e0 <__aeabi_dsub+0x328>
 8002740:	08c0      	lsrs	r0, r0, #3
 8002742:	0767      	lsls	r7, r4, #29
 8002744:	4307      	orrs	r7, r0
 8002746:	08e5      	lsrs	r5, r4, #3
 8002748:	e632      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800274a:	1a87      	subs	r7, r0, r2
 800274c:	465b      	mov	r3, fp
 800274e:	42b8      	cmp	r0, r7
 8002750:	4180      	sbcs	r0, r0
 8002752:	1ae4      	subs	r4, r4, r3
 8002754:	4240      	negs	r0, r0
 8002756:	1a24      	subs	r4, r4, r0
 8002758:	0223      	lsls	r3, r4, #8
 800275a:	d428      	bmi.n	80027ae <__aeabi_dsub+0x5f6>
 800275c:	0763      	lsls	r3, r4, #29
 800275e:	08ff      	lsrs	r7, r7, #3
 8002760:	431f      	orrs	r7, r3
 8002762:	08e5      	lsrs	r5, r4, #3
 8002764:	2301      	movs	r3, #1
 8002766:	e77f      	b.n	8002668 <__aeabi_dsub+0x4b0>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x5b6>
 800276c:	e673      	b.n	8002456 <__aeabi_dsub+0x29e>
 800276e:	464b      	mov	r3, r9
 8002770:	1b5f      	subs	r7, r3, r5
 8002772:	003b      	movs	r3, r7
 8002774:	2d00      	cmp	r5, #0
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x5c2>
 8002778:	e742      	b.n	8002600 <__aeabi_dsub+0x448>
 800277a:	2f38      	cmp	r7, #56	@ 0x38
 800277c:	dd00      	ble.n	8002780 <__aeabi_dsub+0x5c8>
 800277e:	e0ec      	b.n	800295a <__aeabi_dsub+0x7a2>
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	000e      	movs	r6, r1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431c      	orrs	r4, r3
 8002788:	2f1f      	cmp	r7, #31
 800278a:	dc25      	bgt.n	80027d8 <__aeabi_dsub+0x620>
 800278c:	2520      	movs	r5, #32
 800278e:	0023      	movs	r3, r4
 8002790:	1bed      	subs	r5, r5, r7
 8002792:	0001      	movs	r1, r0
 8002794:	40a8      	lsls	r0, r5
 8002796:	40ab      	lsls	r3, r5
 8002798:	40f9      	lsrs	r1, r7
 800279a:	1e45      	subs	r5, r0, #1
 800279c:	41a8      	sbcs	r0, r5
 800279e:	430b      	orrs	r3, r1
 80027a0:	40fc      	lsrs	r4, r7
 80027a2:	4318      	orrs	r0, r3
 80027a4:	465b      	mov	r3, fp
 80027a6:	1b1b      	subs	r3, r3, r4
 80027a8:	469b      	mov	fp, r3
 80027aa:	e739      	b.n	8002620 <__aeabi_dsub+0x468>
 80027ac:	4666      	mov	r6, ip
 80027ae:	2501      	movs	r5, #1
 80027b0:	e562      	b.n	8002278 <__aeabi_dsub+0xc0>
 80027b2:	001f      	movs	r7, r3
 80027b4:	4659      	mov	r1, fp
 80027b6:	3f20      	subs	r7, #32
 80027b8:	40f9      	lsrs	r1, r7
 80027ba:	468c      	mov	ip, r1
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d005      	beq.n	80027cc <__aeabi_dsub+0x614>
 80027c0:	2740      	movs	r7, #64	@ 0x40
 80027c2:	4659      	mov	r1, fp
 80027c4:	1afb      	subs	r3, r7, r3
 80027c6:	4099      	lsls	r1, r3
 80027c8:	430a      	orrs	r2, r1
 80027ca:	4692      	mov	sl, r2
 80027cc:	4657      	mov	r7, sl
 80027ce:	1e7b      	subs	r3, r7, #1
 80027d0:	419f      	sbcs	r7, r3
 80027d2:	4663      	mov	r3, ip
 80027d4:	431f      	orrs	r7, r3
 80027d6:	e5c1      	b.n	800235c <__aeabi_dsub+0x1a4>
 80027d8:	003b      	movs	r3, r7
 80027da:	0025      	movs	r5, r4
 80027dc:	3b20      	subs	r3, #32
 80027de:	40dd      	lsrs	r5, r3
 80027e0:	2f20      	cmp	r7, #32
 80027e2:	d004      	beq.n	80027ee <__aeabi_dsub+0x636>
 80027e4:	2340      	movs	r3, #64	@ 0x40
 80027e6:	1bdb      	subs	r3, r3, r7
 80027e8:	409c      	lsls	r4, r3
 80027ea:	4320      	orrs	r0, r4
 80027ec:	4680      	mov	r8, r0
 80027ee:	4640      	mov	r0, r8
 80027f0:	1e43      	subs	r3, r0, #1
 80027f2:	4198      	sbcs	r0, r3
 80027f4:	4328      	orrs	r0, r5
 80027f6:	e713      	b.n	8002620 <__aeabi_dsub+0x468>
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d09d      	beq.n	8002738 <__aeabi_dsub+0x580>
 80027fc:	2601      	movs	r6, #1
 80027fe:	4663      	mov	r3, ip
 8002800:	465c      	mov	r4, fp
 8002802:	4690      	mov	r8, r2
 8002804:	401e      	ands	r6, r3
 8002806:	e6db      	b.n	80025c0 <__aeabi_dsub+0x408>
 8002808:	1a17      	subs	r7, r2, r0
 800280a:	465b      	mov	r3, fp
 800280c:	42ba      	cmp	r2, r7
 800280e:	4192      	sbcs	r2, r2
 8002810:	1b1c      	subs	r4, r3, r4
 8002812:	4252      	negs	r2, r2
 8002814:	1aa4      	subs	r4, r4, r2
 8002816:	0223      	lsls	r3, r4, #8
 8002818:	d4c8      	bmi.n	80027ac <__aeabi_dsub+0x5f4>
 800281a:	0763      	lsls	r3, r4, #29
 800281c:	08ff      	lsrs	r7, r7, #3
 800281e:	431f      	orrs	r7, r3
 8002820:	4666      	mov	r6, ip
 8002822:	2301      	movs	r3, #1
 8002824:	08e5      	lsrs	r5, r4, #3
 8002826:	e71f      	b.n	8002668 <__aeabi_dsub+0x4b0>
 8002828:	001d      	movs	r5, r3
 800282a:	2400      	movs	r4, #0
 800282c:	2700      	movs	r7, #0
 800282e:	e657      	b.n	80024e0 <__aeabi_dsub+0x328>
 8002830:	465c      	mov	r4, fp
 8002832:	08d0      	lsrs	r0, r2, #3
 8002834:	e66a      	b.n	800250c <__aeabi_dsub+0x354>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x684>
 800283a:	e737      	b.n	80026ac <__aeabi_dsub+0x4f4>
 800283c:	4653      	mov	r3, sl
 800283e:	08c0      	lsrs	r0, r0, #3
 8002840:	0767      	lsls	r7, r4, #29
 8002842:	4307      	orrs	r7, r0
 8002844:	08e5      	lsrs	r5, r4, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x694>
 800284a:	e5b1      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	421d      	tst	r5, r3
 8002852:	d008      	beq.n	8002866 <__aeabi_dsub+0x6ae>
 8002854:	4659      	mov	r1, fp
 8002856:	08c8      	lsrs	r0, r1, #3
 8002858:	4218      	tst	r0, r3
 800285a:	d104      	bne.n	8002866 <__aeabi_dsub+0x6ae>
 800285c:	08d2      	lsrs	r2, r2, #3
 800285e:	0749      	lsls	r1, r1, #29
 8002860:	430a      	orrs	r2, r1
 8002862:	0017      	movs	r7, r2
 8002864:	0005      	movs	r5, r0
 8002866:	0f7b      	lsrs	r3, r7, #29
 8002868:	00ff      	lsls	r7, r7, #3
 800286a:	08ff      	lsrs	r7, r7, #3
 800286c:	075b      	lsls	r3, r3, #29
 800286e:	431f      	orrs	r7, r3
 8002870:	e59e      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 8002872:	08c0      	lsrs	r0, r0, #3
 8002874:	0763      	lsls	r3, r4, #29
 8002876:	4318      	orrs	r0, r3
 8002878:	08e5      	lsrs	r5, r4, #3
 800287a:	2900      	cmp	r1, #0
 800287c:	d053      	beq.n	8002926 <__aeabi_dsub+0x76e>
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	031b      	lsls	r3, r3, #12
 8002882:	421d      	tst	r5, r3
 8002884:	d00a      	beq.n	800289c <__aeabi_dsub+0x6e4>
 8002886:	4659      	mov	r1, fp
 8002888:	08cc      	lsrs	r4, r1, #3
 800288a:	421c      	tst	r4, r3
 800288c:	d106      	bne.n	800289c <__aeabi_dsub+0x6e4>
 800288e:	2601      	movs	r6, #1
 8002890:	4663      	mov	r3, ip
 8002892:	0025      	movs	r5, r4
 8002894:	08d0      	lsrs	r0, r2, #3
 8002896:	0749      	lsls	r1, r1, #29
 8002898:	4308      	orrs	r0, r1
 800289a:	401e      	ands	r6, r3
 800289c:	0f47      	lsrs	r7, r0, #29
 800289e:	00c0      	lsls	r0, r0, #3
 80028a0:	08c0      	lsrs	r0, r0, #3
 80028a2:	077f      	lsls	r7, r7, #29
 80028a4:	4307      	orrs	r7, r0
 80028a6:	e583      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 80028a8:	1883      	adds	r3, r0, r2
 80028aa:	4293      	cmp	r3, r2
 80028ac:	4192      	sbcs	r2, r2
 80028ae:	445c      	add	r4, fp
 80028b0:	4252      	negs	r2, r2
 80028b2:	18a5      	adds	r5, r4, r2
 80028b4:	022a      	lsls	r2, r5, #8
 80028b6:	d500      	bpl.n	80028ba <__aeabi_dsub+0x702>
 80028b8:	e724      	b.n	8002704 <__aeabi_dsub+0x54c>
 80028ba:	076f      	lsls	r7, r5, #29
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	431f      	orrs	r7, r3
 80028c0:	08ed      	lsrs	r5, r5, #3
 80028c2:	2301      	movs	r3, #1
 80028c4:	e6d0      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	000007ff 	.word	0x000007ff
 80028cc:	000007fe 	.word	0x000007fe
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	465b      	mov	r3, fp
 80028d6:	08d2      	lsrs	r2, r2, #3
 80028d8:	075f      	lsls	r7, r3, #29
 80028da:	4666      	mov	r6, ip
 80028dc:	4317      	orrs	r7, r2
 80028de:	08dd      	lsrs	r5, r3, #3
 80028e0:	e566      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 80028e2:	0025      	movs	r5, r4
 80028e4:	3b20      	subs	r3, #32
 80028e6:	40dd      	lsrs	r5, r3
 80028e8:	4663      	mov	r3, ip
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d005      	beq.n	80028fa <__aeabi_dsub+0x742>
 80028ee:	2340      	movs	r3, #64	@ 0x40
 80028f0:	4661      	mov	r1, ip
 80028f2:	1a5b      	subs	r3, r3, r1
 80028f4:	409c      	lsls	r4, r3
 80028f6:	4320      	orrs	r0, r4
 80028f8:	4680      	mov	r8, r0
 80028fa:	4647      	mov	r7, r8
 80028fc:	1e7b      	subs	r3, r7, #1
 80028fe:	419f      	sbcs	r7, r3
 8002900:	432f      	orrs	r7, r5
 8002902:	e5a0      	b.n	8002446 <__aeabi_dsub+0x28e>
 8002904:	2120      	movs	r1, #32
 8002906:	2700      	movs	r7, #0
 8002908:	1a09      	subs	r1, r1, r0
 800290a:	e4d2      	b.n	80022b2 <__aeabi_dsub+0xfa>
 800290c:	2f00      	cmp	r7, #0
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x75a>
 8002910:	e713      	b.n	800273a <__aeabi_dsub+0x582>
 8002912:	465c      	mov	r4, fp
 8002914:	0017      	movs	r7, r2
 8002916:	2500      	movs	r5, #0
 8002918:	e5f6      	b.n	8002508 <__aeabi_dsub+0x350>
 800291a:	08d7      	lsrs	r7, r2, #3
 800291c:	0749      	lsls	r1, r1, #29
 800291e:	2302      	movs	r3, #2
 8002920:	430f      	orrs	r7, r1
 8002922:	092d      	lsrs	r5, r5, #4
 8002924:	e6a0      	b.n	8002668 <__aeabi_dsub+0x4b0>
 8002926:	0007      	movs	r7, r0
 8002928:	e542      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800292a:	465b      	mov	r3, fp
 800292c:	2601      	movs	r6, #1
 800292e:	075f      	lsls	r7, r3, #29
 8002930:	08dd      	lsrs	r5, r3, #3
 8002932:	4663      	mov	r3, ip
 8002934:	08d2      	lsrs	r2, r2, #3
 8002936:	4317      	orrs	r7, r2
 8002938:	401e      	ands	r6, r3
 800293a:	e539      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 800293c:	465b      	mov	r3, fp
 800293e:	08d2      	lsrs	r2, r2, #3
 8002940:	075f      	lsls	r7, r3, #29
 8002942:	4317      	orrs	r7, r2
 8002944:	08dd      	lsrs	r5, r3, #3
 8002946:	e533      	b.n	80023b0 <__aeabi_dsub+0x1f8>
 8002948:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <__aeabi_dsub+0x80c>)
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	4022      	ands	r2, r4
 800294e:	0757      	lsls	r7, r2, #29
 8002950:	0252      	lsls	r2, r2, #9
 8002952:	2501      	movs	r5, #1
 8002954:	431f      	orrs	r7, r3
 8002956:	0b14      	lsrs	r4, r2, #12
 8002958:	e5c2      	b.n	80024e0 <__aeabi_dsub+0x328>
 800295a:	000e      	movs	r6, r1
 800295c:	2001      	movs	r0, #1
 800295e:	e65f      	b.n	8002620 <__aeabi_dsub+0x468>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <__aeabi_dsub+0x7c8>
 8002964:	464b      	mov	r3, r9
 8002966:	1b5b      	subs	r3, r3, r5
 8002968:	469c      	mov	ip, r3
 800296a:	2d00      	cmp	r5, #0
 800296c:	d100      	bne.n	8002970 <__aeabi_dsub+0x7b8>
 800296e:	e548      	b.n	8002402 <__aeabi_dsub+0x24a>
 8002970:	2701      	movs	r7, #1
 8002972:	2b38      	cmp	r3, #56	@ 0x38
 8002974:	dd00      	ble.n	8002978 <__aeabi_dsub+0x7c0>
 8002976:	e566      	b.n	8002446 <__aeabi_dsub+0x28e>
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	431c      	orrs	r4, r3
 800297e:	e550      	b.n	8002422 <__aeabi_dsub+0x26a>
 8002980:	1c6b      	adds	r3, r5, #1
 8002982:	4d11      	ldr	r5, [pc, #68]	@ (80029c8 <__aeabi_dsub+0x810>)
 8002984:	422b      	tst	r3, r5
 8002986:	d000      	beq.n	800298a <__aeabi_dsub+0x7d2>
 8002988:	e673      	b.n	8002672 <__aeabi_dsub+0x4ba>
 800298a:	4659      	mov	r1, fp
 800298c:	0023      	movs	r3, r4
 800298e:	4311      	orrs	r1, r2
 8002990:	468a      	mov	sl, r1
 8002992:	4303      	orrs	r3, r0
 8002994:	e600      	b.n	8002598 <__aeabi_dsub+0x3e0>
 8002996:	0767      	lsls	r7, r4, #29
 8002998:	08c0      	lsrs	r0, r0, #3
 800299a:	2300      	movs	r3, #0
 800299c:	4307      	orrs	r7, r0
 800299e:	08e5      	lsrs	r5, r4, #3
 80029a0:	e662      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80029a2:	0764      	lsls	r4, r4, #29
 80029a4:	08ff      	lsrs	r7, r7, #3
 80029a6:	4327      	orrs	r7, r4
 80029a8:	0905      	lsrs	r5, r0, #4
 80029aa:	e65d      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	0749      	lsls	r1, r1, #29
 80029b0:	4311      	orrs	r1, r2
 80029b2:	000f      	movs	r7, r1
 80029b4:	2302      	movs	r3, #2
 80029b6:	092d      	lsrs	r5, r5, #4
 80029b8:	e656      	b.n	8002668 <__aeabi_dsub+0x4b0>
 80029ba:	0007      	movs	r7, r0
 80029bc:	e5a4      	b.n	8002508 <__aeabi_dsub+0x350>
 80029be:	0038      	movs	r0, r7
 80029c0:	e48f      	b.n	80022e2 <__aeabi_dsub+0x12a>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	ff7fffff 	.word	0xff7fffff
 80029c8:	000007fe 	.word	0x000007fe

080029cc <__aeabi_dcmpun>:
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	46c6      	mov	lr, r8
 80029d0:	031e      	lsls	r6, r3, #12
 80029d2:	0b36      	lsrs	r6, r6, #12
 80029d4:	46b0      	mov	r8, r6
 80029d6:	4e0d      	ldr	r6, [pc, #52]	@ (8002a0c <__aeabi_dcmpun+0x40>)
 80029d8:	030c      	lsls	r4, r1, #12
 80029da:	004d      	lsls	r5, r1, #1
 80029dc:	005f      	lsls	r7, r3, #1
 80029de:	b500      	push	{lr}
 80029e0:	0b24      	lsrs	r4, r4, #12
 80029e2:	0d6d      	lsrs	r5, r5, #21
 80029e4:	0d7f      	lsrs	r7, r7, #21
 80029e6:	42b5      	cmp	r5, r6
 80029e8:	d00b      	beq.n	8002a02 <__aeabi_dcmpun+0x36>
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__aeabi_dcmpun+0x40>)
 80029ec:	2000      	movs	r0, #0
 80029ee:	428f      	cmp	r7, r1
 80029f0:	d104      	bne.n	80029fc <__aeabi_dcmpun+0x30>
 80029f2:	4646      	mov	r6, r8
 80029f4:	4316      	orrs	r6, r2
 80029f6:	0030      	movs	r0, r6
 80029f8:	1e43      	subs	r3, r0, #1
 80029fa:	4198      	sbcs	r0, r3
 80029fc:	bc80      	pop	{r7}
 80029fe:	46b8      	mov	r8, r7
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a02:	4304      	orrs	r4, r0
 8002a04:	2001      	movs	r0, #1
 8002a06:	2c00      	cmp	r4, #0
 8002a08:	d1f8      	bne.n	80029fc <__aeabi_dcmpun+0x30>
 8002a0a:	e7ee      	b.n	80029ea <__aeabi_dcmpun+0x1e>
 8002a0c:	000007ff 	.word	0x000007ff

08002a10 <__aeabi_d2iz>:
 8002a10:	000b      	movs	r3, r1
 8002a12:	0002      	movs	r2, r0
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4d16      	ldr	r5, [pc, #88]	@ (8002a70 <__aeabi_d2iz+0x60>)
 8002a18:	030c      	lsls	r4, r1, #12
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	0049      	lsls	r1, r1, #1
 8002a1e:	2000      	movs	r0, #0
 8002a20:	9200      	str	r2, [sp, #0]
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	0b24      	lsrs	r4, r4, #12
 8002a26:	0d49      	lsrs	r1, r1, #21
 8002a28:	0fde      	lsrs	r6, r3, #31
 8002a2a:	42a9      	cmp	r1, r5
 8002a2c:	dd04      	ble.n	8002a38 <__aeabi_d2iz+0x28>
 8002a2e:	4811      	ldr	r0, [pc, #68]	@ (8002a74 <__aeabi_d2iz+0x64>)
 8002a30:	4281      	cmp	r1, r0
 8002a32:	dd03      	ble.n	8002a3c <__aeabi_d2iz+0x2c>
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <__aeabi_d2iz+0x68>)
 8002a36:	18f0      	adds	r0, r6, r3
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	2080      	movs	r0, #128	@ 0x80
 8002a3e:	0340      	lsls	r0, r0, #13
 8002a40:	4320      	orrs	r0, r4
 8002a42:	4c0e      	ldr	r4, [pc, #56]	@ (8002a7c <__aeabi_d2iz+0x6c>)
 8002a44:	1a64      	subs	r4, r4, r1
 8002a46:	2c1f      	cmp	r4, #31
 8002a48:	dd08      	ble.n	8002a5c <__aeabi_d2iz+0x4c>
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <__aeabi_d2iz+0x70>)
 8002a4c:	1a5b      	subs	r3, r3, r1
 8002a4e:	40d8      	lsrs	r0, r3
 8002a50:	0003      	movs	r3, r0
 8002a52:	4258      	negs	r0, r3
 8002a54:	2e00      	cmp	r6, #0
 8002a56:	d1ef      	bne.n	8002a38 <__aeabi_d2iz+0x28>
 8002a58:	0018      	movs	r0, r3
 8002a5a:	e7ed      	b.n	8002a38 <__aeabi_d2iz+0x28>
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <__aeabi_d2iz+0x74>)
 8002a5e:	9a00      	ldr	r2, [sp, #0]
 8002a60:	469c      	mov	ip, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	4461      	add	r1, ip
 8002a66:	408b      	lsls	r3, r1
 8002a68:	40e2      	lsrs	r2, r4
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	e7f1      	b.n	8002a52 <__aeabi_d2iz+0x42>
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	000003fe 	.word	0x000003fe
 8002a74:	0000041d 	.word	0x0000041d
 8002a78:	7fffffff 	.word	0x7fffffff
 8002a7c:	00000433 	.word	0x00000433
 8002a80:	00000413 	.word	0x00000413
 8002a84:	fffffbed 	.word	0xfffffbed

08002a88 <__aeabi_i2d>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d016      	beq.n	8002abc <__aeabi_i2d+0x34>
 8002a8e:	17c3      	asrs	r3, r0, #31
 8002a90:	18c5      	adds	r5, r0, r3
 8002a92:	405d      	eors	r5, r3
 8002a94:	0fc4      	lsrs	r4, r0, #31
 8002a96:	0028      	movs	r0, r5
 8002a98:	f000 f890 	bl	8002bbc <__clzsi2>
 8002a9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <__aeabi_i2d+0x58>)
 8002a9e:	1a1b      	subs	r3, r3, r0
 8002aa0:	055b      	lsls	r3, r3, #21
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	280a      	cmp	r0, #10
 8002aa6:	dc14      	bgt.n	8002ad2 <__aeabi_i2d+0x4a>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	002e      	movs	r6, r5
 8002aac:	3215      	adds	r2, #21
 8002aae:	4096      	lsls	r6, r2
 8002ab0:	220b      	movs	r2, #11
 8002ab2:	1a12      	subs	r2, r2, r0
 8002ab4:	40d5      	lsrs	r5, r2
 8002ab6:	032d      	lsls	r5, r5, #12
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	e003      	b.n	8002ac4 <__aeabi_i2d+0x3c>
 8002abc:	2400      	movs	r4, #0
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2500      	movs	r5, #0
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	432b      	orrs	r3, r5
 8002ac8:	07e4      	lsls	r4, r4, #31
 8002aca:	4323      	orrs	r3, r4
 8002acc:	0030      	movs	r0, r6
 8002ace:	0019      	movs	r1, r3
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	380b      	subs	r0, #11
 8002ad4:	4085      	lsls	r5, r0
 8002ad6:	032d      	lsls	r5, r5, #12
 8002ad8:	2600      	movs	r6, #0
 8002ada:	0b2d      	lsrs	r5, r5, #12
 8002adc:	e7f2      	b.n	8002ac4 <__aeabi_i2d+0x3c>
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	0000041e 	.word	0x0000041e

08002ae4 <__aeabi_ui2d>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	1e04      	subs	r4, r0, #0
 8002ae8:	d010      	beq.n	8002b0c <__aeabi_ui2d+0x28>
 8002aea:	f000 f867 	bl	8002bbc <__clzsi2>
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <__aeabi_ui2d+0x44>)
 8002af0:	1a1b      	subs	r3, r3, r0
 8002af2:	055b      	lsls	r3, r3, #21
 8002af4:	0d5b      	lsrs	r3, r3, #21
 8002af6:	280a      	cmp	r0, #10
 8002af8:	dc0f      	bgt.n	8002b1a <__aeabi_ui2d+0x36>
 8002afa:	220b      	movs	r2, #11
 8002afc:	0021      	movs	r1, r4
 8002afe:	1a12      	subs	r2, r2, r0
 8002b00:	40d1      	lsrs	r1, r2
 8002b02:	3015      	adds	r0, #21
 8002b04:	030a      	lsls	r2, r1, #12
 8002b06:	4084      	lsls	r4, r0
 8002b08:	0b12      	lsrs	r2, r2, #12
 8002b0a:	e001      	b.n	8002b10 <__aeabi_ui2d+0x2c>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	051b      	lsls	r3, r3, #20
 8002b12:	4313      	orrs	r3, r2
 8002b14:	0020      	movs	r0, r4
 8002b16:	0019      	movs	r1, r3
 8002b18:	bd10      	pop	{r4, pc}
 8002b1a:	0022      	movs	r2, r4
 8002b1c:	380b      	subs	r0, #11
 8002b1e:	4082      	lsls	r2, r0
 8002b20:	0312      	lsls	r2, r2, #12
 8002b22:	2400      	movs	r4, #0
 8002b24:	0b12      	lsrs	r2, r2, #12
 8002b26:	e7f3      	b.n	8002b10 <__aeabi_ui2d+0x2c>
 8002b28:	0000041e 	.word	0x0000041e

08002b2c <__aeabi_f2d>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	0242      	lsls	r2, r0, #9
 8002b30:	0043      	lsls	r3, r0, #1
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	20fe      	movs	r0, #254	@ 0xfe
 8002b36:	0e1b      	lsrs	r3, r3, #24
 8002b38:	1c59      	adds	r1, r3, #1
 8002b3a:	0a55      	lsrs	r5, r2, #9
 8002b3c:	4208      	tst	r0, r1
 8002b3e:	d00c      	beq.n	8002b5a <__aeabi_f2d+0x2e>
 8002b40:	21e0      	movs	r1, #224	@ 0xe0
 8002b42:	0089      	lsls	r1, r1, #2
 8002b44:	468c      	mov	ip, r1
 8002b46:	076d      	lsls	r5, r5, #29
 8002b48:	0b12      	lsrs	r2, r2, #12
 8002b4a:	4463      	add	r3, ip
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	07e4      	lsls	r4, r4, #31
 8002b52:	4323      	orrs	r3, r4
 8002b54:	0028      	movs	r0, r5
 8002b56:	0019      	movs	r1, r3
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d114      	bne.n	8002b88 <__aeabi_f2d+0x5c>
 8002b5e:	2d00      	cmp	r5, #0
 8002b60:	d01b      	beq.n	8002b9a <__aeabi_f2d+0x6e>
 8002b62:	0028      	movs	r0, r5
 8002b64:	f000 f82a 	bl	8002bbc <__clzsi2>
 8002b68:	280a      	cmp	r0, #10
 8002b6a:	dc1c      	bgt.n	8002ba6 <__aeabi_f2d+0x7a>
 8002b6c:	230b      	movs	r3, #11
 8002b6e:	002a      	movs	r2, r5
 8002b70:	1a1b      	subs	r3, r3, r0
 8002b72:	40da      	lsrs	r2, r3
 8002b74:	0003      	movs	r3, r0
 8002b76:	3315      	adds	r3, #21
 8002b78:	409d      	lsls	r5, r3
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <__aeabi_f2d+0x88>)
 8002b7c:	0312      	lsls	r2, r2, #12
 8002b7e:	1a1b      	subs	r3, r3, r0
 8002b80:	055b      	lsls	r3, r3, #21
 8002b82:	0b12      	lsrs	r2, r2, #12
 8002b84:	0d5b      	lsrs	r3, r3, #21
 8002b86:	e7e1      	b.n	8002b4c <__aeabi_f2d+0x20>
 8002b88:	2d00      	cmp	r5, #0
 8002b8a:	d009      	beq.n	8002ba0 <__aeabi_f2d+0x74>
 8002b8c:	0b13      	lsrs	r3, r2, #12
 8002b8e:	2280      	movs	r2, #128	@ 0x80
 8002b90:	0312      	lsls	r2, r2, #12
 8002b92:	431a      	orrs	r2, r3
 8002b94:	076d      	lsls	r5, r5, #29
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <__aeabi_f2d+0x8c>)
 8002b98:	e7d8      	b.n	8002b4c <__aeabi_f2d+0x20>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	e7d5      	b.n	8002b4c <__aeabi_f2d+0x20>
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <__aeabi_f2d+0x8c>)
 8002ba4:	e7d2      	b.n	8002b4c <__aeabi_f2d+0x20>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	002a      	movs	r2, r5
 8002baa:	3b0b      	subs	r3, #11
 8002bac:	409a      	lsls	r2, r3
 8002bae:	2500      	movs	r5, #0
 8002bb0:	e7e3      	b.n	8002b7a <__aeabi_f2d+0x4e>
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	00000389 	.word	0x00000389
 8002bb8:	000007ff 	.word	0x000007ff

08002bbc <__clzsi2>:
 8002bbc:	211c      	movs	r1, #28
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	4298      	cmp	r0, r3
 8002bc4:	d301      	bcc.n	8002bca <__clzsi2+0xe>
 8002bc6:	0c00      	lsrs	r0, r0, #16
 8002bc8:	3910      	subs	r1, #16
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	d301      	bcc.n	8002bd4 <__clzsi2+0x18>
 8002bd0:	0a00      	lsrs	r0, r0, #8
 8002bd2:	3908      	subs	r1, #8
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	4298      	cmp	r0, r3
 8002bd8:	d301      	bcc.n	8002bde <__clzsi2+0x22>
 8002bda:	0900      	lsrs	r0, r0, #4
 8002bdc:	3904      	subs	r1, #4
 8002bde:	a202      	add	r2, pc, #8	@ (adr r2, 8002be8 <__clzsi2+0x2c>)
 8002be0:	5c10      	ldrb	r0, [r2, r0]
 8002be2:	1840      	adds	r0, r0, r1
 8002be4:	4770      	bx	lr
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	02020304 	.word	0x02020304
 8002bec:	01010101 	.word	0x01010101
	...

08002bf8 <__clzdi2>:
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	d103      	bne.n	8002c06 <__clzdi2+0xe>
 8002bfe:	f7ff ffdd 	bl	8002bbc <__clzsi2>
 8002c02:	3020      	adds	r0, #32
 8002c04:	e002      	b.n	8002c0c <__clzdi2+0x14>
 8002c06:	0008      	movs	r0, r1
 8002c08:	f7ff ffd8 	bl	8002bbc <__clzsi2>
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)

08002c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c16:	f000 fb4b 	bl	80032b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c1a:	f000 f85b 	bl	8002cd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1e:	f000 f963 	bl	8002ee8 <MX_GPIO_Init>
  MX_ADC_Init();
 8002c22:	f000 f8c3 	bl	8002dac <MX_ADC_Init>
  MX_USART2_UART_Init();
 8002c26:	f000 f92f 	bl	8002e88 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
  while (1)
    {
      HAL_ADC_Start(&hadc);
 8002c2a:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <main+0xa8>)
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fd47 	bl	80036c0 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002c32:	2301      	movs	r3, #1
 8002c34:	425a      	negs	r2, r3
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <main+0xa8>)
 8002c38:	0011      	movs	r1, r2
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 fdd4 	bl	80037e8 <HAL_ADC_PollForConversion>
      adc_raw = HAL_ADC_GetValue(&hadc);
 8002c40:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <main+0xa8>)
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fe6c 	bl	8003920 <HAL_ADC_GetValue>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <main+0xac>)
 8002c4e:	801a      	strh	r2, [r3, #0]
      HAL_ADC_Stop(&hadc);
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <main+0xa8>)
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 fd88 	bl	8003768 <HAL_ADC_Stop>

      float voltage = ((float)adc_raw / ADC_RESOLUTION) * VREF;
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <main+0xac>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7fd ff7f 	bl	8000b60 <__aeabi_ui2f>
 8002c62:	1c03      	adds	r3, r0, #0
 8002c64:	4916      	ldr	r1, [pc, #88]	@ (8002cc0 <main+0xb0>)
 8002c66:	1c18      	adds	r0, r3, #0
 8002c68:	f7fd fd0a 	bl	8000680 <__aeabi_fdiv>
 8002c6c:	1c03      	adds	r3, r0, #0
 8002c6e:	4915      	ldr	r1, [pc, #84]	@ (8002cc4 <main+0xb4>)
 8002c70:	1c18      	adds	r0, r3, #0
 8002c72:	f7fd fe1b 	bl	80008ac <__aeabi_fmul>
 8002c76:	1c03      	adds	r3, r0, #0
 8002c78:	607b      	str	r3, [r7, #4]
      int len = snprintf(msg, sizeof(msg), "ADC_IN6: %.3f V\r\n", voltage);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff56 	bl	8002b2c <__aeabi_f2d>
 8002c80:	0002      	movs	r2, r0
 8002c82:	000b      	movs	r3, r1
 8002c84:	4910      	ldr	r1, [pc, #64]	@ (8002cc8 <main+0xb8>)
 8002c86:	4811      	ldr	r0, [pc, #68]	@ (8002ccc <main+0xbc>)
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	f003 fcf0 	bl	8006674 <sniprintf>
 8002c94:	0003      	movs	r3, r0
 8002c96:	603b      	str	r3, [r7, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	490a      	ldr	r1, [pc, #40]	@ (8002ccc <main+0xbc>)
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <main+0xc0>)
 8002ca4:	f002 faa8 	bl	80051f8 <HAL_UART_Transmit>

      HAL_Delay(1000);
 8002ca8:	23fa      	movs	r3, #250	@ 0xfa
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fb6f 	bl	8003390 <HAL_Delay>
    {
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	e7b9      	b.n	8002c2a <main+0x1a>
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	200001f0 	.word	0x200001f0
 8002cbc:	20000314 	.word	0x20000314
 8002cc0:	457ff000 	.word	0x457ff000
 8002cc4:	40400000 	.word	0x40400000
 8002cc8:	08008a50 	.word	0x08008a50
 8002ccc:	200002d4 	.word	0x200002d4
 8002cd0:	2000024c 	.word	0x2000024c

08002cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b099      	sub	sp, #100	@ 0x64
 8002cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cda:	242c      	movs	r4, #44	@ 0x2c
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	0018      	movs	r0, r3
 8002ce0:	2334      	movs	r3, #52	@ 0x34
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f003 fd47 	bl	8006778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cea:	2318      	movs	r3, #24
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	0018      	movs	r0, r3
 8002cf0:	2314      	movs	r3, #20
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f003 fd3f 	bl	8006778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cfa:	003b      	movs	r3, r7
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	2318      	movs	r3, #24
 8002d00:	001a      	movs	r2, r3
 8002d02:	2100      	movs	r1, #0
 8002d04:	f003 fd38 	bl	8006778 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d08:	4b26      	ldr	r3, [pc, #152]	@ (8002da4 <SystemClock_Config+0xd0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	@ (8002da8 <SystemClock_Config+0xd4>)
 8002d0e:	401a      	ands	r2, r3
 8002d10:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <SystemClock_Config+0xd0>)
 8002d12:	2180      	movs	r1, #128	@ 0x80
 8002d14:	0109      	lsls	r1, r1, #4
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	2210      	movs	r2, #16
 8002d20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2201      	movs	r2, #1
 8002d26:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	22a0      	movs	r2, #160	@ 0xa0
 8002d32:	0212      	lsls	r2, r2, #8
 8002d34:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f001 fb5a 	bl	80043f8 <HAL_RCC_OscConfig>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002d48:	f000 f8e4 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d4c:	2118      	movs	r1, #24
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	220f      	movs	r2, #15
 8002d52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2100      	movs	r1, #0
 8002d70:	0018      	movs	r0, r3
 8002d72:	f001 febd 	bl	8004af0 <HAL_RCC_ClockConfig>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002d7a:	f000 f8cb 	bl	8002f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d7e:	003b      	movs	r3, r7
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d84:	003b      	movs	r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d8a:	003b      	movs	r3, r7
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f002 f8b3 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002d96:	f000 f8bd 	bl	8002f14 <Error_Handler>
  }
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b019      	add	sp, #100	@ 0x64
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	40007000 	.word	0x40007000
 8002da8:	ffffe7ff 	.word	0xffffe7ff

08002dac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002db2:	003b      	movs	r3, r7
 8002db4:	0018      	movs	r0, r3
 8002db6:	2308      	movs	r3, #8
 8002db8:	001a      	movs	r2, r3
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f003 fcdc 	bl	8006778 <memset>
  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e80 <MX_ADC_Init+0xd4>)
 8002dc4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dce:	22c0      	movs	r2, #192	@ 0xc0
 8002dd0:	0612      	lsls	r2, r2, #24
 8002dd2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002dd4:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8002dda:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002de6:	4b25      	ldr	r3, [pc, #148]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002dec:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dee:	2220      	movs	r2, #32
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002df4:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002df6:	2221      	movs	r2, #33	@ 0x21
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e04:	22c2      	movs	r2, #194	@ 0xc2
 8002e06:	32ff      	adds	r2, #255	@ 0xff
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e0c:	222c      	movs	r2, #44	@ 0x2c
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e14:	2204      	movs	r2, #4
 8002e16:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e18:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 fad0 	bl	80033d8 <HAL_ADC_Init>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002e3c:	f000 f86a 	bl	8002f14 <Error_Handler>
  }
  // 🧪 Perform ADC Calibration
   if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e42:	2100      	movs	r1, #0
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 ffdd 	bl	8003e04 <HAL_ADCEx_Calibration_Start>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_ADC_Init+0xa6>
   {
     Error_Handler();
 8002e4e:	f000 f861 	bl	8002f14 <Error_Handler>
   }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e52:	003b      	movs	r3, r7
 8002e54:	4a0b      	ldr	r2, [pc, #44]	@ (8002e84 <MX_ADC_Init+0xd8>)
 8002e56:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e58:	003b      	movs	r3, r7
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	0152      	lsls	r2, r2, #5
 8002e5e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e60:	003a      	movs	r2, r7
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_ADC_Init+0xd0>)
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fe28 	bl	8003abc <HAL_ADC_ConfigChannel>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8002e70:	f000 f850 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200001f0 	.word	0x200001f0
 8002e80:	40012400 	.word	0x40012400
 8002e84:	18000040 	.word	0x18000040

08002e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002e8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ee4 <MX_USART2_UART_Init+0x5c>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e92:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002e94:	22e1      	movs	r2, #225	@ 0xe1
 8002e96:	0252      	lsls	r2, r2, #9
 8002e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eca:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <MX_USART2_UART_Init+0x58>)
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f002 f93f 	bl	8005150 <HAL_UART_Init>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ed6:	f000 f81d 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000024c 	.word	0x2000024c
 8002ee4:	40004400 	.word	0x40004400

08002ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <MX_GPIO_Init+0x28>)
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <MX_GPIO_Init+0x28>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <MX_GPIO_Init+0x28>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	40021000 	.word	0x40021000

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <HAL_MspInit+0x24>)
 8002f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_MspInit+0x24>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <HAL_MspInit+0x24>)
 8002f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <HAL_MspInit+0x24>)
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	0549      	lsls	r1, r1, #21
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b089      	sub	sp, #36	@ 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	240c      	movs	r4, #12
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	0018      	movs	r0, r3
 8002f56:	2314      	movs	r3, #20
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f003 fc0c 	bl	8006778 <memset>
  if(hadc->Instance==ADC1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <HAL_ADC_MspInit+0x80>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12a      	bne.n	8002fc0 <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f6a:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <HAL_ADC_MspInit+0x84>)
 8002f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f6e:	4b17      	ldr	r3, [pc, #92]	@ (8002fcc <HAL_ADC_MspInit+0x84>)
 8002f70:	2180      	movs	r1, #128	@ 0x80
 8002f72:	0089      	lsls	r1, r1, #2
 8002f74:	430a      	orrs	r2, r1
 8002f76:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <HAL_ADC_MspInit+0x84>)
 8002f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7c:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <HAL_ADC_MspInit+0x84>)
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_ADC_MspInit+0x84>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	2203      	movs	r2, #3
 8002f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	193a      	adds	r2, r7, r4
 8002fa4:	23a0      	movs	r3, #160	@ 0xa0
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f001 f8a6 	bl	80040fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	200c      	movs	r0, #12
 8002fb6:	f001 f86f 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002fba:	200c      	movs	r0, #12
 8002fbc:	f001 f881 	bl	80040c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b009      	add	sp, #36	@ 0x24
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	40012400 	.word	0x40012400
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	240c      	movs	r4, #12
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	0018      	movs	r0, r3
 8002fde:	2314      	movs	r3, #20
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f003 fbc8 	bl	8006778 <memset>
  if(huart->Instance==USART2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_UART_MspInit+0x80>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d129      	bne.n	8003046 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <HAL_UART_MspInit+0x84>)
 8002ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff6:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <HAL_UART_MspInit+0x84>)
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	0289      	lsls	r1, r1, #10
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <HAL_UART_MspInit+0x84>)
 8003002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003004:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <HAL_UART_MspInit+0x84>)
 8003006:	2101      	movs	r1, #1
 8003008:	430a      	orrs	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_UART_MspInit+0x84>)
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003018:	0021      	movs	r1, r4
 800301a:	187b      	adds	r3, r7, r1
 800301c:	220c      	movs	r2, #12
 800301e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2202      	movs	r2, #2
 8003024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2203      	movs	r2, #3
 8003030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2204      	movs	r2, #4
 8003036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	187a      	adds	r2, r7, r1
 800303a:	23a0      	movs	r3, #160	@ 0xa0
 800303c:	05db      	lsls	r3, r3, #23
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f001 f85b 	bl	80040fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b009      	add	sp, #36	@ 0x24
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	40004400 	.word	0x40004400
 8003054:	40021000 	.word	0x40021000

08003058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	e7fd      	b.n	800305c <NMI_Handler+0x4>

08003060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	e7fd      	b.n	8003064 <HardFault_Handler+0x4>

08003068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003080:	f000 f96a 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <ADC1_IRQHandler+0x14>)
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fc50 	bl	8003938 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	200001f0 	.word	0x200001f0

080030a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  return 1;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_kill>:

int _kill(int pid, int sig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ba:	f003 fbb7 	bl	800682c <__errno>
 80030be:	0003      	movs	r3, r0
 80030c0:	2216      	movs	r2, #22
 80030c2:	601a      	str	r2, [r3, #0]
  return -1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	425b      	negs	r3, r3
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_exit>:

void _exit (int status)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d8:	2301      	movs	r3, #1
 80030da:	425a      	negs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff ffe5 	bl	80030b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	e7fd      	b.n	80030e6 <_exit+0x16>

080030ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e00a      	b.n	8003112 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030fc:	e000      	b.n	8003100 <_read+0x16>
 80030fe:	bf00      	nop
 8003100:	0001      	movs	r1, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	60ba      	str	r2, [r7, #8]
 8003108:	b2ca      	uxtb	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	dbf0      	blt.n	80030fc <_read+0x12>
  }

  return len;
 800311a:	687b      	ldr	r3, [r7, #4]
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b006      	add	sp, #24
 8003122:	bd80      	pop	{r7, pc}

08003124 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e009      	b.n	800314a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	60ba      	str	r2, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	0018      	movs	r0, r3
 8003140:	e000      	b.n	8003144 <_write+0x20>
 8003142:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	dbf1      	blt.n	8003136 <_write+0x12>
  }
  return len;
 8003152:	687b      	ldr	r3, [r7, #4]
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b006      	add	sp, #24
 800315a:	bd80      	pop	{r7, pc}

0800315c <_close>:

int _close(int file)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003164:	2301      	movs	r3, #1
 8003166:	425b      	negs	r3, r3
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	0192      	lsls	r2, r2, #6
 8003180:	605a      	str	r2, [r3, #4]
  return 0;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <_isatty>:

int _isatty(int file)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003194:	2301      	movs	r3, #1
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}

0800319e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b004      	add	sp, #16
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <_sbrk+0x5c>)
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <_sbrk+0x60>)
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c8:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <_sbrk+0x64>)
 80031d2:	4a12      	ldr	r2, [pc, #72]	@ (800321c <_sbrk+0x68>)
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d6:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <_sbrk+0x64>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d207      	bcs.n	80031f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e4:	f003 fb22 	bl	800682c <__errno>
 80031e8:	0003      	movs	r3, r0
 80031ea:	220c      	movs	r2, #12
 80031ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	425b      	negs	r3, r3
 80031f2:	e009      	b.n	8003208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f4:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <_sbrk+0x64>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fa:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <_sbrk+0x64>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	18d2      	adds	r2, r2, r3
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <_sbrk+0x64>)
 8003204:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b006      	add	sp, #24
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20005000 	.word	0x20005000
 8003214:	00000400 	.word	0x00000400
 8003218:	20000318 	.word	0x20000318
 800321c:	20000470 	.word	0x20000470

08003220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800322c:	4813      	ldr	r0, [pc, #76]	@ (800327c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800322e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003230:	f7ff fff6 	bl	8003220 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003234:	4812      	ldr	r0, [pc, #72]	@ (8003280 <LoopForever+0x6>)
    LDR R1, [R0]
 8003236:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003238:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <LoopForever+0xa>)
    CMP R1, R2
 800323c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800323e:	d105      	bne.n	800324c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003240:	4811      	ldr	r0, [pc, #68]	@ (8003288 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003242:	4912      	ldr	r1, [pc, #72]	@ (800328c <LoopForever+0x12>)
    STR R1, [R0]
 8003244:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003246:	4812      	ldr	r0, [pc, #72]	@ (8003290 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003248:	4912      	ldr	r1, [pc, #72]	@ (8003294 <LoopForever+0x1a>)
    STR R1, [R0]
 800324a:	6001      	str	r1, [r0, #0]

0800324c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800324c:	4812      	ldr	r0, [pc, #72]	@ (8003298 <LoopForever+0x1e>)
  ldr r1, =_edata
 800324e:	4913      	ldr	r1, [pc, #76]	@ (800329c <LoopForever+0x22>)
  ldr r2, =_sidata
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <LoopForever+0x26>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003264:	4c10      	ldr	r4, [pc, #64]	@ (80032a8 <LoopForever+0x2e>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003272:	f003 fae1 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003276:	f7ff fccb 	bl	8002c10 <main>

0800327a <LoopForever>:

LoopForever:
    b LoopForever
 800327a:	e7fe      	b.n	800327a <LoopForever>
   ldr   r0, =_estack
 800327c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8003280:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003284:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003288:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800328c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003290:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003294:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800329c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80032a0:	08008f14 	.word	0x08008f14
  ldr r2, =_sbss
 80032a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80032a8:	2000046c 	.word	0x2000046c

080032ac <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <DMA1_Channel1_IRQHandler>
	...

080032b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032b6:	1dfb      	adds	r3, r7, #7
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_Init+0x3c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_Init+0x3c>)
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c8:	2003      	movs	r0, #3
 80032ca:	f000 f811 	bl	80032f0 <HAL_InitTick>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d003      	beq.n	80032da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e001      	b.n	80032de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032da:	f7ff fe21 	bl	8002f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b002      	add	sp, #8
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_InitTick+0x5c>)
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_InitTick+0x60>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	0019      	movs	r1, r3
 8003302:	23fa      	movs	r3, #250	@ 0xfa
 8003304:	0098      	lsls	r0, r3, #2
 8003306:	f7fc ff1b 	bl	8000140 <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	0019      	movs	r1, r3
 800330e:	0020      	movs	r0, r4
 8003310:	f7fc ff16 	bl	8000140 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fee3 	bl	80040e2 <HAL_SYSTICK_Config>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d001      	beq.n	8003324 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e00f      	b.n	8003344 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d80b      	bhi.n	8003342 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	2301      	movs	r3, #1
 800332e:	425b      	negs	r3, r3
 8003330:	2200      	movs	r2, #0
 8003332:	0018      	movs	r0, r3
 8003334:	f000 feb0 	bl	8004098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_InitTick+0x64>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b003      	add	sp, #12
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	20000000 	.word	0x20000000
 8003350:	20000008 	.word	0x20000008
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_IncTick+0x1c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	001a      	movs	r2, r3
 8003362:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_IncTick+0x20>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	18d2      	adds	r2, r2, r3
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_IncTick+0x20>)
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	20000008 	.word	0x20000008
 8003378:	2000031c 	.word	0x2000031c

0800337c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  return uwTick;
 8003380:	4b02      	ldr	r3, [pc, #8]	@ (800338c <HAL_GetTick+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	2000031c 	.word	0x2000031c

08003390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff fff0 	bl	800337c <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	d005      	beq.n	80033b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033aa:	4b0a      	ldr	r3, [pc, #40]	@ (80033d4 <HAL_Delay+0x44>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	001a      	movs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	f7ff ffe0 	bl	800337c <HAL_GetTick>
 80033bc:	0002      	movs	r2, r0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d8f7      	bhi.n	80033b8 <HAL_Delay+0x28>
  {
  }
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	20000008 	.word	0x20000008

080033d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e159      	b.n	800369e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2250      	movs	r2, #80	@ 0x50
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff fda0 	bl	8002f48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	2210      	movs	r2, #16
 800340e:	4013      	ands	r3, r2
 8003410:	2b10      	cmp	r3, #16
 8003412:	d005      	beq.n	8003420 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800341e:	d00b      	beq.n	8003438 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	2210      	movs	r2, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2250      	movs	r2, #80	@ 0x50
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e132      	b.n	800369e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	4a9a      	ldr	r2, [pc, #616]	@ (80036a8 <HAL_ADC_Init+0x2d0>)
 800343e:	4013      	ands	r3, r2
 8003440:	2202      	movs	r2, #2
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2203      	movs	r2, #3
 8003450:	4013      	ands	r3, r2
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_ADC_Init+0x90>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	4013      	ands	r3, r2
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADC_Init+0x90>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_ADC_Init+0x92>
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d149      	bne.n	8003502 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	23c0      	movs	r3, #192	@ 0xc0
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	429a      	cmp	r2, r3
 8003478:	d00b      	beq.n	8003492 <HAL_ADC_Init+0xba>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	429a      	cmp	r2, r3
 8003484:	d005      	beq.n	8003492 <HAL_ADC_Init+0xba>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	429a      	cmp	r2, r3
 8003490:	d111      	bne.n	80034b6 <HAL_ADC_Init+0xde>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	0892      	lsrs	r2, r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6919      	ldr	r1, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	e014      	b.n	80034e0 <HAL_ADC_Init+0x108>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0092      	lsls	r2, r2, #2
 80034c2:	0892      	lsrs	r2, r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	4b79      	ldr	r3, [pc, #484]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b78      	ldr	r3, [pc, #480]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 80034cc:	4978      	ldr	r1, [pc, #480]	@ (80036b0 <HAL_ADC_Init+0x2d8>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	4b76      	ldr	r3, [pc, #472]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4b74      	ldr	r3, [pc, #464]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2118      	movs	r1, #24
 80034ec:	438a      	bics	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68d9      	ldr	r1, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003502:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b69      	ldr	r3, [pc, #420]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 8003508:	496a      	ldr	r1, [pc, #424]	@ (80036b4 <HAL_ADC_Init+0x2dc>)
 800350a:	400a      	ands	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800350e:	4b67      	ldr	r3, [pc, #412]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	065a      	lsls	r2, r3, #25
 8003518:	4b64      	ldr	r3, [pc, #400]	@ (80036ac <HAL_ADC_Init+0x2d4>)
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	055b      	lsls	r3, r3, #21
 8003528:	4013      	ands	r3, r2
 800352a:	d108      	bne.n	800353e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	0549      	lsls	r1, r1, #21
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	495b      	ldr	r1, [pc, #364]	@ (80036b8 <HAL_ADC_Init+0x2e0>)
 800354a:	400a      	ands	r2, r1
 800354c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68d9      	ldr	r1, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d101      	bne.n	8003564 <HAL_ADC_Init+0x18c>
 8003560:	2304      	movs	r3, #4
 8003562:	e000      	b.n	8003566 <HAL_ADC_Init+0x18e>
 8003564:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003566:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2020      	movs	r0, #32
 800356c:	5c1b      	ldrb	r3, [r3, r0]
 800356e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003570:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	202c      	movs	r0, #44	@ 0x2c
 8003576:	5c1b      	ldrb	r3, [r3, r0]
 8003578:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800357a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003580:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003588:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003590:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359e:	23c2      	movs	r3, #194	@ 0xc2
 80035a0:	33ff      	adds	r3, #255	@ 0xff
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d00b      	beq.n	80035be <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68d9      	ldr	r1, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2221      	movs	r2, #33	@ 0x21
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11a      	bne.n	80035fe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	0249      	lsls	r1, r1, #9
 80035e0:	430a      	orrs	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e00b      	b.n	80035fe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	2220      	movs	r2, #32
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	2201      	movs	r2, #1
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d11f      	bne.n	8003646 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	492a      	ldr	r1, [pc, #168]	@ (80036bc <HAL_ADC_Init+0x2e4>)
 8003612:	400a      	ands	r2, r1
 8003614:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003624:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800362a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	611a      	str	r2, [r3, #16]
 8003644:	e00e      	b.n	8003664 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	438a      	bics	r2, r1
 8003662:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2107      	movs	r1, #7
 8003670:	438a      	bics	r2, r1
 8003672:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6959      	ldr	r1, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	2203      	movs	r2, #3
 8003692:	4393      	bics	r3, r2
 8003694:	2201      	movs	r2, #1
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	fffffefd 	.word	0xfffffefd
 80036ac:	40012708 	.word	0x40012708
 80036b0:	ffc3ffff 	.word	0xffc3ffff
 80036b4:	fdffffff 	.word	0xfdffffff
 80036b8:	fffe0219 	.word	0xfffe0219
 80036bc:	fffffc03 	.word	0xfffffc03

080036c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2204      	movs	r2, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d138      	bne.n	800374e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2250      	movs	r2, #80	@ 0x50
 80036e0:	5c9b      	ldrb	r3, [r3, r2]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Start+0x2a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e038      	b.n	800375c <HAL_ADC_Start+0x9c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2250      	movs	r2, #80	@ 0x50
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d007      	beq.n	800370a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fc      	adds	r4, r7, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 fa43 	bl	8003b8c <ADC_Enable>
 8003706:	0003      	movs	r3, r0
 8003708:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800370a:	230f      	movs	r3, #15
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d120      	bne.n	8003756 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <HAL_ADC_Start+0xa4>)
 800371a:	4013      	ands	r3, r2
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	0052      	lsls	r2, r2, #1
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2250      	movs	r2, #80	@ 0x50
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	221c      	movs	r2, #28
 800373a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2104      	movs	r1, #4
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	e003      	b.n	8003756 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800374e:	230f      	movs	r3, #15
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2202      	movs	r2, #2
 8003754:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003756:	230f      	movs	r3, #15
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b005      	add	sp, #20
 8003762:	bd90      	pop	{r4, r7, pc}
 8003764:	fffff0fe 	.word	0xfffff0fe

08003768 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003768:	b5b0      	push	{r4, r5, r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2250      	movs	r2, #80	@ 0x50
 800377c:	5c9b      	ldrb	r3, [r3, r2]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Stop+0x1e>
 8003782:	2302      	movs	r3, #2
 8003784:	e029      	b.n	80037da <HAL_ADC_Stop+0x72>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2250      	movs	r2, #80	@ 0x50
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800378e:	250f      	movs	r5, #15
 8003790:	197c      	adds	r4, r7, r5
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 fac8 	bl	8003d2a <ADC_ConversionStop>
 800379a:	0003      	movs	r3, r0
 800379c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800379e:	197b      	adds	r3, r7, r5
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d112      	bne.n	80037cc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037a6:	197c      	adds	r4, r7, r5
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fa56 	bl	8003c5c <ADC_Disable>
 80037b0:	0003      	movs	r3, r0
 80037b2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037b4:	197b      	adds	r3, r7, r5
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	4a08      	ldr	r2, [pc, #32]	@ (80037e4 <HAL_ADC_Stop+0x7c>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	2201      	movs	r2, #1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2250      	movs	r2, #80	@ 0x50
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80037d4:	230f      	movs	r3, #15
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	781b      	ldrb	r3, [r3, #0]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bdb0      	pop	{r4, r5, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	fffffefe 	.word	0xfffffefe

080037e8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d102      	bne.n	8003808 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003802:	2308      	movs	r3, #8
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e014      	b.n	8003832 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	4013      	ands	r3, r2
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10b      	bne.n	800382e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	2220      	movs	r2, #32
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2250      	movs	r2, #80	@ 0x50
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e072      	b.n	8003914 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800382e:	230c      	movs	r3, #12
 8003830:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003832:	f7ff fda3 	bl	800337c <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800383a:	e01f      	b.n	800387c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	d01c      	beq.n	800387c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_ADC_PollForConversion+0x70>
 8003848:	f7ff fd98 	bl	800337c <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d211      	bcs.n	800387c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	d10b      	bne.n	800387c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	2204      	movs	r2, #4
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2250      	movs	r2, #80	@ 0x50
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e04b      	b.n	8003914 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4013      	ands	r3, r2
 8003886:	d0d9      	beq.n	800383c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388c:	2280      	movs	r2, #128	@ 0x80
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	23c0      	movs	r3, #192	@ 0xc0
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	d12e      	bne.n	8003902 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d129      	bne.n	8003902 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2208      	movs	r2, #8
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d122      	bne.n	8003902 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2204      	movs	r2, #4
 80038c4:	4013      	ands	r3, r2
 80038c6:	d110      	bne.n	80038ea <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	210c      	movs	r1, #12
 80038d4:	438a      	bics	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	4a0f      	ldr	r2, [pc, #60]	@ (800391c <HAL_ADC_PollForConversion+0x134>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2201      	movs	r2, #1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80038e8:	e00b      	b.n	8003902 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	2220      	movs	r2, #32
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	2201      	movs	r2, #1
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	220c      	movs	r2, #12
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}
 800391c:	fffffefe 	.word	0xfffffefe

08003920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2204      	movs	r2, #4
 8003954:	4013      	ands	r3, r2
 8003956:	d003      	beq.n	8003960 <HAL_ADC_IRQHandler+0x28>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d107      	bne.n	8003970 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2208      	movs	r2, #8
 8003964:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003966:	d04e      	beq.n	8003a06 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2208      	movs	r2, #8
 800396c:	4013      	ands	r3, r2
 800396e:	d04a      	beq.n	8003a06 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d106      	bne.n	8003988 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	23c0      	movs	r3, #192	@ 0xc0
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4013      	ands	r3, r2
 8003994:	d12b      	bne.n	80039ee <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d126      	bne.n	80039ee <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2208      	movs	r2, #8
 80039a4:	4013      	ands	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d110      	bne.n	80039d6 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	210c      	movs	r1, #12
 80039c0:	438a      	bics	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a88 <HAL_ADC_IRQHandler+0x150>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	2201      	movs	r2, #1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80039d4:	e00b      	b.n	80039ee <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	2220      	movs	r2, #32
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	2201      	movs	r2, #1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f84b 	bl	8003a8c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d003      	beq.n	8003a06 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	220c      	movs	r2, #12
 8003a04:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2280      	movs	r2, #128	@ 0x80
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d012      	beq.n	8003a34 <HAL_ADC_IRQHandler+0xfc>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2280      	movs	r2, #128	@ 0x80
 8003a12:	4013      	ands	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	0252      	lsls	r2, r2, #9
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f000 f838 	bl	8003a9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2280      	movs	r2, #128	@ 0x80
 8003a32:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2210      	movs	r2, #16
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d020      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x146>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	4013      	ands	r3, r2
 8003a42:	d01c      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10d      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	2202      	movs	r2, #2
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f81b 	bl	8003aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	601a      	str	r2, [r3, #0]
  }

}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	fffffefe 	.word	0xfffffefe

08003a8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2250      	movs	r2, #80	@ 0x50
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e050      	b.n	8003b76 <HAL_ADC_ConfigChannel+0xba>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2250      	movs	r2, #80	@ 0x50
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	2220      	movs	r2, #32
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2250      	movs	r2, #80	@ 0x50
 8003af8:	2100      	movs	r1, #0
 8003afa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e03a      	b.n	8003b76 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_ADC_ConfigChannel+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	035b      	lsls	r3, r3, #13
 8003b16:	0b5a      	lsrs	r2, r3, #13
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	029b      	lsls	r3, r3, #10
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d01f      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003b2c:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_ADC_ConfigChannel+0xc8>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <HAL_ADC_ConfigChannel+0xc8>)
 8003b32:	2180      	movs	r1, #128	@ 0x80
 8003b34:	03c9      	lsls	r1, r1, #15
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e017      	b.n	8003b6c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	035b      	lsls	r3, r3, #13
 8003b48:	0b5b      	lsrs	r3, r3, #13
 8003b4a:	43d9      	mvns	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	400a      	ands	r2, r1
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	029b      	lsls	r3, r3, #10
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d005      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003b60:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_ADC_ConfigChannel+0xc8>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_ADC_ConfigChannel+0xc8>)
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <HAL_ADC_ConfigChannel+0xcc>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2250      	movs	r2, #80	@ 0x50
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	00001001 	.word	0x00001001
 8003b84:	40012708 	.word	0x40012708
 8003b88:	ffbfffff 	.word	0xffbfffff

08003b8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d108      	bne.n	8003bb8 <ADC_Enable+0x2c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <ADC_Enable+0x2c>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <ADC_Enable+0x2e>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d146      	bne.n	8003c4c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	@ (8003c58 <ADC_Enable+0xcc>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	2210      	movs	r2, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	2201      	movs	r2, #1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e033      	b.n	8003c4e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f000 f8e4 	bl	8003dc4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bfc:	f7ff fbbe 	bl	800337c <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c04:	e01b      	b.n	8003c3e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c06:	f7ff fbb9 	bl	800337c <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b0a      	cmp	r3, #10
 8003c12:	d914      	bls.n	8003c3e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00d      	beq.n	8003c3e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	2210      	movs	r2, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	2201      	movs	r2, #1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d1dc      	bne.n	8003c06 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	80000017 	.word	0x80000017

08003c5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d108      	bne.n	8003c88 <ADC_Disable+0x2c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <ADC_Disable+0x2c>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <ADC_Disable+0x2e>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d048      	beq.n	8003d20 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2205      	movs	r2, #5
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d110      	bne.n	8003cbe <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cb4:	f7ff fb62 	bl	800337c <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cbc:	e029      	b.n	8003d12 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	2201      	movs	r2, #1
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e023      	b.n	8003d22 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cda:	f7ff fb4f 	bl	800337c <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d914      	bls.n	8003d12 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10d      	bne.n	8003d12 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	2201      	movs	r2, #1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e007      	b.n	8003d22 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d0dc      	beq.n	8003cda <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b004      	add	sp, #16
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d03a      	beq.n	8003db8 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d10d      	bne.n	8003d6c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2202      	movs	r2, #2
 8003d58:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8003d5a:	d107      	bne.n	8003d6c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2110      	movs	r1, #16
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d6c:	f7ff fb06 	bl	800337c <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003d74:	e01a      	b.n	8003dac <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d76:	f7ff fb01 	bl	800337c <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b0a      	cmp	r3, #10
 8003d82:	d913      	bls.n	8003dac <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00d      	beq.n	8003dac <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	2210      	movs	r2, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	2201      	movs	r2, #1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e006      	b.n	8003dba <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2204      	movs	r2, #4
 8003db4:	4013      	ands	r3, r2
 8003db6:	d1de      	bne.n	8003d76 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b004      	add	sp, #16
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ADC_DelayMicroSecond+0x38>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	490b      	ldr	r1, [pc, #44]	@ (8003e00 <ADC_DelayMicroSecond+0x3c>)
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9b4 	bl	8000140 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	001a      	movs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4353      	muls	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003de2:	e002      	b.n	8003dea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f9      	bne.n	8003de4 <ADC_DelayMicroSecond+0x20>
  }
}
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	000f4240 	.word	0x000f4240

08003e04 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2250      	movs	r2, #80	@ 0x50
 8003e22:	5c9b      	ldrb	r3, [r3, r2]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_ADCEx_Calibration_Start+0x28>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e083      	b.n	8003f34 <HAL_ADCEx_Calibration_Start+0x130>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2250      	movs	r2, #80	@ 0x50
 8003e30:	2101      	movs	r1, #1
 8003e32:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <HAL_ADCEx_Calibration_Start+0x50>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADCEx_Calibration_Start+0x50>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_ADCEx_Calibration_Start+0x52>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d15b      	bne.n	8003f12 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	4a37      	ldr	r2, [pc, #220]	@ (8003f3c <HAL_ADCEx_Calibration_Start+0x138>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2202      	movs	r2, #2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2203      	movs	r2, #3
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2103      	movs	r1, #3
 8003e82:	438a      	bics	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2180      	movs	r1, #128	@ 0x80
 8003e92:	0609      	lsls	r1, r1, #24
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003e98:	f7ff fa70 	bl	800337c <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ea0:	e01d      	b.n	8003ede <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ea2:	f7ff fa6b 	bl	800337c <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b0a      	cmp	r3, #10
 8003eae:	d916      	bls.n	8003ede <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0fdb      	lsrs	r3, r3, #31
 8003eb8:	07da      	lsls	r2, r3, #31
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10d      	bne.n	8003ede <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	2212      	movs	r2, #18
 8003ec8:	4393      	bics	r3, r2
 8003eca:	2210      	movs	r2, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2250      	movs	r2, #80	@ 0x50
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02a      	b.n	8003f34 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	0fdb      	lsrs	r3, r3, #31
 8003ee6:	07da      	lsls	r2, r3, #31
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0d8      	beq.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	2203      	movs	r2, #3
 8003f06:	4393      	bics	r3, r2
 8003f08:	2201      	movs	r2, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f10:	e009      	b.n	8003f26 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f16:	2220      	movs	r2, #32
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f1e:	2317      	movs	r3, #23
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2250      	movs	r2, #80	@ 0x50
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003f2e:	2317      	movs	r3, #23
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b006      	add	sp, #24
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	fffffefd 	.word	0xfffffefd

08003f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	0002      	movs	r2, r0
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f52:	d809      	bhi.n	8003f68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	001a      	movs	r2, r3
 8003f5a:	231f      	movs	r3, #31
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <__NVIC_EnableIRQ+0x30>)
 8003f60:	2101      	movs	r1, #1
 8003f62:	4091      	lsls	r1, r2
 8003f64:	000a      	movs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
  }
}
 8003f68:	46c0      	nop			@ (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000e100 	.word	0xe000e100

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f88:	d828      	bhi.n	8003fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004048 <__NVIC_SetPriority+0xd4>)
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	33c0      	adds	r3, #192	@ 0xc0
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	589b      	ldr	r3, [r3, r2]
 8003f9a:	1dfa      	adds	r2, r7, #7
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	00d2      	lsls	r2, r2, #3
 8003fa6:	21ff      	movs	r1, #255	@ 0xff
 8003fa8:	4091      	lsls	r1, r2
 8003faa:	000a      	movs	r2, r1
 8003fac:	43d2      	mvns	r2, r2
 8003fae:	401a      	ands	r2, r3
 8003fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	22ff      	movs	r2, #255	@ 0xff
 8003fb8:	401a      	ands	r2, r3
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	4003      	ands	r3, r0
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc8:	481f      	ldr	r0, [pc, #124]	@ (8004048 <__NVIC_SetPriority+0xd4>)
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	33c0      	adds	r3, #192	@ 0xc0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fda:	e031      	b.n	8004040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <__NVIC_SetPriority+0xd8>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	3b08      	subs	r3, #8
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3306      	adds	r3, #6
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1dfa      	adds	r2, r7, #7
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	400a      	ands	r2, r1
 8004000:	00d2      	lsls	r2, r2, #3
 8004002:	21ff      	movs	r1, #255	@ 0xff
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	43d2      	mvns	r2, r2
 800400a:	401a      	ands	r2, r3
 800400c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	22ff      	movs	r2, #255	@ 0xff
 8004014:	401a      	ands	r2, r3
 8004016:	1dfb      	adds	r3, r7, #7
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	0018      	movs	r0, r3
 800401c:	2303      	movs	r3, #3
 800401e:	4003      	ands	r3, r0
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004024:	4809      	ldr	r0, [pc, #36]	@ (800404c <__NVIC_SetPriority+0xd8>)
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	001c      	movs	r4, r3
 800402c:	230f      	movs	r3, #15
 800402e:	4023      	ands	r3, r4
 8004030:	3b08      	subs	r3, #8
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	430a      	orrs	r2, r1
 8004036:	3306      	adds	r3, #6
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	18c3      	adds	r3, r0, r3
 800403c:	3304      	adds	r3, #4
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b003      	add	sp, #12
 8004046:	bd90      	pop	{r4, r7, pc}
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	045b      	lsls	r3, r3, #17
 8004060:	429a      	cmp	r2, r3
 8004062:	d301      	bcc.n	8004068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004064:	2301      	movs	r3, #1
 8004066:	e010      	b.n	800408a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004068:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <SysTick_Config+0x44>)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	3a01      	subs	r2, #1
 800406e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	2103      	movs	r1, #3
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff ff7c 	bl	8003f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <SysTick_Config+0x44>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004082:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <SysTick_Config+0x44>)
 8004084:	2207      	movs	r2, #7
 8004086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	e000e010 	.word	0xe000e010

08004098 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	210f      	movs	r1, #15
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	1c02      	adds	r2, r0, #0
 80040a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b25b      	sxtb	r3, r3
 80040b2:	0011      	movs	r1, r2
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff ff5d 	bl	8003f74 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	0002      	movs	r2, r0
 80040ca:	1dfb      	adds	r3, r7, #7
 80040cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b25b      	sxtb	r3, r3
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ff33 	bl	8003f40 <__NVIC_EnableIRQ>
}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b002      	add	sp, #8
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff ffaf 	bl	8004050 <SysTick_Config>
 80040f2:	0003      	movs	r3, r0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004112:	e155      	b.n	80043c0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4091      	lsls	r1, r2
 800411e:	000a      	movs	r2, r1
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <HAL_GPIO_Init+0x30>
 800412a:	e146      	b.n	80043ba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	4013      	ands	r3, r2
 8004134:	2b01      	cmp	r3, #1
 8004136:	d005      	beq.n	8004144 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004140:	2b02      	cmp	r3, #2
 8004142:	d130      	bne.n	80041a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2203      	movs	r2, #3
 8004150:	409a      	lsls	r2, r3
 8004152:	0013      	movs	r3, r2
 8004154:	43da      	mvns	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	0013      	movs	r3, r2
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800417a:	2201      	movs	r2, #1
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	2201      	movs	r2, #1
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2203      	movs	r2, #3
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d017      	beq.n	80041e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	2203      	movs	r2, #3
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	43da      	mvns	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	0013      	movs	r3, r2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2203      	movs	r2, #3
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d123      	bne.n	8004236 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	08da      	lsrs	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3208      	adds	r2, #8
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	58d3      	ldr	r3, [r2, r3]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2207      	movs	r2, #7
 8004200:	4013      	ands	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	220f      	movs	r2, #15
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	43da      	mvns	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2107      	movs	r1, #7
 800421a:	400b      	ands	r3, r1
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	409a      	lsls	r2, r3
 8004220:	0013      	movs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	08da      	lsrs	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3208      	adds	r2, #8
 8004230:	0092      	lsls	r2, r2, #2
 8004232:	6939      	ldr	r1, [r7, #16]
 8004234:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	409a      	lsls	r2, r3
 8004244:	0013      	movs	r3, r2
 8004246:	43da      	mvns	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	401a      	ands	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	0013      	movs	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	23c0      	movs	r3, #192	@ 0xc0
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	4013      	ands	r3, r2
 8004274:	d100      	bne.n	8004278 <HAL_GPIO_Init+0x17c>
 8004276:	e0a0      	b.n	80043ba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004278:	4b57      	ldr	r3, [pc, #348]	@ (80043d8 <HAL_GPIO_Init+0x2dc>)
 800427a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427c:	4b56      	ldr	r3, [pc, #344]	@ (80043d8 <HAL_GPIO_Init+0x2dc>)
 800427e:	2101      	movs	r1, #1
 8004280:	430a      	orrs	r2, r1
 8004282:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004284:	4a55      	ldr	r2, [pc, #340]	@ (80043dc <HAL_GPIO_Init+0x2e0>)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	3302      	adds	r3, #2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	589b      	ldr	r3, [r3, r2]
 8004290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2203      	movs	r2, #3
 8004296:	4013      	ands	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	409a      	lsls	r2, r3
 800429e:	0013      	movs	r3, r2
 80042a0:	43da      	mvns	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	23a0      	movs	r3, #160	@ 0xa0
 80042ac:	05db      	lsls	r3, r3, #23
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d01f      	beq.n	80042f2 <HAL_GPIO_Init+0x1f6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4a      	ldr	r2, [pc, #296]	@ (80043e0 <HAL_GPIO_Init+0x2e4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d019      	beq.n	80042ee <HAL_GPIO_Init+0x1f2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a49      	ldr	r2, [pc, #292]	@ (80043e4 <HAL_GPIO_Init+0x2e8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_GPIO_Init+0x1ee>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a48      	ldr	r2, [pc, #288]	@ (80043e8 <HAL_GPIO_Init+0x2ec>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_GPIO_Init+0x1ea>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a47      	ldr	r2, [pc, #284]	@ (80043ec <HAL_GPIO_Init+0x2f0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x1e6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a46      	ldr	r2, [pc, #280]	@ (80043f0 <HAL_GPIO_Init+0x2f4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_GPIO_Init+0x1e2>
 80042da:	2305      	movs	r3, #5
 80042dc:	e00a      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042de:	2306      	movs	r3, #6
 80042e0:	e008      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_GPIO_Init+0x1f8>
 80042f2:	2300      	movs	r3, #0
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	2103      	movs	r1, #3
 80042f8:	400a      	ands	r2, r1
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	4093      	lsls	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004304:	4935      	ldr	r1, [pc, #212]	@ (80043dc <HAL_GPIO_Init+0x2e0>)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43da      	mvns	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	035b      	lsls	r3, r3, #13
 800432a:	4013      	ands	r3, r2
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004336:	4b2f      	ldr	r3, [pc, #188]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800433c:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43da      	mvns	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	039b      	lsls	r3, r3, #14
 8004354:	4013      	ands	r3, r2
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004366:	4b23      	ldr	r3, [pc, #140]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43da      	mvns	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	4013      	ands	r3, r2
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004390:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43da      	mvns	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	4013      	ands	r3, r2
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043b4:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <HAL_GPIO_Init+0x2f8>)
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3301      	adds	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	40da      	lsrs	r2, r3
 80043c8:	1e13      	subs	r3, r2, #0
 80043ca:	d000      	beq.n	80043ce <HAL_GPIO_Init+0x2d2>
 80043cc:	e6a2      	b.n	8004114 <HAL_GPIO_Init+0x18>
  }
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b006      	add	sp, #24
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40010000 	.word	0x40010000
 80043e0:	50000400 	.word	0x50000400
 80043e4:	50000800 	.word	0x50000800
 80043e8:	50000c00 	.word	0x50000c00
 80043ec:	50001000 	.word	0x50001000
 80043f0:	50001c00 	.word	0x50001c00
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b5b0      	push	{r4, r5, r7, lr}
 80043fa:	b08a      	sub	sp, #40	@ 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f000 fb6c 	bl	8004ae4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440c:	4bc8      	ldr	r3, [pc, #800]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	220c      	movs	r2, #12
 8004412:	4013      	ands	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004416:	4bc6      	ldr	r3, [pc, #792]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	025b      	lsls	r3, r3, #9
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	4013      	ands	r3, r2
 800442a:	d100      	bne.n	800442e <HAL_RCC_OscConfig+0x36>
 800442c:	e07d      	b.n	800452a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d007      	beq.n	8004444 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x68>
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	025b      	lsls	r3, r3, #9
 8004440:	429a      	cmp	r2, r3
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	4bba      	ldr	r3, [pc, #744]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	4013      	ands	r3, r2
 800444e:	d100      	bne.n	8004452 <HAL_RCC_OscConfig+0x5a>
 8004450:	e06a      	b.n	8004528 <HAL_RCC_OscConfig+0x130>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d166      	bne.n	8004528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f000 fb42 	bl	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x84>
 800446c:	4bb0      	ldr	r3, [pc, #704]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4baf      	ldr	r3, [pc, #700]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004472:	2180      	movs	r1, #128	@ 0x80
 8004474:	0249      	lsls	r1, r1, #9
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e027      	b.n	80044cc <HAL_RCC_OscConfig+0xd4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	23a0      	movs	r3, #160	@ 0xa0
 8004482:	02db      	lsls	r3, r3, #11
 8004484:	429a      	cmp	r2, r3
 8004486:	d10e      	bne.n	80044a6 <HAL_RCC_OscConfig+0xae>
 8004488:	4ba9      	ldr	r3, [pc, #676]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4ba8      	ldr	r3, [pc, #672]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800448e:	2180      	movs	r1, #128	@ 0x80
 8004490:	02c9      	lsls	r1, r1, #11
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	4ba6      	ldr	r3, [pc, #664]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4ba5      	ldr	r3, [pc, #660]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800449c:	2180      	movs	r1, #128	@ 0x80
 800449e:	0249      	lsls	r1, r1, #9
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e012      	b.n	80044cc <HAL_RCC_OscConfig+0xd4>
 80044a6:	4ba2      	ldr	r3, [pc, #648]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba1      	ldr	r3, [pc, #644]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044ac:	49a1      	ldr	r1, [pc, #644]	@ (8004734 <HAL_RCC_OscConfig+0x33c>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4b9b      	ldr	r3, [pc, #620]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b9a      	ldr	r3, [pc, #616]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044c6:	499c      	ldr	r1, [pc, #624]	@ (8004738 <HAL_RCC_OscConfig+0x340>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d014      	beq.n	80044fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe ff52 	bl	800337c <HAL_GetTick>
 80044d8:	0003      	movs	r3, r0
 80044da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044de:	f7fe ff4d 	bl	800337c <HAL_GetTick>
 80044e2:	0002      	movs	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b64      	cmp	r3, #100	@ 0x64
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e2f9      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	4013      	ands	r3, r2
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0xe6>
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fe ff3d 	bl	800337c <HAL_GetTick>
 8004502:	0003      	movs	r3, r0
 8004504:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004508:	f7fe ff38 	bl	800337c <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e2e4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800451a:	4b85      	ldr	r3, [pc, #532]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	4013      	ands	r3, r2
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x110>
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d100      	bne.n	8004536 <HAL_RCC_OscConfig+0x13e>
 8004534:	e099      	b.n	800466a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	2220      	movs	r2, #32
 8004540:	4013      	ands	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004544:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b79      	ldr	r3, [pc, #484]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800454a:	2120      	movs	r1, #32
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	2220      	movs	r2, #32
 8004554:	4393      	bics	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b04      	cmp	r3, #4
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d13e      	bne.n	80045e2 <HAL_RCC_OscConfig+0x1ea>
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d13b      	bne.n	80045e2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800456a:	4b71      	ldr	r3, [pc, #452]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2204      	movs	r2, #4
 8004570:	4013      	ands	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_RCC_OscConfig+0x186>
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e2b2      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b6c      	ldr	r3, [pc, #432]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a6e      	ldr	r2, [pc, #440]	@ (800473c <HAL_RCC_OscConfig+0x344>)
 8004584:	4013      	ands	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	021a      	lsls	r2, r3, #8
 800458e:	4b68      	ldr	r3, [pc, #416]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004594:	4b66      	ldr	r3, [pc, #408]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2209      	movs	r2, #9
 800459a:	4393      	bics	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80045a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 fbeb 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 80045aa:	0001      	movs	r1, r0
 80045ac:	4b60      	ldr	r3, [pc, #384]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	220f      	movs	r2, #15
 80045b4:	4013      	ands	r3, r2
 80045b6:	4a62      	ldr	r2, [pc, #392]	@ (8004740 <HAL_RCC_OscConfig+0x348>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	000a      	movs	r2, r1
 80045bc:	40da      	lsrs	r2, r3
 80045be:	4b61      	ldr	r3, [pc, #388]	@ (8004744 <HAL_RCC_OscConfig+0x34c>)
 80045c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80045c2:	4b61      	ldr	r3, [pc, #388]	@ (8004748 <HAL_RCC_OscConfig+0x350>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2513      	movs	r5, #19
 80045c8:	197c      	adds	r4, r7, r5
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7fe fe90 	bl	80032f0 <HAL_InitTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80045d4:	197b      	adds	r3, r7, r5
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d046      	beq.n	800466a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80045dc:	197b      	adds	r3, r7, r5
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	e280      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d027      	beq.n	8004638 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045e8:	4b51      	ldr	r3, [pc, #324]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2209      	movs	r2, #9
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80045f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fe febf 	bl	800337c <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004604:	f7fe feba 	bl	800337c <HAL_GetTick>
 8004608:	0002      	movs	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e266      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004616:	4b46      	ldr	r3, [pc, #280]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d0f1      	beq.n	8004604 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a45      	ldr	r2, [pc, #276]	@ (800473c <HAL_RCC_OscConfig+0x344>)
 8004626:	4013      	ands	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	4b3f      	ldr	r3, [pc, #252]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e018      	b.n	800466a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004638:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b3c      	ldr	r3, [pc, #240]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800463e:	2101      	movs	r1, #1
 8004640:	438a      	bics	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fe9a 	bl	800337c <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464e:	f7fe fe95 	bl	800337c <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e241      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004660:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	d1f1      	bne.n	800464e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2210      	movs	r2, #16
 8004670:	4013      	ands	r3, r2
 8004672:	d100      	bne.n	8004676 <HAL_RCC_OscConfig+0x27e>
 8004674:	e0a1      	b.n	80047ba <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d140      	bne.n	80046fe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800467c:	4b2c      	ldr	r3, [pc, #176]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2380      	movs	r3, #128	@ 0x80
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4013      	ands	r3, r2
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x29c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e227      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004694:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a2c      	ldr	r2, [pc, #176]	@ (800474c <HAL_RCC_OscConfig+0x354>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a8:	4b21      	ldr	r3, [pc, #132]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	0a19      	lsrs	r1, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	061a      	lsls	r2, r3, #24
 80046b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	0b5b      	lsrs	r3, r3, #13
 80046c2:	3301      	adds	r3, #1
 80046c4:	2280      	movs	r2, #128	@ 0x80
 80046c6:	0212      	lsls	r2, r2, #8
 80046c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046ca:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	210f      	movs	r1, #15
 80046d2:	400b      	ands	r3, r1
 80046d4:	491a      	ldr	r1, [pc, #104]	@ (8004740 <HAL_RCC_OscConfig+0x348>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046da:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <HAL_RCC_OscConfig+0x34c>)
 80046dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80046de:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <HAL_RCC_OscConfig+0x350>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2513      	movs	r5, #19
 80046e4:	197c      	adds	r4, r7, r5
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fe fe02 	bl	80032f0 <HAL_InitTick>
 80046ec:	0003      	movs	r3, r0
 80046ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80046f0:	197b      	adds	r3, r7, r5
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d060      	beq.n	80047ba <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80046f8:	197b      	adds	r3, r7, r5
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	e1f2      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d03f      	beq.n	8004786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_OscConfig+0x338>)
 800470c:	2180      	movs	r1, #128	@ 0x80
 800470e:	0049      	lsls	r1, r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fe fe32 	bl	800337c <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800471c:	e018      	b.n	8004750 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800471e:	f7fe fe2d 	bl	800337c <HAL_GetTick>
 8004722:	0002      	movs	r2, r0
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d911      	bls.n	8004750 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1d9      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
 8004730:	40021000 	.word	0x40021000
 8004734:	fffeffff 	.word	0xfffeffff
 8004738:	fffbffff 	.word	0xfffbffff
 800473c:	ffffe0ff 	.word	0xffffe0ff
 8004740:	08008b20 	.word	0x08008b20
 8004744:	20000000 	.word	0x20000000
 8004748:	20000004 	.word	0x20000004
 800474c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004750:	4bc9      	ldr	r3, [pc, #804]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d0e0      	beq.n	800471e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800475c:	4bc6      	ldr	r3, [pc, #792]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4ac6      	ldr	r2, [pc, #792]	@ (8004a7c <HAL_RCC_OscConfig+0x684>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	4bc3      	ldr	r3, [pc, #780]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004770:	4bc1      	ldr	r3, [pc, #772]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	0a19      	lsrs	r1, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	061a      	lsls	r2, r3, #24
 800477e:	4bbe      	ldr	r3, [pc, #760]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	e019      	b.n	80047ba <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004786:	4bbc      	ldr	r3, [pc, #752]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4bbb      	ldr	r3, [pc, #748]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800478c:	49bc      	ldr	r1, [pc, #752]	@ (8004a80 <HAL_RCC_OscConfig+0x688>)
 800478e:	400a      	ands	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fe fdf3 	bl	800337c <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800479c:	f7fe fdee 	bl	800337c <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e19a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ae:	4bb2      	ldr	r3, [pc, #712]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2208      	movs	r2, #8
 80047c0:	4013      	ands	r3, r2
 80047c2:	d036      	beq.n	8004832 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d019      	beq.n	8004800 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047cc:	4baa      	ldr	r3, [pc, #680]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80047ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047d0:	4ba9      	ldr	r3, [pc, #676]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	430a      	orrs	r2, r1
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fe fdd0 	bl	800337c <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe fdcb 	bl	800337c <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e177      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047f4:	4ba0      	ldr	r3, [pc, #640]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80047f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f8:	2202      	movs	r2, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d0f1      	beq.n	80047e2 <HAL_RCC_OscConfig+0x3ea>
 80047fe:	e018      	b.n	8004832 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004800:	4b9d      	ldr	r3, [pc, #628]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004804:	4b9c      	ldr	r3, [pc, #624]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe fdb6 	bl	800337c <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004816:	f7fe fdb1 	bl	800337c <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e15d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004828:	4b93      	ldr	r3, [pc, #588]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	d1f1      	bne.n	8004816 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2204      	movs	r2, #4
 8004838:	4013      	ands	r3, r2
 800483a:	d100      	bne.n	800483e <HAL_RCC_OscConfig+0x446>
 800483c:	e0ae      	b.n	800499c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2023      	movs	r0, #35	@ 0x23
 8004840:	183b      	adds	r3, r7, r0
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b8c      	ldr	r3, [pc, #560]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	055b      	lsls	r3, r3, #21
 800484e:	4013      	ands	r3, r2
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b89      	ldr	r3, [pc, #548]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	4b88      	ldr	r3, [pc, #544]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004858:	2180      	movs	r1, #128	@ 0x80
 800485a:	0549      	lsls	r1, r1, #21
 800485c:	430a      	orrs	r2, r1
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004860:	183b      	adds	r3, r7, r0
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b87      	ldr	r3, [pc, #540]	@ (8004a84 <HAL_RCC_OscConfig+0x68c>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4013      	ands	r3, r2
 8004870:	d11a      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b84      	ldr	r3, [pc, #528]	@ (8004a84 <HAL_RCC_OscConfig+0x68c>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b83      	ldr	r3, [pc, #524]	@ (8004a84 <HAL_RCC_OscConfig+0x68c>)
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	0049      	lsls	r1, r1, #1
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004880:	f7fe fd7c 	bl	800337c <HAL_GetTick>
 8004884:	0003      	movs	r3, r0
 8004886:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fe fd77 	bl	800337c <HAL_GetTick>
 800488e:	0002      	movs	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	@ 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e123      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b79      	ldr	r3, [pc, #484]	@ (8004a84 <HAL_RCC_OscConfig+0x68c>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4013      	ands	r3, r2
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4cc>
 80048b4:	4b70      	ldr	r3, [pc, #448]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048ba:	2180      	movs	r1, #128	@ 0x80
 80048bc:	0049      	lsls	r1, r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80048c2:	e031      	b.n	8004928 <HAL_RCC_OscConfig+0x530>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x4ee>
 80048cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048d0:	4b69      	ldr	r3, [pc, #420]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048d2:	496b      	ldr	r1, [pc, #428]	@ (8004a80 <HAL_RCC_OscConfig+0x688>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d8:	4b67      	ldr	r3, [pc, #412]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048dc:	4b66      	ldr	r3, [pc, #408]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048de:	496a      	ldr	r1, [pc, #424]	@ (8004a88 <HAL_RCC_OscConfig+0x690>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80048e4:	e020      	b.n	8004928 <HAL_RCC_OscConfig+0x530>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	23a0      	movs	r3, #160	@ 0xa0
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d10e      	bne.n	8004910 <HAL_RCC_OscConfig+0x518>
 80048f2:	4b61      	ldr	r3, [pc, #388]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f6:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80048f8:	2180      	movs	r1, #128	@ 0x80
 80048fa:	00c9      	lsls	r1, r1, #3
 80048fc:	430a      	orrs	r2, r1
 80048fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004900:	4b5d      	ldr	r3, [pc, #372]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004902:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004904:	4b5c      	ldr	r3, [pc, #368]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	0049      	lsls	r1, r1, #1
 800490a:	430a      	orrs	r2, r1
 800490c:	651a      	str	r2, [r3, #80]	@ 0x50
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0x530>
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004914:	4b58      	ldr	r3, [pc, #352]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004916:	495a      	ldr	r1, [pc, #360]	@ (8004a80 <HAL_RCC_OscConfig+0x688>)
 8004918:	400a      	ands	r2, r1
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50
 800491c:	4b56      	ldr	r3, [pc, #344]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800491e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004920:	4b55      	ldr	r3, [pc, #340]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004922:	4959      	ldr	r1, [pc, #356]	@ (8004a88 <HAL_RCC_OscConfig+0x690>)
 8004924:	400a      	ands	r2, r1
 8004926:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004930:	f7fe fd24 	bl	800337c <HAL_GetTick>
 8004934:	0003      	movs	r3, r0
 8004936:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004938:	e009      	b.n	800494e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493a:	f7fe fd1f 	bl	800337c <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	4a51      	ldr	r2, [pc, #324]	@ (8004a8c <HAL_RCC_OscConfig+0x694>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0ca      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d0ef      	beq.n	800493a <HAL_RCC_OscConfig+0x542>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495c:	f7fe fd0e 	bl	800337c <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004964:	e009      	b.n	800497a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe fd09 	bl	800337c <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a46      	ldr	r2, [pc, #280]	@ (8004a8c <HAL_RCC_OscConfig+0x694>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0b4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800497a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 800497c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497e:	2380      	movs	r3, #128	@ 0x80
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4013      	ands	r3, r2
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004986:	2323      	movs	r3, #35	@ 0x23
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b39      	ldr	r3, [pc, #228]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004994:	4b38      	ldr	r3, [pc, #224]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004996:	493e      	ldr	r1, [pc, #248]	@ (8004a90 <HAL_RCC_OscConfig+0x698>)
 8004998:	400a      	ands	r2, r1
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d100      	bne.n	80049a6 <HAL_RCC_OscConfig+0x5ae>
 80049a4:	e09d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d100      	bne.n	80049ae <HAL_RCC_OscConfig+0x5b6>
 80049ac:	e076      	b.n	8004a9c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d145      	bne.n	8004a42 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80049bc:	4935      	ldr	r1, [pc, #212]	@ (8004a94 <HAL_RCC_OscConfig+0x69c>)
 80049be:	400a      	ands	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fe fcdb 	bl	800337c <HAL_GetTick>
 80049c6:	0003      	movs	r3, r0
 80049c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe fcd6 	bl	800337c <HAL_GetTick>
 80049d0:	0002      	movs	r2, r0
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e082      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049de:	4b26      	ldr	r3, [pc, #152]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	@ 0x80
 80049e4:	049b      	lsls	r3, r3, #18
 80049e6:	4013      	ands	r3, r2
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ea:	4b23      	ldr	r3, [pc, #140]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <HAL_RCC_OscConfig+0x6a0>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	431a      	orrs	r2, r3
 8004a04:	4b1c      	ldr	r3, [pc, #112]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a06:	430a      	orrs	r2, r1
 8004a08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a10:	2180      	movs	r1, #128	@ 0x80
 8004a12:	0449      	lsls	r1, r1, #17
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fe fcb0 	bl	800337c <HAL_GetTick>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fe fcab 	bl	800337c <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e057      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a34:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	049b      	lsls	r3, r3, #18
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x62a>
 8004a40:	e04f      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a48:	4912      	ldr	r1, [pc, #72]	@ (8004a94 <HAL_RCC_OscConfig+0x69c>)
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fc95 	bl	800337c <HAL_GetTick>
 8004a52:	0003      	movs	r3, r0
 8004a54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fe fc90 	bl	800337c <HAL_GetTick>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e03c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a6a:	4b03      	ldr	r3, [pc, #12]	@ (8004a78 <HAL_RCC_OscConfig+0x680>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	049b      	lsls	r3, r3, #18
 8004a72:	4013      	ands	r3, r2
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x660>
 8004a76:	e034      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6ea>
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	ffff1fff 	.word	0xffff1fff
 8004a80:	fffffeff 	.word	0xfffffeff
 8004a84:	40007000 	.word	0x40007000
 8004a88:	fffffbff 	.word	0xfffffbff
 8004a8c:	00001388 	.word	0x00001388
 8004a90:	efffffff 	.word	0xefffffff
 8004a94:	feffffff 	.word	0xfeffffff
 8004a98:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e01d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aa8:	4b10      	ldr	r3, [pc, #64]	@ (8004aec <HAL_RCC_OscConfig+0x6f4>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	2380      	movs	r3, #128	@ 0x80
 8004ab2:	025b      	lsls	r3, r3, #9
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10f      	bne.n	8004ade <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	23f0      	movs	r3, #240	@ 0xf0
 8004ac2:	039b      	lsls	r3, r3, #14
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	23c0      	movs	r3, #192	@ 0xc0
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b00a      	add	sp, #40	@ 0x28
 8004aea:	bdb0      	pop	{r4, r5, r7, pc}
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e128      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b96      	ldr	r3, [pc, #600]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d91e      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b93      	ldr	r3, [pc, #588]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4393      	bics	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	4b90      	ldr	r3, [pc, #576]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b24:	f7fe fc2a 	bl	800337c <HAL_GetTick>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2c:	e009      	b.n	8004b42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2e:	f7fe fc25 	bl	800337c <HAL_GetTick>
 8004b32:	0002      	movs	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	4a8a      	ldr	r2, [pc, #552]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e109      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b87      	ldr	r3, [pc, #540]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1ee      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2202      	movs	r2, #2
 8004b56:	4013      	ands	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5a:	4b83      	ldr	r3, [pc, #524]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	22f0      	movs	r2, #240	@ 0xf0
 8004b60:	4393      	bics	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b7f      	ldr	r3, [pc, #508]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	d100      	bne.n	8004b7a <HAL_RCC_ClockConfig+0x8a>
 8004b78:	e089      	b.n	8004c8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b82:	4b79      	ldr	r3, [pc, #484]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d120      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0e1      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b9a:	4b73      	ldr	r3, [pc, #460]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	049b      	lsls	r3, r3, #18
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d114      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0d5      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0ca      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004bc0:	4b69      	ldr	r3, [pc, #420]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0c2      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd0:	4b65      	ldr	r3, [pc, #404]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fe fbca 	bl	800337c <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bf4:	e009      	b.n	8004c0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf6:	f7fe fbc1 	bl	800337c <HAL_GetTick>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	4a58      	ldr	r2, [pc, #352]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0a5      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c0a:	4b57      	ldr	r3, [pc, #348]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	220c      	movs	r2, #12
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d1ef      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0x106>
 8004c16:	e03a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c20:	e009      	b.n	8004c36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c22:	f7fe fbab 	bl	800337c <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e08f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c36:	4b4c      	ldr	r3, [pc, #304]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	220c      	movs	r2, #12
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d1ef      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x132>
 8004c42:	e024      	b.n	8004c8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d11b      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4c:	e009      	b.n	8004c62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4e:	f7fe fb95 	bl	800337c <HAL_GetTick>
 8004c52:	0002      	movs	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	4a42      	ldr	r2, [pc, #264]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e079      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c62:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	220c      	movs	r2, #12
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d1ef      	bne.n	8004c4e <HAL_RCC_ClockConfig+0x15e>
 8004c6e:	e00e      	b.n	8004c8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fe fb84 	bl	800337c <HAL_GetTick>
 8004c74:	0002      	movs	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e068      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c84:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	220c      	movs	r2, #12
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d21e      	bcs.n	8004cda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9c:	4b30      	ldr	r3, [pc, #192]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cae:	f7fe fb65 	bl	800337c <HAL_GetTick>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	e009      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fe fb60 	bl	800337c <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <HAL_RCC_ClockConfig+0x274>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e044      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ccc:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <HAL_RCC_ClockConfig+0x270>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d1ee      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a20      	ldr	r2, [pc, #128]	@ (8004d6c <HAL_RCC_ClockConfig+0x27c>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	0019      	movs	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d02:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_RCC_ClockConfig+0x280>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	00da      	lsls	r2, r3, #3
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d18:	f000 f832 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d1c:	0001      	movs	r1, r0
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_RCC_ClockConfig+0x278>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	220f      	movs	r2, #15
 8004d26:	4013      	ands	r3, r2
 8004d28:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <HAL_RCC_ClockConfig+0x284>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	000a      	movs	r2, r1
 8004d2e:	40da      	lsrs	r2, r3
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <HAL_RCC_ClockConfig+0x288>)
 8004d32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d34:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <HAL_RCC_ClockConfig+0x28c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	250b      	movs	r5, #11
 8004d3a:	197c      	adds	r4, r7, r5
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fe fad7 	bl	80032f0 <HAL_InitTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004d46:	197b      	adds	r3, r7, r5
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004d4e:	197b      	adds	r3, r7, r5
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	e000      	b.n	8004d56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b004      	add	sp, #16
 8004d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	40022000 	.word	0x40022000
 8004d64:	00001388 	.word	0x00001388
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	fffff8ff 	.word	0xfffff8ff
 8004d70:	ffffc7ff 	.word	0xffffc7ff
 8004d74:	08008b20 	.word	0x08008b20
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	20000004 	.word	0x20000004

08004d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d86:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	220c      	movs	r2, #12
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d013      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x3e>
 8004d96:	d85c      	bhi.n	8004e52 <HAL_RCC_GetSysClockFreq+0xd2>
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d002      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0x22>
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d00b      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x38>
 8004da0:	e057      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004da2:	4b35      	ldr	r3, [pc, #212]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2210      	movs	r2, #16
 8004da8:	4013      	ands	r3, r2
 8004daa:	d002      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004dac:	4b33      	ldr	r3, [pc, #204]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004db0:	e05d      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004db2:	4b33      	ldr	r3, [pc, #204]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8004db4:	613b      	str	r3, [r7, #16]
      break;
 8004db6:	e05a      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dba:	613b      	str	r3, [r7, #16]
      break;
 8004dbc:	e057      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	0d9b      	lsrs	r3, r3, #22
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd8:	4b27      	ldr	r3, [pc, #156]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	025b      	lsls	r3, r3, #9
 8004de0:	4013      	ands	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	000a      	movs	r2, r1
 8004de8:	0152      	lsls	r2, r2, #5
 8004dea:	1a52      	subs	r2, r2, r1
 8004dec:	0193      	lsls	r3, r2, #6
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	185b      	adds	r3, r3, r1
 8004df4:	025b      	lsls	r3, r3, #9
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fb f9a1 	bl	8000140 <__udivsi3>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e023      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e04:	4b1c      	ldr	r3, [pc, #112]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2210      	movs	r2, #16
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d00f      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	000a      	movs	r2, r1
 8004e12:	0152      	lsls	r2, r2, #5
 8004e14:	1a52      	subs	r2, r2, r1
 8004e16:	0193      	lsls	r3, r2, #6
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	185b      	adds	r3, r3, r1
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fb f98c 	bl	8000140 <__udivsi3>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e00e      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	000a      	movs	r2, r1
 8004e32:	0152      	lsls	r2, r2, #5
 8004e34:	1a52      	subs	r2, r2, r1
 8004e36:	0193      	lsls	r3, r2, #6
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	185b      	adds	r3, r3, r1
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fb f97c 	bl	8000140 <__udivsi3>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	613b      	str	r3, [r7, #16]
      break;
 8004e50:	e00d      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	0b5b      	lsrs	r3, r3, #13
 8004e58:	2207      	movs	r2, #7
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	0212      	lsls	r2, r2, #8
 8004e66:	409a      	lsls	r2, r3
 8004e68:	0013      	movs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
      break;
 8004e6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e6e:	693b      	ldr	r3, [r7, #16]
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b006      	add	sp, #24
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	003d0900 	.word	0x003d0900
 8004e80:	00f42400 	.word	0x00f42400
 8004e84:	007a1200 	.word	0x007a1200
 8004e88:	08008b38 	.word	0x08008b38

08004e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b02      	ldr	r3, [pc, #8]	@ (8004e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	20000000 	.word	0x20000000

08004ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea4:	f7ff fff2 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ea8:	0001      	movs	r1, r0
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eb6:	5cd3      	ldrb	r3, [r2, r3]
 8004eb8:	40d9      	lsrs	r1, r3
 8004eba:	000b      	movs	r3, r1
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	08008b30 	.word	0x08008b30

08004ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ed0:	f7ff ffdc 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed4:	0001      	movs	r1, r0
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	0adb      	lsrs	r3, r3, #11
 8004edc:	2207      	movs	r2, #7
 8004ede:	4013      	ands	r3, r2
 8004ee0:	4a04      	ldr	r2, [pc, #16]	@ (8004ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ee2:	5cd3      	ldrb	r3, [r2, r3]
 8004ee4:	40d9      	lsrs	r1, r3
 8004ee6:	000b      	movs	r3, r1
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	08008b30 	.word	0x08008b30

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f00:	2017      	movs	r0, #23
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d100      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f12:	e0c7      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f14:	4b84      	ldr	r3, [pc, #528]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	055b      	lsls	r3, r3, #21
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d109      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	4b81      	ldr	r3, [pc, #516]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f24:	4b80      	ldr	r3, [pc, #512]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f26:	2180      	movs	r1, #128	@ 0x80
 8004f28:	0549      	lsls	r1, r1, #21
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004f2e:	183b      	adds	r3, r7, r0
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b7d      	ldr	r3, [pc, #500]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d11a      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f40:	4b7a      	ldr	r3, [pc, #488]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b79      	ldr	r3, [pc, #484]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004f46:	2180      	movs	r1, #128	@ 0x80
 8004f48:	0049      	lsls	r1, r1, #1
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fe fa15 	bl	800337c <HAL_GetTick>
 8004f52:	0003      	movs	r3, r0
 8004f54:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	e008      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7fe fa10 	bl	800337c <HAL_GetTick>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	@ 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0d9      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6a:	4b70      	ldr	r3, [pc, #448]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	@ 0x80
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4013      	ands	r3, r2
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004f76:	4b6c      	ldr	r3, [pc, #432]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	23c0      	movs	r3, #192	@ 0xc0
 8004f7c:	039b      	lsls	r3, r3, #14
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	23c0      	movs	r3, #192	@ 0xc0
 8004f88:	039b      	lsls	r3, r3, #14
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d013      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	23c0      	movs	r3, #192	@ 0xc0
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	23c0      	movs	r3, #192	@ 0xc0
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d10a      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fa4:	4b60      	ldr	r3, [pc, #384]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	401a      	ands	r2, r3
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d101      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0b1      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004fba:	4b5b      	ldr	r3, [pc, #364]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fbe:	23c0      	movs	r3, #192	@ 0xc0
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d03b      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	23c0      	movs	r3, #192	@ 0xc0
 8004fd2:	029b      	lsls	r3, r3, #10
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d033      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d02e      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004fe6:	4b50      	ldr	r3, [pc, #320]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fea:	4a51      	ldr	r2, [pc, #324]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ff2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ff6:	2180      	movs	r1, #128	@ 0x80
 8004ff8:	0309      	lsls	r1, r1, #12
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005002:	4b49      	ldr	r3, [pc, #292]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005004:	494b      	ldr	r1, [pc, #300]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005006:	400a      	ands	r2, r1
 8005008:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800500a:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4013      	ands	r3, r2
 8005018:	d014      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fe f9af 	bl	800337c <HAL_GetTick>
 800501e:	0003      	movs	r3, r0
 8005020:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005022:	e009      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fe f9aa 	bl	800337c <HAL_GetTick>
 8005028:	0002      	movs	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a42      	ldr	r2, [pc, #264]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e072      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005038:	4b3b      	ldr	r3, [pc, #236]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800503a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d0ef      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2220      	movs	r2, #32
 800504a:	4013      	ands	r3, r2
 800504c:	d01f      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	23c0      	movs	r3, #192	@ 0xc0
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	401a      	ands	r2, r3
 8005058:	23c0      	movs	r3, #192	@ 0xc0
 800505a:	029b      	lsls	r3, r3, #10
 800505c:	429a      	cmp	r2, r3
 800505e:	d10c      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005060:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a35      	ldr	r2, [pc, #212]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	23c0      	movs	r3, #192	@ 0xc0
 8005070:	039b      	lsls	r3, r3, #14
 8005072:	401a      	ands	r2, r3
 8005074:	4b2c      	ldr	r3, [pc, #176]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	4b2b      	ldr	r3, [pc, #172]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800507c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	23c0      	movs	r3, #192	@ 0xc0
 8005084:	029b      	lsls	r3, r3, #10
 8005086:	401a      	ands	r2, r3
 8005088:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800508a:	430a      	orrs	r2, r1
 800508c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800508e:	2317      	movs	r3, #23
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800509a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800509c:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800509e:	4928      	ldr	r1, [pc, #160]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2202      	movs	r2, #2
 80050aa:	4013      	ands	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b2:	220c      	movs	r2, #12
 80050b4:	4393      	bics	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050be:	430a      	orrs	r2, r1
 80050c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2204      	movs	r2, #4
 80050c8:	4013      	ands	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050cc:	4b16      	ldr	r3, [pc, #88]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	4013      	ands	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ee:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2280      	movs	r2, #128	@ 0x80
 8005104:	4013      	ands	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005108:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800510a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510c:	4a0f      	ldr	r2, [pc, #60]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800510e:	4013      	ands	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005118:	430a      	orrs	r2, r1
 800511a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b006      	add	sp, #24
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	fffcffff 	.word	0xfffcffff
 8005134:	fff7ffff 	.word	0xfff7ffff
 8005138:	00001388 	.word	0x00001388
 800513c:	ffcfffff 	.word	0xffcfffff
 8005140:	efffffff 	.word	0xefffffff
 8005144:	fffff3ff 	.word	0xfffff3ff
 8005148:	ffffcfff 	.word	0xffffcfff
 800514c:	fff3ffff 	.word	0xfff3ffff

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e044      	b.n	80051ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d107      	bne.n	800517a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2278      	movs	r2, #120	@ 0x78
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f7fd ff2b 	bl	8002fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2224      	movs	r2, #36	@ 0x24
 800517e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2101      	movs	r1, #1
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fb16 	bl	80057cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 f8c8 	bl	8005338 <UART_SetConfig>
 80051a8:	0003      	movs	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e01c      	b.n	80051ec <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	490d      	ldr	r1, [pc, #52]	@ (80051f4 <HAL_UART_Init+0xa4>)
 80051be:	400a      	ands	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	212a      	movs	r1, #42	@ 0x2a
 80051ce:	438a      	bics	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 fba5 	bl	8005934 <UART_CheckIdleState>
 80051ea:	0003      	movs	r3, r0
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b002      	add	sp, #8
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	ffffb7ff 	.word	0xffffb7ff

080051f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	@ 0x28
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	1dbb      	adds	r3, r7, #6
 8005206:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800520c:	2b20      	cmp	r3, #32
 800520e:	d000      	beq.n	8005212 <HAL_UART_Transmit+0x1a>
 8005210:	e08c      	b.n	800532c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_UART_Transmit+0x28>
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e084      	b.n	800532e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	015b      	lsls	r3, r3, #5
 800522c:	429a      	cmp	r2, r3
 800522e:	d109      	bne.n	8005244 <HAL_UART_Transmit+0x4c>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2201      	movs	r2, #1
 800523c:	4013      	ands	r3, r2
 800523e:	d001      	beq.n	8005244 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e074      	b.n	800532e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2284      	movs	r2, #132	@ 0x84
 8005248:	2100      	movs	r1, #0
 800524a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2221      	movs	r2, #33	@ 0x21
 8005250:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005252:	f7fe f893 	bl	800337c <HAL_GetTick>
 8005256:	0003      	movs	r3, r0
 8005258:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1dba      	adds	r2, r7, #6
 800525e:	2150      	movs	r1, #80	@ 0x50
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1dba      	adds	r2, r7, #6
 8005268:	2152      	movs	r1, #82	@ 0x52
 800526a:	8812      	ldrh	r2, [r2, #0]
 800526c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	015b      	lsls	r3, r3, #5
 8005276:	429a      	cmp	r2, r3
 8005278:	d108      	bne.n	800528c <HAL_UART_Transmit+0x94>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e003      	b.n	8005294 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005294:	e02f      	b.n	80052f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	0013      	movs	r3, r2
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	@ 0x80
 80052a4:	f000 fbee 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d004      	beq.n	80052b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e03b      	b.n	800532e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	001a      	movs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	05d2      	lsls	r2, r2, #23
 80052c8:	0dd2      	lsrs	r2, r2, #23
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	3302      	adds	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e007      	b.n	80052e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3301      	adds	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2252      	movs	r2, #82	@ 0x52
 80052e8:	5a9b      	ldrh	r3, [r3, r2]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b299      	uxth	r1, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2252      	movs	r2, #82	@ 0x52
 80052f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2252      	movs	r2, #82	@ 0x52
 80052fa:	5a9b      	ldrh	r3, [r3, r2]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1c9      	bne.n	8005296 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	0013      	movs	r3, r2
 800530c:	2200      	movs	r2, #0
 800530e:	2140      	movs	r1, #64	@ 0x40
 8005310:	f000 fbb8 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005314:	1e03      	subs	r3, r0, #0
 8005316:	d004      	beq.n	8005322 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e005      	b.n	800532e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	0018      	movs	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	b008      	add	sp, #32
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	b5b0      	push	{r4, r5, r7, lr}
 800533a:	b08e      	sub	sp, #56	@ 0x38
 800533c:	af00      	add	r7, sp, #0
 800533e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005340:	231a      	movs	r3, #26
 8005342:	2218      	movs	r2, #24
 8005344:	189b      	adds	r3, r3, r2
 8005346:	19db      	adds	r3, r3, r7
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	431a      	orrs	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4ab4      	ldr	r2, [pc, #720]	@ (800563c <UART_SetConfig+0x304>)
 800536c:	4013      	ands	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005376:	430a      	orrs	r2, r1
 8005378:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4aaf      	ldr	r2, [pc, #700]	@ (8005640 <UART_SetConfig+0x308>)
 8005382:	4013      	ands	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aa9      	ldr	r2, [pc, #676]	@ (8005644 <UART_SetConfig+0x30c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053a8:	4313      	orrs	r3, r2
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4aa5      	ldr	r2, [pc, #660]	@ (8005648 <UART_SetConfig+0x310>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4aa1      	ldr	r2, [pc, #644]	@ (800564c <UART_SetConfig+0x314>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d131      	bne.n	8005430 <UART_SetConfig+0xf8>
 80053cc:	4ba0      	ldr	r3, [pc, #640]	@ (8005650 <UART_SetConfig+0x318>)
 80053ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d0:	220c      	movs	r2, #12
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d01d      	beq.n	8005414 <UART_SetConfig+0xdc>
 80053d8:	d823      	bhi.n	8005422 <UART_SetConfig+0xea>
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d00c      	beq.n	80053f8 <UART_SetConfig+0xc0>
 80053de:	d820      	bhi.n	8005422 <UART_SetConfig+0xea>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <UART_SetConfig+0xb2>
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d00e      	beq.n	8005406 <UART_SetConfig+0xce>
 80053e8:	e01b      	b.n	8005422 <UART_SetConfig+0xea>
 80053ea:	231b      	movs	r3, #27
 80053ec:	2218      	movs	r2, #24
 80053ee:	189b      	adds	r3, r3, r2
 80053f0:	19db      	adds	r3, r3, r7
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	e065      	b.n	80054c4 <UART_SetConfig+0x18c>
 80053f8:	231b      	movs	r3, #27
 80053fa:	2218      	movs	r2, #24
 80053fc:	189b      	adds	r3, r3, r2
 80053fe:	19db      	adds	r3, r3, r7
 8005400:	2202      	movs	r2, #2
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e05e      	b.n	80054c4 <UART_SetConfig+0x18c>
 8005406:	231b      	movs	r3, #27
 8005408:	2218      	movs	r2, #24
 800540a:	189b      	adds	r3, r3, r2
 800540c:	19db      	adds	r3, r3, r7
 800540e:	2204      	movs	r2, #4
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e057      	b.n	80054c4 <UART_SetConfig+0x18c>
 8005414:	231b      	movs	r3, #27
 8005416:	2218      	movs	r2, #24
 8005418:	189b      	adds	r3, r3, r2
 800541a:	19db      	adds	r3, r3, r7
 800541c:	2208      	movs	r2, #8
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e050      	b.n	80054c4 <UART_SetConfig+0x18c>
 8005422:	231b      	movs	r3, #27
 8005424:	2218      	movs	r2, #24
 8005426:	189b      	adds	r3, r3, r2
 8005428:	19db      	adds	r3, r3, r7
 800542a:	2210      	movs	r2, #16
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e049      	b.n	80054c4 <UART_SetConfig+0x18c>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a83      	ldr	r2, [pc, #524]	@ (8005644 <UART_SetConfig+0x30c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d13e      	bne.n	80054b8 <UART_SetConfig+0x180>
 800543a:	4b85      	ldr	r3, [pc, #532]	@ (8005650 <UART_SetConfig+0x318>)
 800543c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800543e:	23c0      	movs	r3, #192	@ 0xc0
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4013      	ands	r3, r2
 8005444:	22c0      	movs	r2, #192	@ 0xc0
 8005446:	0112      	lsls	r2, r2, #4
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <UART_SetConfig+0x164>
 800544c:	22c0      	movs	r2, #192	@ 0xc0
 800544e:	0112      	lsls	r2, r2, #4
 8005450:	4293      	cmp	r3, r2
 8005452:	d82a      	bhi.n	80054aa <UART_SetConfig+0x172>
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	4293      	cmp	r3, r2
 800545a:	d011      	beq.n	8005480 <UART_SetConfig+0x148>
 800545c:	2280      	movs	r2, #128	@ 0x80
 800545e:	0112      	lsls	r2, r2, #4
 8005460:	4293      	cmp	r3, r2
 8005462:	d822      	bhi.n	80054aa <UART_SetConfig+0x172>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <UART_SetConfig+0x13a>
 8005468:	2280      	movs	r2, #128	@ 0x80
 800546a:	00d2      	lsls	r2, r2, #3
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <UART_SetConfig+0x156>
 8005470:	e01b      	b.n	80054aa <UART_SetConfig+0x172>
 8005472:	231b      	movs	r3, #27
 8005474:	2218      	movs	r2, #24
 8005476:	189b      	adds	r3, r3, r2
 8005478:	19db      	adds	r3, r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e021      	b.n	80054c4 <UART_SetConfig+0x18c>
 8005480:	231b      	movs	r3, #27
 8005482:	2218      	movs	r2, #24
 8005484:	189b      	adds	r3, r3, r2
 8005486:	19db      	adds	r3, r3, r7
 8005488:	2202      	movs	r2, #2
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	e01a      	b.n	80054c4 <UART_SetConfig+0x18c>
 800548e:	231b      	movs	r3, #27
 8005490:	2218      	movs	r2, #24
 8005492:	189b      	adds	r3, r3, r2
 8005494:	19db      	adds	r3, r3, r7
 8005496:	2204      	movs	r2, #4
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e013      	b.n	80054c4 <UART_SetConfig+0x18c>
 800549c:	231b      	movs	r3, #27
 800549e:	2218      	movs	r2, #24
 80054a0:	189b      	adds	r3, r3, r2
 80054a2:	19db      	adds	r3, r3, r7
 80054a4:	2208      	movs	r2, #8
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e00c      	b.n	80054c4 <UART_SetConfig+0x18c>
 80054aa:	231b      	movs	r3, #27
 80054ac:	2218      	movs	r2, #24
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	19db      	adds	r3, r3, r7
 80054b2:	2210      	movs	r2, #16
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e005      	b.n	80054c4 <UART_SetConfig+0x18c>
 80054b8:	231b      	movs	r3, #27
 80054ba:	2218      	movs	r2, #24
 80054bc:	189b      	adds	r3, r3, r2
 80054be:	19db      	adds	r3, r3, r7
 80054c0:	2210      	movs	r2, #16
 80054c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005644 <UART_SetConfig+0x30c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d000      	beq.n	80054d0 <UART_SetConfig+0x198>
 80054ce:	e084      	b.n	80055da <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054d0:	231b      	movs	r3, #27
 80054d2:	2218      	movs	r2, #24
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	19db      	adds	r3, r3, r7
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d01d      	beq.n	800551a <UART_SetConfig+0x1e2>
 80054de:	dc20      	bgt.n	8005522 <UART_SetConfig+0x1ea>
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d015      	beq.n	8005510 <UART_SetConfig+0x1d8>
 80054e4:	dc1d      	bgt.n	8005522 <UART_SetConfig+0x1ea>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <UART_SetConfig+0x1b8>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d005      	beq.n	80054fa <UART_SetConfig+0x1c2>
 80054ee:	e018      	b.n	8005522 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7ff fcd6 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 80054f4:	0003      	movs	r3, r0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054f8:	e01c      	b.n	8005534 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054fa:	4b55      	ldr	r3, [pc, #340]	@ (8005650 <UART_SetConfig+0x318>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2210      	movs	r2, #16
 8005500:	4013      	ands	r3, r2
 8005502:	d002      	beq.n	800550a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005504:	4b53      	ldr	r3, [pc, #332]	@ (8005654 <UART_SetConfig+0x31c>)
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005508:	e014      	b.n	8005534 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800550a:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <UART_SetConfig+0x320>)
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800550e:	e011      	b.n	8005534 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005510:	f7ff fc36 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8005514:	0003      	movs	r3, r0
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005518:	e00c      	b.n	8005534 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005520:	e008      	b.n	8005534 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005526:	231a      	movs	r3, #26
 8005528:	2218      	movs	r2, #24
 800552a:	189b      	adds	r3, r3, r2
 800552c:	19db      	adds	r3, r3, r7
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
        break;
 8005532:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d100      	bne.n	800553c <UART_SetConfig+0x204>
 800553a:	e12f      	b.n	800579c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	0013      	movs	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	189b      	adds	r3, r3, r2
 8005546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005548:	429a      	cmp	r2, r3
 800554a:	d305      	bcc.n	8005558 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005554:	429a      	cmp	r2, r3
 8005556:	d906      	bls.n	8005566 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005558:	231a      	movs	r3, #26
 800555a:	2218      	movs	r2, #24
 800555c:	189b      	adds	r3, r3, r2
 800555e:	19db      	adds	r3, r3, r7
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e11a      	b.n	800579c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	6939      	ldr	r1, [r7, #16]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	000b      	movs	r3, r1
 8005574:	0e1b      	lsrs	r3, r3, #24
 8005576:	0010      	movs	r0, r2
 8005578:	0205      	lsls	r5, r0, #8
 800557a:	431d      	orrs	r5, r3
 800557c:	000b      	movs	r3, r1
 800557e:	021c      	lsls	r4, r3, #8
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68b8      	ldr	r0, [r7, #8]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	1900      	adds	r0, r0, r4
 8005592:	4169      	adcs	r1, r5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f7fa ff81 	bl	80004a8 <__aeabi_uldivmod>
 80055a6:	0002      	movs	r2, r0
 80055a8:	000b      	movs	r3, r1
 80055aa:	0013      	movs	r3, r2
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055b0:	23c0      	movs	r3, #192	@ 0xc0
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d309      	bcc.n	80055cc <UART_SetConfig+0x294>
 80055b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ba:	2380      	movs	r3, #128	@ 0x80
 80055bc:	035b      	lsls	r3, r3, #13
 80055be:	429a      	cmp	r2, r3
 80055c0:	d204      	bcs.n	80055cc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	e0e7      	b.n	800579c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80055cc:	231a      	movs	r3, #26
 80055ce:	2218      	movs	r2, #24
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	19db      	adds	r3, r3, r7
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e0e0      	b.n	800579c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d000      	beq.n	80055e8 <UART_SetConfig+0x2b0>
 80055e6:	e082      	b.n	80056ee <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80055e8:	231b      	movs	r3, #27
 80055ea:	2218      	movs	r2, #24
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	19db      	adds	r3, r3, r7
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d834      	bhi.n	8005660 <UART_SetConfig+0x328>
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	4b18      	ldr	r3, [pc, #96]	@ (800565c <UART_SetConfig+0x324>)
 80055fa:	18d3      	adds	r3, r2, r3
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7ff fc4e 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 8005604:	0003      	movs	r3, r0
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005608:	e033      	b.n	8005672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800560a:	f7ff fc5f 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 800560e:	0003      	movs	r3, r0
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005612:	e02e      	b.n	8005672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005614:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <UART_SetConfig+0x318>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2210      	movs	r2, #16
 800561a:	4013      	ands	r3, r2
 800561c:	d002      	beq.n	8005624 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <UART_SetConfig+0x31c>)
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005622:	e026      	b.n	8005672 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005624:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <UART_SetConfig+0x320>)
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005628:	e023      	b.n	8005672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7ff fba9 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 800562e:	0003      	movs	r3, r0
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005632:	e01e      	b.n	8005672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800563a:	e01a      	b.n	8005672 <UART_SetConfig+0x33a>
 800563c:	efff69f3 	.word	0xefff69f3
 8005640:	ffffcfff 	.word	0xffffcfff
 8005644:	40004800 	.word	0x40004800
 8005648:	fffff4ff 	.word	0xfffff4ff
 800564c:	40004400 	.word	0x40004400
 8005650:	40021000 	.word	0x40021000
 8005654:	003d0900 	.word	0x003d0900
 8005658:	00f42400 	.word	0x00f42400
 800565c:	08008b44 	.word	0x08008b44
      default:
        pclk = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005664:	231a      	movs	r3, #26
 8005666:	2218      	movs	r2, #24
 8005668:	189b      	adds	r3, r3, r2
 800566a:	19db      	adds	r3, r3, r7
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
        break;
 8005670:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d100      	bne.n	800567a <UART_SetConfig+0x342>
 8005678:	e090      	b.n	800579c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	005a      	lsls	r2, r3, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	18d2      	adds	r2, r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	0019      	movs	r1, r3
 800568c:	0010      	movs	r0, r2
 800568e:	f7fa fd57 	bl	8000140 <__udivsi3>
 8005692:	0003      	movs	r3, r0
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d921      	bls.n	80056e0 <UART_SetConfig+0x3a8>
 800569c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	025b      	lsls	r3, r3, #9
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d21c      	bcs.n	80056e0 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	200e      	movs	r0, #14
 80056ac:	2418      	movs	r4, #24
 80056ae:	1903      	adds	r3, r0, r4
 80056b0:	19db      	adds	r3, r3, r7
 80056b2:	210f      	movs	r1, #15
 80056b4:	438a      	bics	r2, r1
 80056b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2207      	movs	r2, #7
 80056c0:	4013      	ands	r3, r2
 80056c2:	b299      	uxth	r1, r3
 80056c4:	1903      	adds	r3, r0, r4
 80056c6:	19db      	adds	r3, r3, r7
 80056c8:	1902      	adds	r2, r0, r4
 80056ca:	19d2      	adds	r2, r2, r7
 80056cc:	8812      	ldrh	r2, [r2, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1902      	adds	r2, r0, r4
 80056d8:	19d2      	adds	r2, r2, r7
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	e05d      	b.n	800579c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80056e0:	231a      	movs	r3, #26
 80056e2:	2218      	movs	r2, #24
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	19db      	adds	r3, r3, r7
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e056      	b.n	800579c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ee:	231b      	movs	r3, #27
 80056f0:	2218      	movs	r2, #24
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	19db      	adds	r3, r3, r7
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d822      	bhi.n	8005742 <UART_SetConfig+0x40a>
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <UART_SetConfig+0x484>)
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005706:	f7ff fbcb 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 800570a:	0003      	movs	r3, r0
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800570e:	e021      	b.n	8005754 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7ff fbdc 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 8005714:	0003      	movs	r3, r0
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005718:	e01c      	b.n	8005754 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800571a:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <UART_SetConfig+0x488>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2210      	movs	r2, #16
 8005720:	4013      	ands	r3, r2
 8005722:	d002      	beq.n	800572a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005724:	4b27      	ldr	r3, [pc, #156]	@ (80057c4 <UART_SetConfig+0x48c>)
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005728:	e014      	b.n	8005754 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800572a:	4b27      	ldr	r3, [pc, #156]	@ (80057c8 <UART_SetConfig+0x490>)
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800572e:	e011      	b.n	8005754 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005730:	f7ff fb26 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8005734:	0003      	movs	r3, r0
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573a:	2380      	movs	r3, #128	@ 0x80
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005740:	e008      	b.n	8005754 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005746:	231a      	movs	r3, #26
 8005748:	2218      	movs	r2, #24
 800574a:	189b      	adds	r3, r3, r2
 800574c:	19db      	adds	r3, r3, r7
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
        break;
 8005752:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	18d2      	adds	r2, r2, r3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0019      	movs	r1, r3
 800576a:	0010      	movs	r0, r2
 800576c:	f7fa fce8 	bl	8000140 <__udivsi3>
 8005770:	0003      	movs	r3, r0
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d90a      	bls.n	8005790 <UART_SetConfig+0x458>
 800577a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	429a      	cmp	r2, r3
 8005782:	d205      	bcs.n	8005790 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	b29a      	uxth	r2, r3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e005      	b.n	800579c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005790:	231a      	movs	r3, #26
 8005792:	2218      	movs	r2, #24
 8005794:	189b      	adds	r3, r3, r2
 8005796:	19db      	adds	r3, r3, r7
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	2200      	movs	r2, #0
 80057a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057a8:	231a      	movs	r3, #26
 80057aa:	2218      	movs	r2, #24
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	19db      	adds	r3, r3, r7
 80057b0:	781b      	ldrb	r3, [r3, #0]
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b00e      	add	sp, #56	@ 0x38
 80057b8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	08008b68 	.word	0x08008b68
 80057c0:	40021000 	.word	0x40021000
 80057c4:	003d0900 	.word	0x003d0900
 80057c8:	00f42400 	.word	0x00f42400

080057cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	2208      	movs	r2, #8
 80057da:	4013      	ands	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005910 <UART_AdvFeatureConfig+0x144>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	0019      	movs	r1, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	2201      	movs	r2, #1
 80057fc:	4013      	ands	r3, r2
 80057fe:	d00b      	beq.n	8005818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <UART_AdvFeatureConfig+0x148>)
 8005808:	4013      	ands	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	2202      	movs	r2, #2
 800581e:	4013      	ands	r3, r2
 8005820:	d00b      	beq.n	800583a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a3b      	ldr	r2, [pc, #236]	@ (8005918 <UART_AdvFeatureConfig+0x14c>)
 800582a:	4013      	ands	r3, r2
 800582c:	0019      	movs	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	2204      	movs	r2, #4
 8005840:	4013      	ands	r3, r2
 8005842:	d00b      	beq.n	800585c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4a34      	ldr	r2, [pc, #208]	@ (800591c <UART_AdvFeatureConfig+0x150>)
 800584c:	4013      	ands	r3, r2
 800584e:	0019      	movs	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	2210      	movs	r2, #16
 8005862:	4013      	ands	r3, r2
 8005864:	d00b      	beq.n	800587e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <UART_AdvFeatureConfig+0x154>)
 800586e:	4013      	ands	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	2220      	movs	r2, #32
 8005884:	4013      	ands	r3, r2
 8005886:	d00b      	beq.n	80058a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <UART_AdvFeatureConfig+0x158>)
 8005890:	4013      	ands	r3, r2
 8005892:	0019      	movs	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	2240      	movs	r2, #64	@ 0x40
 80058a6:	4013      	ands	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <UART_AdvFeatureConfig+0x15c>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c6:	2380      	movs	r3, #128	@ 0x80
 80058c8:	035b      	lsls	r3, r3, #13
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d10b      	bne.n	80058e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a15      	ldr	r2, [pc, #84]	@ (800592c <UART_AdvFeatureConfig+0x160>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	2280      	movs	r2, #128	@ 0x80
 80058ec:	4013      	ands	r3, r2
 80058ee:	d00b      	beq.n	8005908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <UART_AdvFeatureConfig+0x164>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }
}
 8005908:	46c0      	nop			@ (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}
 8005910:	ffff7fff 	.word	0xffff7fff
 8005914:	fffdffff 	.word	0xfffdffff
 8005918:	fffeffff 	.word	0xfffeffff
 800591c:	fffbffff 	.word	0xfffbffff
 8005920:	ffffefff 	.word	0xffffefff
 8005924:	ffffdfff 	.word	0xffffdfff
 8005928:	ffefffff 	.word	0xffefffff
 800592c:	ff9fffff 	.word	0xff9fffff
 8005930:	fff7ffff 	.word	0xfff7ffff

08005934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b092      	sub	sp, #72	@ 0x48
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2284      	movs	r2, #132	@ 0x84
 8005940:	2100      	movs	r1, #0
 8005942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005944:	f7fd fd1a 	bl	800337c <HAL_GetTick>
 8005948:	0003      	movs	r3, r0
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2208      	movs	r2, #8
 8005954:	4013      	ands	r3, r2
 8005956:	2b08      	cmp	r3, #8
 8005958:	d12c      	bne.n	80059b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595c:	2280      	movs	r2, #128	@ 0x80
 800595e:	0391      	lsls	r1, r2, #14
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4a46      	ldr	r2, [pc, #280]	@ (8005a7c <UART_CheckIdleState+0x148>)
 8005964:	9200      	str	r2, [sp, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	f000 f88c 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d021      	beq.n	80059b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005970:	f3ef 8310 	mrs	r3, PRIMASK
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800597a:	2301      	movs	r3, #1
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	f383 8810 	msr	PRIMASK, r3
}
 8005984:	46c0      	nop			@ (mov r8, r8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2180      	movs	r1, #128	@ 0x80
 8005992:	438a      	bics	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2278      	movs	r2, #120	@ 0x78
 80059ac:	2100      	movs	r1, #0
 80059ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e05f      	b.n	8005a74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2204      	movs	r2, #4
 80059bc:	4013      	ands	r3, r2
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d146      	bne.n	8005a50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c4:	2280      	movs	r2, #128	@ 0x80
 80059c6:	03d1      	lsls	r1, r2, #15
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4a2c      	ldr	r2, [pc, #176]	@ (8005a7c <UART_CheckIdleState+0x148>)
 80059cc:	9200      	str	r2, [sp, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f000 f858 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 80059d4:	1e03      	subs	r3, r0, #0
 80059d6:	d03b      	beq.n	8005a50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d8:	f3ef 8310 	mrs	r3, PRIMASK
 80059dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e2:	2301      	movs	r3, #1
 80059e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f383 8810 	msr	PRIMASK, r3
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4921      	ldr	r1, [pc, #132]	@ (8005a80 <UART_CheckIdleState+0x14c>)
 80059fa:	400a      	ands	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f383 8810 	msr	PRIMASK, r3
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a14:	2301      	movs	r3, #1
 8005a16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	438a      	bics	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2280      	movs	r2, #128	@ 0x80
 8005a40:	2120      	movs	r1, #32
 8005a42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2278      	movs	r2, #120	@ 0x78
 8005a48:	2100      	movs	r1, #0
 8005a4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e011      	b.n	8005a74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2280      	movs	r2, #128	@ 0x80
 8005a5a:	2120      	movs	r1, #32
 8005a5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2278      	movs	r2, #120	@ 0x78
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b010      	add	sp, #64	@ 0x40
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	01ffffff 	.word	0x01ffffff
 8005a80:	fffffedf 	.word	0xfffffedf

08005a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	1dfb      	adds	r3, r7, #7
 8005a92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a94:	e051      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	d04e      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9c:	f7fd fc6e 	bl	800337c <HAL_GetTick>
 8005aa0:	0002      	movs	r2, r0
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e051      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2204      	movs	r2, #4
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d03b      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b80      	cmp	r3, #128	@ 0x80
 8005ac6:	d038      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d035      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d111      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 f83c 	bl	8005b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2284      	movs	r2, #132	@ 0x84
 8005af0:	2108      	movs	r1, #8
 8005af2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2278      	movs	r2, #120	@ 0x78
 8005af8:	2100      	movs	r1, #0
 8005afa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e02c      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	2380      	movs	r3, #128	@ 0x80
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d112      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2280      	movs	r2, #128	@ 0x80
 8005b1a:	0112      	lsls	r2, r2, #4
 8005b1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 f81f 	bl	8005b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2284      	movs	r2, #132	@ 0x84
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2278      	movs	r2, #120	@ 0x78
 8005b32:	2100      	movs	r1, #0
 8005b34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e00f      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	425a      	negs	r2, r3
 8005b4a:	4153      	adcs	r3, r2
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	001a      	movs	r2, r3
 8005b50:	1dfb      	adds	r3, r7, #7
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d09e      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08e      	sub	sp, #56	@ 0x38
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b70:	617b      	str	r3, [r7, #20]
  return(result);
 8005b72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b76:	2301      	movs	r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f383 8810 	msr	PRIMASK, r3
}
 8005b80:	46c0      	nop			@ (mov r8, r8)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4926      	ldr	r1, [pc, #152]	@ (8005c28 <UART_EndRxTransfer+0xc4>)
 8005b8e:	400a      	ands	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f383 8810 	msr	PRIMASK, r3
}
 8005b9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d118      	bne.n	8005c0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be2:	2301      	movs	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f383 8810 	msr	PRIMASK, r3
}
 8005bec:	46c0      	nop			@ (mov r8, r8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2110      	movs	r1, #16
 8005bfa:	438a      	bics	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2280      	movs	r2, #128	@ 0x80
 8005c0e:	2120      	movs	r1, #32
 8005c10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b00e      	add	sp, #56	@ 0x38
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	fffffedf 	.word	0xfffffedf

08005c2c <__cvt>:
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	001f      	movs	r7, r3
 8005c30:	2300      	movs	r3, #0
 8005c32:	0016      	movs	r6, r2
 8005c34:	b08b      	sub	sp, #44	@ 0x2c
 8005c36:	429f      	cmp	r7, r3
 8005c38:	da04      	bge.n	8005c44 <__cvt+0x18>
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	0609      	lsls	r1, r1, #24
 8005c3e:	187b      	adds	r3, r7, r1
 8005c40:	001f      	movs	r7, r3
 8005c42:	232d      	movs	r3, #45	@ 0x2d
 8005c44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c46:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005c48:	7013      	strb	r3, [r2, #0]
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	439d      	bics	r5, r3
 8005c50:	2d46      	cmp	r5, #70	@ 0x46
 8005c52:	d007      	beq.n	8005c64 <__cvt+0x38>
 8005c54:	002b      	movs	r3, r5
 8005c56:	3b45      	subs	r3, #69	@ 0x45
 8005c58:	4259      	negs	r1, r3
 8005c5a:	414b      	adcs	r3, r1
 8005c5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	18cb      	adds	r3, r1, r3
 8005c62:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c64:	ab09      	add	r3, sp, #36	@ 0x24
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	ab08      	add	r3, sp, #32
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c6e:	9200      	str	r2, [sp, #0]
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c74:	0032      	movs	r2, r6
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	003b      	movs	r3, r7
 8005c7a:	f000 fe95 	bl	80069a8 <_dtoa_r>
 8005c7e:	0004      	movs	r4, r0
 8005c80:	2d47      	cmp	r5, #71	@ 0x47
 8005c82:	d11b      	bne.n	8005cbc <__cvt+0x90>
 8005c84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c86:	07db      	lsls	r3, r3, #31
 8005c88:	d511      	bpl.n	8005cae <__cvt+0x82>
 8005c8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c8c:	18c3      	adds	r3, r0, r3
 8005c8e:	9307      	str	r3, [sp, #28]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	0030      	movs	r0, r6
 8005c96:	0039      	movs	r1, r7
 8005c98:	f7fa fbd8 	bl	800044c <__aeabi_dcmpeq>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d001      	beq.n	8005ca4 <__cvt+0x78>
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca4:	2230      	movs	r2, #48	@ 0x30
 8005ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca8:	9907      	ldr	r1, [sp, #28]
 8005caa:	428b      	cmp	r3, r1
 8005cac:	d320      	bcc.n	8005cf0 <__cvt+0xc4>
 8005cae:	0020      	movs	r0, r4
 8005cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005cb4:	1b1b      	subs	r3, r3, r4
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	b00b      	add	sp, #44	@ 0x2c
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cbe:	18c3      	adds	r3, r0, r3
 8005cc0:	9307      	str	r3, [sp, #28]
 8005cc2:	2d46      	cmp	r5, #70	@ 0x46
 8005cc4:	d1e4      	bne.n	8005c90 <__cvt+0x64>
 8005cc6:	7803      	ldrb	r3, [r0, #0]
 8005cc8:	2b30      	cmp	r3, #48	@ 0x30
 8005cca:	d10c      	bne.n	8005ce6 <__cvt+0xba>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	0030      	movs	r0, r6
 8005cd2:	0039      	movs	r1, r7
 8005cd4:	f7fa fbba 	bl	800044c <__aeabi_dcmpeq>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d104      	bne.n	8005ce6 <__cvt+0xba>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ce8:	9a07      	ldr	r2, [sp, #28]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	18d3      	adds	r3, r2, r3
 8005cee:	e7ce      	b.n	8005c8e <__cvt+0x62>
 8005cf0:	1c59      	adds	r1, r3, #1
 8005cf2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e7d6      	b.n	8005ca6 <__cvt+0x7a>

08005cf8 <__exponent>:
 8005cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfa:	232b      	movs	r3, #43	@ 0x2b
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	0005      	movs	r5, r0
 8005d00:	1e0c      	subs	r4, r1, #0
 8005d02:	7002      	strb	r2, [r0, #0]
 8005d04:	da01      	bge.n	8005d0a <__exponent+0x12>
 8005d06:	424c      	negs	r4, r1
 8005d08:	3302      	adds	r3, #2
 8005d0a:	706b      	strb	r3, [r5, #1]
 8005d0c:	2c09      	cmp	r4, #9
 8005d0e:	dd2c      	ble.n	8005d6a <__exponent+0x72>
 8005d10:	ab02      	add	r3, sp, #8
 8005d12:	1dde      	adds	r6, r3, #7
 8005d14:	0020      	movs	r0, r4
 8005d16:	210a      	movs	r1, #10
 8005d18:	f7fa fb82 	bl	8000420 <__aeabi_idivmod>
 8005d1c:	0037      	movs	r7, r6
 8005d1e:	3130      	adds	r1, #48	@ 0x30
 8005d20:	3e01      	subs	r6, #1
 8005d22:	0020      	movs	r0, r4
 8005d24:	7031      	strb	r1, [r6, #0]
 8005d26:	210a      	movs	r1, #10
 8005d28:	9401      	str	r4, [sp, #4]
 8005d2a:	f7fa fa93 	bl	8000254 <__divsi3>
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	0004      	movs	r4, r0
 8005d32:	2b63      	cmp	r3, #99	@ 0x63
 8005d34:	dcee      	bgt.n	8005d14 <__exponent+0x1c>
 8005d36:	1eba      	subs	r2, r7, #2
 8005d38:	1ca8      	adds	r0, r5, #2
 8005d3a:	0001      	movs	r1, r0
 8005d3c:	0013      	movs	r3, r2
 8005d3e:	3430      	adds	r4, #48	@ 0x30
 8005d40:	7014      	strb	r4, [r2, #0]
 8005d42:	ac02      	add	r4, sp, #8
 8005d44:	3407      	adds	r4, #7
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d80a      	bhi.n	8005d60 <__exponent+0x68>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4294      	cmp	r4, r2
 8005d4e:	d303      	bcc.n	8005d58 <__exponent+0x60>
 8005d50:	3309      	adds	r3, #9
 8005d52:	aa02      	add	r2, sp, #8
 8005d54:	189b      	adds	r3, r3, r2
 8005d56:	1bdb      	subs	r3, r3, r7
 8005d58:	18c0      	adds	r0, r0, r3
 8005d5a:	1b40      	subs	r0, r0, r5
 8005d5c:	b005      	add	sp, #20
 8005d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d60:	781c      	ldrb	r4, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	700c      	strb	r4, [r1, #0]
 8005d66:	3101      	adds	r1, #1
 8005d68:	e7eb      	b.n	8005d42 <__exponent+0x4a>
 8005d6a:	2330      	movs	r3, #48	@ 0x30
 8005d6c:	18e4      	adds	r4, r4, r3
 8005d6e:	70ab      	strb	r3, [r5, #2]
 8005d70:	1d28      	adds	r0, r5, #4
 8005d72:	70ec      	strb	r4, [r5, #3]
 8005d74:	e7f1      	b.n	8005d5a <__exponent+0x62>
	...

08005d78 <_printf_float>:
 8005d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7a:	b097      	sub	sp, #92	@ 0x5c
 8005d7c:	000d      	movs	r5, r1
 8005d7e:	920a      	str	r2, [sp, #40]	@ 0x28
 8005d80:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005d82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d84:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d86:	f000 fcff 	bl	8006788 <_localeconv_r>
 8005d8a:	6803      	ldr	r3, [r0, #0]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d90:	f7fa f9ba 	bl	8000108 <strlen>
 8005d94:	2300      	movs	r3, #0
 8005d96:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d98:	9314      	str	r3, [sp, #80]	@ 0x50
 8005d9a:	7e2b      	ldrb	r3, [r5, #24]
 8005d9c:	2207      	movs	r2, #7
 8005d9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005da4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	05c9      	lsls	r1, r1, #23
 8005daa:	d545      	bpl.n	8005e38 <_printf_float+0xc0>
 8005dac:	189b      	adds	r3, r3, r2
 8005dae:	4393      	bics	r3, r2
 8005db0:	001a      	movs	r2, r3
 8005db2:	3208      	adds	r2, #8
 8005db4:	6022      	str	r2, [r4, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	681e      	ldr	r6, [r3, #0]
 8005dba:	685f      	ldr	r7, [r3, #4]
 8005dbc:	007b      	lsls	r3, r7, #1
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005dc2:	9610      	str	r6, [sp, #64]	@ 0x40
 8005dc4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005dc6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005dc8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005dca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005dcc:	4ba7      	ldr	r3, [pc, #668]	@ (800606c <_printf_float+0x2f4>)
 8005dce:	4252      	negs	r2, r2
 8005dd0:	f7fc fdfc 	bl	80029cc <__aeabi_dcmpun>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d131      	bne.n	8005e3c <_printf_float+0xc4>
 8005dd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005dda:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4ba3      	ldr	r3, [pc, #652]	@ (800606c <_printf_float+0x2f4>)
 8005de0:	4252      	negs	r2, r2
 8005de2:	f7fa fb43 	bl	800046c <__aeabi_dcmple>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d128      	bne.n	8005e3c <_printf_float+0xc4>
 8005dea:	2200      	movs	r2, #0
 8005dec:	2300      	movs	r3, #0
 8005dee:	0030      	movs	r0, r6
 8005df0:	0039      	movs	r1, r7
 8005df2:	f7fa fb31 	bl	8000458 <__aeabi_dcmplt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d003      	beq.n	8005e02 <_printf_float+0x8a>
 8005dfa:	002b      	movs	r3, r5
 8005dfc:	222d      	movs	r2, #45	@ 0x2d
 8005dfe:	3343      	adds	r3, #67	@ 0x43
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e04:	4f9a      	ldr	r7, [pc, #616]	@ (8006070 <_printf_float+0x2f8>)
 8005e06:	2b47      	cmp	r3, #71	@ 0x47
 8005e08:	d800      	bhi.n	8005e0c <_printf_float+0x94>
 8005e0a:	4f9a      	ldr	r7, [pc, #616]	@ (8006074 <_printf_float+0x2fc>)
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	2400      	movs	r4, #0
 8005e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e12:	612b      	str	r3, [r5, #16]
 8005e14:	3301      	adds	r3, #1
 8005e16:	439a      	bics	r2, r3
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e1c:	0029      	movs	r1, r5
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e24:	aa15      	add	r2, sp, #84	@ 0x54
 8005e26:	f000 f9e5 	bl	80061f4 <_printf_common>
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d000      	beq.n	8005e30 <_printf_float+0xb8>
 8005e2e:	e09e      	b.n	8005f6e <_printf_float+0x1f6>
 8005e30:	2001      	movs	r0, #1
 8005e32:	4240      	negs	r0, r0
 8005e34:	b017      	add	sp, #92	@ 0x5c
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	3307      	adds	r3, #7
 8005e3a:	e7b8      	b.n	8005dae <_printf_float+0x36>
 8005e3c:	0032      	movs	r2, r6
 8005e3e:	003b      	movs	r3, r7
 8005e40:	0030      	movs	r0, r6
 8005e42:	0039      	movs	r1, r7
 8005e44:	f7fc fdc2 	bl	80029cc <__aeabi_dcmpun>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d00b      	beq.n	8005e64 <_printf_float+0xec>
 8005e4c:	2f00      	cmp	r7, #0
 8005e4e:	da03      	bge.n	8005e58 <_printf_float+0xe0>
 8005e50:	002b      	movs	r3, r5
 8005e52:	222d      	movs	r2, #45	@ 0x2d
 8005e54:	3343      	adds	r3, #67	@ 0x43
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e5a:	4f87      	ldr	r7, [pc, #540]	@ (8006078 <_printf_float+0x300>)
 8005e5c:	2b47      	cmp	r3, #71	@ 0x47
 8005e5e:	d8d5      	bhi.n	8005e0c <_printf_float+0x94>
 8005e60:	4f86      	ldr	r7, [pc, #536]	@ (800607c <_printf_float+0x304>)
 8005e62:	e7d3      	b.n	8005e0c <_printf_float+0x94>
 8005e64:	2220      	movs	r2, #32
 8005e66:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005e68:	686b      	ldr	r3, [r5, #4]
 8005e6a:	4394      	bics	r4, r2
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	d146      	bne.n	8005efe <_printf_float+0x186>
 8005e70:	3307      	adds	r3, #7
 8005e72:	606b      	str	r3, [r5, #4]
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	9206      	str	r2, [sp, #24]
 8005e82:	aa14      	add	r2, sp, #80	@ 0x50
 8005e84:	9205      	str	r2, [sp, #20]
 8005e86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e88:	a90a      	add	r1, sp, #40	@ 0x28
 8005e8a:	9204      	str	r2, [sp, #16]
 8005e8c:	aa13      	add	r2, sp, #76	@ 0x4c
 8005e8e:	9203      	str	r2, [sp, #12]
 8005e90:	2223      	movs	r2, #35	@ 0x23
 8005e92:	1852      	adds	r2, r2, r1
 8005e94:	9202      	str	r2, [sp, #8]
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	686b      	ldr	r3, [r5, #4]
 8005e9a:	0032      	movs	r2, r6
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ea0:	003b      	movs	r3, r7
 8005ea2:	f7ff fec3 	bl	8005c2c <__cvt>
 8005ea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ea8:	0007      	movs	r7, r0
 8005eaa:	2c47      	cmp	r4, #71	@ 0x47
 8005eac:	d12d      	bne.n	8005f0a <_printf_float+0x192>
 8005eae:	1cd3      	adds	r3, r2, #3
 8005eb0:	db02      	blt.n	8005eb8 <_printf_float+0x140>
 8005eb2:	686b      	ldr	r3, [r5, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	dd47      	ble.n	8005f48 <_printf_float+0x1d0>
 8005eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eba:	3b02      	subs	r3, #2
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ec0:	0028      	movs	r0, r5
 8005ec2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ec4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ec6:	3901      	subs	r1, #1
 8005ec8:	3050      	adds	r0, #80	@ 0x50
 8005eca:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ecc:	f7ff ff14 	bl	8005cf8 <__exponent>
 8005ed0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ed2:	0004      	movs	r4, r0
 8005ed4:	1813      	adds	r3, r2, r0
 8005ed6:	612b      	str	r3, [r5, #16]
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	dc02      	bgt.n	8005ee2 <_printf_float+0x16a>
 8005edc:	682a      	ldr	r2, [r5, #0]
 8005ede:	07d2      	lsls	r2, r2, #31
 8005ee0:	d501      	bpl.n	8005ee6 <_printf_float+0x16e>
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	612b      	str	r3, [r5, #16]
 8005ee6:	2323      	movs	r3, #35	@ 0x23
 8005ee8:	aa0a      	add	r2, sp, #40	@ 0x28
 8005eea:	189b      	adds	r3, r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d100      	bne.n	8005ef4 <_printf_float+0x17c>
 8005ef2:	e792      	b.n	8005e1a <_printf_float+0xa2>
 8005ef4:	002b      	movs	r3, r5
 8005ef6:	222d      	movs	r2, #45	@ 0x2d
 8005ef8:	3343      	adds	r3, #67	@ 0x43
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e78d      	b.n	8005e1a <_printf_float+0xa2>
 8005efe:	2c47      	cmp	r4, #71	@ 0x47
 8005f00:	d1b8      	bne.n	8005e74 <_printf_float+0xfc>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1b6      	bne.n	8005e74 <_printf_float+0xfc>
 8005f06:	3301      	adds	r3, #1
 8005f08:	e7b3      	b.n	8005e72 <_printf_float+0xfa>
 8005f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f0c:	2b65      	cmp	r3, #101	@ 0x65
 8005f0e:	d9d7      	bls.n	8005ec0 <_printf_float+0x148>
 8005f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f12:	2b66      	cmp	r3, #102	@ 0x66
 8005f14:	d11a      	bne.n	8005f4c <_printf_float+0x1d4>
 8005f16:	686b      	ldr	r3, [r5, #4]
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	dd09      	ble.n	8005f30 <_printf_float+0x1b8>
 8005f1c:	612a      	str	r2, [r5, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <_printf_float+0x1b0>
 8005f22:	6829      	ldr	r1, [r5, #0]
 8005f24:	07c9      	lsls	r1, r1, #31
 8005f26:	d50b      	bpl.n	8005f40 <_printf_float+0x1c8>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	612b      	str	r3, [r5, #16]
 8005f2e:	e007      	b.n	8005f40 <_printf_float+0x1c8>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <_printf_float+0x1c4>
 8005f34:	2201      	movs	r2, #1
 8005f36:	6829      	ldr	r1, [r5, #0]
 8005f38:	4211      	tst	r1, r2
 8005f3a:	d000      	beq.n	8005f3e <_printf_float+0x1c6>
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	612a      	str	r2, [r5, #16]
 8005f40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f42:	2400      	movs	r4, #0
 8005f44:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005f46:	e7ce      	b.n	8005ee6 <_printf_float+0x16e>
 8005f48:	2367      	movs	r3, #103	@ 0x67
 8005f4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f4c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f50:	4299      	cmp	r1, r3
 8005f52:	db06      	blt.n	8005f62 <_printf_float+0x1ea>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6129      	str	r1, [r5, #16]
 8005f58:	07db      	lsls	r3, r3, #31
 8005f5a:	d5f1      	bpl.n	8005f40 <_printf_float+0x1c8>
 8005f5c:	3101      	adds	r1, #1
 8005f5e:	6129      	str	r1, [r5, #16]
 8005f60:	e7ee      	b.n	8005f40 <_printf_float+0x1c8>
 8005f62:	2201      	movs	r2, #1
 8005f64:	2900      	cmp	r1, #0
 8005f66:	dce0      	bgt.n	8005f2a <_printf_float+0x1b2>
 8005f68:	1892      	adds	r2, r2, r2
 8005f6a:	1a52      	subs	r2, r2, r1
 8005f6c:	e7dd      	b.n	8005f2a <_printf_float+0x1b2>
 8005f6e:	682a      	ldr	r2, [r5, #0]
 8005f70:	0553      	lsls	r3, r2, #21
 8005f72:	d408      	bmi.n	8005f86 <_printf_float+0x20e>
 8005f74:	692b      	ldr	r3, [r5, #16]
 8005f76:	003a      	movs	r2, r7
 8005f78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f7e:	47a0      	blx	r4
 8005f80:	3001      	adds	r0, #1
 8005f82:	d129      	bne.n	8005fd8 <_printf_float+0x260>
 8005f84:	e754      	b.n	8005e30 <_printf_float+0xb8>
 8005f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f88:	2b65      	cmp	r3, #101	@ 0x65
 8005f8a:	d800      	bhi.n	8005f8e <_printf_float+0x216>
 8005f8c:	e0db      	b.n	8006146 <_printf_float+0x3ce>
 8005f8e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005f90:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	f7fa fa59 	bl	800044c <__aeabi_dcmpeq>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d033      	beq.n	8006006 <_printf_float+0x28e>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4a37      	ldr	r2, [pc, #220]	@ (8006080 <_printf_float+0x308>)
 8005fa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fa4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fa6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fa8:	47a0      	blx	r4
 8005faa:	3001      	adds	r0, #1
 8005fac:	d100      	bne.n	8005fb0 <_printf_float+0x238>
 8005fae:	e73f      	b.n	8005e30 <_printf_float+0xb8>
 8005fb0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005fb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fb4:	42b3      	cmp	r3, r6
 8005fb6:	db02      	blt.n	8005fbe <_printf_float+0x246>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	07db      	lsls	r3, r3, #31
 8005fbc:	d50c      	bpl.n	8005fd8 <_printf_float+0x260>
 8005fbe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fc8:	47a0      	blx	r4
 8005fca:	2400      	movs	r4, #0
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d100      	bne.n	8005fd2 <_printf_float+0x25a>
 8005fd0:	e72e      	b.n	8005e30 <_printf_float+0xb8>
 8005fd2:	1e73      	subs	r3, r6, #1
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	dc0a      	bgt.n	8005fee <_printf_float+0x276>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	079b      	lsls	r3, r3, #30
 8005fdc:	d500      	bpl.n	8005fe0 <_printf_float+0x268>
 8005fde:	e106      	b.n	80061ee <_printf_float+0x476>
 8005fe0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005fe2:	68e8      	ldr	r0, [r5, #12]
 8005fe4:	4298      	cmp	r0, r3
 8005fe6:	db00      	blt.n	8005fea <_printf_float+0x272>
 8005fe8:	e724      	b.n	8005e34 <_printf_float+0xbc>
 8005fea:	0018      	movs	r0, r3
 8005fec:	e722      	b.n	8005e34 <_printf_float+0xbc>
 8005fee:	002a      	movs	r2, r5
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ff4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005ff8:	321a      	adds	r2, #26
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d100      	bne.n	8006002 <_printf_float+0x28a>
 8006000:	e716      	b.n	8005e30 <_printf_float+0xb8>
 8006002:	3401      	adds	r4, #1
 8006004:	e7e5      	b.n	8005fd2 <_printf_float+0x25a>
 8006006:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc3b      	bgt.n	8006084 <_printf_float+0x30c>
 800600c:	2301      	movs	r3, #1
 800600e:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <_printf_float+0x308>)
 8006010:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006014:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006016:	47a0      	blx	r4
 8006018:	3001      	adds	r0, #1
 800601a:	d100      	bne.n	800601e <_printf_float+0x2a6>
 800601c:	e708      	b.n	8005e30 <_printf_float+0xb8>
 800601e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006020:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006022:	4333      	orrs	r3, r6
 8006024:	d102      	bne.n	800602c <_printf_float+0x2b4>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	07db      	lsls	r3, r3, #31
 800602a:	d5d5      	bpl.n	8005fd8 <_printf_float+0x260>
 800602c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800602e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006030:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006034:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006036:	47a0      	blx	r4
 8006038:	2300      	movs	r3, #0
 800603a:	3001      	adds	r0, #1
 800603c:	d100      	bne.n	8006040 <_printf_float+0x2c8>
 800603e:	e6f7      	b.n	8005e30 <_printf_float+0xb8>
 8006040:	930c      	str	r3, [sp, #48]	@ 0x30
 8006042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006044:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006046:	425b      	negs	r3, r3
 8006048:	4293      	cmp	r3, r2
 800604a:	dc01      	bgt.n	8006050 <_printf_float+0x2d8>
 800604c:	0033      	movs	r3, r6
 800604e:	e792      	b.n	8005f76 <_printf_float+0x1fe>
 8006050:	002a      	movs	r2, r5
 8006052:	2301      	movs	r3, #1
 8006054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006058:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800605a:	321a      	adds	r2, #26
 800605c:	47a0      	blx	r4
 800605e:	3001      	adds	r0, #1
 8006060:	d100      	bne.n	8006064 <_printf_float+0x2ec>
 8006062:	e6e5      	b.n	8005e30 <_printf_float+0xb8>
 8006064:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006066:	3301      	adds	r3, #1
 8006068:	e7ea      	b.n	8006040 <_printf_float+0x2c8>
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	7fefffff 	.word	0x7fefffff
 8006070:	08008b90 	.word	0x08008b90
 8006074:	08008b8c 	.word	0x08008b8c
 8006078:	08008b98 	.word	0x08008b98
 800607c:	08008b94 	.word	0x08008b94
 8006080:	08008b9c 	.word	0x08008b9c
 8006084:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006086:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006088:	930c      	str	r3, [sp, #48]	@ 0x30
 800608a:	429e      	cmp	r6, r3
 800608c:	dd00      	ble.n	8006090 <_printf_float+0x318>
 800608e:	001e      	movs	r6, r3
 8006090:	2e00      	cmp	r6, #0
 8006092:	dc31      	bgt.n	80060f8 <_printf_float+0x380>
 8006094:	43f3      	mvns	r3, r6
 8006096:	2400      	movs	r4, #0
 8006098:	17db      	asrs	r3, r3, #31
 800609a:	4033      	ands	r3, r6
 800609c:	930e      	str	r3, [sp, #56]	@ 0x38
 800609e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80060a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060a2:	1af3      	subs	r3, r6, r3
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	dc30      	bgt.n	800610a <_printf_float+0x392>
 80060a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060ac:	429a      	cmp	r2, r3
 80060ae:	dc38      	bgt.n	8006122 <_printf_float+0x3aa>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d435      	bmi.n	8006122 <_printf_float+0x3aa>
 80060b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80060b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060bc:	1b9b      	subs	r3, r3, r6
 80060be:	1b14      	subs	r4, r2, r4
 80060c0:	429c      	cmp	r4, r3
 80060c2:	dd00      	ble.n	80060c6 <_printf_float+0x34e>
 80060c4:	001c      	movs	r4, r3
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	dc34      	bgt.n	8006134 <_printf_float+0x3bc>
 80060ca:	43e3      	mvns	r3, r4
 80060cc:	2600      	movs	r6, #0
 80060ce:	17db      	asrs	r3, r3, #31
 80060d0:	401c      	ands	r4, r3
 80060d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	1b1b      	subs	r3, r3, r4
 80060da:	42b3      	cmp	r3, r6
 80060dc:	dc00      	bgt.n	80060e0 <_printf_float+0x368>
 80060de:	e77b      	b.n	8005fd8 <_printf_float+0x260>
 80060e0:	002a      	movs	r2, r5
 80060e2:	2301      	movs	r3, #1
 80060e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80060ea:	321a      	adds	r2, #26
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	d100      	bne.n	80060f4 <_printf_float+0x37c>
 80060f2:	e69d      	b.n	8005e30 <_printf_float+0xb8>
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7ec      	b.n	80060d2 <_printf_float+0x35a>
 80060f8:	0033      	movs	r3, r6
 80060fa:	003a      	movs	r2, r7
 80060fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006100:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006102:	47a0      	blx	r4
 8006104:	3001      	adds	r0, #1
 8006106:	d1c5      	bne.n	8006094 <_printf_float+0x31c>
 8006108:	e692      	b.n	8005e30 <_printf_float+0xb8>
 800610a:	002a      	movs	r2, r5
 800610c:	2301      	movs	r3, #1
 800610e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006110:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006112:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006114:	321a      	adds	r2, #26
 8006116:	47b0      	blx	r6
 8006118:	3001      	adds	r0, #1
 800611a:	d100      	bne.n	800611e <_printf_float+0x3a6>
 800611c:	e688      	b.n	8005e30 <_printf_float+0xb8>
 800611e:	3401      	adds	r4, #1
 8006120:	e7bd      	b.n	800609e <_printf_float+0x326>
 8006122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006126:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006128:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800612a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800612c:	47a0      	blx	r4
 800612e:	3001      	adds	r0, #1
 8006130:	d1c1      	bne.n	80060b6 <_printf_float+0x33e>
 8006132:	e67d      	b.n	8005e30 <_printf_float+0xb8>
 8006134:	19ba      	adds	r2, r7, r6
 8006136:	0023      	movs	r3, r4
 8006138:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800613a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800613c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800613e:	47b0      	blx	r6
 8006140:	3001      	adds	r0, #1
 8006142:	d1c2      	bne.n	80060ca <_printf_float+0x352>
 8006144:	e674      	b.n	8005e30 <_printf_float+0xb8>
 8006146:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006148:	930c      	str	r3, [sp, #48]	@ 0x30
 800614a:	2b01      	cmp	r3, #1
 800614c:	dc02      	bgt.n	8006154 <_printf_float+0x3dc>
 800614e:	2301      	movs	r3, #1
 8006150:	421a      	tst	r2, r3
 8006152:	d039      	beq.n	80061c8 <_printf_float+0x450>
 8006154:	2301      	movs	r3, #1
 8006156:	003a      	movs	r2, r7
 8006158:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800615a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800615c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800615e:	47b0      	blx	r6
 8006160:	3001      	adds	r0, #1
 8006162:	d100      	bne.n	8006166 <_printf_float+0x3ee>
 8006164:	e664      	b.n	8005e30 <_printf_float+0xb8>
 8006166:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006168:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800616a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800616c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800616e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006170:	47b0      	blx	r6
 8006172:	3001      	adds	r0, #1
 8006174:	d100      	bne.n	8006178 <_printf_float+0x400>
 8006176:	e65b      	b.n	8005e30 <_printf_float+0xb8>
 8006178:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800617a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800617c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800617e:	2200      	movs	r2, #0
 8006180:	3b01      	subs	r3, #1
 8006182:	930c      	str	r3, [sp, #48]	@ 0x30
 8006184:	2300      	movs	r3, #0
 8006186:	f7fa f961 	bl	800044c <__aeabi_dcmpeq>
 800618a:	2800      	cmp	r0, #0
 800618c:	d11a      	bne.n	80061c4 <_printf_float+0x44c>
 800618e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006190:	1c7a      	adds	r2, r7, #1
 8006192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006196:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006198:	47b0      	blx	r6
 800619a:	3001      	adds	r0, #1
 800619c:	d10e      	bne.n	80061bc <_printf_float+0x444>
 800619e:	e647      	b.n	8005e30 <_printf_float+0xb8>
 80061a0:	002a      	movs	r2, r5
 80061a2:	2301      	movs	r3, #1
 80061a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061aa:	321a      	adds	r2, #26
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	d100      	bne.n	80061b4 <_printf_float+0x43c>
 80061b2:	e63d      	b.n	8005e30 <_printf_float+0xb8>
 80061b4:	3601      	adds	r6, #1
 80061b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061b8:	429e      	cmp	r6, r3
 80061ba:	dbf1      	blt.n	80061a0 <_printf_float+0x428>
 80061bc:	002a      	movs	r2, r5
 80061be:	0023      	movs	r3, r4
 80061c0:	3250      	adds	r2, #80	@ 0x50
 80061c2:	e6d9      	b.n	8005f78 <_printf_float+0x200>
 80061c4:	2600      	movs	r6, #0
 80061c6:	e7f6      	b.n	80061b6 <_printf_float+0x43e>
 80061c8:	003a      	movs	r2, r7
 80061ca:	e7e2      	b.n	8006192 <_printf_float+0x41a>
 80061cc:	002a      	movs	r2, r5
 80061ce:	2301      	movs	r3, #1
 80061d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061d6:	3219      	adds	r2, #25
 80061d8:	47b0      	blx	r6
 80061da:	3001      	adds	r0, #1
 80061dc:	d100      	bne.n	80061e0 <_printf_float+0x468>
 80061de:	e627      	b.n	8005e30 <_printf_float+0xb8>
 80061e0:	3401      	adds	r4, #1
 80061e2:	68eb      	ldr	r3, [r5, #12]
 80061e4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	dcef      	bgt.n	80061cc <_printf_float+0x454>
 80061ec:	e6f8      	b.n	8005fe0 <_printf_float+0x268>
 80061ee:	2400      	movs	r4, #0
 80061f0:	e7f7      	b.n	80061e2 <_printf_float+0x46a>
 80061f2:	46c0      	nop			@ (mov r8, r8)

080061f4 <_printf_common>:
 80061f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f6:	0016      	movs	r6, r2
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	688a      	ldr	r2, [r1, #8]
 80061fc:	690b      	ldr	r3, [r1, #16]
 80061fe:	000c      	movs	r4, r1
 8006200:	9000      	str	r0, [sp, #0]
 8006202:	4293      	cmp	r3, r2
 8006204:	da00      	bge.n	8006208 <_printf_common+0x14>
 8006206:	0013      	movs	r3, r2
 8006208:	0022      	movs	r2, r4
 800620a:	6033      	str	r3, [r6, #0]
 800620c:	3243      	adds	r2, #67	@ 0x43
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	2a00      	cmp	r2, #0
 8006212:	d001      	beq.n	8006218 <_printf_common+0x24>
 8006214:	3301      	adds	r3, #1
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	069b      	lsls	r3, r3, #26
 800621c:	d502      	bpl.n	8006224 <_printf_common+0x30>
 800621e:	6833      	ldr	r3, [r6, #0]
 8006220:	3302      	adds	r3, #2
 8006222:	6033      	str	r3, [r6, #0]
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	2306      	movs	r3, #6
 8006228:	0015      	movs	r5, r2
 800622a:	401d      	ands	r5, r3
 800622c:	421a      	tst	r2, r3
 800622e:	d027      	beq.n	8006280 <_printf_common+0x8c>
 8006230:	0023      	movs	r3, r4
 8006232:	3343      	adds	r3, #67	@ 0x43
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	1e5a      	subs	r2, r3, #1
 8006238:	4193      	sbcs	r3, r2
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	0692      	lsls	r2, r2, #26
 800623e:	d430      	bmi.n	80062a2 <_printf_common+0xae>
 8006240:	0022      	movs	r2, r4
 8006242:	9901      	ldr	r1, [sp, #4]
 8006244:	9800      	ldr	r0, [sp, #0]
 8006246:	9d08      	ldr	r5, [sp, #32]
 8006248:	3243      	adds	r2, #67	@ 0x43
 800624a:	47a8      	blx	r5
 800624c:	3001      	adds	r0, #1
 800624e:	d025      	beq.n	800629c <_printf_common+0xa8>
 8006250:	2206      	movs	r2, #6
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	2500      	movs	r5, #0
 8006256:	4013      	ands	r3, r2
 8006258:	2b04      	cmp	r3, #4
 800625a:	d105      	bne.n	8006268 <_printf_common+0x74>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	68e5      	ldr	r5, [r4, #12]
 8006260:	1aed      	subs	r5, r5, r3
 8006262:	43eb      	mvns	r3, r5
 8006264:	17db      	asrs	r3, r3, #31
 8006266:	401d      	ands	r5, r3
 8006268:	68a3      	ldr	r3, [r4, #8]
 800626a:	6922      	ldr	r2, [r4, #16]
 800626c:	4293      	cmp	r3, r2
 800626e:	dd01      	ble.n	8006274 <_printf_common+0x80>
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	18ed      	adds	r5, r5, r3
 8006274:	2600      	movs	r6, #0
 8006276:	42b5      	cmp	r5, r6
 8006278:	d120      	bne.n	80062bc <_printf_common+0xc8>
 800627a:	2000      	movs	r0, #0
 800627c:	e010      	b.n	80062a0 <_printf_common+0xac>
 800627e:	3501      	adds	r5, #1
 8006280:	68e3      	ldr	r3, [r4, #12]
 8006282:	6832      	ldr	r2, [r6, #0]
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	42ab      	cmp	r3, r5
 8006288:	ddd2      	ble.n	8006230 <_printf_common+0x3c>
 800628a:	0022      	movs	r2, r4
 800628c:	2301      	movs	r3, #1
 800628e:	9901      	ldr	r1, [sp, #4]
 8006290:	9800      	ldr	r0, [sp, #0]
 8006292:	9f08      	ldr	r7, [sp, #32]
 8006294:	3219      	adds	r2, #25
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	d1f0      	bne.n	800627e <_printf_common+0x8a>
 800629c:	2001      	movs	r0, #1
 800629e:	4240      	negs	r0, r0
 80062a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062a2:	2030      	movs	r0, #48	@ 0x30
 80062a4:	18e1      	adds	r1, r4, r3
 80062a6:	3143      	adds	r1, #67	@ 0x43
 80062a8:	7008      	strb	r0, [r1, #0]
 80062aa:	0021      	movs	r1, r4
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	3145      	adds	r1, #69	@ 0x45
 80062b0:	7809      	ldrb	r1, [r1, #0]
 80062b2:	18a2      	adds	r2, r4, r2
 80062b4:	3243      	adds	r2, #67	@ 0x43
 80062b6:	3302      	adds	r3, #2
 80062b8:	7011      	strb	r1, [r2, #0]
 80062ba:	e7c1      	b.n	8006240 <_printf_common+0x4c>
 80062bc:	0022      	movs	r2, r4
 80062be:	2301      	movs	r3, #1
 80062c0:	9901      	ldr	r1, [sp, #4]
 80062c2:	9800      	ldr	r0, [sp, #0]
 80062c4:	9f08      	ldr	r7, [sp, #32]
 80062c6:	321a      	adds	r2, #26
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0e6      	beq.n	800629c <_printf_common+0xa8>
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7d1      	b.n	8006276 <_printf_common+0x82>
	...

080062d4 <_printf_i>:
 80062d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d6:	b08b      	sub	sp, #44	@ 0x2c
 80062d8:	9206      	str	r2, [sp, #24]
 80062da:	000a      	movs	r2, r1
 80062dc:	3243      	adds	r2, #67	@ 0x43
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	9005      	str	r0, [sp, #20]
 80062e2:	9203      	str	r2, [sp, #12]
 80062e4:	7e0a      	ldrb	r2, [r1, #24]
 80062e6:	000c      	movs	r4, r1
 80062e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ea:	2a78      	cmp	r2, #120	@ 0x78
 80062ec:	d809      	bhi.n	8006302 <_printf_i+0x2e>
 80062ee:	2a62      	cmp	r2, #98	@ 0x62
 80062f0:	d80b      	bhi.n	800630a <_printf_i+0x36>
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	d100      	bne.n	80062f8 <_printf_i+0x24>
 80062f6:	e0ba      	b.n	800646e <_printf_i+0x19a>
 80062f8:	497a      	ldr	r1, [pc, #488]	@ (80064e4 <_printf_i+0x210>)
 80062fa:	9104      	str	r1, [sp, #16]
 80062fc:	2a58      	cmp	r2, #88	@ 0x58
 80062fe:	d100      	bne.n	8006302 <_printf_i+0x2e>
 8006300:	e08e      	b.n	8006420 <_printf_i+0x14c>
 8006302:	0025      	movs	r5, r4
 8006304:	3542      	adds	r5, #66	@ 0x42
 8006306:	702a      	strb	r2, [r5, #0]
 8006308:	e022      	b.n	8006350 <_printf_i+0x7c>
 800630a:	0010      	movs	r0, r2
 800630c:	3863      	subs	r0, #99	@ 0x63
 800630e:	2815      	cmp	r0, #21
 8006310:	d8f7      	bhi.n	8006302 <_printf_i+0x2e>
 8006312:	f7f9 ff0b 	bl	800012c <__gnu_thumb1_case_shi>
 8006316:	0016      	.short	0x0016
 8006318:	fff6001f 	.word	0xfff6001f
 800631c:	fff6fff6 	.word	0xfff6fff6
 8006320:	001ffff6 	.word	0x001ffff6
 8006324:	fff6fff6 	.word	0xfff6fff6
 8006328:	fff6fff6 	.word	0xfff6fff6
 800632c:	0036009f 	.word	0x0036009f
 8006330:	fff6007e 	.word	0xfff6007e
 8006334:	00b0fff6 	.word	0x00b0fff6
 8006338:	0036fff6 	.word	0x0036fff6
 800633c:	fff6fff6 	.word	0xfff6fff6
 8006340:	0082      	.short	0x0082
 8006342:	0025      	movs	r5, r4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	3542      	adds	r5, #66	@ 0x42
 8006348:	1d11      	adds	r1, r2, #4
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	6813      	ldr	r3, [r2, #0]
 800634e:	702b      	strb	r3, [r5, #0]
 8006350:	2301      	movs	r3, #1
 8006352:	e09e      	b.n	8006492 <_printf_i+0x1be>
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	6809      	ldr	r1, [r1, #0]
 8006358:	1d02      	adds	r2, r0, #4
 800635a:	060d      	lsls	r5, r1, #24
 800635c:	d50b      	bpl.n	8006376 <_printf_i+0xa2>
 800635e:	6806      	ldr	r6, [r0, #0]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	2e00      	cmp	r6, #0
 8006364:	da03      	bge.n	800636e <_printf_i+0x9a>
 8006366:	232d      	movs	r3, #45	@ 0x2d
 8006368:	9a03      	ldr	r2, [sp, #12]
 800636a:	4276      	negs	r6, r6
 800636c:	7013      	strb	r3, [r2, #0]
 800636e:	4b5d      	ldr	r3, [pc, #372]	@ (80064e4 <_printf_i+0x210>)
 8006370:	270a      	movs	r7, #10
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	e018      	b.n	80063a8 <_printf_i+0xd4>
 8006376:	6806      	ldr	r6, [r0, #0]
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	0649      	lsls	r1, r1, #25
 800637c:	d5f1      	bpl.n	8006362 <_printf_i+0x8e>
 800637e:	b236      	sxth	r6, r6
 8006380:	e7ef      	b.n	8006362 <_printf_i+0x8e>
 8006382:	6808      	ldr	r0, [r1, #0]
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	c940      	ldmia	r1!, {r6}
 8006388:	0605      	lsls	r5, r0, #24
 800638a:	d402      	bmi.n	8006392 <_printf_i+0xbe>
 800638c:	0640      	lsls	r0, r0, #25
 800638e:	d500      	bpl.n	8006392 <_printf_i+0xbe>
 8006390:	b2b6      	uxth	r6, r6
 8006392:	6019      	str	r1, [r3, #0]
 8006394:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <_printf_i+0x210>)
 8006396:	270a      	movs	r7, #10
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	2a6f      	cmp	r2, #111	@ 0x6f
 800639c:	d100      	bne.n	80063a0 <_printf_i+0xcc>
 800639e:	3f02      	subs	r7, #2
 80063a0:	0023      	movs	r3, r4
 80063a2:	2200      	movs	r2, #0
 80063a4:	3343      	adds	r3, #67	@ 0x43
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	60a3      	str	r3, [r4, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	db06      	blt.n	80063be <_printf_i+0xea>
 80063b0:	2104      	movs	r1, #4
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	9d03      	ldr	r5, [sp, #12]
 80063b6:	438a      	bics	r2, r1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	4333      	orrs	r3, r6
 80063bc:	d00c      	beq.n	80063d8 <_printf_i+0x104>
 80063be:	9d03      	ldr	r5, [sp, #12]
 80063c0:	0030      	movs	r0, r6
 80063c2:	0039      	movs	r1, r7
 80063c4:	f7f9 ff42 	bl	800024c <__aeabi_uidivmod>
 80063c8:	9b04      	ldr	r3, [sp, #16]
 80063ca:	3d01      	subs	r5, #1
 80063cc:	5c5b      	ldrb	r3, [r3, r1]
 80063ce:	702b      	strb	r3, [r5, #0]
 80063d0:	0033      	movs	r3, r6
 80063d2:	0006      	movs	r6, r0
 80063d4:	429f      	cmp	r7, r3
 80063d6:	d9f3      	bls.n	80063c0 <_printf_i+0xec>
 80063d8:	2f08      	cmp	r7, #8
 80063da:	d109      	bne.n	80063f0 <_printf_i+0x11c>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07db      	lsls	r3, r3, #31
 80063e0:	d506      	bpl.n	80063f0 <_printf_i+0x11c>
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	dc02      	bgt.n	80063f0 <_printf_i+0x11c>
 80063ea:	2330      	movs	r3, #48	@ 0x30
 80063ec:	3d01      	subs	r5, #1
 80063ee:	702b      	strb	r3, [r5, #0]
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1b5b      	subs	r3, r3, r5
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	9b07      	ldr	r3, [sp, #28]
 80063f8:	0021      	movs	r1, r4
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	9805      	ldr	r0, [sp, #20]
 80063fe:	9b06      	ldr	r3, [sp, #24]
 8006400:	aa09      	add	r2, sp, #36	@ 0x24
 8006402:	f7ff fef7 	bl	80061f4 <_printf_common>
 8006406:	3001      	adds	r0, #1
 8006408:	d148      	bne.n	800649c <_printf_i+0x1c8>
 800640a:	2001      	movs	r0, #1
 800640c:	4240      	negs	r0, r0
 800640e:	b00b      	add	sp, #44	@ 0x2c
 8006410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006412:	2220      	movs	r2, #32
 8006414:	6809      	ldr	r1, [r1, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	2278      	movs	r2, #120	@ 0x78
 800641c:	4932      	ldr	r1, [pc, #200]	@ (80064e8 <_printf_i+0x214>)
 800641e:	9104      	str	r1, [sp, #16]
 8006420:	0021      	movs	r1, r4
 8006422:	3145      	adds	r1, #69	@ 0x45
 8006424:	700a      	strb	r2, [r1, #0]
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	c940      	ldmia	r1!, {r6}
 800642c:	0610      	lsls	r0, r2, #24
 800642e:	d402      	bmi.n	8006436 <_printf_i+0x162>
 8006430:	0650      	lsls	r0, r2, #25
 8006432:	d500      	bpl.n	8006436 <_printf_i+0x162>
 8006434:	b2b6      	uxth	r6, r6
 8006436:	6019      	str	r1, [r3, #0]
 8006438:	07d3      	lsls	r3, r2, #31
 800643a:	d502      	bpl.n	8006442 <_printf_i+0x16e>
 800643c:	2320      	movs	r3, #32
 800643e:	4313      	orrs	r3, r2
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	2e00      	cmp	r6, #0
 8006444:	d001      	beq.n	800644a <_printf_i+0x176>
 8006446:	2710      	movs	r7, #16
 8006448:	e7aa      	b.n	80063a0 <_printf_i+0xcc>
 800644a:	2220      	movs	r2, #32
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	4393      	bics	r3, r2
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	e7f8      	b.n	8006446 <_printf_i+0x172>
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	680d      	ldr	r5, [r1, #0]
 8006458:	1d10      	adds	r0, r2, #4
 800645a:	6949      	ldr	r1, [r1, #20]
 800645c:	6018      	str	r0, [r3, #0]
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	062e      	lsls	r6, r5, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0x194>
 8006464:	6019      	str	r1, [r3, #0]
 8006466:	e002      	b.n	800646e <_printf_i+0x19a>
 8006468:	066d      	lsls	r5, r5, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0x190>
 800646c:	8019      	strh	r1, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	9d03      	ldr	r5, [sp, #12]
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	e7bf      	b.n	80063f6 <_printf_i+0x122>
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	1d11      	adds	r1, r2, #4
 800647a:	6019      	str	r1, [r3, #0]
 800647c:	6815      	ldr	r5, [r2, #0]
 800647e:	2100      	movs	r1, #0
 8006480:	0028      	movs	r0, r5
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	f000 f9ff 	bl	8006886 <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d001      	beq.n	8006490 <_printf_i+0x1bc>
 800648c:	1b40      	subs	r0, r0, r5
 800648e:	6060      	str	r0, [r4, #4]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	2300      	movs	r3, #0
 8006496:	9a03      	ldr	r2, [sp, #12]
 8006498:	7013      	strb	r3, [r2, #0]
 800649a:	e7ac      	b.n	80063f6 <_printf_i+0x122>
 800649c:	002a      	movs	r2, r5
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	9906      	ldr	r1, [sp, #24]
 80064a2:	9805      	ldr	r0, [sp, #20]
 80064a4:	9d07      	ldr	r5, [sp, #28]
 80064a6:	47a8      	blx	r5
 80064a8:	3001      	adds	r0, #1
 80064aa:	d0ae      	beq.n	800640a <_printf_i+0x136>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	079b      	lsls	r3, r3, #30
 80064b0:	d415      	bmi.n	80064de <_printf_i+0x20a>
 80064b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b4:	68e0      	ldr	r0, [r4, #12]
 80064b6:	4298      	cmp	r0, r3
 80064b8:	daa9      	bge.n	800640e <_printf_i+0x13a>
 80064ba:	0018      	movs	r0, r3
 80064bc:	e7a7      	b.n	800640e <_printf_i+0x13a>
 80064be:	0022      	movs	r2, r4
 80064c0:	2301      	movs	r3, #1
 80064c2:	9906      	ldr	r1, [sp, #24]
 80064c4:	9805      	ldr	r0, [sp, #20]
 80064c6:	9e07      	ldr	r6, [sp, #28]
 80064c8:	3219      	adds	r2, #25
 80064ca:	47b0      	blx	r6
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09c      	beq.n	800640a <_printf_i+0x136>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf0      	bgt.n	80064be <_printf_i+0x1ea>
 80064dc:	e7e9      	b.n	80064b2 <_printf_i+0x1de>
 80064de:	2500      	movs	r5, #0
 80064e0:	e7f7      	b.n	80064d2 <_printf_i+0x1fe>
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	08008b9e 	.word	0x08008b9e
 80064e8:	08008baf 	.word	0x08008baf

080064ec <std>:
 80064ec:	2300      	movs	r3, #0
 80064ee:	b510      	push	{r4, lr}
 80064f0:	0004      	movs	r4, r0
 80064f2:	6003      	str	r3, [r0, #0]
 80064f4:	6043      	str	r3, [r0, #4]
 80064f6:	6083      	str	r3, [r0, #8]
 80064f8:	8181      	strh	r1, [r0, #12]
 80064fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80064fc:	81c2      	strh	r2, [r0, #14]
 80064fe:	6103      	str	r3, [r0, #16]
 8006500:	6143      	str	r3, [r0, #20]
 8006502:	6183      	str	r3, [r0, #24]
 8006504:	0019      	movs	r1, r3
 8006506:	2208      	movs	r2, #8
 8006508:	305c      	adds	r0, #92	@ 0x5c
 800650a:	f000 f935 	bl	8006778 <memset>
 800650e:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <std+0x50>)
 8006510:	6224      	str	r4, [r4, #32]
 8006512:	6263      	str	r3, [r4, #36]	@ 0x24
 8006514:	4b0a      	ldr	r3, [pc, #40]	@ (8006540 <std+0x54>)
 8006516:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <std+0x58>)
 800651a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800651c:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <std+0x5c>)
 800651e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <std+0x60>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d005      	beq.n	8006532 <std+0x46>
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <std+0x64>)
 8006528:	429c      	cmp	r4, r3
 800652a:	d002      	beq.n	8006532 <std+0x46>
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <std+0x68>)
 800652e:	429c      	cmp	r4, r3
 8006530:	d103      	bne.n	800653a <std+0x4e>
 8006532:	0020      	movs	r0, r4
 8006534:	3058      	adds	r0, #88	@ 0x58
 8006536:	f000 f9a3 	bl	8006880 <__retarget_lock_init_recursive>
 800653a:	bd10      	pop	{r4, pc}
 800653c:	080066e1 	.word	0x080066e1
 8006540:	08006709 	.word	0x08006709
 8006544:	08006741 	.word	0x08006741
 8006548:	0800676d 	.word	0x0800676d
 800654c:	20000320 	.word	0x20000320
 8006550:	20000388 	.word	0x20000388
 8006554:	200003f0 	.word	0x200003f0

08006558 <stdio_exit_handler>:
 8006558:	b510      	push	{r4, lr}
 800655a:	4a03      	ldr	r2, [pc, #12]	@ (8006568 <stdio_exit_handler+0x10>)
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <stdio_exit_handler+0x14>)
 800655e:	4804      	ldr	r0, [pc, #16]	@ (8006570 <stdio_exit_handler+0x18>)
 8006560:	f000 f86c 	bl	800663c <_fwalk_sglue>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	46c0      	nop			@ (mov r8, r8)
 8006568:	2000000c 	.word	0x2000000c
 800656c:	08008295 	.word	0x08008295
 8006570:	2000001c 	.word	0x2000001c

08006574 <cleanup_stdio>:
 8006574:	6841      	ldr	r1, [r0, #4]
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <cleanup_stdio+0x30>)
 8006578:	b510      	push	{r4, lr}
 800657a:	0004      	movs	r4, r0
 800657c:	4299      	cmp	r1, r3
 800657e:	d001      	beq.n	8006584 <cleanup_stdio+0x10>
 8006580:	f001 fe88 	bl	8008294 <_fflush_r>
 8006584:	68a1      	ldr	r1, [r4, #8]
 8006586:	4b08      	ldr	r3, [pc, #32]	@ (80065a8 <cleanup_stdio+0x34>)
 8006588:	4299      	cmp	r1, r3
 800658a:	d002      	beq.n	8006592 <cleanup_stdio+0x1e>
 800658c:	0020      	movs	r0, r4
 800658e:	f001 fe81 	bl	8008294 <_fflush_r>
 8006592:	68e1      	ldr	r1, [r4, #12]
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <cleanup_stdio+0x38>)
 8006596:	4299      	cmp	r1, r3
 8006598:	d002      	beq.n	80065a0 <cleanup_stdio+0x2c>
 800659a:	0020      	movs	r0, r4
 800659c:	f001 fe7a 	bl	8008294 <_fflush_r>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	20000320 	.word	0x20000320
 80065a8:	20000388 	.word	0x20000388
 80065ac:	200003f0 	.word	0x200003f0

080065b0 <global_stdio_init.part.0>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <global_stdio_init.part.0+0x28>)
 80065b4:	4a09      	ldr	r2, [pc, #36]	@ (80065dc <global_stdio_init.part.0+0x2c>)
 80065b6:	2104      	movs	r1, #4
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	4809      	ldr	r0, [pc, #36]	@ (80065e0 <global_stdio_init.part.0+0x30>)
 80065bc:	2200      	movs	r2, #0
 80065be:	f7ff ff95 	bl	80064ec <std>
 80065c2:	2201      	movs	r2, #1
 80065c4:	2109      	movs	r1, #9
 80065c6:	4807      	ldr	r0, [pc, #28]	@ (80065e4 <global_stdio_init.part.0+0x34>)
 80065c8:	f7ff ff90 	bl	80064ec <std>
 80065cc:	2202      	movs	r2, #2
 80065ce:	2112      	movs	r1, #18
 80065d0:	4805      	ldr	r0, [pc, #20]	@ (80065e8 <global_stdio_init.part.0+0x38>)
 80065d2:	f7ff ff8b 	bl	80064ec <std>
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	20000458 	.word	0x20000458
 80065dc:	08006559 	.word	0x08006559
 80065e0:	20000320 	.word	0x20000320
 80065e4:	20000388 	.word	0x20000388
 80065e8:	200003f0 	.word	0x200003f0

080065ec <__sfp_lock_acquire>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	4802      	ldr	r0, [pc, #8]	@ (80065f8 <__sfp_lock_acquire+0xc>)
 80065f0:	f000 f947 	bl	8006882 <__retarget_lock_acquire_recursive>
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	20000461 	.word	0x20000461

080065fc <__sfp_lock_release>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4802      	ldr	r0, [pc, #8]	@ (8006608 <__sfp_lock_release+0xc>)
 8006600:	f000 f940 	bl	8006884 <__retarget_lock_release_recursive>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	20000461 	.word	0x20000461

0800660c <__sinit>:
 800660c:	b510      	push	{r4, lr}
 800660e:	0004      	movs	r4, r0
 8006610:	f7ff ffec 	bl	80065ec <__sfp_lock_acquire>
 8006614:	6a23      	ldr	r3, [r4, #32]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <__sinit+0x14>
 800661a:	f7ff ffef 	bl	80065fc <__sfp_lock_release>
 800661e:	bd10      	pop	{r4, pc}
 8006620:	4b04      	ldr	r3, [pc, #16]	@ (8006634 <__sinit+0x28>)
 8006622:	6223      	str	r3, [r4, #32]
 8006624:	4b04      	ldr	r3, [pc, #16]	@ (8006638 <__sinit+0x2c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f6      	bne.n	800661a <__sinit+0xe>
 800662c:	f7ff ffc0 	bl	80065b0 <global_stdio_init.part.0>
 8006630:	e7f3      	b.n	800661a <__sinit+0xe>
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	08006575 	.word	0x08006575
 8006638:	20000458 	.word	0x20000458

0800663c <_fwalk_sglue>:
 800663c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663e:	0014      	movs	r4, r2
 8006640:	2600      	movs	r6, #0
 8006642:	9000      	str	r0, [sp, #0]
 8006644:	9101      	str	r1, [sp, #4]
 8006646:	68a5      	ldr	r5, [r4, #8]
 8006648:	6867      	ldr	r7, [r4, #4]
 800664a:	3f01      	subs	r7, #1
 800664c:	d504      	bpl.n	8006658 <_fwalk_sglue+0x1c>
 800664e:	6824      	ldr	r4, [r4, #0]
 8006650:	2c00      	cmp	r4, #0
 8006652:	d1f8      	bne.n	8006646 <_fwalk_sglue+0xa>
 8006654:	0030      	movs	r0, r6
 8006656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006658:	89ab      	ldrh	r3, [r5, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d908      	bls.n	8006670 <_fwalk_sglue+0x34>
 800665e:	220e      	movs	r2, #14
 8006660:	5eab      	ldrsh	r3, [r5, r2]
 8006662:	3301      	adds	r3, #1
 8006664:	d004      	beq.n	8006670 <_fwalk_sglue+0x34>
 8006666:	0029      	movs	r1, r5
 8006668:	9800      	ldr	r0, [sp, #0]
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	4798      	blx	r3
 800666e:	4306      	orrs	r6, r0
 8006670:	3568      	adds	r5, #104	@ 0x68
 8006672:	e7ea      	b.n	800664a <_fwalk_sglue+0xe>

08006674 <sniprintf>:
 8006674:	b40c      	push	{r2, r3}
 8006676:	b530      	push	{r4, r5, lr}
 8006678:	4b18      	ldr	r3, [pc, #96]	@ (80066dc <sniprintf+0x68>)
 800667a:	000c      	movs	r4, r1
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	b09d      	sub	sp, #116	@ 0x74
 8006680:	2900      	cmp	r1, #0
 8006682:	da08      	bge.n	8006696 <sniprintf+0x22>
 8006684:	238b      	movs	r3, #139	@ 0x8b
 8006686:	2001      	movs	r0, #1
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	4240      	negs	r0, r0
 800668c:	b01d      	add	sp, #116	@ 0x74
 800668e:	bc30      	pop	{r4, r5}
 8006690:	bc08      	pop	{r3}
 8006692:	b002      	add	sp, #8
 8006694:	4718      	bx	r3
 8006696:	2382      	movs	r3, #130	@ 0x82
 8006698:	466a      	mov	r2, sp
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	8293      	strh	r3, [r2, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	9002      	str	r0, [sp, #8]
 80066a2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80066a4:	9006      	str	r0, [sp, #24]
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d000      	beq.n	80066ac <sniprintf+0x38>
 80066aa:	1e4b      	subs	r3, r1, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	2301      	movs	r3, #1
 80066b2:	466a      	mov	r2, sp
 80066b4:	425b      	negs	r3, r3
 80066b6:	82d3      	strh	r3, [r2, #22]
 80066b8:	0028      	movs	r0, r5
 80066ba:	ab21      	add	r3, sp, #132	@ 0x84
 80066bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066be:	a902      	add	r1, sp, #8
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	f001 fc63 	bl	8007f8c <_svfiprintf_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	da01      	bge.n	80066ce <sniprintf+0x5a>
 80066ca:	238b      	movs	r3, #139	@ 0x8b
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	2c00      	cmp	r4, #0
 80066d0:	d0dc      	beq.n	800668c <sniprintf+0x18>
 80066d2:	2200      	movs	r2, #0
 80066d4:	9b02      	ldr	r3, [sp, #8]
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e7d8      	b.n	800668c <sniprintf+0x18>
 80066da:	46c0      	nop			@ (mov r8, r8)
 80066dc:	20000018 	.word	0x20000018

080066e0 <__sread>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	000c      	movs	r4, r1
 80066e4:	250e      	movs	r5, #14
 80066e6:	5f49      	ldrsh	r1, [r1, r5]
 80066e8:	f000 f878 	bl	80067dc <_read_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	db03      	blt.n	80066f8 <__sread+0x18>
 80066f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80066f2:	181b      	adds	r3, r3, r0
 80066f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	4a02      	ldr	r2, [pc, #8]	@ (8006704 <__sread+0x24>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	e7f9      	b.n	80066f6 <__sread+0x16>
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	ffffefff 	.word	0xffffefff

08006708 <__swrite>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	001f      	movs	r7, r3
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	0005      	movs	r5, r0
 8006710:	000c      	movs	r4, r1
 8006712:	0016      	movs	r6, r2
 8006714:	05db      	lsls	r3, r3, #23
 8006716:	d505      	bpl.n	8006724 <__swrite+0x1c>
 8006718:	230e      	movs	r3, #14
 800671a:	5ec9      	ldrsh	r1, [r1, r3]
 800671c:	2200      	movs	r2, #0
 800671e:	2302      	movs	r3, #2
 8006720:	f000 f848 	bl	80067b4 <_lseek_r>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	4a05      	ldr	r2, [pc, #20]	@ (800673c <__swrite+0x34>)
 8006728:	0028      	movs	r0, r5
 800672a:	4013      	ands	r3, r2
 800672c:	81a3      	strh	r3, [r4, #12]
 800672e:	0032      	movs	r2, r6
 8006730:	230e      	movs	r3, #14
 8006732:	5ee1      	ldrsh	r1, [r4, r3]
 8006734:	003b      	movs	r3, r7
 8006736:	f000 f865 	bl	8006804 <_write_r>
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	ffffefff 	.word	0xffffefff

08006740 <__sseek>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	000c      	movs	r4, r1
 8006744:	250e      	movs	r5, #14
 8006746:	5f49      	ldrsh	r1, [r1, r5]
 8006748:	f000 f834 	bl	80067b4 <_lseek_r>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	1c42      	adds	r2, r0, #1
 8006750:	d103      	bne.n	800675a <__sseek+0x1a>
 8006752:	4a05      	ldr	r2, [pc, #20]	@ (8006768 <__sseek+0x28>)
 8006754:	4013      	ands	r3, r2
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	bd70      	pop	{r4, r5, r6, pc}
 800675a:	2280      	movs	r2, #128	@ 0x80
 800675c:	0152      	lsls	r2, r2, #5
 800675e:	4313      	orrs	r3, r2
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	6560      	str	r0, [r4, #84]	@ 0x54
 8006764:	e7f8      	b.n	8006758 <__sseek+0x18>
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	ffffefff 	.word	0xffffefff

0800676c <__sclose>:
 800676c:	b510      	push	{r4, lr}
 800676e:	230e      	movs	r3, #14
 8006770:	5ec9      	ldrsh	r1, [r1, r3]
 8006772:	f000 f80d 	bl	8006790 <_close_r>
 8006776:	bd10      	pop	{r4, pc}

08006778 <memset>:
 8006778:	0003      	movs	r3, r0
 800677a:	1882      	adds	r2, r0, r2
 800677c:	4293      	cmp	r3, r2
 800677e:	d100      	bne.n	8006782 <memset+0xa>
 8006780:	4770      	bx	lr
 8006782:	7019      	strb	r1, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	e7f9      	b.n	800677c <memset+0x4>

08006788 <_localeconv_r>:
 8006788:	4800      	ldr	r0, [pc, #0]	@ (800678c <_localeconv_r+0x4>)
 800678a:	4770      	bx	lr
 800678c:	20000158 	.word	0x20000158

08006790 <_close_r>:
 8006790:	2300      	movs	r3, #0
 8006792:	b570      	push	{r4, r5, r6, lr}
 8006794:	4d06      	ldr	r5, [pc, #24]	@ (80067b0 <_close_r+0x20>)
 8006796:	0004      	movs	r4, r0
 8006798:	0008      	movs	r0, r1
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	f7fc fcde 	bl	800315c <_close>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d103      	bne.n	80067ac <_close_r+0x1c>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d000      	beq.n	80067ac <_close_r+0x1c>
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	2000045c 	.word	0x2000045c

080067b4 <_lseek_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	0004      	movs	r4, r0
 80067b8:	0008      	movs	r0, r1
 80067ba:	0011      	movs	r1, r2
 80067bc:	001a      	movs	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	4d05      	ldr	r5, [pc, #20]	@ (80067d8 <_lseek_r+0x24>)
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fc fceb 	bl	800319e <_lseek>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d103      	bne.n	80067d4 <_lseek_r+0x20>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d000      	beq.n	80067d4 <_lseek_r+0x20>
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	2000045c 	.word	0x2000045c

080067dc <_read_r>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	0004      	movs	r4, r0
 80067e0:	0008      	movs	r0, r1
 80067e2:	0011      	movs	r1, r2
 80067e4:	001a      	movs	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	4d05      	ldr	r5, [pc, #20]	@ (8006800 <_read_r+0x24>)
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fc fc7d 	bl	80030ea <_read>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d103      	bne.n	80067fc <_read_r+0x20>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d000      	beq.n	80067fc <_read_r+0x20>
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	2000045c 	.word	0x2000045c

08006804 <_write_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	0004      	movs	r4, r0
 8006808:	0008      	movs	r0, r1
 800680a:	0011      	movs	r1, r2
 800680c:	001a      	movs	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	4d05      	ldr	r5, [pc, #20]	@ (8006828 <_write_r+0x24>)
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fc fc86 	bl	8003124 <_write>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d103      	bne.n	8006824 <_write_r+0x20>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d000      	beq.n	8006824 <_write_r+0x20>
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	2000045c 	.word	0x2000045c

0800682c <__errno>:
 800682c:	4b01      	ldr	r3, [pc, #4]	@ (8006834 <__errno+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	4770      	bx	lr
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	20000018 	.word	0x20000018

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	2600      	movs	r6, #0
 800683c:	4c0c      	ldr	r4, [pc, #48]	@ (8006870 <__libc_init_array+0x38>)
 800683e:	4d0d      	ldr	r5, [pc, #52]	@ (8006874 <__libc_init_array+0x3c>)
 8006840:	1b64      	subs	r4, r4, r5
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	2600      	movs	r6, #0
 800684a:	f002 f8f3 	bl	8008a34 <_init>
 800684e:	4c0a      	ldr	r4, [pc, #40]	@ (8006878 <__libc_init_array+0x40>)
 8006850:	4d0a      	ldr	r5, [pc, #40]	@ (800687c <__libc_init_array+0x44>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	00b3      	lsls	r3, r6, #2
 800685e:	58eb      	ldr	r3, [r5, r3]
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	00b3      	lsls	r3, r6, #2
 8006868:	58eb      	ldr	r3, [r5, r3]
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	08008f0c 	.word	0x08008f0c
 8006874:	08008f0c 	.word	0x08008f0c
 8006878:	08008f10 	.word	0x08008f10
 800687c:	08008f0c 	.word	0x08008f0c

08006880 <__retarget_lock_init_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_acquire_recursive>:
 8006882:	4770      	bx	lr

08006884 <__retarget_lock_release_recursive>:
 8006884:	4770      	bx	lr

08006886 <memchr>:
 8006886:	b2c9      	uxtb	r1, r1
 8006888:	1882      	adds	r2, r0, r2
 800688a:	4290      	cmp	r0, r2
 800688c:	d101      	bne.n	8006892 <memchr+0xc>
 800688e:	2000      	movs	r0, #0
 8006890:	4770      	bx	lr
 8006892:	7803      	ldrb	r3, [r0, #0]
 8006894:	428b      	cmp	r3, r1
 8006896:	d0fb      	beq.n	8006890 <memchr+0xa>
 8006898:	3001      	adds	r0, #1
 800689a:	e7f6      	b.n	800688a <memchr+0x4>

0800689c <quorem>:
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689e:	6903      	ldr	r3, [r0, #16]
 80068a0:	690c      	ldr	r4, [r1, #16]
 80068a2:	b089      	sub	sp, #36	@ 0x24
 80068a4:	9003      	str	r0, [sp, #12]
 80068a6:	9106      	str	r1, [sp, #24]
 80068a8:	2000      	movs	r0, #0
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	db63      	blt.n	8006976 <quorem+0xda>
 80068ae:	000b      	movs	r3, r1
 80068b0:	3c01      	subs	r4, #1
 80068b2:	3314      	adds	r3, #20
 80068b4:	00a5      	lsls	r5, r4, #2
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	195b      	adds	r3, r3, r5
 80068ba:	9305      	str	r3, [sp, #20]
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	3314      	adds	r3, #20
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	195d      	adds	r5, r3, r5
 80068c4:	9b05      	ldr	r3, [sp, #20]
 80068c6:	682f      	ldr	r7, [r5, #0]
 80068c8:	681e      	ldr	r6, [r3, #0]
 80068ca:	0038      	movs	r0, r7
 80068cc:	3601      	adds	r6, #1
 80068ce:	0031      	movs	r1, r6
 80068d0:	f7f9 fc36 	bl	8000140 <__udivsi3>
 80068d4:	9002      	str	r0, [sp, #8]
 80068d6:	42b7      	cmp	r7, r6
 80068d8:	d327      	bcc.n	800692a <quorem+0x8e>
 80068da:	9b04      	ldr	r3, [sp, #16]
 80068dc:	2700      	movs	r7, #0
 80068de:	469c      	mov	ip, r3
 80068e0:	9e01      	ldr	r6, [sp, #4]
 80068e2:	9707      	str	r7, [sp, #28]
 80068e4:	4662      	mov	r2, ip
 80068e6:	ca08      	ldmia	r2!, {r3}
 80068e8:	6830      	ldr	r0, [r6, #0]
 80068ea:	4694      	mov	ip, r2
 80068ec:	9a02      	ldr	r2, [sp, #8]
 80068ee:	b299      	uxth	r1, r3
 80068f0:	4351      	muls	r1, r2
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	4353      	muls	r3, r2
 80068f6:	19c9      	adds	r1, r1, r7
 80068f8:	0c0a      	lsrs	r2, r1, #16
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	b289      	uxth	r1, r1
 80068fe:	b282      	uxth	r2, r0
 8006900:	1a52      	subs	r2, r2, r1
 8006902:	9907      	ldr	r1, [sp, #28]
 8006904:	0c1f      	lsrs	r7, r3, #16
 8006906:	1852      	adds	r2, r2, r1
 8006908:	0c00      	lsrs	r0, r0, #16
 800690a:	b29b      	uxth	r3, r3
 800690c:	1411      	asrs	r1, r2, #16
 800690e:	1ac3      	subs	r3, r0, r3
 8006910:	185b      	adds	r3, r3, r1
 8006912:	1419      	asrs	r1, r3, #16
 8006914:	b292      	uxth	r2, r2
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	9b05      	ldr	r3, [sp, #20]
 800691c:	9107      	str	r1, [sp, #28]
 800691e:	c604      	stmia	r6!, {r2}
 8006920:	4563      	cmp	r3, ip
 8006922:	d2df      	bcs.n	80068e4 <quorem+0x48>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02b      	beq.n	8006982 <quorem+0xe6>
 800692a:	9906      	ldr	r1, [sp, #24]
 800692c:	9803      	ldr	r0, [sp, #12]
 800692e:	f001 f9b7 	bl	8007ca0 <__mcmp>
 8006932:	2800      	cmp	r0, #0
 8006934:	db1e      	blt.n	8006974 <quorem+0xd8>
 8006936:	2600      	movs	r6, #0
 8006938:	9d01      	ldr	r5, [sp, #4]
 800693a:	9904      	ldr	r1, [sp, #16]
 800693c:	c901      	ldmia	r1!, {r0}
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b287      	uxth	r7, r0
 8006942:	b29a      	uxth	r2, r3
 8006944:	1bd2      	subs	r2, r2, r7
 8006946:	1992      	adds	r2, r2, r6
 8006948:	0c00      	lsrs	r0, r0, #16
 800694a:	0c1b      	lsrs	r3, r3, #16
 800694c:	1a1b      	subs	r3, r3, r0
 800694e:	1410      	asrs	r0, r2, #16
 8006950:	181b      	adds	r3, r3, r0
 8006952:	141e      	asrs	r6, r3, #16
 8006954:	b292      	uxth	r2, r2
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	431a      	orrs	r2, r3
 800695a:	9b05      	ldr	r3, [sp, #20]
 800695c:	c504      	stmia	r5!, {r2}
 800695e:	428b      	cmp	r3, r1
 8006960:	d2ec      	bcs.n	800693c <quorem+0xa0>
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	00a3      	lsls	r3, r4, #2
 8006966:	18d3      	adds	r3, r2, r3
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	2a00      	cmp	r2, #0
 800696c:	d014      	beq.n	8006998 <quorem+0xfc>
 800696e:	9b02      	ldr	r3, [sp, #8]
 8006970:	3301      	adds	r3, #1
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	9802      	ldr	r0, [sp, #8]
 8006976:	b009      	add	sp, #36	@ 0x24
 8006978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <quorem+0xee>
 8006980:	3c01      	subs	r4, #1
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	3d04      	subs	r5, #4
 8006986:	42ab      	cmp	r3, r5
 8006988:	d3f7      	bcc.n	800697a <quorem+0xde>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	611c      	str	r4, [r3, #16]
 800698e:	e7cc      	b.n	800692a <quorem+0x8e>
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	2a00      	cmp	r2, #0
 8006994:	d104      	bne.n	80069a0 <quorem+0x104>
 8006996:	3c01      	subs	r4, #1
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	3b04      	subs	r3, #4
 800699c:	429a      	cmp	r2, r3
 800699e:	d3f7      	bcc.n	8006990 <quorem+0xf4>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	611c      	str	r4, [r3, #16]
 80069a4:	e7e3      	b.n	800696e <quorem+0xd2>
	...

080069a8 <_dtoa_r>:
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	0014      	movs	r4, r2
 80069ac:	001d      	movs	r5, r3
 80069ae:	69c6      	ldr	r6, [r0, #28]
 80069b0:	b09d      	sub	sp, #116	@ 0x74
 80069b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80069b4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80069b6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80069b8:	9003      	str	r0, [sp, #12]
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d10f      	bne.n	80069de <_dtoa_r+0x36>
 80069be:	2010      	movs	r0, #16
 80069c0:	f000 fe2c 	bl	800761c <malloc>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	1e02      	subs	r2, r0, #0
 80069c8:	61d8      	str	r0, [r3, #28]
 80069ca:	d104      	bne.n	80069d6 <_dtoa_r+0x2e>
 80069cc:	21ef      	movs	r1, #239	@ 0xef
 80069ce:	4bc7      	ldr	r3, [pc, #796]	@ (8006cec <_dtoa_r+0x344>)
 80069d0:	48c7      	ldr	r0, [pc, #796]	@ (8006cf0 <_dtoa_r+0x348>)
 80069d2:	f001 fcb9 	bl	8008348 <__assert_func>
 80069d6:	6046      	str	r6, [r0, #4]
 80069d8:	6086      	str	r6, [r0, #8]
 80069da:	6006      	str	r6, [r0, #0]
 80069dc:	60c6      	str	r6, [r0, #12]
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	2900      	cmp	r1, #0
 80069e6:	d00b      	beq.n	8006a00 <_dtoa_r+0x58>
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	2301      	movs	r3, #1
 80069ec:	4093      	lsls	r3, r2
 80069ee:	604a      	str	r2, [r1, #4]
 80069f0:	608b      	str	r3, [r1, #8]
 80069f2:	9803      	ldr	r0, [sp, #12]
 80069f4:	f000 ff12 	bl	800781c <_Bfree>
 80069f8:	2200      	movs	r2, #0
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	da1e      	bge.n	8006a42 <_dtoa_r+0x9a>
 8006a04:	2301      	movs	r3, #1
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	006b      	lsls	r3, r5, #1
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006a10:	4bb8      	ldr	r3, [pc, #736]	@ (8006cf4 <_dtoa_r+0x34c>)
 8006a12:	4ab8      	ldr	r2, [pc, #736]	@ (8006cf4 <_dtoa_r+0x34c>)
 8006a14:	403b      	ands	r3, r7
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d116      	bne.n	8006a48 <_dtoa_r+0xa0>
 8006a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8006cf8 <_dtoa_r+0x350>)
 8006a1c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	033b      	lsls	r3, r7, #12
 8006a22:	0b1b      	lsrs	r3, r3, #12
 8006a24:	4323      	orrs	r3, r4
 8006a26:	d101      	bne.n	8006a2c <_dtoa_r+0x84>
 8006a28:	f000 fd80 	bl	800752c <_dtoa_r+0xb84>
 8006a2c:	4bb3      	ldr	r3, [pc, #716]	@ (8006cfc <_dtoa_r+0x354>)
 8006a2e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	d002      	beq.n	8006a3c <_dtoa_r+0x94>
 8006a36:	4bb2      	ldr	r3, [pc, #712]	@ (8006d00 <_dtoa_r+0x358>)
 8006a38:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	9808      	ldr	r0, [sp, #32]
 8006a3e:	b01d      	add	sp, #116	@ 0x74
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	2300      	movs	r3, #0
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	e7e2      	b.n	8006a0e <_dtoa_r+0x66>
 8006a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006a52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	f7f9 fcf8 	bl	800044c <__aeabi_dcmpeq>
 8006a5c:	1e06      	subs	r6, r0, #0
 8006a5e:	d00b      	beq.n	8006a78 <_dtoa_r+0xd0>
 8006a60:	2301      	movs	r3, #1
 8006a62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <_dtoa_r+0xca>
 8006a6c:	4ba5      	ldr	r3, [pc, #660]	@ (8006d04 <_dtoa_r+0x35c>)
 8006a6e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4ba5      	ldr	r3, [pc, #660]	@ (8006d08 <_dtoa_r+0x360>)
 8006a74:	9308      	str	r3, [sp, #32]
 8006a76:	e7e1      	b.n	8006a3c <_dtoa_r+0x94>
 8006a78:	ab1a      	add	r3, sp, #104	@ 0x68
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	9803      	ldr	r0, [sp, #12]
 8006a82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a86:	f001 f9c1 	bl	8007e0c <__d2b>
 8006a8a:	007a      	lsls	r2, r7, #1
 8006a8c:	9005      	str	r0, [sp, #20]
 8006a8e:	0d52      	lsrs	r2, r2, #21
 8006a90:	d100      	bne.n	8006a94 <_dtoa_r+0xec>
 8006a92:	e07b      	b.n	8006b8c <_dtoa_r+0x1e4>
 8006a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a96:	9618      	str	r6, [sp, #96]	@ 0x60
 8006a98:	0319      	lsls	r1, r3, #12
 8006a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8006d0c <_dtoa_r+0x364>)
 8006a9c:	0b09      	lsrs	r1, r1, #12
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	499b      	ldr	r1, [pc, #620]	@ (8006d10 <_dtoa_r+0x368>)
 8006aa2:	1857      	adds	r7, r2, r1
 8006aa4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006aa6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4b99      	ldr	r3, [pc, #612]	@ (8006d14 <_dtoa_r+0x36c>)
 8006aae:	f7fb fb83 	bl	80021b8 <__aeabi_dsub>
 8006ab2:	4a99      	ldr	r2, [pc, #612]	@ (8006d18 <_dtoa_r+0x370>)
 8006ab4:	4b99      	ldr	r3, [pc, #612]	@ (8006d1c <_dtoa_r+0x374>)
 8006ab6:	f7fb f899 	bl	8001bec <__aeabi_dmul>
 8006aba:	4a99      	ldr	r2, [pc, #612]	@ (8006d20 <_dtoa_r+0x378>)
 8006abc:	4b99      	ldr	r3, [pc, #612]	@ (8006d24 <_dtoa_r+0x37c>)
 8006abe:	f7fa f895 	bl	8000bec <__aeabi_dadd>
 8006ac2:	0004      	movs	r4, r0
 8006ac4:	0038      	movs	r0, r7
 8006ac6:	000d      	movs	r5, r1
 8006ac8:	f7fb ffde 	bl	8002a88 <__aeabi_i2d>
 8006acc:	4a96      	ldr	r2, [pc, #600]	@ (8006d28 <_dtoa_r+0x380>)
 8006ace:	4b97      	ldr	r3, [pc, #604]	@ (8006d2c <_dtoa_r+0x384>)
 8006ad0:	f7fb f88c 	bl	8001bec <__aeabi_dmul>
 8006ad4:	0002      	movs	r2, r0
 8006ad6:	000b      	movs	r3, r1
 8006ad8:	0020      	movs	r0, r4
 8006ada:	0029      	movs	r1, r5
 8006adc:	f7fa f886 	bl	8000bec <__aeabi_dadd>
 8006ae0:	0004      	movs	r4, r0
 8006ae2:	000d      	movs	r5, r1
 8006ae4:	f7fb ff94 	bl	8002a10 <__aeabi_d2iz>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	9004      	str	r0, [sp, #16]
 8006aec:	2300      	movs	r3, #0
 8006aee:	0020      	movs	r0, r4
 8006af0:	0029      	movs	r1, r5
 8006af2:	f7f9 fcb1 	bl	8000458 <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d00b      	beq.n	8006b12 <_dtoa_r+0x16a>
 8006afa:	9804      	ldr	r0, [sp, #16]
 8006afc:	f7fb ffc4 	bl	8002a88 <__aeabi_i2d>
 8006b00:	002b      	movs	r3, r5
 8006b02:	0022      	movs	r2, r4
 8006b04:	f7f9 fca2 	bl	800044c <__aeabi_dcmpeq>
 8006b08:	4243      	negs	r3, r0
 8006b0a:	4158      	adcs	r0, r3
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	1a1b      	subs	r3, r3, r0
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	2301      	movs	r3, #1
 8006b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	2b16      	cmp	r3, #22
 8006b1a:	d810      	bhi.n	8006b3e <_dtoa_r+0x196>
 8006b1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b20:	9a04      	ldr	r2, [sp, #16]
 8006b22:	4b83      	ldr	r3, [pc, #524]	@ (8006d30 <_dtoa_r+0x388>)
 8006b24:	00d2      	lsls	r2, r2, #3
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f7f9 fc94 	bl	8000458 <__aeabi_dcmplt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d047      	beq.n	8006bc4 <_dtoa_r+0x21c>
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b3e:	2200      	movs	r2, #0
 8006b40:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006b42:	9206      	str	r2, [sp, #24]
 8006b44:	1bdb      	subs	r3, r3, r7
 8006b46:	1e5a      	subs	r2, r3, #1
 8006b48:	d53e      	bpl.n	8006bc8 <_dtoa_r+0x220>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	9306      	str	r3, [sp, #24]
 8006b50:	2300      	movs	r3, #0
 8006b52:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	db38      	blt.n	8006bcc <_dtoa_r+0x224>
 8006b5a:	9a04      	ldr	r2, [sp, #16]
 8006b5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b5e:	4694      	mov	ip, r2
 8006b60:	4463      	add	r3, ip
 8006b62:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b64:	2300      	movs	r3, #0
 8006b66:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b6c:	2401      	movs	r4, #1
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d862      	bhi.n	8006c38 <_dtoa_r+0x290>
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	dd02      	ble.n	8006b7c <_dtoa_r+0x1d4>
 8006b76:	2400      	movs	r4, #0
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	9322      	str	r3, [sp, #136]	@ 0x88
 8006b7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b7e:	1e98      	subs	r0, r3, #2
 8006b80:	2803      	cmp	r0, #3
 8006b82:	d863      	bhi.n	8006c4c <_dtoa_r+0x2a4>
 8006b84:	f7f9 fac8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006b88:	2b385654 	.word	0x2b385654
 8006b8c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006b8e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006b90:	18f6      	adds	r6, r6, r3
 8006b92:	4b68      	ldr	r3, [pc, #416]	@ (8006d34 <_dtoa_r+0x38c>)
 8006b94:	18f2      	adds	r2, r6, r3
 8006b96:	2a20      	cmp	r2, #32
 8006b98:	dd0f      	ble.n	8006bba <_dtoa_r+0x212>
 8006b9a:	2340      	movs	r3, #64	@ 0x40
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	409f      	lsls	r7, r3
 8006ba0:	4b65      	ldr	r3, [pc, #404]	@ (8006d38 <_dtoa_r+0x390>)
 8006ba2:	0038      	movs	r0, r7
 8006ba4:	18f3      	adds	r3, r6, r3
 8006ba6:	40dc      	lsrs	r4, r3
 8006ba8:	4320      	orrs	r0, r4
 8006baa:	f7fb ff9b 	bl	8002ae4 <__aeabi_ui2d>
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4b62      	ldr	r3, [pc, #392]	@ (8006d3c <_dtoa_r+0x394>)
 8006bb2:	1e77      	subs	r7, r6, #1
 8006bb4:	18cb      	adds	r3, r1, r3
 8006bb6:	9218      	str	r2, [sp, #96]	@ 0x60
 8006bb8:	e776      	b.n	8006aa8 <_dtoa_r+0x100>
 8006bba:	2320      	movs	r3, #32
 8006bbc:	0020      	movs	r0, r4
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	4098      	lsls	r0, r3
 8006bc2:	e7f2      	b.n	8006baa <_dtoa_r+0x202>
 8006bc4:	9015      	str	r0, [sp, #84]	@ 0x54
 8006bc6:	e7ba      	b.n	8006b3e <_dtoa_r+0x196>
 8006bc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006bca:	e7c3      	b.n	8006b54 <_dtoa_r+0x1ac>
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	9306      	str	r3, [sp, #24]
 8006bd4:	4253      	negs	r3, r2
 8006bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9314      	str	r3, [sp, #80]	@ 0x50
 8006bdc:	e7c5      	b.n	8006b6a <_dtoa_r+0x1c2>
 8006bde:	2301      	movs	r3, #1
 8006be0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006be2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006be4:	4694      	mov	ip, r2
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	4463      	add	r3, ip
 8006bea:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bec:	3301      	adds	r3, #1
 8006bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc08      	bgt.n	8006c06 <_dtoa_r+0x25e>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e006      	b.n	8006c06 <_dtoa_r+0x25e>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd28      	ble.n	8006c54 <_dtoa_r+0x2ac>
 8006c02:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	9a03      	ldr	r2, [sp, #12]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	69d0      	ldr	r0, [r2, #28]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	0015      	movs	r5, r2
 8006c10:	3514      	adds	r5, #20
 8006c12:	429d      	cmp	r5, r3
 8006c14:	d923      	bls.n	8006c5e <_dtoa_r+0x2b6>
 8006c16:	6041      	str	r1, [r0, #4]
 8006c18:	9803      	ldr	r0, [sp, #12]
 8006c1a:	f000 fdbb 	bl	8007794 <_Balloc>
 8006c1e:	9008      	str	r0, [sp, #32]
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d11f      	bne.n	8006c64 <_dtoa_r+0x2bc>
 8006c24:	21b0      	movs	r1, #176	@ 0xb0
 8006c26:	4b46      	ldr	r3, [pc, #280]	@ (8006d40 <_dtoa_r+0x398>)
 8006c28:	4831      	ldr	r0, [pc, #196]	@ (8006cf0 <_dtoa_r+0x348>)
 8006c2a:	9a08      	ldr	r2, [sp, #32]
 8006c2c:	31ff      	adds	r1, #255	@ 0xff
 8006c2e:	e6d0      	b.n	80069d2 <_dtoa_r+0x2a>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e7e2      	b.n	8006bfa <_dtoa_r+0x252>
 8006c34:	2300      	movs	r3, #0
 8006c36:	e7d3      	b.n	8006be0 <_dtoa_r+0x238>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9410      	str	r4, [sp, #64]	@ 0x40
 8006c3c:	9322      	str	r3, [sp, #136]	@ 0x88
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2200      	movs	r2, #0
 8006c42:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	3313      	adds	r3, #19
 8006c48:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006c4a:	e7dc      	b.n	8006c06 <_dtoa_r+0x25e>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c50:	3b02      	subs	r3, #2
 8006c52:	e7f5      	b.n	8006c40 <_dtoa_r+0x298>
 8006c54:	2301      	movs	r3, #1
 8006c56:	001a      	movs	r2, r3
 8006c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5c:	e7f4      	b.n	8006c48 <_dtoa_r+0x2a0>
 8006c5e:	3101      	adds	r1, #1
 8006c60:	0052      	lsls	r2, r2, #1
 8006c62:	e7d4      	b.n	8006c0e <_dtoa_r+0x266>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	9a08      	ldr	r2, [sp, #32]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6e:	2b0e      	cmp	r3, #14
 8006c70:	d900      	bls.n	8006c74 <_dtoa_r+0x2cc>
 8006c72:	e0d6      	b.n	8006e22 <_dtoa_r+0x47a>
 8006c74:	2c00      	cmp	r4, #0
 8006c76:	d100      	bne.n	8006c7a <_dtoa_r+0x2d2>
 8006c78:	e0d3      	b.n	8006e22 <_dtoa_r+0x47a>
 8006c7a:	9b04      	ldr	r3, [sp, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd63      	ble.n	8006d48 <_dtoa_r+0x3a0>
 8006c80:	210f      	movs	r1, #15
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	4b2a      	ldr	r3, [pc, #168]	@ (8006d30 <_dtoa_r+0x388>)
 8006c86:	400a      	ands	r2, r1
 8006c88:	00d2      	lsls	r2, r2, #3
 8006c8a:	189b      	adds	r3, r3, r2
 8006c8c:	681e      	ldr	r6, [r3, #0]
 8006c8e:	685f      	ldr	r7, [r3, #4]
 8006c90:	9b04      	ldr	r3, [sp, #16]
 8006c92:	2402      	movs	r4, #2
 8006c94:	111d      	asrs	r5, r3, #4
 8006c96:	05db      	lsls	r3, r3, #23
 8006c98:	d50a      	bpl.n	8006cb0 <_dtoa_r+0x308>
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d44 <_dtoa_r+0x39c>)
 8006c9c:	400d      	ands	r5, r1
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006ca4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ca6:	f7fa fb67 	bl	8001378 <__aeabi_ddiv>
 8006caa:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cae:	3401      	adds	r4, #1
 8006cb0:	4b24      	ldr	r3, [pc, #144]	@ (8006d44 <_dtoa_r+0x39c>)
 8006cb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	d108      	bne.n	8006cca <_dtoa_r+0x322>
 8006cb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006cba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cbc:	0032      	movs	r2, r6
 8006cbe:	003b      	movs	r3, r7
 8006cc0:	f7fa fb5a 	bl	8001378 <__aeabi_ddiv>
 8006cc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cc8:	e059      	b.n	8006d7e <_dtoa_r+0x3d6>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	421d      	tst	r5, r3
 8006cce:	d009      	beq.n	8006ce4 <_dtoa_r+0x33c>
 8006cd0:	18e4      	adds	r4, r4, r3
 8006cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cd4:	0030      	movs	r0, r6
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	0039      	movs	r1, r7
 8006cdc:	f7fa ff86 	bl	8001bec <__aeabi_dmul>
 8006ce0:	0006      	movs	r6, r0
 8006ce2:	000f      	movs	r7, r1
 8006ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ce6:	106d      	asrs	r5, r5, #1
 8006ce8:	3308      	adds	r3, #8
 8006cea:	e7e2      	b.n	8006cb2 <_dtoa_r+0x30a>
 8006cec:	08008bcd 	.word	0x08008bcd
 8006cf0:	08008be4 	.word	0x08008be4
 8006cf4:	7ff00000 	.word	0x7ff00000
 8006cf8:	0000270f 	.word	0x0000270f
 8006cfc:	08008bc9 	.word	0x08008bc9
 8006d00:	08008bcc 	.word	0x08008bcc
 8006d04:	08008b9d 	.word	0x08008b9d
 8006d08:	08008b9c 	.word	0x08008b9c
 8006d0c:	3ff00000 	.word	0x3ff00000
 8006d10:	fffffc01 	.word	0xfffffc01
 8006d14:	3ff80000 	.word	0x3ff80000
 8006d18:	636f4361 	.word	0x636f4361
 8006d1c:	3fd287a7 	.word	0x3fd287a7
 8006d20:	8b60c8b3 	.word	0x8b60c8b3
 8006d24:	3fc68a28 	.word	0x3fc68a28
 8006d28:	509f79fb 	.word	0x509f79fb
 8006d2c:	3fd34413 	.word	0x3fd34413
 8006d30:	08008d38 	.word	0x08008d38
 8006d34:	00000432 	.word	0x00000432
 8006d38:	00000412 	.word	0x00000412
 8006d3c:	fe100000 	.word	0xfe100000
 8006d40:	08008c3c 	.word	0x08008c3c
 8006d44:	08008d10 	.word	0x08008d10
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	2402      	movs	r4, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <_dtoa_r+0x3d6>
 8006d50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d54:	220f      	movs	r2, #15
 8006d56:	425d      	negs	r5, r3
 8006d58:	402a      	ands	r2, r5
 8006d5a:	4bd5      	ldr	r3, [pc, #852]	@ (80070b0 <_dtoa_r+0x708>)
 8006d5c:	00d2      	lsls	r2, r2, #3
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f7fa ff42 	bl	8001bec <__aeabi_dmul>
 8006d68:	2701      	movs	r7, #1
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d70:	4ed0      	ldr	r6, [pc, #832]	@ (80070b4 <_dtoa_r+0x70c>)
 8006d72:	112d      	asrs	r5, r5, #4
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	d000      	beq.n	8006d7a <_dtoa_r+0x3d2>
 8006d78:	e095      	b.n	8006ea6 <_dtoa_r+0x4fe>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1a2      	bne.n	8006cc4 <_dtoa_r+0x31c>
 8006d7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006d82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d100      	bne.n	8006d8a <_dtoa_r+0x3e2>
 8006d88:	e098      	b.n	8006ebc <_dtoa_r+0x514>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	0030      	movs	r0, r6
 8006d8e:	0039      	movs	r1, r7
 8006d90:	4bc9      	ldr	r3, [pc, #804]	@ (80070b8 <_dtoa_r+0x710>)
 8006d92:	f7f9 fb61 	bl	8000458 <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d100      	bne.n	8006d9c <_dtoa_r+0x3f4>
 8006d9a:	e08f      	b.n	8006ebc <_dtoa_r+0x514>
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d100      	bne.n	8006da4 <_dtoa_r+0x3fc>
 8006da2:	e08b      	b.n	8006ebc <_dtoa_r+0x514>
 8006da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dd37      	ble.n	8006e1a <_dtoa_r+0x472>
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	2200      	movs	r2, #0
 8006dae:	3b01      	subs	r3, #1
 8006db0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006db2:	0030      	movs	r0, r6
 8006db4:	4bc1      	ldr	r3, [pc, #772]	@ (80070bc <_dtoa_r+0x714>)
 8006db6:	0039      	movs	r1, r7
 8006db8:	f7fa ff18 	bl	8001bec <__aeabi_dmul>
 8006dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006dbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	0020      	movs	r0, r4
 8006dc6:	9311      	str	r3, [sp, #68]	@ 0x44
 8006dc8:	f7fb fe5e 	bl	8002a88 <__aeabi_i2d>
 8006dcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd0:	f7fa ff0c 	bl	8001bec <__aeabi_dmul>
 8006dd4:	4bba      	ldr	r3, [pc, #744]	@ (80070c0 <_dtoa_r+0x718>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f7f9 ff08 	bl	8000bec <__aeabi_dadd>
 8006ddc:	4bb9      	ldr	r3, [pc, #740]	@ (80070c4 <_dtoa_r+0x71c>)
 8006dde:	0006      	movs	r6, r0
 8006de0:	18cf      	adds	r7, r1, r3
 8006de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d16d      	bne.n	8006ec4 <_dtoa_r+0x51c>
 8006de8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006dea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dec:	2200      	movs	r2, #0
 8006dee:	4bb6      	ldr	r3, [pc, #728]	@ (80070c8 <_dtoa_r+0x720>)
 8006df0:	f7fb f9e2 	bl	80021b8 <__aeabi_dsub>
 8006df4:	0032      	movs	r2, r6
 8006df6:	003b      	movs	r3, r7
 8006df8:	0004      	movs	r4, r0
 8006dfa:	000d      	movs	r5, r1
 8006dfc:	f7f9 fb40 	bl	8000480 <__aeabi_dcmpgt>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d000      	beq.n	8006e06 <_dtoa_r+0x45e>
 8006e04:	e2b6      	b.n	8007374 <_dtoa_r+0x9cc>
 8006e06:	2180      	movs	r1, #128	@ 0x80
 8006e08:	0609      	lsls	r1, r1, #24
 8006e0a:	187b      	adds	r3, r7, r1
 8006e0c:	0032      	movs	r2, r6
 8006e0e:	0020      	movs	r0, r4
 8006e10:	0029      	movs	r1, r5
 8006e12:	f7f9 fb21 	bl	8000458 <__aeabi_dcmplt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d128      	bne.n	8006e6c <_dtoa_r+0x4c4>
 8006e1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e1c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da00      	bge.n	8006e2a <_dtoa_r+0x482>
 8006e28:	e174      	b.n	8007114 <_dtoa_r+0x76c>
 8006e2a:	9a04      	ldr	r2, [sp, #16]
 8006e2c:	2a0e      	cmp	r2, #14
 8006e2e:	dd00      	ble.n	8006e32 <_dtoa_r+0x48a>
 8006e30:	e170      	b.n	8007114 <_dtoa_r+0x76c>
 8006e32:	4b9f      	ldr	r3, [pc, #636]	@ (80070b0 <_dtoa_r+0x708>)
 8006e34:	00d2      	lsls	r2, r2, #3
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	685c      	ldr	r4, [r3, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9306      	str	r3, [sp, #24]
 8006e3e:	9407      	str	r4, [sp, #28]
 8006e40:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db00      	blt.n	8006e48 <_dtoa_r+0x4a0>
 8006e46:	e0e7      	b.n	8007018 <_dtoa_r+0x670>
 8006e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dd00      	ble.n	8006e50 <_dtoa_r+0x4a8>
 8006e4e:	e0e3      	b.n	8007018 <_dtoa_r+0x670>
 8006e50:	d10c      	bne.n	8006e6c <_dtoa_r+0x4c4>
 8006e52:	9806      	ldr	r0, [sp, #24]
 8006e54:	9907      	ldr	r1, [sp, #28]
 8006e56:	2200      	movs	r2, #0
 8006e58:	4b9b      	ldr	r3, [pc, #620]	@ (80070c8 <_dtoa_r+0x720>)
 8006e5a:	f7fa fec7 	bl	8001bec <__aeabi_dmul>
 8006e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e62:	f7f9 fb17 	bl	8000494 <__aeabi_dcmpge>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d100      	bne.n	8006e6c <_dtoa_r+0x4c4>
 8006e6a:	e286      	b.n	800737a <_dtoa_r+0x9d2>
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	0037      	movs	r7, r6
 8006e70:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e72:	9c08      	ldr	r4, [sp, #32]
 8006e74:	43db      	mvns	r3, r3
 8006e76:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e78:	9704      	str	r7, [sp, #16]
 8006e7a:	2700      	movs	r7, #0
 8006e7c:	0031      	movs	r1, r6
 8006e7e:	9803      	ldr	r0, [sp, #12]
 8006e80:	f000 fccc 	bl	800781c <_Bfree>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d100      	bne.n	8006e8c <_dtoa_r+0x4e4>
 8006e8a:	e0bb      	b.n	8007004 <_dtoa_r+0x65c>
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	d005      	beq.n	8006e9c <_dtoa_r+0x4f4>
 8006e90:	429f      	cmp	r7, r3
 8006e92:	d003      	beq.n	8006e9c <_dtoa_r+0x4f4>
 8006e94:	0039      	movs	r1, r7
 8006e96:	9803      	ldr	r0, [sp, #12]
 8006e98:	f000 fcc0 	bl	800781c <_Bfree>
 8006e9c:	9904      	ldr	r1, [sp, #16]
 8006e9e:	9803      	ldr	r0, [sp, #12]
 8006ea0:	f000 fcbc 	bl	800781c <_Bfree>
 8006ea4:	e0ae      	b.n	8007004 <_dtoa_r+0x65c>
 8006ea6:	423d      	tst	r5, r7
 8006ea8:	d005      	beq.n	8006eb6 <_dtoa_r+0x50e>
 8006eaa:	6832      	ldr	r2, [r6, #0]
 8006eac:	6873      	ldr	r3, [r6, #4]
 8006eae:	f7fa fe9d 	bl	8001bec <__aeabi_dmul>
 8006eb2:	003b      	movs	r3, r7
 8006eb4:	3401      	adds	r4, #1
 8006eb6:	106d      	asrs	r5, r5, #1
 8006eb8:	3608      	adds	r6, #8
 8006eba:	e75b      	b.n	8006d74 <_dtoa_r+0x3cc>
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec2:	e77f      	b.n	8006dc4 <_dtoa_r+0x41c>
 8006ec4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80070b0 <_dtoa_r+0x708>)
 8006ec8:	3a01      	subs	r2, #1
 8006eca:	00d2      	lsls	r2, r2, #3
 8006ecc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d04c      	beq.n	8006f72 <_dtoa_r+0x5ca>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	497c      	ldr	r1, [pc, #496]	@ (80070cc <_dtoa_r+0x724>)
 8006edc:	f7fa fa4c 	bl	8001378 <__aeabi_ddiv>
 8006ee0:	0032      	movs	r2, r6
 8006ee2:	003b      	movs	r3, r7
 8006ee4:	f7fb f968 	bl	80021b8 <__aeabi_dsub>
 8006ee8:	9a08      	ldr	r2, [sp, #32]
 8006eea:	0006      	movs	r6, r0
 8006eec:	4694      	mov	ip, r2
 8006eee:	000f      	movs	r7, r1
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ef6:	4463      	add	r3, ip
 8006ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006efa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006efe:	f7fb fd87 	bl	8002a10 <__aeabi_d2iz>
 8006f02:	0005      	movs	r5, r0
 8006f04:	f7fb fdc0 	bl	8002a88 <__aeabi_i2d>
 8006f08:	0002      	movs	r2, r0
 8006f0a:	000b      	movs	r3, r1
 8006f0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f10:	f7fb f952 	bl	80021b8 <__aeabi_dsub>
 8006f14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f16:	3530      	adds	r5, #48	@ 0x30
 8006f18:	1c5c      	adds	r4, r3, #1
 8006f1a:	701d      	strb	r5, [r3, #0]
 8006f1c:	0032      	movs	r2, r6
 8006f1e:	003b      	movs	r3, r7
 8006f20:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f24:	f7f9 fa98 	bl	8000458 <__aeabi_dcmplt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d16b      	bne.n	8007004 <_dtoa_r+0x65c>
 8006f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f30:	2000      	movs	r0, #0
 8006f32:	4961      	ldr	r1, [pc, #388]	@ (80070b8 <_dtoa_r+0x710>)
 8006f34:	f7fb f940 	bl	80021b8 <__aeabi_dsub>
 8006f38:	0032      	movs	r2, r6
 8006f3a:	003b      	movs	r3, r7
 8006f3c:	f7f9 fa8c 	bl	8000458 <__aeabi_dcmplt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d000      	beq.n	8006f46 <_dtoa_r+0x59e>
 8006f44:	e0c6      	b.n	80070d4 <_dtoa_r+0x72c>
 8006f46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d100      	bne.n	8006f4e <_dtoa_r+0x5a6>
 8006f4c:	e765      	b.n	8006e1a <_dtoa_r+0x472>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	0030      	movs	r0, r6
 8006f52:	0039      	movs	r1, r7
 8006f54:	4b59      	ldr	r3, [pc, #356]	@ (80070bc <_dtoa_r+0x714>)
 8006f56:	f7fa fe49 	bl	8001bec <__aeabi_dmul>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	0006      	movs	r6, r0
 8006f5e:	000f      	movs	r7, r1
 8006f60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f64:	4b55      	ldr	r3, [pc, #340]	@ (80070bc <_dtoa_r+0x714>)
 8006f66:	f7fa fe41 	bl	8001bec <__aeabi_dmul>
 8006f6a:	9416      	str	r4, [sp, #88]	@ 0x58
 8006f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f70:	e7c3      	b.n	8006efa <_dtoa_r+0x552>
 8006f72:	0030      	movs	r0, r6
 8006f74:	0039      	movs	r1, r7
 8006f76:	f7fa fe39 	bl	8001bec <__aeabi_dmul>
 8006f7a:	9d08      	ldr	r5, [sp, #32]
 8006f7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f7e:	002b      	movs	r3, r5
 8006f80:	4694      	mov	ip, r2
 8006f82:	9016      	str	r0, [sp, #88]	@ 0x58
 8006f84:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006f86:	4463      	add	r3, ip
 8006f88:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f8e:	f7fb fd3f 	bl	8002a10 <__aeabi_d2iz>
 8006f92:	0004      	movs	r4, r0
 8006f94:	f7fb fd78 	bl	8002a88 <__aeabi_i2d>
 8006f98:	000b      	movs	r3, r1
 8006f9a:	0002      	movs	r2, r0
 8006f9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fa0:	f7fb f90a 	bl	80021b8 <__aeabi_dsub>
 8006fa4:	3430      	adds	r4, #48	@ 0x30
 8006fa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fa8:	702c      	strb	r4, [r5, #0]
 8006faa:	3501      	adds	r5, #1
 8006fac:	0006      	movs	r6, r0
 8006fae:	000f      	movs	r7, r1
 8006fb0:	42ab      	cmp	r3, r5
 8006fb2:	d12a      	bne.n	800700a <_dtoa_r+0x662>
 8006fb4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006fb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006fbc:	469c      	mov	ip, r3
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4b42      	ldr	r3, [pc, #264]	@ (80070cc <_dtoa_r+0x724>)
 8006fc2:	4464      	add	r4, ip
 8006fc4:	f7f9 fe12 	bl	8000bec <__aeabi_dadd>
 8006fc8:	0002      	movs	r2, r0
 8006fca:	000b      	movs	r3, r1
 8006fcc:	0030      	movs	r0, r6
 8006fce:	0039      	movs	r1, r7
 8006fd0:	f7f9 fa56 	bl	8000480 <__aeabi_dcmpgt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d000      	beq.n	8006fda <_dtoa_r+0x632>
 8006fd8:	e07c      	b.n	80070d4 <_dtoa_r+0x72c>
 8006fda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006fdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fde:	2000      	movs	r0, #0
 8006fe0:	493a      	ldr	r1, [pc, #232]	@ (80070cc <_dtoa_r+0x724>)
 8006fe2:	f7fb f8e9 	bl	80021b8 <__aeabi_dsub>
 8006fe6:	0002      	movs	r2, r0
 8006fe8:	000b      	movs	r3, r1
 8006fea:	0030      	movs	r0, r6
 8006fec:	0039      	movs	r1, r7
 8006fee:	f7f9 fa33 	bl	8000458 <__aeabi_dcmplt>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d100      	bne.n	8006ff8 <_dtoa_r+0x650>
 8006ff6:	e710      	b.n	8006e1a <_dtoa_r+0x472>
 8006ff8:	0023      	movs	r3, r4
 8006ffa:	3c01      	subs	r4, #1
 8006ffc:	7822      	ldrb	r2, [r4, #0]
 8006ffe:	2a30      	cmp	r2, #48	@ 0x30
 8007000:	d0fa      	beq.n	8006ff8 <_dtoa_r+0x650>
 8007002:	001c      	movs	r4, r3
 8007004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	e042      	b.n	8007090 <_dtoa_r+0x6e8>
 800700a:	2200      	movs	r2, #0
 800700c:	4b2b      	ldr	r3, [pc, #172]	@ (80070bc <_dtoa_r+0x714>)
 800700e:	f7fa fded 	bl	8001bec <__aeabi_dmul>
 8007012:	900a      	str	r0, [sp, #40]	@ 0x28
 8007014:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007016:	e7b8      	b.n	8006f8a <_dtoa_r+0x5e2>
 8007018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800701a:	9d08      	ldr	r5, [sp, #32]
 800701c:	3b01      	subs	r3, #1
 800701e:	195b      	adds	r3, r3, r5
 8007020:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007022:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007024:	930a      	str	r3, [sp, #40]	@ 0x28
 8007026:	9a06      	ldr	r2, [sp, #24]
 8007028:	9b07      	ldr	r3, [sp, #28]
 800702a:	0030      	movs	r0, r6
 800702c:	0039      	movs	r1, r7
 800702e:	f7fa f9a3 	bl	8001378 <__aeabi_ddiv>
 8007032:	f7fb fced 	bl	8002a10 <__aeabi_d2iz>
 8007036:	9009      	str	r0, [sp, #36]	@ 0x24
 8007038:	f7fb fd26 	bl	8002a88 <__aeabi_i2d>
 800703c:	9a06      	ldr	r2, [sp, #24]
 800703e:	9b07      	ldr	r3, [sp, #28]
 8007040:	f7fa fdd4 	bl	8001bec <__aeabi_dmul>
 8007044:	0002      	movs	r2, r0
 8007046:	000b      	movs	r3, r1
 8007048:	0030      	movs	r0, r6
 800704a:	0039      	movs	r1, r7
 800704c:	f7fb f8b4 	bl	80021b8 <__aeabi_dsub>
 8007050:	002b      	movs	r3, r5
 8007052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007054:	3501      	adds	r5, #1
 8007056:	3230      	adds	r2, #48	@ 0x30
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800705c:	002c      	movs	r4, r5
 800705e:	429a      	cmp	r2, r3
 8007060:	d14b      	bne.n	80070fa <_dtoa_r+0x752>
 8007062:	0002      	movs	r2, r0
 8007064:	000b      	movs	r3, r1
 8007066:	f7f9 fdc1 	bl	8000bec <__aeabi_dadd>
 800706a:	9a06      	ldr	r2, [sp, #24]
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	0006      	movs	r6, r0
 8007070:	000f      	movs	r7, r1
 8007072:	f7f9 fa05 	bl	8000480 <__aeabi_dcmpgt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d12a      	bne.n	80070d0 <_dtoa_r+0x728>
 800707a:	9a06      	ldr	r2, [sp, #24]
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	0030      	movs	r0, r6
 8007080:	0039      	movs	r1, r7
 8007082:	f7f9 f9e3 	bl	800044c <__aeabi_dcmpeq>
 8007086:	2800      	cmp	r0, #0
 8007088:	d002      	beq.n	8007090 <_dtoa_r+0x6e8>
 800708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708c:	07dd      	lsls	r5, r3, #31
 800708e:	d41f      	bmi.n	80070d0 <_dtoa_r+0x728>
 8007090:	9905      	ldr	r1, [sp, #20]
 8007092:	9803      	ldr	r0, [sp, #12]
 8007094:	f000 fbc2 	bl	800781c <_Bfree>
 8007098:	2300      	movs	r3, #0
 800709a:	7023      	strb	r3, [r4, #0]
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070a0:	3301      	adds	r3, #1
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d100      	bne.n	80070ac <_dtoa_r+0x704>
 80070aa:	e4c7      	b.n	8006a3c <_dtoa_r+0x94>
 80070ac:	601c      	str	r4, [r3, #0]
 80070ae:	e4c5      	b.n	8006a3c <_dtoa_r+0x94>
 80070b0:	08008d38 	.word	0x08008d38
 80070b4:	08008d10 	.word	0x08008d10
 80070b8:	3ff00000 	.word	0x3ff00000
 80070bc:	40240000 	.word	0x40240000
 80070c0:	401c0000 	.word	0x401c0000
 80070c4:	fcc00000 	.word	0xfcc00000
 80070c8:	40140000 	.word	0x40140000
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80070d4:	0023      	movs	r3, r4
 80070d6:	001c      	movs	r4, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	2a39      	cmp	r2, #57	@ 0x39
 80070de:	d108      	bne.n	80070f2 <_dtoa_r+0x74a>
 80070e0:	9a08      	ldr	r2, [sp, #32]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d1f7      	bne.n	80070d6 <_dtoa_r+0x72e>
 80070e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070e8:	9908      	ldr	r1, [sp, #32]
 80070ea:	3201      	adds	r2, #1
 80070ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80070ee:	2230      	movs	r2, #48	@ 0x30
 80070f0:	700a      	strb	r2, [r1, #0]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	3201      	adds	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e784      	b.n	8007004 <_dtoa_r+0x65c>
 80070fa:	2200      	movs	r2, #0
 80070fc:	4bc6      	ldr	r3, [pc, #792]	@ (8007418 <_dtoa_r+0xa70>)
 80070fe:	f7fa fd75 	bl	8001bec <__aeabi_dmul>
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	0006      	movs	r6, r0
 8007108:	000f      	movs	r7, r1
 800710a:	f7f9 f99f 	bl	800044c <__aeabi_dcmpeq>
 800710e:	2800      	cmp	r0, #0
 8007110:	d089      	beq.n	8007026 <_dtoa_r+0x67e>
 8007112:	e7bd      	b.n	8007090 <_dtoa_r+0x6e8>
 8007114:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007116:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007118:	9c06      	ldr	r4, [sp, #24]
 800711a:	2f00      	cmp	r7, #0
 800711c:	d014      	beq.n	8007148 <_dtoa_r+0x7a0>
 800711e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007120:	2a01      	cmp	r2, #1
 8007122:	dd00      	ble.n	8007126 <_dtoa_r+0x77e>
 8007124:	e0e4      	b.n	80072f0 <_dtoa_r+0x948>
 8007126:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007128:	2a00      	cmp	r2, #0
 800712a:	d100      	bne.n	800712e <_dtoa_r+0x786>
 800712c:	e0da      	b.n	80072e4 <_dtoa_r+0x93c>
 800712e:	4abb      	ldr	r2, [pc, #748]	@ (800741c <_dtoa_r+0xa74>)
 8007130:	189b      	adds	r3, r3, r2
 8007132:	9a06      	ldr	r2, [sp, #24]
 8007134:	2101      	movs	r1, #1
 8007136:	18d2      	adds	r2, r2, r3
 8007138:	9206      	str	r2, [sp, #24]
 800713a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800713c:	9803      	ldr	r0, [sp, #12]
 800713e:	18d3      	adds	r3, r2, r3
 8007140:	930d      	str	r3, [sp, #52]	@ 0x34
 8007142:	f000 fc23 	bl	800798c <__i2b>
 8007146:	0007      	movs	r7, r0
 8007148:	2c00      	cmp	r4, #0
 800714a:	d00e      	beq.n	800716a <_dtoa_r+0x7c2>
 800714c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd0b      	ble.n	800716a <_dtoa_r+0x7c2>
 8007152:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007154:	0023      	movs	r3, r4
 8007156:	4294      	cmp	r4, r2
 8007158:	dd00      	ble.n	800715c <_dtoa_r+0x7b4>
 800715a:	0013      	movs	r3, r2
 800715c:	9a06      	ldr	r2, [sp, #24]
 800715e:	1ae4      	subs	r4, r4, r3
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	9206      	str	r2, [sp, #24]
 8007164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	930d      	str	r3, [sp, #52]	@ 0x34
 800716a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d021      	beq.n	80071b4 <_dtoa_r+0x80c>
 8007170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d100      	bne.n	8007178 <_dtoa_r+0x7d0>
 8007176:	e0d3      	b.n	8007320 <_dtoa_r+0x978>
 8007178:	9e05      	ldr	r6, [sp, #20]
 800717a:	2d00      	cmp	r5, #0
 800717c:	d014      	beq.n	80071a8 <_dtoa_r+0x800>
 800717e:	0039      	movs	r1, r7
 8007180:	002a      	movs	r2, r5
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f000 fcc4 	bl	8007b10 <__pow5mult>
 8007188:	9a05      	ldr	r2, [sp, #20]
 800718a:	0001      	movs	r1, r0
 800718c:	0007      	movs	r7, r0
 800718e:	9803      	ldr	r0, [sp, #12]
 8007190:	f000 fc14 	bl	80079bc <__multiply>
 8007194:	0006      	movs	r6, r0
 8007196:	9905      	ldr	r1, [sp, #20]
 8007198:	9803      	ldr	r0, [sp, #12]
 800719a:	f000 fb3f 	bl	800781c <_Bfree>
 800719e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071a0:	9605      	str	r6, [sp, #20]
 80071a2:	1b5b      	subs	r3, r3, r5
 80071a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071a6:	d005      	beq.n	80071b4 <_dtoa_r+0x80c>
 80071a8:	0031      	movs	r1, r6
 80071aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80071ac:	9803      	ldr	r0, [sp, #12]
 80071ae:	f000 fcaf 	bl	8007b10 <__pow5mult>
 80071b2:	9005      	str	r0, [sp, #20]
 80071b4:	2101      	movs	r1, #1
 80071b6:	9803      	ldr	r0, [sp, #12]
 80071b8:	f000 fbe8 	bl	800798c <__i2b>
 80071bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071be:	0006      	movs	r6, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d100      	bne.n	80071c6 <_dtoa_r+0x81e>
 80071c4:	e1bc      	b.n	8007540 <_dtoa_r+0xb98>
 80071c6:	001a      	movs	r2, r3
 80071c8:	0001      	movs	r1, r0
 80071ca:	9803      	ldr	r0, [sp, #12]
 80071cc:	f000 fca0 	bl	8007b10 <__pow5mult>
 80071d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80071d2:	0006      	movs	r6, r0
 80071d4:	2500      	movs	r5, #0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	dc16      	bgt.n	8007208 <_dtoa_r+0x860>
 80071da:	2500      	movs	r5, #0
 80071dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071de:	42ab      	cmp	r3, r5
 80071e0:	d10e      	bne.n	8007200 <_dtoa_r+0x858>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e4:	031b      	lsls	r3, r3, #12
 80071e6:	42ab      	cmp	r3, r5
 80071e8:	d10a      	bne.n	8007200 <_dtoa_r+0x858>
 80071ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007420 <_dtoa_r+0xa78>)
 80071ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071ee:	4213      	tst	r3, r2
 80071f0:	d006      	beq.n	8007200 <_dtoa_r+0x858>
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	3501      	adds	r5, #1
 80071f6:	3301      	adds	r3, #1
 80071f8:	9306      	str	r3, [sp, #24]
 80071fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071fc:	3301      	adds	r3, #1
 80071fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8007200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007202:	2001      	movs	r0, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <_dtoa_r+0x872>
 8007208:	6933      	ldr	r3, [r6, #16]
 800720a:	3303      	adds	r3, #3
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	18f3      	adds	r3, r6, r3
 8007210:	6858      	ldr	r0, [r3, #4]
 8007212:	f000 fb6b 	bl	80078ec <__hi0bits>
 8007216:	2320      	movs	r3, #32
 8007218:	1a18      	subs	r0, r3, r0
 800721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800721c:	1818      	adds	r0, r3, r0
 800721e:	0002      	movs	r2, r0
 8007220:	231f      	movs	r3, #31
 8007222:	401a      	ands	r2, r3
 8007224:	4218      	tst	r0, r3
 8007226:	d100      	bne.n	800722a <_dtoa_r+0x882>
 8007228:	e081      	b.n	800732e <_dtoa_r+0x986>
 800722a:	3301      	adds	r3, #1
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	2b04      	cmp	r3, #4
 8007230:	dd79      	ble.n	8007326 <_dtoa_r+0x97e>
 8007232:	231c      	movs	r3, #28
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	9a06      	ldr	r2, [sp, #24]
 8007238:	18e4      	adds	r4, r4, r3
 800723a:	18d2      	adds	r2, r2, r3
 800723c:	9206      	str	r2, [sp, #24]
 800723e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	930d      	str	r3, [sp, #52]	@ 0x34
 8007244:	9b06      	ldr	r3, [sp, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd05      	ble.n	8007256 <_dtoa_r+0x8ae>
 800724a:	001a      	movs	r2, r3
 800724c:	9905      	ldr	r1, [sp, #20]
 800724e:	9803      	ldr	r0, [sp, #12]
 8007250:	f000 fcba 	bl	8007bc8 <__lshift>
 8007254:	9005      	str	r0, [sp, #20]
 8007256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007258:	2b00      	cmp	r3, #0
 800725a:	dd05      	ble.n	8007268 <_dtoa_r+0x8c0>
 800725c:	0031      	movs	r1, r6
 800725e:	001a      	movs	r2, r3
 8007260:	9803      	ldr	r0, [sp, #12]
 8007262:	f000 fcb1 	bl	8007bc8 <__lshift>
 8007266:	0006      	movs	r6, r0
 8007268:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800726a:	2b00      	cmp	r3, #0
 800726c:	d061      	beq.n	8007332 <_dtoa_r+0x98a>
 800726e:	0031      	movs	r1, r6
 8007270:	9805      	ldr	r0, [sp, #20]
 8007272:	f000 fd15 	bl	8007ca0 <__mcmp>
 8007276:	2800      	cmp	r0, #0
 8007278:	da5b      	bge.n	8007332 <_dtoa_r+0x98a>
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	220a      	movs	r2, #10
 800727e:	3b01      	subs	r3, #1
 8007280:	930c      	str	r3, [sp, #48]	@ 0x30
 8007282:	9905      	ldr	r1, [sp, #20]
 8007284:	2300      	movs	r3, #0
 8007286:	9803      	ldr	r0, [sp, #12]
 8007288:	f000 faec 	bl	8007864 <__multadd>
 800728c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800728e:	9005      	str	r0, [sp, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d100      	bne.n	8007296 <_dtoa_r+0x8ee>
 8007294:	e15b      	b.n	800754e <_dtoa_r+0xba6>
 8007296:	2300      	movs	r3, #0
 8007298:	0039      	movs	r1, r7
 800729a:	220a      	movs	r2, #10
 800729c:	9803      	ldr	r0, [sp, #12]
 800729e:	f000 fae1 	bl	8007864 <__multadd>
 80072a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a4:	0007      	movs	r7, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dc4d      	bgt.n	8007346 <_dtoa_r+0x99e>
 80072aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	dd46      	ble.n	800733e <_dtoa_r+0x996>
 80072b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d000      	beq.n	80072b8 <_dtoa_r+0x910>
 80072b6:	e5db      	b.n	8006e70 <_dtoa_r+0x4c8>
 80072b8:	0031      	movs	r1, r6
 80072ba:	2205      	movs	r2, #5
 80072bc:	9803      	ldr	r0, [sp, #12]
 80072be:	f000 fad1 	bl	8007864 <__multadd>
 80072c2:	0006      	movs	r6, r0
 80072c4:	0001      	movs	r1, r0
 80072c6:	9805      	ldr	r0, [sp, #20]
 80072c8:	f000 fcea 	bl	8007ca0 <__mcmp>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	dc00      	bgt.n	80072d2 <_dtoa_r+0x92a>
 80072d0:	e5ce      	b.n	8006e70 <_dtoa_r+0x4c8>
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	9a08      	ldr	r2, [sp, #32]
 80072d6:	1c5c      	adds	r4, r3, #1
 80072d8:	2331      	movs	r3, #49	@ 0x31
 80072da:	7013      	strb	r3, [r2, #0]
 80072dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072de:	3301      	adds	r3, #1
 80072e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80072e2:	e5c9      	b.n	8006e78 <_dtoa_r+0x4d0>
 80072e4:	2336      	movs	r3, #54	@ 0x36
 80072e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072e8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	9c06      	ldr	r4, [sp, #24]
 80072ee:	e720      	b.n	8007132 <_dtoa_r+0x78a>
 80072f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f2:	1e5d      	subs	r5, r3, #1
 80072f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f6:	42ab      	cmp	r3, r5
 80072f8:	db08      	blt.n	800730c <_dtoa_r+0x964>
 80072fa:	1b5d      	subs	r5, r3, r5
 80072fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	daf4      	bge.n	80072ec <_dtoa_r+0x944>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007306:	1a9c      	subs	r4, r3, r2
 8007308:	2300      	movs	r3, #0
 800730a:	e712      	b.n	8007132 <_dtoa_r+0x78a>
 800730c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800730e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007310:	1aeb      	subs	r3, r5, r3
 8007312:	18d3      	adds	r3, r2, r3
 8007314:	9314      	str	r3, [sp, #80]	@ 0x50
 8007316:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007318:	9c06      	ldr	r4, [sp, #24]
 800731a:	2500      	movs	r5, #0
 800731c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731e:	e708      	b.n	8007132 <_dtoa_r+0x78a>
 8007320:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007322:	9905      	ldr	r1, [sp, #20]
 8007324:	e742      	b.n	80071ac <_dtoa_r+0x804>
 8007326:	2b04      	cmp	r3, #4
 8007328:	d08c      	beq.n	8007244 <_dtoa_r+0x89c>
 800732a:	331c      	adds	r3, #28
 800732c:	e783      	b.n	8007236 <_dtoa_r+0x88e>
 800732e:	0013      	movs	r3, r2
 8007330:	e7fb      	b.n	800732a <_dtoa_r+0x982>
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	930c      	str	r3, [sp, #48]	@ 0x30
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	930e      	str	r3, [sp, #56]	@ 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	ddb5      	ble.n	80072aa <_dtoa_r+0x902>
 800733e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d100      	bne.n	8007346 <_dtoa_r+0x99e>
 8007344:	e107      	b.n	8007556 <_dtoa_r+0xbae>
 8007346:	2c00      	cmp	r4, #0
 8007348:	dd05      	ble.n	8007356 <_dtoa_r+0x9ae>
 800734a:	0039      	movs	r1, r7
 800734c:	0022      	movs	r2, r4
 800734e:	9803      	ldr	r0, [sp, #12]
 8007350:	f000 fc3a 	bl	8007bc8 <__lshift>
 8007354:	0007      	movs	r7, r0
 8007356:	9704      	str	r7, [sp, #16]
 8007358:	2d00      	cmp	r5, #0
 800735a:	d020      	beq.n	800739e <_dtoa_r+0x9f6>
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	9803      	ldr	r0, [sp, #12]
 8007360:	f000 fa18 	bl	8007794 <_Balloc>
 8007364:	1e04      	subs	r4, r0, #0
 8007366:	d10c      	bne.n	8007382 <_dtoa_r+0x9da>
 8007368:	0022      	movs	r2, r4
 800736a:	4b2e      	ldr	r3, [pc, #184]	@ (8007424 <_dtoa_r+0xa7c>)
 800736c:	482e      	ldr	r0, [pc, #184]	@ (8007428 <_dtoa_r+0xa80>)
 800736e:	492f      	ldr	r1, [pc, #188]	@ (800742c <_dtoa_r+0xa84>)
 8007370:	f7ff fb2f 	bl	80069d2 <_dtoa_r+0x2a>
 8007374:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007376:	0037      	movs	r7, r6
 8007378:	e7ab      	b.n	80072d2 <_dtoa_r+0x92a>
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800737e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007380:	e7f9      	b.n	8007376 <_dtoa_r+0x9ce>
 8007382:	0039      	movs	r1, r7
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	310c      	adds	r1, #12
 8007388:	3202      	adds	r2, #2
 800738a:	0092      	lsls	r2, r2, #2
 800738c:	300c      	adds	r0, #12
 800738e:	f000 ffd1 	bl	8008334 <memcpy>
 8007392:	2201      	movs	r2, #1
 8007394:	0021      	movs	r1, r4
 8007396:	9803      	ldr	r0, [sp, #12]
 8007398:	f000 fc16 	bl	8007bc8 <__lshift>
 800739c:	9004      	str	r0, [sp, #16]
 800739e:	9b08      	ldr	r3, [sp, #32]
 80073a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073a2:	9306      	str	r3, [sp, #24]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	2201      	movs	r2, #1
 80073aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ae:	4013      	ands	r3, r2
 80073b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80073b2:	0031      	movs	r1, r6
 80073b4:	9805      	ldr	r0, [sp, #20]
 80073b6:	f7ff fa71 	bl	800689c <quorem>
 80073ba:	0039      	movs	r1, r7
 80073bc:	0005      	movs	r5, r0
 80073be:	900a      	str	r0, [sp, #40]	@ 0x28
 80073c0:	9805      	ldr	r0, [sp, #20]
 80073c2:	f000 fc6d 	bl	8007ca0 <__mcmp>
 80073c6:	9a04      	ldr	r2, [sp, #16]
 80073c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80073ca:	0031      	movs	r1, r6
 80073cc:	9803      	ldr	r0, [sp, #12]
 80073ce:	f000 fc83 	bl	8007cd8 <__mdiff>
 80073d2:	2201      	movs	r2, #1
 80073d4:	68c3      	ldr	r3, [r0, #12]
 80073d6:	0004      	movs	r4, r0
 80073d8:	3530      	adds	r5, #48	@ 0x30
 80073da:	9209      	str	r2, [sp, #36]	@ 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <_dtoa_r+0xa42>
 80073e0:	0001      	movs	r1, r0
 80073e2:	9805      	ldr	r0, [sp, #20]
 80073e4:	f000 fc5c 	bl	8007ca0 <__mcmp>
 80073e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80073ea:	0021      	movs	r1, r4
 80073ec:	9803      	ldr	r0, [sp, #12]
 80073ee:	f000 fa15 	bl	800781c <_Bfree>
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073f6:	1c5c      	adds	r4, r3, #1
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	4313      	orrs	r3, r2
 80073fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073fe:	4313      	orrs	r3, r2
 8007400:	d116      	bne.n	8007430 <_dtoa_r+0xa88>
 8007402:	2d39      	cmp	r5, #57	@ 0x39
 8007404:	d02f      	beq.n	8007466 <_dtoa_r+0xabe>
 8007406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007408:	2b00      	cmp	r3, #0
 800740a:	dd01      	ble.n	8007410 <_dtoa_r+0xa68>
 800740c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800740e:	3531      	adds	r5, #49	@ 0x31
 8007410:	9b06      	ldr	r3, [sp, #24]
 8007412:	701d      	strb	r5, [r3, #0]
 8007414:	e532      	b.n	8006e7c <_dtoa_r+0x4d4>
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	40240000 	.word	0x40240000
 800741c:	00000433 	.word	0x00000433
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	08008c3c 	.word	0x08008c3c
 8007428:	08008be4 	.word	0x08008be4
 800742c:	000002ef 	.word	0x000002ef
 8007430:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007432:	2b00      	cmp	r3, #0
 8007434:	db04      	blt.n	8007440 <_dtoa_r+0xa98>
 8007436:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007438:	4313      	orrs	r3, r2
 800743a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743c:	4313      	orrs	r3, r2
 800743e:	d11e      	bne.n	800747e <_dtoa_r+0xad6>
 8007440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	dde4      	ble.n	8007410 <_dtoa_r+0xa68>
 8007446:	9905      	ldr	r1, [sp, #20]
 8007448:	2201      	movs	r2, #1
 800744a:	9803      	ldr	r0, [sp, #12]
 800744c:	f000 fbbc 	bl	8007bc8 <__lshift>
 8007450:	0031      	movs	r1, r6
 8007452:	9005      	str	r0, [sp, #20]
 8007454:	f000 fc24 	bl	8007ca0 <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	dc02      	bgt.n	8007462 <_dtoa_r+0xaba>
 800745c:	d1d8      	bne.n	8007410 <_dtoa_r+0xa68>
 800745e:	07eb      	lsls	r3, r5, #31
 8007460:	d5d6      	bpl.n	8007410 <_dtoa_r+0xa68>
 8007462:	2d39      	cmp	r5, #57	@ 0x39
 8007464:	d1d2      	bne.n	800740c <_dtoa_r+0xa64>
 8007466:	2339      	movs	r3, #57	@ 0x39
 8007468:	9a06      	ldr	r2, [sp, #24]
 800746a:	7013      	strb	r3, [r2, #0]
 800746c:	0023      	movs	r3, r4
 800746e:	001c      	movs	r4, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	2a39      	cmp	r2, #57	@ 0x39
 8007476:	d050      	beq.n	800751a <_dtoa_r+0xb72>
 8007478:	3201      	adds	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e4fe      	b.n	8006e7c <_dtoa_r+0x4d4>
 800747e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	dd03      	ble.n	800748c <_dtoa_r+0xae4>
 8007484:	2d39      	cmp	r5, #57	@ 0x39
 8007486:	d0ee      	beq.n	8007466 <_dtoa_r+0xabe>
 8007488:	3501      	adds	r5, #1
 800748a:	e7c1      	b.n	8007410 <_dtoa_r+0xa68>
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	9a06      	ldr	r2, [sp, #24]
 8007490:	701d      	strb	r5, [r3, #0]
 8007492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007494:	4293      	cmp	r3, r2
 8007496:	d02b      	beq.n	80074f0 <_dtoa_r+0xb48>
 8007498:	2300      	movs	r3, #0
 800749a:	220a      	movs	r2, #10
 800749c:	9905      	ldr	r1, [sp, #20]
 800749e:	9803      	ldr	r0, [sp, #12]
 80074a0:	f000 f9e0 	bl	8007864 <__multadd>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	9005      	str	r0, [sp, #20]
 80074a8:	429f      	cmp	r7, r3
 80074aa:	d109      	bne.n	80074c0 <_dtoa_r+0xb18>
 80074ac:	0039      	movs	r1, r7
 80074ae:	2300      	movs	r3, #0
 80074b0:	220a      	movs	r2, #10
 80074b2:	9803      	ldr	r0, [sp, #12]
 80074b4:	f000 f9d6 	bl	8007864 <__multadd>
 80074b8:	0007      	movs	r7, r0
 80074ba:	9004      	str	r0, [sp, #16]
 80074bc:	9406      	str	r4, [sp, #24]
 80074be:	e778      	b.n	80073b2 <_dtoa_r+0xa0a>
 80074c0:	0039      	movs	r1, r7
 80074c2:	2300      	movs	r3, #0
 80074c4:	220a      	movs	r2, #10
 80074c6:	9803      	ldr	r0, [sp, #12]
 80074c8:	f000 f9cc 	bl	8007864 <__multadd>
 80074cc:	2300      	movs	r3, #0
 80074ce:	0007      	movs	r7, r0
 80074d0:	220a      	movs	r2, #10
 80074d2:	9904      	ldr	r1, [sp, #16]
 80074d4:	9803      	ldr	r0, [sp, #12]
 80074d6:	f000 f9c5 	bl	8007864 <__multadd>
 80074da:	9004      	str	r0, [sp, #16]
 80074dc:	e7ee      	b.n	80074bc <_dtoa_r+0xb14>
 80074de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e0:	2401      	movs	r4, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd00      	ble.n	80074e8 <_dtoa_r+0xb40>
 80074e6:	001c      	movs	r4, r3
 80074e8:	9704      	str	r7, [sp, #16]
 80074ea:	2700      	movs	r7, #0
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	191c      	adds	r4, r3, r4
 80074f0:	9905      	ldr	r1, [sp, #20]
 80074f2:	2201      	movs	r2, #1
 80074f4:	9803      	ldr	r0, [sp, #12]
 80074f6:	f000 fb67 	bl	8007bc8 <__lshift>
 80074fa:	0031      	movs	r1, r6
 80074fc:	9005      	str	r0, [sp, #20]
 80074fe:	f000 fbcf 	bl	8007ca0 <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	dcb2      	bgt.n	800746c <_dtoa_r+0xac4>
 8007506:	d101      	bne.n	800750c <_dtoa_r+0xb64>
 8007508:	07ed      	lsls	r5, r5, #31
 800750a:	d4af      	bmi.n	800746c <_dtoa_r+0xac4>
 800750c:	0023      	movs	r3, r4
 800750e:	001c      	movs	r4, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	2a30      	cmp	r2, #48	@ 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xb66>
 8007518:	e4b0      	b.n	8006e7c <_dtoa_r+0x4d4>
 800751a:	9a08      	ldr	r2, [sp, #32]
 800751c:	429a      	cmp	r2, r3
 800751e:	d1a6      	bne.n	800746e <_dtoa_r+0xac6>
 8007520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007522:	3301      	adds	r3, #1
 8007524:	930c      	str	r3, [sp, #48]	@ 0x30
 8007526:	2331      	movs	r3, #49	@ 0x31
 8007528:	7013      	strb	r3, [r2, #0]
 800752a:	e4a7      	b.n	8006e7c <_dtoa_r+0x4d4>
 800752c:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <_dtoa_r+0xbd8>)
 800752e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007530:	9308      	str	r3, [sp, #32]
 8007532:	4b14      	ldr	r3, [pc, #80]	@ (8007584 <_dtoa_r+0xbdc>)
 8007534:	2a00      	cmp	r2, #0
 8007536:	d001      	beq.n	800753c <_dtoa_r+0xb94>
 8007538:	f7ff fa7e 	bl	8006a38 <_dtoa_r+0x90>
 800753c:	f7ff fa7e 	bl	8006a3c <_dtoa_r+0x94>
 8007540:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007542:	2b01      	cmp	r3, #1
 8007544:	dc00      	bgt.n	8007548 <_dtoa_r+0xba0>
 8007546:	e648      	b.n	80071da <_dtoa_r+0x832>
 8007548:	2001      	movs	r0, #1
 800754a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800754c:	e665      	b.n	800721a <_dtoa_r+0x872>
 800754e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007550:	2b00      	cmp	r3, #0
 8007552:	dc00      	bgt.n	8007556 <_dtoa_r+0xbae>
 8007554:	e6a9      	b.n	80072aa <_dtoa_r+0x902>
 8007556:	2400      	movs	r4, #0
 8007558:	0031      	movs	r1, r6
 800755a:	9805      	ldr	r0, [sp, #20]
 800755c:	f7ff f99e 	bl	800689c <quorem>
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	3030      	adds	r0, #48	@ 0x30
 8007564:	5518      	strb	r0, [r3, r4]
 8007566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007568:	3401      	adds	r4, #1
 800756a:	0005      	movs	r5, r0
 800756c:	42a3      	cmp	r3, r4
 800756e:	ddb6      	ble.n	80074de <_dtoa_r+0xb36>
 8007570:	2300      	movs	r3, #0
 8007572:	220a      	movs	r2, #10
 8007574:	9905      	ldr	r1, [sp, #20]
 8007576:	9803      	ldr	r0, [sp, #12]
 8007578:	f000 f974 	bl	8007864 <__multadd>
 800757c:	9005      	str	r0, [sp, #20]
 800757e:	e7eb      	b.n	8007558 <_dtoa_r+0xbb0>
 8007580:	08008bc0 	.word	0x08008bc0
 8007584:	08008bc8 	.word	0x08008bc8

08007588 <_free_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	0005      	movs	r5, r0
 800758c:	1e0c      	subs	r4, r1, #0
 800758e:	d010      	beq.n	80075b2 <_free_r+0x2a>
 8007590:	3c04      	subs	r4, #4
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	da00      	bge.n	800759a <_free_r+0x12>
 8007598:	18e4      	adds	r4, r4, r3
 800759a:	0028      	movs	r0, r5
 800759c:	f000 f8ea 	bl	8007774 <__malloc_lock>
 80075a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <_free_r+0x90>)
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d105      	bne.n	80075b4 <_free_r+0x2c>
 80075a8:	6063      	str	r3, [r4, #4]
 80075aa:	6014      	str	r4, [r2, #0]
 80075ac:	0028      	movs	r0, r5
 80075ae:	f000 f8e9 	bl	8007784 <__malloc_unlock>
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d908      	bls.n	80075ca <_free_r+0x42>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	1821      	adds	r1, r4, r0
 80075bc:	428b      	cmp	r3, r1
 80075be:	d1f3      	bne.n	80075a8 <_free_r+0x20>
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	1809      	adds	r1, r1, r0
 80075c6:	6021      	str	r1, [r4, #0]
 80075c8:	e7ee      	b.n	80075a8 <_free_r+0x20>
 80075ca:	001a      	movs	r2, r3
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <_free_r+0x4e>
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	d9f9      	bls.n	80075ca <_free_r+0x42>
 80075d6:	6811      	ldr	r1, [r2, #0]
 80075d8:	1850      	adds	r0, r2, r1
 80075da:	42a0      	cmp	r0, r4
 80075dc:	d10b      	bne.n	80075f6 <_free_r+0x6e>
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	1809      	adds	r1, r1, r0
 80075e2:	1850      	adds	r0, r2, r1
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	4283      	cmp	r3, r0
 80075e8:	d1e0      	bne.n	80075ac <_free_r+0x24>
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	1841      	adds	r1, r0, r1
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	6053      	str	r3, [r2, #4]
 80075f4:	e7da      	b.n	80075ac <_free_r+0x24>
 80075f6:	42a0      	cmp	r0, r4
 80075f8:	d902      	bls.n	8007600 <_free_r+0x78>
 80075fa:	230c      	movs	r3, #12
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	e7d5      	b.n	80075ac <_free_r+0x24>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	d103      	bne.n	8007610 <_free_r+0x88>
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	1809      	adds	r1, r1, r0
 800760e:	6021      	str	r1, [r4, #0]
 8007610:	6063      	str	r3, [r4, #4]
 8007612:	6054      	str	r4, [r2, #4]
 8007614:	e7ca      	b.n	80075ac <_free_r+0x24>
 8007616:	46c0      	nop			@ (mov r8, r8)
 8007618:	20000468 	.word	0x20000468

0800761c <malloc>:
 800761c:	b510      	push	{r4, lr}
 800761e:	4b03      	ldr	r3, [pc, #12]	@ (800762c <malloc+0x10>)
 8007620:	0001      	movs	r1, r0
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	f000 f826 	bl	8007674 <_malloc_r>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	20000018 	.word	0x20000018

08007630 <sbrk_aligned>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0f      	ldr	r6, [pc, #60]	@ (8007670 <sbrk_aligned+0x40>)
 8007634:	000d      	movs	r5, r1
 8007636:	6831      	ldr	r1, [r6, #0]
 8007638:	0004      	movs	r4, r0
 800763a:	2900      	cmp	r1, #0
 800763c:	d102      	bne.n	8007644 <sbrk_aligned+0x14>
 800763e:	f000 fe67 	bl	8008310 <_sbrk_r>
 8007642:	6030      	str	r0, [r6, #0]
 8007644:	0029      	movs	r1, r5
 8007646:	0020      	movs	r0, r4
 8007648:	f000 fe62 	bl	8008310 <_sbrk_r>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d103      	bne.n	8007658 <sbrk_aligned+0x28>
 8007650:	2501      	movs	r5, #1
 8007652:	426d      	negs	r5, r5
 8007654:	0028      	movs	r0, r5
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	2303      	movs	r3, #3
 800765a:	1cc5      	adds	r5, r0, #3
 800765c:	439d      	bics	r5, r3
 800765e:	42a8      	cmp	r0, r5
 8007660:	d0f8      	beq.n	8007654 <sbrk_aligned+0x24>
 8007662:	1a29      	subs	r1, r5, r0
 8007664:	0020      	movs	r0, r4
 8007666:	f000 fe53 	bl	8008310 <_sbrk_r>
 800766a:	3001      	adds	r0, #1
 800766c:	d1f2      	bne.n	8007654 <sbrk_aligned+0x24>
 800766e:	e7ef      	b.n	8007650 <sbrk_aligned+0x20>
 8007670:	20000464 	.word	0x20000464

08007674 <_malloc_r>:
 8007674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007676:	2203      	movs	r2, #3
 8007678:	1ccb      	adds	r3, r1, #3
 800767a:	4393      	bics	r3, r2
 800767c:	3308      	adds	r3, #8
 800767e:	0005      	movs	r5, r0
 8007680:	001f      	movs	r7, r3
 8007682:	2b0c      	cmp	r3, #12
 8007684:	d234      	bcs.n	80076f0 <_malloc_r+0x7c>
 8007686:	270c      	movs	r7, #12
 8007688:	42b9      	cmp	r1, r7
 800768a:	d833      	bhi.n	80076f4 <_malloc_r+0x80>
 800768c:	0028      	movs	r0, r5
 800768e:	f000 f871 	bl	8007774 <__malloc_lock>
 8007692:	4e37      	ldr	r6, [pc, #220]	@ (8007770 <_malloc_r+0xfc>)
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	001c      	movs	r4, r3
 8007698:	2c00      	cmp	r4, #0
 800769a:	d12f      	bne.n	80076fc <_malloc_r+0x88>
 800769c:	0039      	movs	r1, r7
 800769e:	0028      	movs	r0, r5
 80076a0:	f7ff ffc6 	bl	8007630 <sbrk_aligned>
 80076a4:	0004      	movs	r4, r0
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d15f      	bne.n	800776a <_malloc_r+0xf6>
 80076aa:	6834      	ldr	r4, [r6, #0]
 80076ac:	9400      	str	r4, [sp, #0]
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d14a      	bne.n	800774a <_malloc_r+0xd6>
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d052      	beq.n	800775e <_malloc_r+0xea>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	0028      	movs	r0, r5
 80076bc:	18e3      	adds	r3, r4, r3
 80076be:	9900      	ldr	r1, [sp, #0]
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	f000 fe25 	bl	8008310 <_sbrk_r>
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d148      	bne.n	800775e <_malloc_r+0xea>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	0028      	movs	r0, r5
 80076d0:	1aff      	subs	r7, r7, r3
 80076d2:	0039      	movs	r1, r7
 80076d4:	f7ff ffac 	bl	8007630 <sbrk_aligned>
 80076d8:	3001      	adds	r0, #1
 80076da:	d040      	beq.n	800775e <_malloc_r+0xea>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	19db      	adds	r3, r3, r7
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	6833      	ldr	r3, [r6, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	d133      	bne.n	8007752 <_malloc_r+0xde>
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	6033      	str	r3, [r6, #0]
 80076ee:	e019      	b.n	8007724 <_malloc_r+0xb0>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dac9      	bge.n	8007688 <_malloc_r+0x14>
 80076f4:	230c      	movs	r3, #12
 80076f6:	602b      	str	r3, [r5, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076fc:	6821      	ldr	r1, [r4, #0]
 80076fe:	1bc9      	subs	r1, r1, r7
 8007700:	d420      	bmi.n	8007744 <_malloc_r+0xd0>
 8007702:	290b      	cmp	r1, #11
 8007704:	d90a      	bls.n	800771c <_malloc_r+0xa8>
 8007706:	19e2      	adds	r2, r4, r7
 8007708:	6027      	str	r7, [r4, #0]
 800770a:	42a3      	cmp	r3, r4
 800770c:	d104      	bne.n	8007718 <_malloc_r+0xa4>
 800770e:	6032      	str	r2, [r6, #0]
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	6011      	str	r1, [r2, #0]
 8007714:	6053      	str	r3, [r2, #4]
 8007716:	e005      	b.n	8007724 <_malloc_r+0xb0>
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	e7f9      	b.n	8007710 <_malloc_r+0x9c>
 800771c:	6862      	ldr	r2, [r4, #4]
 800771e:	42a3      	cmp	r3, r4
 8007720:	d10e      	bne.n	8007740 <_malloc_r+0xcc>
 8007722:	6032      	str	r2, [r6, #0]
 8007724:	0028      	movs	r0, r5
 8007726:	f000 f82d 	bl	8007784 <__malloc_unlock>
 800772a:	0020      	movs	r0, r4
 800772c:	2207      	movs	r2, #7
 800772e:	300b      	adds	r0, #11
 8007730:	1d23      	adds	r3, r4, #4
 8007732:	4390      	bics	r0, r2
 8007734:	1ac2      	subs	r2, r0, r3
 8007736:	4298      	cmp	r0, r3
 8007738:	d0df      	beq.n	80076fa <_malloc_r+0x86>
 800773a:	1a1b      	subs	r3, r3, r0
 800773c:	50a3      	str	r3, [r4, r2]
 800773e:	e7dc      	b.n	80076fa <_malloc_r+0x86>
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	e7ef      	b.n	8007724 <_malloc_r+0xb0>
 8007744:	0023      	movs	r3, r4
 8007746:	6864      	ldr	r4, [r4, #4]
 8007748:	e7a6      	b.n	8007698 <_malloc_r+0x24>
 800774a:	9c00      	ldr	r4, [sp, #0]
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	e7ad      	b.n	80076ae <_malloc_r+0x3a>
 8007752:	001a      	movs	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	42a3      	cmp	r3, r4
 8007758:	d1fb      	bne.n	8007752 <_malloc_r+0xde>
 800775a:	2300      	movs	r3, #0
 800775c:	e7da      	b.n	8007714 <_malloc_r+0xa0>
 800775e:	230c      	movs	r3, #12
 8007760:	0028      	movs	r0, r5
 8007762:	602b      	str	r3, [r5, #0]
 8007764:	f000 f80e 	bl	8007784 <__malloc_unlock>
 8007768:	e7c6      	b.n	80076f8 <_malloc_r+0x84>
 800776a:	6007      	str	r7, [r0, #0]
 800776c:	e7da      	b.n	8007724 <_malloc_r+0xb0>
 800776e:	46c0      	nop			@ (mov r8, r8)
 8007770:	20000468 	.word	0x20000468

08007774 <__malloc_lock>:
 8007774:	b510      	push	{r4, lr}
 8007776:	4802      	ldr	r0, [pc, #8]	@ (8007780 <__malloc_lock+0xc>)
 8007778:	f7ff f883 	bl	8006882 <__retarget_lock_acquire_recursive>
 800777c:	bd10      	pop	{r4, pc}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	20000460 	.word	0x20000460

08007784 <__malloc_unlock>:
 8007784:	b510      	push	{r4, lr}
 8007786:	4802      	ldr	r0, [pc, #8]	@ (8007790 <__malloc_unlock+0xc>)
 8007788:	f7ff f87c 	bl	8006884 <__retarget_lock_release_recursive>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	20000460 	.word	0x20000460

08007794 <_Balloc>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	69c5      	ldr	r5, [r0, #28]
 8007798:	0006      	movs	r6, r0
 800779a:	000c      	movs	r4, r1
 800779c:	2d00      	cmp	r5, #0
 800779e:	d10e      	bne.n	80077be <_Balloc+0x2a>
 80077a0:	2010      	movs	r0, #16
 80077a2:	f7ff ff3b 	bl	800761c <malloc>
 80077a6:	1e02      	subs	r2, r0, #0
 80077a8:	61f0      	str	r0, [r6, #28]
 80077aa:	d104      	bne.n	80077b6 <_Balloc+0x22>
 80077ac:	216b      	movs	r1, #107	@ 0x6b
 80077ae:	4b19      	ldr	r3, [pc, #100]	@ (8007814 <_Balloc+0x80>)
 80077b0:	4819      	ldr	r0, [pc, #100]	@ (8007818 <_Balloc+0x84>)
 80077b2:	f000 fdc9 	bl	8008348 <__assert_func>
 80077b6:	6045      	str	r5, [r0, #4]
 80077b8:	6085      	str	r5, [r0, #8]
 80077ba:	6005      	str	r5, [r0, #0]
 80077bc:	60c5      	str	r5, [r0, #12]
 80077be:	69f5      	ldr	r5, [r6, #28]
 80077c0:	68eb      	ldr	r3, [r5, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <_Balloc+0x5a>
 80077c6:	69f3      	ldr	r3, [r6, #28]
 80077c8:	00a2      	lsls	r2, r4, #2
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d118      	bne.n	8007806 <_Balloc+0x72>
 80077d4:	2101      	movs	r1, #1
 80077d6:	000d      	movs	r5, r1
 80077d8:	40a5      	lsls	r5, r4
 80077da:	1d6a      	adds	r2, r5, #5
 80077dc:	0030      	movs	r0, r6
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	f000 fdd0 	bl	8008384 <_calloc_r>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d00c      	beq.n	8007802 <_Balloc+0x6e>
 80077e8:	6044      	str	r4, [r0, #4]
 80077ea:	6085      	str	r5, [r0, #8]
 80077ec:	e00d      	b.n	800780a <_Balloc+0x76>
 80077ee:	2221      	movs	r2, #33	@ 0x21
 80077f0:	2104      	movs	r1, #4
 80077f2:	0030      	movs	r0, r6
 80077f4:	f000 fdc6 	bl	8008384 <_calloc_r>
 80077f8:	69f3      	ldr	r3, [r6, #28]
 80077fa:	60e8      	str	r0, [r5, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e1      	bne.n	80077c6 <_Balloc+0x32>
 8007802:	2000      	movs	r0, #0
 8007804:	bd70      	pop	{r4, r5, r6, pc}
 8007806:	6802      	ldr	r2, [r0, #0]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	6103      	str	r3, [r0, #16]
 800780e:	60c3      	str	r3, [r0, #12]
 8007810:	e7f8      	b.n	8007804 <_Balloc+0x70>
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	08008bcd 	.word	0x08008bcd
 8007818:	08008c4d 	.word	0x08008c4d

0800781c <_Bfree>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	69c6      	ldr	r6, [r0, #28]
 8007820:	0005      	movs	r5, r0
 8007822:	000c      	movs	r4, r1
 8007824:	2e00      	cmp	r6, #0
 8007826:	d10e      	bne.n	8007846 <_Bfree+0x2a>
 8007828:	2010      	movs	r0, #16
 800782a:	f7ff fef7 	bl	800761c <malloc>
 800782e:	1e02      	subs	r2, r0, #0
 8007830:	61e8      	str	r0, [r5, #28]
 8007832:	d104      	bne.n	800783e <_Bfree+0x22>
 8007834:	218f      	movs	r1, #143	@ 0x8f
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <_Bfree+0x40>)
 8007838:	4809      	ldr	r0, [pc, #36]	@ (8007860 <_Bfree+0x44>)
 800783a:	f000 fd85 	bl	8008348 <__assert_func>
 800783e:	6046      	str	r6, [r0, #4]
 8007840:	6086      	str	r6, [r0, #8]
 8007842:	6006      	str	r6, [r0, #0]
 8007844:	60c6      	str	r6, [r0, #12]
 8007846:	2c00      	cmp	r4, #0
 8007848:	d007      	beq.n	800785a <_Bfree+0x3e>
 800784a:	69eb      	ldr	r3, [r5, #28]
 800784c:	6862      	ldr	r2, [r4, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	0092      	lsls	r2, r2, #2
 8007852:	189b      	adds	r3, r3, r2
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	6022      	str	r2, [r4, #0]
 8007858:	601c      	str	r4, [r3, #0]
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	08008bcd 	.word	0x08008bcd
 8007860:	08008c4d 	.word	0x08008c4d

08007864 <__multadd>:
 8007864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007866:	000f      	movs	r7, r1
 8007868:	9001      	str	r0, [sp, #4]
 800786a:	000c      	movs	r4, r1
 800786c:	001e      	movs	r6, r3
 800786e:	2000      	movs	r0, #0
 8007870:	690d      	ldr	r5, [r1, #16]
 8007872:	3714      	adds	r7, #20
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3001      	adds	r0, #1
 8007878:	b299      	uxth	r1, r3
 800787a:	4351      	muls	r1, r2
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	4353      	muls	r3, r2
 8007880:	1989      	adds	r1, r1, r6
 8007882:	0c0e      	lsrs	r6, r1, #16
 8007884:	199b      	adds	r3, r3, r6
 8007886:	0c1e      	lsrs	r6, r3, #16
 8007888:	b289      	uxth	r1, r1
 800788a:	041b      	lsls	r3, r3, #16
 800788c:	185b      	adds	r3, r3, r1
 800788e:	c708      	stmia	r7!, {r3}
 8007890:	4285      	cmp	r5, r0
 8007892:	dcef      	bgt.n	8007874 <__multadd+0x10>
 8007894:	2e00      	cmp	r6, #0
 8007896:	d022      	beq.n	80078de <__multadd+0x7a>
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	42ab      	cmp	r3, r5
 800789c:	dc19      	bgt.n	80078d2 <__multadd+0x6e>
 800789e:	6861      	ldr	r1, [r4, #4]
 80078a0:	9801      	ldr	r0, [sp, #4]
 80078a2:	3101      	adds	r1, #1
 80078a4:	f7ff ff76 	bl	8007794 <_Balloc>
 80078a8:	1e07      	subs	r7, r0, #0
 80078aa:	d105      	bne.n	80078b8 <__multadd+0x54>
 80078ac:	003a      	movs	r2, r7
 80078ae:	21ba      	movs	r1, #186	@ 0xba
 80078b0:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <__multadd+0x80>)
 80078b2:	480d      	ldr	r0, [pc, #52]	@ (80078e8 <__multadd+0x84>)
 80078b4:	f000 fd48 	bl	8008348 <__assert_func>
 80078b8:	0021      	movs	r1, r4
 80078ba:	6922      	ldr	r2, [r4, #16]
 80078bc:	310c      	adds	r1, #12
 80078be:	3202      	adds	r2, #2
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	300c      	adds	r0, #12
 80078c4:	f000 fd36 	bl	8008334 <memcpy>
 80078c8:	0021      	movs	r1, r4
 80078ca:	9801      	ldr	r0, [sp, #4]
 80078cc:	f7ff ffa6 	bl	800781c <_Bfree>
 80078d0:	003c      	movs	r4, r7
 80078d2:	1d2b      	adds	r3, r5, #4
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	18e3      	adds	r3, r4, r3
 80078d8:	3501      	adds	r5, #1
 80078da:	605e      	str	r6, [r3, #4]
 80078dc:	6125      	str	r5, [r4, #16]
 80078de:	0020      	movs	r0, r4
 80078e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	08008c3c 	.word	0x08008c3c
 80078e8:	08008c4d 	.word	0x08008c4d

080078ec <__hi0bits>:
 80078ec:	2280      	movs	r2, #128	@ 0x80
 80078ee:	0003      	movs	r3, r0
 80078f0:	0252      	lsls	r2, r2, #9
 80078f2:	2000      	movs	r0, #0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d201      	bcs.n	80078fc <__hi0bits+0x10>
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	3010      	adds	r0, #16
 80078fc:	2280      	movs	r2, #128	@ 0x80
 80078fe:	0452      	lsls	r2, r2, #17
 8007900:	4293      	cmp	r3, r2
 8007902:	d201      	bcs.n	8007908 <__hi0bits+0x1c>
 8007904:	3008      	adds	r0, #8
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	2280      	movs	r2, #128	@ 0x80
 800790a:	0552      	lsls	r2, r2, #21
 800790c:	4293      	cmp	r3, r2
 800790e:	d201      	bcs.n	8007914 <__hi0bits+0x28>
 8007910:	3004      	adds	r0, #4
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	2280      	movs	r2, #128	@ 0x80
 8007916:	05d2      	lsls	r2, r2, #23
 8007918:	4293      	cmp	r3, r2
 800791a:	d201      	bcs.n	8007920 <__hi0bits+0x34>
 800791c:	3002      	adds	r0, #2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	db03      	blt.n	800792c <__hi0bits+0x40>
 8007924:	3001      	adds	r0, #1
 8007926:	4213      	tst	r3, r2
 8007928:	d100      	bne.n	800792c <__hi0bits+0x40>
 800792a:	2020      	movs	r0, #32
 800792c:	4770      	bx	lr

0800792e <__lo0bits>:
 800792e:	6803      	ldr	r3, [r0, #0]
 8007930:	0001      	movs	r1, r0
 8007932:	2207      	movs	r2, #7
 8007934:	0018      	movs	r0, r3
 8007936:	4010      	ands	r0, r2
 8007938:	4213      	tst	r3, r2
 800793a:	d00d      	beq.n	8007958 <__lo0bits+0x2a>
 800793c:	3a06      	subs	r2, #6
 800793e:	2000      	movs	r0, #0
 8007940:	4213      	tst	r3, r2
 8007942:	d105      	bne.n	8007950 <__lo0bits+0x22>
 8007944:	3002      	adds	r0, #2
 8007946:	4203      	tst	r3, r0
 8007948:	d003      	beq.n	8007952 <__lo0bits+0x24>
 800794a:	40d3      	lsrs	r3, r2
 800794c:	0010      	movs	r0, r2
 800794e:	600b      	str	r3, [r1, #0]
 8007950:	4770      	bx	lr
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	600b      	str	r3, [r1, #0]
 8007956:	e7fb      	b.n	8007950 <__lo0bits+0x22>
 8007958:	b29a      	uxth	r2, r3
 800795a:	2a00      	cmp	r2, #0
 800795c:	d101      	bne.n	8007962 <__lo0bits+0x34>
 800795e:	2010      	movs	r0, #16
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	b2da      	uxtb	r2, r3
 8007964:	2a00      	cmp	r2, #0
 8007966:	d101      	bne.n	800796c <__lo0bits+0x3e>
 8007968:	3008      	adds	r0, #8
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	071a      	lsls	r2, r3, #28
 800796e:	d101      	bne.n	8007974 <__lo0bits+0x46>
 8007970:	3004      	adds	r0, #4
 8007972:	091b      	lsrs	r3, r3, #4
 8007974:	079a      	lsls	r2, r3, #30
 8007976:	d101      	bne.n	800797c <__lo0bits+0x4e>
 8007978:	3002      	adds	r0, #2
 800797a:	089b      	lsrs	r3, r3, #2
 800797c:	07da      	lsls	r2, r3, #31
 800797e:	d4e9      	bmi.n	8007954 <__lo0bits+0x26>
 8007980:	3001      	adds	r0, #1
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	d1e6      	bne.n	8007954 <__lo0bits+0x26>
 8007986:	2020      	movs	r0, #32
 8007988:	e7e2      	b.n	8007950 <__lo0bits+0x22>
	...

0800798c <__i2b>:
 800798c:	b510      	push	{r4, lr}
 800798e:	000c      	movs	r4, r1
 8007990:	2101      	movs	r1, #1
 8007992:	f7ff feff 	bl	8007794 <_Balloc>
 8007996:	2800      	cmp	r0, #0
 8007998:	d107      	bne.n	80079aa <__i2b+0x1e>
 800799a:	2146      	movs	r1, #70	@ 0x46
 800799c:	4c05      	ldr	r4, [pc, #20]	@ (80079b4 <__i2b+0x28>)
 800799e:	0002      	movs	r2, r0
 80079a0:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <__i2b+0x2c>)
 80079a2:	0020      	movs	r0, r4
 80079a4:	31ff      	adds	r1, #255	@ 0xff
 80079a6:	f000 fccf 	bl	8008348 <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	6144      	str	r4, [r0, #20]
 80079ae:	6103      	str	r3, [r0, #16]
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	46c0      	nop			@ (mov r8, r8)
 80079b4:	08008c4d 	.word	0x08008c4d
 80079b8:	08008c3c 	.word	0x08008c3c

080079bc <__multiply>:
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	0014      	movs	r4, r2
 80079c0:	690a      	ldr	r2, [r1, #16]
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	000d      	movs	r5, r1
 80079c6:	b089      	sub	sp, #36	@ 0x24
 80079c8:	429a      	cmp	r2, r3
 80079ca:	db02      	blt.n	80079d2 <__multiply+0x16>
 80079cc:	0023      	movs	r3, r4
 80079ce:	000c      	movs	r4, r1
 80079d0:	001d      	movs	r5, r3
 80079d2:	6927      	ldr	r7, [r4, #16]
 80079d4:	692e      	ldr	r6, [r5, #16]
 80079d6:	6861      	ldr	r1, [r4, #4]
 80079d8:	19bb      	adds	r3, r7, r6
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	68a3      	ldr	r3, [r4, #8]
 80079de:	19ba      	adds	r2, r7, r6
 80079e0:	4293      	cmp	r3, r2
 80079e2:	da00      	bge.n	80079e6 <__multiply+0x2a>
 80079e4:	3101      	adds	r1, #1
 80079e6:	f7ff fed5 	bl	8007794 <_Balloc>
 80079ea:	4684      	mov	ip, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d106      	bne.n	80079fe <__multiply+0x42>
 80079f0:	21b1      	movs	r1, #177	@ 0xb1
 80079f2:	4662      	mov	r2, ip
 80079f4:	4b44      	ldr	r3, [pc, #272]	@ (8007b08 <__multiply+0x14c>)
 80079f6:	4845      	ldr	r0, [pc, #276]	@ (8007b0c <__multiply+0x150>)
 80079f8:	0049      	lsls	r1, r1, #1
 80079fa:	f000 fca5 	bl	8008348 <__assert_func>
 80079fe:	0002      	movs	r2, r0
 8007a00:	19bb      	adds	r3, r7, r6
 8007a02:	3214      	adds	r2, #20
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	18d3      	adds	r3, r2, r3
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	0013      	movs	r3, r2
 8007a0e:	9801      	ldr	r0, [sp, #4]
 8007a10:	4283      	cmp	r3, r0
 8007a12:	d328      	bcc.n	8007a66 <__multiply+0xaa>
 8007a14:	0023      	movs	r3, r4
 8007a16:	00bf      	lsls	r7, r7, #2
 8007a18:	3314      	adds	r3, #20
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	3514      	adds	r5, #20
 8007a1e:	19db      	adds	r3, r3, r7
 8007a20:	00b6      	lsls	r6, r6, #2
 8007a22:	9302      	str	r3, [sp, #8]
 8007a24:	19ab      	adds	r3, r5, r6
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	2304      	movs	r3, #4
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	9902      	ldr	r1, [sp, #8]
 8007a30:	3315      	adds	r3, #21
 8007a32:	4299      	cmp	r1, r3
 8007a34:	d305      	bcc.n	8007a42 <__multiply+0x86>
 8007a36:	1b0c      	subs	r4, r1, r4
 8007a38:	3c15      	subs	r4, #21
 8007a3a:	08a4      	lsrs	r4, r4, #2
 8007a3c:	3401      	adds	r4, #1
 8007a3e:	00a3      	lsls	r3, r4, #2
 8007a40:	9305      	str	r3, [sp, #20]
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	429d      	cmp	r5, r3
 8007a46:	d310      	bcc.n	8007a6a <__multiply+0xae>
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd05      	ble.n	8007a5a <__multiply+0x9e>
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	3b04      	subs	r3, #4
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d052      	beq.n	8007b00 <__multiply+0x144>
 8007a5a:	4663      	mov	r3, ip
 8007a5c:	4660      	mov	r0, ip
 8007a5e:	9a00      	ldr	r2, [sp, #0]
 8007a60:	611a      	str	r2, [r3, #16]
 8007a62:	b009      	add	sp, #36	@ 0x24
 8007a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a66:	c302      	stmia	r3!, {r1}
 8007a68:	e7d1      	b.n	8007a0e <__multiply+0x52>
 8007a6a:	682c      	ldr	r4, [r5, #0]
 8007a6c:	b2a4      	uxth	r4, r4
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	d01f      	beq.n	8007ab2 <__multiply+0xf6>
 8007a72:	2300      	movs	r3, #0
 8007a74:	0017      	movs	r7, r2
 8007a76:	9e04      	ldr	r6, [sp, #16]
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	ce08      	ldmia	r6!, {r3}
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	9306      	str	r3, [sp, #24]
 8007a80:	466b      	mov	r3, sp
 8007a82:	8b1b      	ldrh	r3, [r3, #24]
 8007a84:	b288      	uxth	r0, r1
 8007a86:	4363      	muls	r3, r4
 8007a88:	181b      	adds	r3, r3, r0
 8007a8a:	9803      	ldr	r0, [sp, #12]
 8007a8c:	0c09      	lsrs	r1, r1, #16
 8007a8e:	181b      	adds	r3, r3, r0
 8007a90:	9806      	ldr	r0, [sp, #24]
 8007a92:	0c00      	lsrs	r0, r0, #16
 8007a94:	4360      	muls	r0, r4
 8007a96:	1840      	adds	r0, r0, r1
 8007a98:	0c19      	lsrs	r1, r3, #16
 8007a9a:	1841      	adds	r1, r0, r1
 8007a9c:	0c08      	lsrs	r0, r1, #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	0409      	lsls	r1, r1, #16
 8007aa2:	4319      	orrs	r1, r3
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	9003      	str	r0, [sp, #12]
 8007aa8:	c702      	stmia	r7!, {r1}
 8007aaa:	42b3      	cmp	r3, r6
 8007aac:	d8e5      	bhi.n	8007a7a <__multiply+0xbe>
 8007aae:	9b05      	ldr	r3, [sp, #20]
 8007ab0:	50d0      	str	r0, [r2, r3]
 8007ab2:	682c      	ldr	r4, [r5, #0]
 8007ab4:	0c24      	lsrs	r4, r4, #16
 8007ab6:	d020      	beq.n	8007afa <__multiply+0x13e>
 8007ab8:	2100      	movs	r1, #0
 8007aba:	0010      	movs	r0, r2
 8007abc:	6813      	ldr	r3, [r2, #0]
 8007abe:	9e04      	ldr	r6, [sp, #16]
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	6831      	ldr	r1, [r6, #0]
 8007ac4:	6807      	ldr	r7, [r0, #0]
 8007ac6:	b289      	uxth	r1, r1
 8007ac8:	4361      	muls	r1, r4
 8007aca:	0c3f      	lsrs	r7, r7, #16
 8007acc:	19c9      	adds	r1, r1, r7
 8007ace:	9f03      	ldr	r7, [sp, #12]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	19c9      	adds	r1, r1, r7
 8007ad4:	040f      	lsls	r7, r1, #16
 8007ad6:	431f      	orrs	r7, r3
 8007ad8:	6007      	str	r7, [r0, #0]
 8007ada:	ce80      	ldmia	r6!, {r7}
 8007adc:	6843      	ldr	r3, [r0, #4]
 8007ade:	0c3f      	lsrs	r7, r7, #16
 8007ae0:	4367      	muls	r7, r4
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	0c09      	lsrs	r1, r1, #16
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	185b      	adds	r3, r3, r1
 8007aea:	0c19      	lsrs	r1, r3, #16
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	9902      	ldr	r1, [sp, #8]
 8007af0:	3004      	adds	r0, #4
 8007af2:	42b1      	cmp	r1, r6
 8007af4:	d8e5      	bhi.n	8007ac2 <__multiply+0x106>
 8007af6:	9905      	ldr	r1, [sp, #20]
 8007af8:	5053      	str	r3, [r2, r1]
 8007afa:	3504      	adds	r5, #4
 8007afc:	3204      	adds	r2, #4
 8007afe:	e7a0      	b.n	8007a42 <__multiply+0x86>
 8007b00:	9b00      	ldr	r3, [sp, #0]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	e79f      	b.n	8007a48 <__multiply+0x8c>
 8007b08:	08008c3c 	.word	0x08008c3c
 8007b0c:	08008c4d 	.word	0x08008c4d

08007b10 <__pow5mult>:
 8007b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b12:	2303      	movs	r3, #3
 8007b14:	0015      	movs	r5, r2
 8007b16:	0007      	movs	r7, r0
 8007b18:	000e      	movs	r6, r1
 8007b1a:	401a      	ands	r2, r3
 8007b1c:	421d      	tst	r5, r3
 8007b1e:	d008      	beq.n	8007b32 <__pow5mult+0x22>
 8007b20:	4925      	ldr	r1, [pc, #148]	@ (8007bb8 <__pow5mult+0xa8>)
 8007b22:	3a01      	subs	r2, #1
 8007b24:	0092      	lsls	r2, r2, #2
 8007b26:	5852      	ldr	r2, [r2, r1]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	0031      	movs	r1, r6
 8007b2c:	f7ff fe9a 	bl	8007864 <__multadd>
 8007b30:	0006      	movs	r6, r0
 8007b32:	10ad      	asrs	r5, r5, #2
 8007b34:	d03d      	beq.n	8007bb2 <__pow5mult+0xa2>
 8007b36:	69fc      	ldr	r4, [r7, #28]
 8007b38:	2c00      	cmp	r4, #0
 8007b3a:	d10f      	bne.n	8007b5c <__pow5mult+0x4c>
 8007b3c:	2010      	movs	r0, #16
 8007b3e:	f7ff fd6d 	bl	800761c <malloc>
 8007b42:	1e02      	subs	r2, r0, #0
 8007b44:	61f8      	str	r0, [r7, #28]
 8007b46:	d105      	bne.n	8007b54 <__pow5mult+0x44>
 8007b48:	21b4      	movs	r1, #180	@ 0xb4
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bbc <__pow5mult+0xac>)
 8007b4c:	481c      	ldr	r0, [pc, #112]	@ (8007bc0 <__pow5mult+0xb0>)
 8007b4e:	31ff      	adds	r1, #255	@ 0xff
 8007b50:	f000 fbfa 	bl	8008348 <__assert_func>
 8007b54:	6044      	str	r4, [r0, #4]
 8007b56:	6084      	str	r4, [r0, #8]
 8007b58:	6004      	str	r4, [r0, #0]
 8007b5a:	60c4      	str	r4, [r0, #12]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	689c      	ldr	r4, [r3, #8]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	d108      	bne.n	8007b78 <__pow5mult+0x68>
 8007b66:	0038      	movs	r0, r7
 8007b68:	4916      	ldr	r1, [pc, #88]	@ (8007bc4 <__pow5mult+0xb4>)
 8007b6a:	f7ff ff0f 	bl	800798c <__i2b>
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	0004      	movs	r4, r0
 8007b72:	6098      	str	r0, [r3, #8]
 8007b74:	2300      	movs	r3, #0
 8007b76:	6003      	str	r3, [r0, #0]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	421d      	tst	r5, r3
 8007b7c:	d00a      	beq.n	8007b94 <__pow5mult+0x84>
 8007b7e:	0031      	movs	r1, r6
 8007b80:	0022      	movs	r2, r4
 8007b82:	0038      	movs	r0, r7
 8007b84:	f7ff ff1a 	bl	80079bc <__multiply>
 8007b88:	0031      	movs	r1, r6
 8007b8a:	9001      	str	r0, [sp, #4]
 8007b8c:	0038      	movs	r0, r7
 8007b8e:	f7ff fe45 	bl	800781c <_Bfree>
 8007b92:	9e01      	ldr	r6, [sp, #4]
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	d00c      	beq.n	8007bb2 <__pow5mult+0xa2>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d107      	bne.n	8007bae <__pow5mult+0x9e>
 8007b9e:	0022      	movs	r2, r4
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	0038      	movs	r0, r7
 8007ba4:	f7ff ff0a 	bl	80079bc <__multiply>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6020      	str	r0, [r4, #0]
 8007bac:	6003      	str	r3, [r0, #0]
 8007bae:	0004      	movs	r4, r0
 8007bb0:	e7e2      	b.n	8007b78 <__pow5mult+0x68>
 8007bb2:	0030      	movs	r0, r6
 8007bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	08008d00 	.word	0x08008d00
 8007bbc:	08008bcd 	.word	0x08008bcd
 8007bc0:	08008c4d 	.word	0x08008c4d
 8007bc4:	00000271 	.word	0x00000271

08007bc8 <__lshift>:
 8007bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bca:	000c      	movs	r4, r1
 8007bcc:	0016      	movs	r6, r2
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	1157      	asrs	r7, r2, #5
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	6849      	ldr	r1, [r1, #4]
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	9002      	str	r0, [sp, #8]
 8007be2:	9a00      	ldr	r2, [sp, #0]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	db10      	blt.n	8007c0a <__lshift+0x42>
 8007be8:	9802      	ldr	r0, [sp, #8]
 8007bea:	f7ff fdd3 	bl	8007794 <_Balloc>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	0001      	movs	r1, r0
 8007bf2:	0005      	movs	r5, r0
 8007bf4:	001a      	movs	r2, r3
 8007bf6:	3114      	adds	r1, #20
 8007bf8:	4298      	cmp	r0, r3
 8007bfa:	d10c      	bne.n	8007c16 <__lshift+0x4e>
 8007bfc:	21ef      	movs	r1, #239	@ 0xef
 8007bfe:	002a      	movs	r2, r5
 8007c00:	4b25      	ldr	r3, [pc, #148]	@ (8007c98 <__lshift+0xd0>)
 8007c02:	4826      	ldr	r0, [pc, #152]	@ (8007c9c <__lshift+0xd4>)
 8007c04:	0049      	lsls	r1, r1, #1
 8007c06:	f000 fb9f 	bl	8008348 <__assert_func>
 8007c0a:	3101      	adds	r1, #1
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	e7e8      	b.n	8007be2 <__lshift+0x1a>
 8007c10:	0098      	lsls	r0, r3, #2
 8007c12:	500a      	str	r2, [r1, r0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	42bb      	cmp	r3, r7
 8007c18:	dbfa      	blt.n	8007c10 <__lshift+0x48>
 8007c1a:	43fb      	mvns	r3, r7
 8007c1c:	17db      	asrs	r3, r3, #31
 8007c1e:	401f      	ands	r7, r3
 8007c20:	00bf      	lsls	r7, r7, #2
 8007c22:	0023      	movs	r3, r4
 8007c24:	201f      	movs	r0, #31
 8007c26:	19c9      	adds	r1, r1, r7
 8007c28:	0037      	movs	r7, r6
 8007c2a:	6922      	ldr	r2, [r4, #16]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	0092      	lsls	r2, r2, #2
 8007c30:	189a      	adds	r2, r3, r2
 8007c32:	4007      	ands	r7, r0
 8007c34:	4206      	tst	r6, r0
 8007c36:	d029      	beq.n	8007c8c <__lshift+0xc4>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	1bc0      	subs	r0, r0, r7
 8007c3c:	9003      	str	r0, [sp, #12]
 8007c3e:	468c      	mov	ip, r1
 8007c40:	2000      	movs	r0, #0
 8007c42:	681e      	ldr	r6, [r3, #0]
 8007c44:	40be      	lsls	r6, r7
 8007c46:	4306      	orrs	r6, r0
 8007c48:	4660      	mov	r0, ip
 8007c4a:	c040      	stmia	r0!, {r6}
 8007c4c:	4684      	mov	ip, r0
 8007c4e:	9e03      	ldr	r6, [sp, #12]
 8007c50:	cb01      	ldmia	r3!, {r0}
 8007c52:	40f0      	lsrs	r0, r6
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d8f4      	bhi.n	8007c42 <__lshift+0x7a>
 8007c58:	0026      	movs	r6, r4
 8007c5a:	3615      	adds	r6, #21
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	42b2      	cmp	r2, r6
 8007c60:	d304      	bcc.n	8007c6c <__lshift+0xa4>
 8007c62:	1b13      	subs	r3, r2, r4
 8007c64:	3b15      	subs	r3, #21
 8007c66:	089b      	lsrs	r3, r3, #2
 8007c68:	3301      	adds	r3, #1
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	50c8      	str	r0, [r1, r3]
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d002      	beq.n	8007c78 <__lshift+0xb0>
 8007c72:	9b01      	ldr	r3, [sp, #4]
 8007c74:	3302      	adds	r3, #2
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	9802      	ldr	r0, [sp, #8]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	0021      	movs	r1, r4
 8007c80:	612b      	str	r3, [r5, #16]
 8007c82:	f7ff fdcb 	bl	800781c <_Bfree>
 8007c86:	0028      	movs	r0, r5
 8007c88:	b005      	add	sp, #20
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	cb01      	ldmia	r3!, {r0}
 8007c8e:	c101      	stmia	r1!, {r0}
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d8fb      	bhi.n	8007c8c <__lshift+0xc4>
 8007c94:	e7f0      	b.n	8007c78 <__lshift+0xb0>
 8007c96:	46c0      	nop			@ (mov r8, r8)
 8007c98:	08008c3c 	.word	0x08008c3c
 8007c9c:	08008c4d 	.word	0x08008c4d

08007ca0 <__mcmp>:
 8007ca0:	b530      	push	{r4, r5, lr}
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	6904      	ldr	r4, [r0, #16]
 8007ca6:	0002      	movs	r2, r0
 8007ca8:	1ae0      	subs	r0, r4, r3
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d10f      	bne.n	8007cce <__mcmp+0x2e>
 8007cae:	3214      	adds	r2, #20
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	3114      	adds	r1, #20
 8007cb4:	0014      	movs	r4, r2
 8007cb6:	18c9      	adds	r1, r1, r3
 8007cb8:	18d2      	adds	r2, r2, r3
 8007cba:	3a04      	subs	r2, #4
 8007cbc:	3904      	subs	r1, #4
 8007cbe:	6815      	ldr	r5, [r2, #0]
 8007cc0:	680b      	ldr	r3, [r1, #0]
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	d004      	beq.n	8007cd0 <__mcmp+0x30>
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	d200      	bcs.n	8007cce <__mcmp+0x2e>
 8007ccc:	3802      	subs	r0, #2
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	4294      	cmp	r4, r2
 8007cd2:	d3f2      	bcc.n	8007cba <__mcmp+0x1a>
 8007cd4:	e7fb      	b.n	8007cce <__mcmp+0x2e>
	...

08007cd8 <__mdiff>:
 8007cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cda:	000c      	movs	r4, r1
 8007cdc:	b087      	sub	sp, #28
 8007cde:	9000      	str	r0, [sp, #0]
 8007ce0:	0011      	movs	r1, r2
 8007ce2:	0020      	movs	r0, r4
 8007ce4:	0017      	movs	r7, r2
 8007ce6:	f7ff ffdb 	bl	8007ca0 <__mcmp>
 8007cea:	1e05      	subs	r5, r0, #0
 8007cec:	d110      	bne.n	8007d10 <__mdiff+0x38>
 8007cee:	0001      	movs	r1, r0
 8007cf0:	9800      	ldr	r0, [sp, #0]
 8007cf2:	f7ff fd4f 	bl	8007794 <_Balloc>
 8007cf6:	1e02      	subs	r2, r0, #0
 8007cf8:	d104      	bne.n	8007d04 <__mdiff+0x2c>
 8007cfa:	4b40      	ldr	r3, [pc, #256]	@ (8007dfc <__mdiff+0x124>)
 8007cfc:	4840      	ldr	r0, [pc, #256]	@ (8007e00 <__mdiff+0x128>)
 8007cfe:	4941      	ldr	r1, [pc, #260]	@ (8007e04 <__mdiff+0x12c>)
 8007d00:	f000 fb22 	bl	8008348 <__assert_func>
 8007d04:	2301      	movs	r3, #1
 8007d06:	6145      	str	r5, [r0, #20]
 8007d08:	6103      	str	r3, [r0, #16]
 8007d0a:	0010      	movs	r0, r2
 8007d0c:	b007      	add	sp, #28
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d10:	2600      	movs	r6, #0
 8007d12:	42b0      	cmp	r0, r6
 8007d14:	da03      	bge.n	8007d1e <__mdiff+0x46>
 8007d16:	0023      	movs	r3, r4
 8007d18:	003c      	movs	r4, r7
 8007d1a:	001f      	movs	r7, r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	6861      	ldr	r1, [r4, #4]
 8007d20:	9800      	ldr	r0, [sp, #0]
 8007d22:	f7ff fd37 	bl	8007794 <_Balloc>
 8007d26:	1e02      	subs	r2, r0, #0
 8007d28:	d103      	bne.n	8007d32 <__mdiff+0x5a>
 8007d2a:	4b34      	ldr	r3, [pc, #208]	@ (8007dfc <__mdiff+0x124>)
 8007d2c:	4834      	ldr	r0, [pc, #208]	@ (8007e00 <__mdiff+0x128>)
 8007d2e:	4936      	ldr	r1, [pc, #216]	@ (8007e08 <__mdiff+0x130>)
 8007d30:	e7e6      	b.n	8007d00 <__mdiff+0x28>
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	3414      	adds	r4, #20
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	18e3      	adds	r3, r4, r3
 8007d3c:	0021      	movs	r1, r4
 8007d3e:	9401      	str	r4, [sp, #4]
 8007d40:	003c      	movs	r4, r7
 8007d42:	9302      	str	r3, [sp, #8]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3414      	adds	r4, #20
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	18e3      	adds	r3, r4, r3
 8007d4c:	9303      	str	r3, [sp, #12]
 8007d4e:	0003      	movs	r3, r0
 8007d50:	60c6      	str	r6, [r0, #12]
 8007d52:	468c      	mov	ip, r1
 8007d54:	2000      	movs	r0, #0
 8007d56:	3314      	adds	r3, #20
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	4663      	mov	r3, ip
 8007d5e:	cb20      	ldmia	r3!, {r5}
 8007d60:	b2a9      	uxth	r1, r5
 8007d62:	000e      	movs	r6, r1
 8007d64:	469c      	mov	ip, r3
 8007d66:	cc08      	ldmia	r4!, {r3}
 8007d68:	0c2d      	lsrs	r5, r5, #16
 8007d6a:	b299      	uxth	r1, r3
 8007d6c:	1a71      	subs	r1, r6, r1
 8007d6e:	1809      	adds	r1, r1, r0
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	1408      	asrs	r0, r1, #16
 8007d74:	1aeb      	subs	r3, r5, r3
 8007d76:	181b      	adds	r3, r3, r0
 8007d78:	1418      	asrs	r0, r3, #16
 8007d7a:	b289      	uxth	r1, r1
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	4319      	orrs	r1, r3
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	c302      	stmia	r3!, {r1}
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	d8e7      	bhi.n	8007d5c <__mdiff+0x84>
 8007d8c:	0039      	movs	r1, r7
 8007d8e:	9c03      	ldr	r4, [sp, #12]
 8007d90:	3115      	adds	r1, #21
 8007d92:	2304      	movs	r3, #4
 8007d94:	428c      	cmp	r4, r1
 8007d96:	d304      	bcc.n	8007da2 <__mdiff+0xca>
 8007d98:	1be3      	subs	r3, r4, r7
 8007d9a:	3b15      	subs	r3, #21
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	3301      	adds	r3, #1
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	9901      	ldr	r1, [sp, #4]
 8007da4:	18cd      	adds	r5, r1, r3
 8007da6:	9904      	ldr	r1, [sp, #16]
 8007da8:	002e      	movs	r6, r5
 8007daa:	18cb      	adds	r3, r1, r3
 8007dac:	001f      	movs	r7, r3
 8007dae:	9902      	ldr	r1, [sp, #8]
 8007db0:	428e      	cmp	r6, r1
 8007db2:	d311      	bcc.n	8007dd8 <__mdiff+0x100>
 8007db4:	9c02      	ldr	r4, [sp, #8]
 8007db6:	1ee9      	subs	r1, r5, #3
 8007db8:	2000      	movs	r0, #0
 8007dba:	428c      	cmp	r4, r1
 8007dbc:	d304      	bcc.n	8007dc8 <__mdiff+0xf0>
 8007dbe:	0021      	movs	r1, r4
 8007dc0:	3103      	adds	r1, #3
 8007dc2:	1b49      	subs	r1, r1, r5
 8007dc4:	0889      	lsrs	r1, r1, #2
 8007dc6:	0088      	lsls	r0, r1, #2
 8007dc8:	181b      	adds	r3, r3, r0
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	6819      	ldr	r1, [r3, #0]
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d010      	beq.n	8007df4 <__mdiff+0x11c>
 8007dd2:	9b00      	ldr	r3, [sp, #0]
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	e798      	b.n	8007d0a <__mdiff+0x32>
 8007dd8:	4684      	mov	ip, r0
 8007dda:	ce02      	ldmia	r6!, {r1}
 8007ddc:	b288      	uxth	r0, r1
 8007dde:	4460      	add	r0, ip
 8007de0:	1400      	asrs	r0, r0, #16
 8007de2:	0c0c      	lsrs	r4, r1, #16
 8007de4:	1904      	adds	r4, r0, r4
 8007de6:	4461      	add	r1, ip
 8007de8:	1420      	asrs	r0, r4, #16
 8007dea:	b289      	uxth	r1, r1
 8007dec:	0424      	lsls	r4, r4, #16
 8007dee:	4321      	orrs	r1, r4
 8007df0:	c702      	stmia	r7!, {r1}
 8007df2:	e7dc      	b.n	8007dae <__mdiff+0xd6>
 8007df4:	9900      	ldr	r1, [sp, #0]
 8007df6:	3901      	subs	r1, #1
 8007df8:	9100      	str	r1, [sp, #0]
 8007dfa:	e7e6      	b.n	8007dca <__mdiff+0xf2>
 8007dfc:	08008c3c 	.word	0x08008c3c
 8007e00:	08008c4d 	.word	0x08008c4d
 8007e04:	00000237 	.word	0x00000237
 8007e08:	00000245 	.word	0x00000245

08007e0c <__d2b>:
 8007e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e0e:	2101      	movs	r1, #1
 8007e10:	0016      	movs	r6, r2
 8007e12:	001f      	movs	r7, r3
 8007e14:	f7ff fcbe 	bl	8007794 <_Balloc>
 8007e18:	1e04      	subs	r4, r0, #0
 8007e1a:	d105      	bne.n	8007e28 <__d2b+0x1c>
 8007e1c:	0022      	movs	r2, r4
 8007e1e:	4b25      	ldr	r3, [pc, #148]	@ (8007eb4 <__d2b+0xa8>)
 8007e20:	4825      	ldr	r0, [pc, #148]	@ (8007eb8 <__d2b+0xac>)
 8007e22:	4926      	ldr	r1, [pc, #152]	@ (8007ebc <__d2b+0xb0>)
 8007e24:	f000 fa90 	bl	8008348 <__assert_func>
 8007e28:	033b      	lsls	r3, r7, #12
 8007e2a:	007d      	lsls	r5, r7, #1
 8007e2c:	0b1b      	lsrs	r3, r3, #12
 8007e2e:	0d6d      	lsrs	r5, r5, #21
 8007e30:	d002      	beq.n	8007e38 <__d2b+0x2c>
 8007e32:	2280      	movs	r2, #128	@ 0x80
 8007e34:	0352      	lsls	r2, r2, #13
 8007e36:	4313      	orrs	r3, r2
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	d025      	beq.n	8007e8a <__d2b+0x7e>
 8007e3e:	4668      	mov	r0, sp
 8007e40:	9600      	str	r6, [sp, #0]
 8007e42:	f7ff fd74 	bl	800792e <__lo0bits>
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	9900      	ldr	r1, [sp, #0]
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d01b      	beq.n	8007e86 <__d2b+0x7a>
 8007e4e:	2220      	movs	r2, #32
 8007e50:	001e      	movs	r6, r3
 8007e52:	1a12      	subs	r2, r2, r0
 8007e54:	4096      	lsls	r6, r2
 8007e56:	0032      	movs	r2, r6
 8007e58:	40c3      	lsrs	r3, r0
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	6162      	str	r2, [r4, #20]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	9e01      	ldr	r6, [sp, #4]
 8007e62:	61a6      	str	r6, [r4, #24]
 8007e64:	1e73      	subs	r3, r6, #1
 8007e66:	419e      	sbcs	r6, r3
 8007e68:	3601      	adds	r6, #1
 8007e6a:	6126      	str	r6, [r4, #16]
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	d014      	beq.n	8007e9a <__d2b+0x8e>
 8007e70:	2635      	movs	r6, #53	@ 0x35
 8007e72:	4b13      	ldr	r3, [pc, #76]	@ (8007ec0 <__d2b+0xb4>)
 8007e74:	18ed      	adds	r5, r5, r3
 8007e76:	9b08      	ldr	r3, [sp, #32]
 8007e78:	182d      	adds	r5, r5, r0
 8007e7a:	601d      	str	r5, [r3, #0]
 8007e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7e:	1a36      	subs	r6, r6, r0
 8007e80:	601e      	str	r6, [r3, #0]
 8007e82:	0020      	movs	r0, r4
 8007e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e86:	6161      	str	r1, [r4, #20]
 8007e88:	e7ea      	b.n	8007e60 <__d2b+0x54>
 8007e8a:	a801      	add	r0, sp, #4
 8007e8c:	f7ff fd4f 	bl	800792e <__lo0bits>
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	2601      	movs	r6, #1
 8007e94:	6163      	str	r3, [r4, #20]
 8007e96:	3020      	adds	r0, #32
 8007e98:	e7e7      	b.n	8007e6a <__d2b+0x5e>
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <__d2b+0xb8>)
 8007e9c:	18c0      	adds	r0, r0, r3
 8007e9e:	9b08      	ldr	r3, [sp, #32]
 8007ea0:	6018      	str	r0, [r3, #0]
 8007ea2:	4b09      	ldr	r3, [pc, #36]	@ (8007ec8 <__d2b+0xbc>)
 8007ea4:	18f3      	adds	r3, r6, r3
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	18e3      	adds	r3, r4, r3
 8007eaa:	6958      	ldr	r0, [r3, #20]
 8007eac:	f7ff fd1e 	bl	80078ec <__hi0bits>
 8007eb0:	0176      	lsls	r6, r6, #5
 8007eb2:	e7e3      	b.n	8007e7c <__d2b+0x70>
 8007eb4:	08008c3c 	.word	0x08008c3c
 8007eb8:	08008c4d 	.word	0x08008c4d
 8007ebc:	0000030f 	.word	0x0000030f
 8007ec0:	fffffbcd 	.word	0xfffffbcd
 8007ec4:	fffffbce 	.word	0xfffffbce
 8007ec8:	3fffffff 	.word	0x3fffffff

08007ecc <__ssputs_r>:
 8007ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ece:	688e      	ldr	r6, [r1, #8]
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	001f      	movs	r7, r3
 8007ed4:	000c      	movs	r4, r1
 8007ed6:	680b      	ldr	r3, [r1, #0]
 8007ed8:	9002      	str	r0, [sp, #8]
 8007eda:	9203      	str	r2, [sp, #12]
 8007edc:	42be      	cmp	r6, r7
 8007ede:	d830      	bhi.n	8007f42 <__ssputs_r+0x76>
 8007ee0:	210c      	movs	r1, #12
 8007ee2:	5e62      	ldrsh	r2, [r4, r1]
 8007ee4:	2190      	movs	r1, #144	@ 0x90
 8007ee6:	00c9      	lsls	r1, r1, #3
 8007ee8:	420a      	tst	r2, r1
 8007eea:	d028      	beq.n	8007f3e <__ssputs_r+0x72>
 8007eec:	2003      	movs	r0, #3
 8007eee:	6921      	ldr	r1, [r4, #16]
 8007ef0:	1a5b      	subs	r3, r3, r1
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	6963      	ldr	r3, [r4, #20]
 8007ef6:	4343      	muls	r3, r0
 8007ef8:	9801      	ldr	r0, [sp, #4]
 8007efa:	0fdd      	lsrs	r5, r3, #31
 8007efc:	18ed      	adds	r5, r5, r3
 8007efe:	1c7b      	adds	r3, r7, #1
 8007f00:	181b      	adds	r3, r3, r0
 8007f02:	106d      	asrs	r5, r5, #1
 8007f04:	42ab      	cmp	r3, r5
 8007f06:	d900      	bls.n	8007f0a <__ssputs_r+0x3e>
 8007f08:	001d      	movs	r5, r3
 8007f0a:	0552      	lsls	r2, r2, #21
 8007f0c:	d528      	bpl.n	8007f60 <__ssputs_r+0x94>
 8007f0e:	0029      	movs	r1, r5
 8007f10:	9802      	ldr	r0, [sp, #8]
 8007f12:	f7ff fbaf 	bl	8007674 <_malloc_r>
 8007f16:	1e06      	subs	r6, r0, #0
 8007f18:	d02c      	beq.n	8007f74 <__ssputs_r+0xa8>
 8007f1a:	9a01      	ldr	r2, [sp, #4]
 8007f1c:	6921      	ldr	r1, [r4, #16]
 8007f1e:	f000 fa09 	bl	8008334 <memcpy>
 8007f22:	89a2      	ldrh	r2, [r4, #12]
 8007f24:	4b18      	ldr	r3, [pc, #96]	@ (8007f88 <__ssputs_r+0xbc>)
 8007f26:	401a      	ands	r2, r3
 8007f28:	2380      	movs	r3, #128	@ 0x80
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	6126      	str	r6, [r4, #16]
 8007f32:	18f6      	adds	r6, r6, r3
 8007f34:	6026      	str	r6, [r4, #0]
 8007f36:	003e      	movs	r6, r7
 8007f38:	6165      	str	r5, [r4, #20]
 8007f3a:	1aed      	subs	r5, r5, r3
 8007f3c:	60a5      	str	r5, [r4, #8]
 8007f3e:	42be      	cmp	r6, r7
 8007f40:	d900      	bls.n	8007f44 <__ssputs_r+0x78>
 8007f42:	003e      	movs	r6, r7
 8007f44:	0032      	movs	r2, r6
 8007f46:	9903      	ldr	r1, [sp, #12]
 8007f48:	6820      	ldr	r0, [r4, #0]
 8007f4a:	f000 f9ce 	bl	80082ea <memmove>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	1b9b      	subs	r3, r3, r6
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	199b      	adds	r3, r3, r6
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	b005      	add	sp, #20
 8007f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f60:	002a      	movs	r2, r5
 8007f62:	9802      	ldr	r0, [sp, #8]
 8007f64:	f000 fa4d 	bl	8008402 <_realloc_r>
 8007f68:	1e06      	subs	r6, r0, #0
 8007f6a:	d1e0      	bne.n	8007f2e <__ssputs_r+0x62>
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	9802      	ldr	r0, [sp, #8]
 8007f70:	f7ff fb0a 	bl	8007588 <_free_r>
 8007f74:	230c      	movs	r3, #12
 8007f76:	2001      	movs	r0, #1
 8007f78:	9a02      	ldr	r2, [sp, #8]
 8007f7a:	4240      	negs	r0, r0
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	89a2      	ldrh	r2, [r4, #12]
 8007f80:	3334      	adds	r3, #52	@ 0x34
 8007f82:	4313      	orrs	r3, r2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e9      	b.n	8007f5c <__ssputs_r+0x90>
 8007f88:	fffffb7f 	.word	0xfffffb7f

08007f8c <_svfiprintf_r>:
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	b0a1      	sub	sp, #132	@ 0x84
 8007f90:	9003      	str	r0, [sp, #12]
 8007f92:	001d      	movs	r5, r3
 8007f94:	898b      	ldrh	r3, [r1, #12]
 8007f96:	000f      	movs	r7, r1
 8007f98:	0016      	movs	r6, r2
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	d511      	bpl.n	8007fc2 <_svfiprintf_r+0x36>
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10e      	bne.n	8007fc2 <_svfiprintf_r+0x36>
 8007fa4:	2140      	movs	r1, #64	@ 0x40
 8007fa6:	f7ff fb65 	bl	8007674 <_malloc_r>
 8007faa:	6038      	str	r0, [r7, #0]
 8007fac:	6138      	str	r0, [r7, #16]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d105      	bne.n	8007fbe <_svfiprintf_r+0x32>
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	9a03      	ldr	r2, [sp, #12]
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	2001      	movs	r0, #1
 8007fba:	4240      	negs	r0, r0
 8007fbc:	e0cf      	b.n	800815e <_svfiprintf_r+0x1d2>
 8007fbe:	2340      	movs	r3, #64	@ 0x40
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	ac08      	add	r4, sp, #32
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	3320      	adds	r3, #32
 8007fca:	7663      	strb	r3, [r4, #25]
 8007fcc:	3310      	adds	r3, #16
 8007fce:	76a3      	strb	r3, [r4, #26]
 8007fd0:	9507      	str	r5, [sp, #28]
 8007fd2:	0035      	movs	r5, r6
 8007fd4:	782b      	ldrb	r3, [r5, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <_svfiprintf_r+0x52>
 8007fda:	2b25      	cmp	r3, #37	@ 0x25
 8007fdc:	d148      	bne.n	8008070 <_svfiprintf_r+0xe4>
 8007fde:	1bab      	subs	r3, r5, r6
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	42b5      	cmp	r5, r6
 8007fe4:	d00b      	beq.n	8007ffe <_svfiprintf_r+0x72>
 8007fe6:	0032      	movs	r2, r6
 8007fe8:	0039      	movs	r1, r7
 8007fea:	9803      	ldr	r0, [sp, #12]
 8007fec:	f7ff ff6e 	bl	8007ecc <__ssputs_r>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d100      	bne.n	8007ff6 <_svfiprintf_r+0x6a>
 8007ff4:	e0ae      	b.n	8008154 <_svfiprintf_r+0x1c8>
 8007ff6:	6963      	ldr	r3, [r4, #20]
 8007ff8:	9a05      	ldr	r2, [sp, #20]
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	6163      	str	r3, [r4, #20]
 8007ffe:	782b      	ldrb	r3, [r5, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d100      	bne.n	8008006 <_svfiprintf_r+0x7a>
 8008004:	e0a6      	b.n	8008154 <_svfiprintf_r+0x1c8>
 8008006:	2201      	movs	r2, #1
 8008008:	2300      	movs	r3, #0
 800800a:	4252      	negs	r2, r2
 800800c:	6062      	str	r2, [r4, #4]
 800800e:	a904      	add	r1, sp, #16
 8008010:	3254      	adds	r2, #84	@ 0x54
 8008012:	1852      	adds	r2, r2, r1
 8008014:	1c6e      	adds	r6, r5, #1
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	60e3      	str	r3, [r4, #12]
 800801a:	60a3      	str	r3, [r4, #8]
 800801c:	7013      	strb	r3, [r2, #0]
 800801e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008020:	4b54      	ldr	r3, [pc, #336]	@ (8008174 <_svfiprintf_r+0x1e8>)
 8008022:	2205      	movs	r2, #5
 8008024:	0018      	movs	r0, r3
 8008026:	7831      	ldrb	r1, [r6, #0]
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	f7fe fc2c 	bl	8006886 <memchr>
 800802e:	1c75      	adds	r5, r6, #1
 8008030:	2800      	cmp	r0, #0
 8008032:	d11f      	bne.n	8008074 <_svfiprintf_r+0xe8>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	06d3      	lsls	r3, r2, #27
 8008038:	d504      	bpl.n	8008044 <_svfiprintf_r+0xb8>
 800803a:	2353      	movs	r3, #83	@ 0x53
 800803c:	a904      	add	r1, sp, #16
 800803e:	185b      	adds	r3, r3, r1
 8008040:	2120      	movs	r1, #32
 8008042:	7019      	strb	r1, [r3, #0]
 8008044:	0713      	lsls	r3, r2, #28
 8008046:	d504      	bpl.n	8008052 <_svfiprintf_r+0xc6>
 8008048:	2353      	movs	r3, #83	@ 0x53
 800804a:	a904      	add	r1, sp, #16
 800804c:	185b      	adds	r3, r3, r1
 800804e:	212b      	movs	r1, #43	@ 0x2b
 8008050:	7019      	strb	r1, [r3, #0]
 8008052:	7833      	ldrb	r3, [r6, #0]
 8008054:	2b2a      	cmp	r3, #42	@ 0x2a
 8008056:	d016      	beq.n	8008086 <_svfiprintf_r+0xfa>
 8008058:	0035      	movs	r5, r6
 800805a:	2100      	movs	r1, #0
 800805c:	200a      	movs	r0, #10
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	782a      	ldrb	r2, [r5, #0]
 8008062:	1c6e      	adds	r6, r5, #1
 8008064:	3a30      	subs	r2, #48	@ 0x30
 8008066:	2a09      	cmp	r2, #9
 8008068:	d950      	bls.n	800810c <_svfiprintf_r+0x180>
 800806a:	2900      	cmp	r1, #0
 800806c:	d111      	bne.n	8008092 <_svfiprintf_r+0x106>
 800806e:	e017      	b.n	80080a0 <_svfiprintf_r+0x114>
 8008070:	3501      	adds	r5, #1
 8008072:	e7af      	b.n	8007fd4 <_svfiprintf_r+0x48>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	1ac0      	subs	r0, r0, r3
 800807a:	2301      	movs	r3, #1
 800807c:	4083      	lsls	r3, r0
 800807e:	4313      	orrs	r3, r2
 8008080:	002e      	movs	r6, r5
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	e7cc      	b.n	8008020 <_svfiprintf_r+0x94>
 8008086:	9b07      	ldr	r3, [sp, #28]
 8008088:	1d19      	adds	r1, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9107      	str	r1, [sp, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	db01      	blt.n	8008096 <_svfiprintf_r+0x10a>
 8008092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008094:	e004      	b.n	80080a0 <_svfiprintf_r+0x114>
 8008096:	425b      	negs	r3, r3
 8008098:	60e3      	str	r3, [r4, #12]
 800809a:	2302      	movs	r3, #2
 800809c:	4313      	orrs	r3, r2
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	782b      	ldrb	r3, [r5, #0]
 80080a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a4:	d10c      	bne.n	80080c0 <_svfiprintf_r+0x134>
 80080a6:	786b      	ldrb	r3, [r5, #1]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d134      	bne.n	8008116 <_svfiprintf_r+0x18a>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	3502      	adds	r5, #2
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9207      	str	r2, [sp, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da01      	bge.n	80080be <_svfiprintf_r+0x132>
 80080ba:	2301      	movs	r3, #1
 80080bc:	425b      	negs	r3, r3
 80080be:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c0:	4e2d      	ldr	r6, [pc, #180]	@ (8008178 <_svfiprintf_r+0x1ec>)
 80080c2:	2203      	movs	r2, #3
 80080c4:	0030      	movs	r0, r6
 80080c6:	7829      	ldrb	r1, [r5, #0]
 80080c8:	f7fe fbdd 	bl	8006886 <memchr>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d006      	beq.n	80080de <_svfiprintf_r+0x152>
 80080d0:	2340      	movs	r3, #64	@ 0x40
 80080d2:	1b80      	subs	r0, r0, r6
 80080d4:	4083      	lsls	r3, r0
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	3501      	adds	r5, #1
 80080da:	4313      	orrs	r3, r2
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	7829      	ldrb	r1, [r5, #0]
 80080e0:	2206      	movs	r2, #6
 80080e2:	4826      	ldr	r0, [pc, #152]	@ (800817c <_svfiprintf_r+0x1f0>)
 80080e4:	1c6e      	adds	r6, r5, #1
 80080e6:	7621      	strb	r1, [r4, #24]
 80080e8:	f7fe fbcd 	bl	8006886 <memchr>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d038      	beq.n	8008162 <_svfiprintf_r+0x1d6>
 80080f0:	4b23      	ldr	r3, [pc, #140]	@ (8008180 <_svfiprintf_r+0x1f4>)
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d122      	bne.n	800813c <_svfiprintf_r+0x1b0>
 80080f6:	2207      	movs	r2, #7
 80080f8:	9b07      	ldr	r3, [sp, #28]
 80080fa:	3307      	adds	r3, #7
 80080fc:	4393      	bics	r3, r2
 80080fe:	3308      	adds	r3, #8
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	6963      	ldr	r3, [r4, #20]
 8008104:	9a04      	ldr	r2, [sp, #16]
 8008106:	189b      	adds	r3, r3, r2
 8008108:	6163      	str	r3, [r4, #20]
 800810a:	e762      	b.n	8007fd2 <_svfiprintf_r+0x46>
 800810c:	4343      	muls	r3, r0
 800810e:	0035      	movs	r5, r6
 8008110:	2101      	movs	r1, #1
 8008112:	189b      	adds	r3, r3, r2
 8008114:	e7a4      	b.n	8008060 <_svfiprintf_r+0xd4>
 8008116:	2300      	movs	r3, #0
 8008118:	200a      	movs	r0, #10
 800811a:	0019      	movs	r1, r3
 800811c:	3501      	adds	r5, #1
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	782a      	ldrb	r2, [r5, #0]
 8008122:	1c6e      	adds	r6, r5, #1
 8008124:	3a30      	subs	r2, #48	@ 0x30
 8008126:	2a09      	cmp	r2, #9
 8008128:	d903      	bls.n	8008132 <_svfiprintf_r+0x1a6>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0c8      	beq.n	80080c0 <_svfiprintf_r+0x134>
 800812e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008130:	e7c6      	b.n	80080c0 <_svfiprintf_r+0x134>
 8008132:	4341      	muls	r1, r0
 8008134:	0035      	movs	r5, r6
 8008136:	2301      	movs	r3, #1
 8008138:	1889      	adds	r1, r1, r2
 800813a:	e7f1      	b.n	8008120 <_svfiprintf_r+0x194>
 800813c:	aa07      	add	r2, sp, #28
 800813e:	9200      	str	r2, [sp, #0]
 8008140:	0021      	movs	r1, r4
 8008142:	003a      	movs	r2, r7
 8008144:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <_svfiprintf_r+0x1f8>)
 8008146:	9803      	ldr	r0, [sp, #12]
 8008148:	f7fd fe16 	bl	8005d78 <_printf_float>
 800814c:	9004      	str	r0, [sp, #16]
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	d1d6      	bne.n	8008102 <_svfiprintf_r+0x176>
 8008154:	89bb      	ldrh	r3, [r7, #12]
 8008156:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008158:	065b      	lsls	r3, r3, #25
 800815a:	d500      	bpl.n	800815e <_svfiprintf_r+0x1d2>
 800815c:	e72c      	b.n	8007fb8 <_svfiprintf_r+0x2c>
 800815e:	b021      	add	sp, #132	@ 0x84
 8008160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008162:	aa07      	add	r2, sp, #28
 8008164:	9200      	str	r2, [sp, #0]
 8008166:	0021      	movs	r1, r4
 8008168:	003a      	movs	r2, r7
 800816a:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <_svfiprintf_r+0x1f8>)
 800816c:	9803      	ldr	r0, [sp, #12]
 800816e:	f7fe f8b1 	bl	80062d4 <_printf_i>
 8008172:	e7eb      	b.n	800814c <_svfiprintf_r+0x1c0>
 8008174:	08008ca6 	.word	0x08008ca6
 8008178:	08008cac 	.word	0x08008cac
 800817c:	08008cb0 	.word	0x08008cb0
 8008180:	08005d79 	.word	0x08005d79
 8008184:	08007ecd 	.word	0x08007ecd

08008188 <__sflush_r>:
 8008188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818a:	220c      	movs	r2, #12
 800818c:	5e8b      	ldrsh	r3, [r1, r2]
 800818e:	0005      	movs	r5, r0
 8008190:	000c      	movs	r4, r1
 8008192:	071a      	lsls	r2, r3, #28
 8008194:	d456      	bmi.n	8008244 <__sflush_r+0xbc>
 8008196:	684a      	ldr	r2, [r1, #4]
 8008198:	2a00      	cmp	r2, #0
 800819a:	dc02      	bgt.n	80081a2 <__sflush_r+0x1a>
 800819c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800819e:	2a00      	cmp	r2, #0
 80081a0:	dd4e      	ble.n	8008240 <__sflush_r+0xb8>
 80081a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	d04b      	beq.n	8008240 <__sflush_r+0xb8>
 80081a8:	2200      	movs	r2, #0
 80081aa:	2080      	movs	r0, #128	@ 0x80
 80081ac:	682e      	ldr	r6, [r5, #0]
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	001a      	movs	r2, r3
 80081b2:	0140      	lsls	r0, r0, #5
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	4002      	ands	r2, r0
 80081b8:	4203      	tst	r3, r0
 80081ba:	d033      	beq.n	8008224 <__sflush_r+0x9c>
 80081bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	075b      	lsls	r3, r3, #29
 80081c2:	d506      	bpl.n	80081d2 <__sflush_r+0x4a>
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <__sflush_r+0x4a>
 80081ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	2300      	movs	r3, #0
 80081d4:	0028      	movs	r0, r5
 80081d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80081d8:	6a21      	ldr	r1, [r4, #32]
 80081da:	47b8      	blx	r7
 80081dc:	89a2      	ldrh	r2, [r4, #12]
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d106      	bne.n	80081f0 <__sflush_r+0x68>
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	291d      	cmp	r1, #29
 80081e6:	d846      	bhi.n	8008276 <__sflush_r+0xee>
 80081e8:	4b29      	ldr	r3, [pc, #164]	@ (8008290 <__sflush_r+0x108>)
 80081ea:	40cb      	lsrs	r3, r1
 80081ec:	07db      	lsls	r3, r3, #31
 80081ee:	d542      	bpl.n	8008276 <__sflush_r+0xee>
 80081f0:	2300      	movs	r3, #0
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	04d2      	lsls	r2, r2, #19
 80081fa:	d505      	bpl.n	8008208 <__sflush_r+0x80>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <__sflush_r+0x7e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d100      	bne.n	8008208 <__sflush_r+0x80>
 8008206:	6560      	str	r0, [r4, #84]	@ 0x54
 8008208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800820a:	602e      	str	r6, [r5, #0]
 800820c:	2900      	cmp	r1, #0
 800820e:	d017      	beq.n	8008240 <__sflush_r+0xb8>
 8008210:	0023      	movs	r3, r4
 8008212:	3344      	adds	r3, #68	@ 0x44
 8008214:	4299      	cmp	r1, r3
 8008216:	d002      	beq.n	800821e <__sflush_r+0x96>
 8008218:	0028      	movs	r0, r5
 800821a:	f7ff f9b5 	bl	8007588 <_free_r>
 800821e:	2300      	movs	r3, #0
 8008220:	6363      	str	r3, [r4, #52]	@ 0x34
 8008222:	e00d      	b.n	8008240 <__sflush_r+0xb8>
 8008224:	2301      	movs	r3, #1
 8008226:	0028      	movs	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	0002      	movs	r2, r0
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d1c6      	bne.n	80081be <__sflush_r+0x36>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0c3      	beq.n	80081be <__sflush_r+0x36>
 8008236:	2b1d      	cmp	r3, #29
 8008238:	d001      	beq.n	800823e <__sflush_r+0xb6>
 800823a:	2b16      	cmp	r3, #22
 800823c:	d11a      	bne.n	8008274 <__sflush_r+0xec>
 800823e:	602e      	str	r6, [r5, #0]
 8008240:	2000      	movs	r0, #0
 8008242:	e01e      	b.n	8008282 <__sflush_r+0xfa>
 8008244:	690e      	ldr	r6, [r1, #16]
 8008246:	2e00      	cmp	r6, #0
 8008248:	d0fa      	beq.n	8008240 <__sflush_r+0xb8>
 800824a:	680f      	ldr	r7, [r1, #0]
 800824c:	600e      	str	r6, [r1, #0]
 800824e:	1bba      	subs	r2, r7, r6
 8008250:	9201      	str	r2, [sp, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	079b      	lsls	r3, r3, #30
 8008256:	d100      	bne.n	800825a <__sflush_r+0xd2>
 8008258:	694a      	ldr	r2, [r1, #20]
 800825a:	60a2      	str	r2, [r4, #8]
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	ddee      	ble.n	8008240 <__sflush_r+0xb8>
 8008262:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008264:	0032      	movs	r2, r6
 8008266:	001f      	movs	r7, r3
 8008268:	0028      	movs	r0, r5
 800826a:	9b01      	ldr	r3, [sp, #4]
 800826c:	6a21      	ldr	r1, [r4, #32]
 800826e:	47b8      	blx	r7
 8008270:	2800      	cmp	r0, #0
 8008272:	dc07      	bgt.n	8008284 <__sflush_r+0xfc>
 8008274:	89a2      	ldrh	r2, [r4, #12]
 8008276:	2340      	movs	r3, #64	@ 0x40
 8008278:	2001      	movs	r0, #1
 800827a:	4313      	orrs	r3, r2
 800827c:	b21b      	sxth	r3, r3
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	4240      	negs	r0, r0
 8008282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	1836      	adds	r6, r6, r0
 8008288:	1a1b      	subs	r3, r3, r0
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	e7e6      	b.n	800825c <__sflush_r+0xd4>
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	20400001 	.word	0x20400001

08008294 <_fflush_r>:
 8008294:	690b      	ldr	r3, [r1, #16]
 8008296:	b570      	push	{r4, r5, r6, lr}
 8008298:	0005      	movs	r5, r0
 800829a:	000c      	movs	r4, r1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <_fflush_r+0x12>
 80082a0:	2500      	movs	r5, #0
 80082a2:	0028      	movs	r0, r5
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d004      	beq.n	80082b4 <_fflush_r+0x20>
 80082aa:	6a03      	ldr	r3, [r0, #32]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <_fflush_r+0x20>
 80082b0:	f7fe f9ac 	bl	800660c <__sinit>
 80082b4:	220c      	movs	r2, #12
 80082b6:	5ea3      	ldrsh	r3, [r4, r2]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f1      	beq.n	80082a0 <_fflush_r+0xc>
 80082bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082be:	07d2      	lsls	r2, r2, #31
 80082c0:	d404      	bmi.n	80082cc <_fflush_r+0x38>
 80082c2:	059b      	lsls	r3, r3, #22
 80082c4:	d402      	bmi.n	80082cc <_fflush_r+0x38>
 80082c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082c8:	f7fe fadb 	bl	8006882 <__retarget_lock_acquire_recursive>
 80082cc:	0028      	movs	r0, r5
 80082ce:	0021      	movs	r1, r4
 80082d0:	f7ff ff5a 	bl	8008188 <__sflush_r>
 80082d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082d6:	0005      	movs	r5, r0
 80082d8:	07db      	lsls	r3, r3, #31
 80082da:	d4e2      	bmi.n	80082a2 <_fflush_r+0xe>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	059b      	lsls	r3, r3, #22
 80082e0:	d4df      	bmi.n	80082a2 <_fflush_r+0xe>
 80082e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082e4:	f7fe face 	bl	8006884 <__retarget_lock_release_recursive>
 80082e8:	e7db      	b.n	80082a2 <_fflush_r+0xe>

080082ea <memmove>:
 80082ea:	b510      	push	{r4, lr}
 80082ec:	4288      	cmp	r0, r1
 80082ee:	d902      	bls.n	80082f6 <memmove+0xc>
 80082f0:	188b      	adds	r3, r1, r2
 80082f2:	4298      	cmp	r0, r3
 80082f4:	d308      	bcc.n	8008308 <memmove+0x1e>
 80082f6:	2300      	movs	r3, #0
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d007      	beq.n	800830c <memmove+0x22>
 80082fc:	5ccc      	ldrb	r4, [r1, r3]
 80082fe:	54c4      	strb	r4, [r0, r3]
 8008300:	3301      	adds	r3, #1
 8008302:	e7f9      	b.n	80082f8 <memmove+0xe>
 8008304:	5c8b      	ldrb	r3, [r1, r2]
 8008306:	5483      	strb	r3, [r0, r2]
 8008308:	3a01      	subs	r2, #1
 800830a:	d2fb      	bcs.n	8008304 <memmove+0x1a>
 800830c:	bd10      	pop	{r4, pc}
	...

08008310 <_sbrk_r>:
 8008310:	2300      	movs	r3, #0
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	4d06      	ldr	r5, [pc, #24]	@ (8008330 <_sbrk_r+0x20>)
 8008316:	0004      	movs	r4, r0
 8008318:	0008      	movs	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7fa ff4a 	bl	80031b4 <_sbrk>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d103      	bne.n	800832c <_sbrk_r+0x1c>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d000      	beq.n	800832c <_sbrk_r+0x1c>
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd70      	pop	{r4, r5, r6, pc}
 800832e:	46c0      	nop			@ (mov r8, r8)
 8008330:	2000045c 	.word	0x2000045c

08008334 <memcpy>:
 8008334:	2300      	movs	r3, #0
 8008336:	b510      	push	{r4, lr}
 8008338:	429a      	cmp	r2, r3
 800833a:	d100      	bne.n	800833e <memcpy+0xa>
 800833c:	bd10      	pop	{r4, pc}
 800833e:	5ccc      	ldrb	r4, [r1, r3]
 8008340:	54c4      	strb	r4, [r0, r3]
 8008342:	3301      	adds	r3, #1
 8008344:	e7f8      	b.n	8008338 <memcpy+0x4>
	...

08008348 <__assert_func>:
 8008348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800834a:	0014      	movs	r4, r2
 800834c:	001a      	movs	r2, r3
 800834e:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <__assert_func+0x2c>)
 8008350:	0005      	movs	r5, r0
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	000e      	movs	r6, r1
 8008356:	68d8      	ldr	r0, [r3, #12]
 8008358:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <__assert_func+0x30>)
 800835a:	2c00      	cmp	r4, #0
 800835c:	d101      	bne.n	8008362 <__assert_func+0x1a>
 800835e:	4b07      	ldr	r3, [pc, #28]	@ (800837c <__assert_func+0x34>)
 8008360:	001c      	movs	r4, r3
 8008362:	4907      	ldr	r1, [pc, #28]	@ (8008380 <__assert_func+0x38>)
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	9402      	str	r4, [sp, #8]
 8008368:	002b      	movs	r3, r5
 800836a:	9600      	str	r6, [sp, #0]
 800836c:	f000 f886 	bl	800847c <fiprintf>
 8008370:	f000 f894 	bl	800849c <abort>
 8008374:	20000018 	.word	0x20000018
 8008378:	08008cc1 	.word	0x08008cc1
 800837c:	08008cfc 	.word	0x08008cfc
 8008380:	08008cce 	.word	0x08008cce

08008384 <_calloc_r>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	0c0b      	lsrs	r3, r1, #16
 8008388:	0c15      	lsrs	r5, r2, #16
 800838a:	2b00      	cmp	r3, #0
 800838c:	d11e      	bne.n	80083cc <_calloc_r+0x48>
 800838e:	2d00      	cmp	r5, #0
 8008390:	d10c      	bne.n	80083ac <_calloc_r+0x28>
 8008392:	b289      	uxth	r1, r1
 8008394:	b294      	uxth	r4, r2
 8008396:	434c      	muls	r4, r1
 8008398:	0021      	movs	r1, r4
 800839a:	f7ff f96b 	bl	8007674 <_malloc_r>
 800839e:	1e05      	subs	r5, r0, #0
 80083a0:	d01b      	beq.n	80083da <_calloc_r+0x56>
 80083a2:	0022      	movs	r2, r4
 80083a4:	2100      	movs	r1, #0
 80083a6:	f7fe f9e7 	bl	8006778 <memset>
 80083aa:	e016      	b.n	80083da <_calloc_r+0x56>
 80083ac:	1c2b      	adds	r3, r5, #0
 80083ae:	1c0c      	adds	r4, r1, #0
 80083b0:	b289      	uxth	r1, r1
 80083b2:	b292      	uxth	r2, r2
 80083b4:	434a      	muls	r2, r1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	b2a1      	uxth	r1, r4
 80083ba:	4359      	muls	r1, r3
 80083bc:	0c14      	lsrs	r4, r2, #16
 80083be:	190c      	adds	r4, r1, r4
 80083c0:	0c23      	lsrs	r3, r4, #16
 80083c2:	d107      	bne.n	80083d4 <_calloc_r+0x50>
 80083c4:	0424      	lsls	r4, r4, #16
 80083c6:	b292      	uxth	r2, r2
 80083c8:	4314      	orrs	r4, r2
 80083ca:	e7e5      	b.n	8008398 <_calloc_r+0x14>
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	d101      	bne.n	80083d4 <_calloc_r+0x50>
 80083d0:	1c14      	adds	r4, r2, #0
 80083d2:	e7ed      	b.n	80083b0 <_calloc_r+0x2c>
 80083d4:	230c      	movs	r3, #12
 80083d6:	2500      	movs	r5, #0
 80083d8:	6003      	str	r3, [r0, #0]
 80083da:	0028      	movs	r0, r5
 80083dc:	bd70      	pop	{r4, r5, r6, pc}

080083de <__ascii_mbtowc>:
 80083de:	b082      	sub	sp, #8
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d100      	bne.n	80083e6 <__ascii_mbtowc+0x8>
 80083e4:	a901      	add	r1, sp, #4
 80083e6:	1e10      	subs	r0, r2, #0
 80083e8:	d006      	beq.n	80083f8 <__ascii_mbtowc+0x1a>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d006      	beq.n	80083fc <__ascii_mbtowc+0x1e>
 80083ee:	7813      	ldrb	r3, [r2, #0]
 80083f0:	600b      	str	r3, [r1, #0]
 80083f2:	7810      	ldrb	r0, [r2, #0]
 80083f4:	1e43      	subs	r3, r0, #1
 80083f6:	4198      	sbcs	r0, r3
 80083f8:	b002      	add	sp, #8
 80083fa:	4770      	bx	lr
 80083fc:	2002      	movs	r0, #2
 80083fe:	4240      	negs	r0, r0
 8008400:	e7fa      	b.n	80083f8 <__ascii_mbtowc+0x1a>

08008402 <_realloc_r>:
 8008402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008404:	0006      	movs	r6, r0
 8008406:	000c      	movs	r4, r1
 8008408:	0015      	movs	r5, r2
 800840a:	2900      	cmp	r1, #0
 800840c:	d105      	bne.n	800841a <_realloc_r+0x18>
 800840e:	0011      	movs	r1, r2
 8008410:	f7ff f930 	bl	8007674 <_malloc_r>
 8008414:	0004      	movs	r4, r0
 8008416:	0020      	movs	r0, r4
 8008418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800841a:	2a00      	cmp	r2, #0
 800841c:	d103      	bne.n	8008426 <_realloc_r+0x24>
 800841e:	f7ff f8b3 	bl	8007588 <_free_r>
 8008422:	002c      	movs	r4, r5
 8008424:	e7f7      	b.n	8008416 <_realloc_r+0x14>
 8008426:	f000 f840 	bl	80084aa <_malloc_usable_size_r>
 800842a:	0007      	movs	r7, r0
 800842c:	4285      	cmp	r5, r0
 800842e:	d802      	bhi.n	8008436 <_realloc_r+0x34>
 8008430:	0843      	lsrs	r3, r0, #1
 8008432:	42ab      	cmp	r3, r5
 8008434:	d3ef      	bcc.n	8008416 <_realloc_r+0x14>
 8008436:	0029      	movs	r1, r5
 8008438:	0030      	movs	r0, r6
 800843a:	f7ff f91b 	bl	8007674 <_malloc_r>
 800843e:	9001      	str	r0, [sp, #4]
 8008440:	2800      	cmp	r0, #0
 8008442:	d101      	bne.n	8008448 <_realloc_r+0x46>
 8008444:	9c01      	ldr	r4, [sp, #4]
 8008446:	e7e6      	b.n	8008416 <_realloc_r+0x14>
 8008448:	002a      	movs	r2, r5
 800844a:	42bd      	cmp	r5, r7
 800844c:	d900      	bls.n	8008450 <_realloc_r+0x4e>
 800844e:	003a      	movs	r2, r7
 8008450:	0021      	movs	r1, r4
 8008452:	9801      	ldr	r0, [sp, #4]
 8008454:	f7ff ff6e 	bl	8008334 <memcpy>
 8008458:	0021      	movs	r1, r4
 800845a:	0030      	movs	r0, r6
 800845c:	f7ff f894 	bl	8007588 <_free_r>
 8008460:	e7f0      	b.n	8008444 <_realloc_r+0x42>

08008462 <__ascii_wctomb>:
 8008462:	0003      	movs	r3, r0
 8008464:	1e08      	subs	r0, r1, #0
 8008466:	d005      	beq.n	8008474 <__ascii_wctomb+0x12>
 8008468:	2aff      	cmp	r2, #255	@ 0xff
 800846a:	d904      	bls.n	8008476 <__ascii_wctomb+0x14>
 800846c:	228a      	movs	r2, #138	@ 0x8a
 800846e:	2001      	movs	r0, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	4240      	negs	r0, r0
 8008474:	4770      	bx	lr
 8008476:	2001      	movs	r0, #1
 8008478:	700a      	strb	r2, [r1, #0]
 800847a:	e7fb      	b.n	8008474 <__ascii_wctomb+0x12>

0800847c <fiprintf>:
 800847c:	b40e      	push	{r1, r2, r3}
 800847e:	b517      	push	{r0, r1, r2, r4, lr}
 8008480:	4c05      	ldr	r4, [pc, #20]	@ (8008498 <fiprintf+0x1c>)
 8008482:	ab05      	add	r3, sp, #20
 8008484:	cb04      	ldmia	r3!, {r2}
 8008486:	0001      	movs	r1, r0
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	f000 f83c 	bl	8008508 <_vfiprintf_r>
 8008490:	bc1e      	pop	{r1, r2, r3, r4}
 8008492:	bc08      	pop	{r3}
 8008494:	b003      	add	sp, #12
 8008496:	4718      	bx	r3
 8008498:	20000018 	.word	0x20000018

0800849c <abort>:
 800849c:	2006      	movs	r0, #6
 800849e:	b510      	push	{r4, lr}
 80084a0:	f000 fa18 	bl	80088d4 <raise>
 80084a4:	2001      	movs	r0, #1
 80084a6:	f7fa fe13 	bl	80030d0 <_exit>

080084aa <_malloc_usable_size_r>:
 80084aa:	1f0b      	subs	r3, r1, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	1f18      	subs	r0, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da01      	bge.n	80084b8 <_malloc_usable_size_r+0xe>
 80084b4:	580b      	ldr	r3, [r1, r0]
 80084b6:	18c0      	adds	r0, r0, r3
 80084b8:	4770      	bx	lr

080084ba <__sfputc_r>:
 80084ba:	6893      	ldr	r3, [r2, #8]
 80084bc:	b510      	push	{r4, lr}
 80084be:	3b01      	subs	r3, #1
 80084c0:	6093      	str	r3, [r2, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da04      	bge.n	80084d0 <__sfputc_r+0x16>
 80084c6:	6994      	ldr	r4, [r2, #24]
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	db07      	blt.n	80084dc <__sfputc_r+0x22>
 80084cc:	290a      	cmp	r1, #10
 80084ce:	d005      	beq.n	80084dc <__sfputc_r+0x22>
 80084d0:	6813      	ldr	r3, [r2, #0]
 80084d2:	1c58      	adds	r0, r3, #1
 80084d4:	6010      	str	r0, [r2, #0]
 80084d6:	7019      	strb	r1, [r3, #0]
 80084d8:	0008      	movs	r0, r1
 80084da:	bd10      	pop	{r4, pc}
 80084dc:	f000 f930 	bl	8008740 <__swbuf_r>
 80084e0:	0001      	movs	r1, r0
 80084e2:	e7f9      	b.n	80084d8 <__sfputc_r+0x1e>

080084e4 <__sfputs_r>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	0006      	movs	r6, r0
 80084e8:	000f      	movs	r7, r1
 80084ea:	0014      	movs	r4, r2
 80084ec:	18d5      	adds	r5, r2, r3
 80084ee:	42ac      	cmp	r4, r5
 80084f0:	d101      	bne.n	80084f6 <__sfputs_r+0x12>
 80084f2:	2000      	movs	r0, #0
 80084f4:	e007      	b.n	8008506 <__sfputs_r+0x22>
 80084f6:	7821      	ldrb	r1, [r4, #0]
 80084f8:	003a      	movs	r2, r7
 80084fa:	0030      	movs	r0, r6
 80084fc:	f7ff ffdd 	bl	80084ba <__sfputc_r>
 8008500:	3401      	adds	r4, #1
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d1f3      	bne.n	80084ee <__sfputs_r+0xa>
 8008506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008508 <_vfiprintf_r>:
 8008508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850a:	b0a1      	sub	sp, #132	@ 0x84
 800850c:	000f      	movs	r7, r1
 800850e:	0015      	movs	r5, r2
 8008510:	001e      	movs	r6, r3
 8008512:	9003      	str	r0, [sp, #12]
 8008514:	2800      	cmp	r0, #0
 8008516:	d004      	beq.n	8008522 <_vfiprintf_r+0x1a>
 8008518:	6a03      	ldr	r3, [r0, #32]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <_vfiprintf_r+0x1a>
 800851e:	f7fe f875 	bl	800660c <__sinit>
 8008522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008524:	07db      	lsls	r3, r3, #31
 8008526:	d405      	bmi.n	8008534 <_vfiprintf_r+0x2c>
 8008528:	89bb      	ldrh	r3, [r7, #12]
 800852a:	059b      	lsls	r3, r3, #22
 800852c:	d402      	bmi.n	8008534 <_vfiprintf_r+0x2c>
 800852e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008530:	f7fe f9a7 	bl	8006882 <__retarget_lock_acquire_recursive>
 8008534:	89bb      	ldrh	r3, [r7, #12]
 8008536:	071b      	lsls	r3, r3, #28
 8008538:	d502      	bpl.n	8008540 <_vfiprintf_r+0x38>
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d113      	bne.n	8008568 <_vfiprintf_r+0x60>
 8008540:	0039      	movs	r1, r7
 8008542:	9803      	ldr	r0, [sp, #12]
 8008544:	f000 f93e 	bl	80087c4 <__swsetup_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	d00d      	beq.n	8008568 <_vfiprintf_r+0x60>
 800854c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854e:	07db      	lsls	r3, r3, #31
 8008550:	d503      	bpl.n	800855a <_vfiprintf_r+0x52>
 8008552:	2001      	movs	r0, #1
 8008554:	4240      	negs	r0, r0
 8008556:	b021      	add	sp, #132	@ 0x84
 8008558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855a:	89bb      	ldrh	r3, [r7, #12]
 800855c:	059b      	lsls	r3, r3, #22
 800855e:	d4f8      	bmi.n	8008552 <_vfiprintf_r+0x4a>
 8008560:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008562:	f7fe f98f 	bl	8006884 <__retarget_lock_release_recursive>
 8008566:	e7f4      	b.n	8008552 <_vfiprintf_r+0x4a>
 8008568:	2300      	movs	r3, #0
 800856a:	ac08      	add	r4, sp, #32
 800856c:	6163      	str	r3, [r4, #20]
 800856e:	3320      	adds	r3, #32
 8008570:	7663      	strb	r3, [r4, #25]
 8008572:	3310      	adds	r3, #16
 8008574:	76a3      	strb	r3, [r4, #26]
 8008576:	9607      	str	r6, [sp, #28]
 8008578:	002e      	movs	r6, r5
 800857a:	7833      	ldrb	r3, [r6, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <_vfiprintf_r+0x7c>
 8008580:	2b25      	cmp	r3, #37	@ 0x25
 8008582:	d148      	bne.n	8008616 <_vfiprintf_r+0x10e>
 8008584:	1b73      	subs	r3, r6, r5
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	42ae      	cmp	r6, r5
 800858a:	d00b      	beq.n	80085a4 <_vfiprintf_r+0x9c>
 800858c:	002a      	movs	r2, r5
 800858e:	0039      	movs	r1, r7
 8008590:	9803      	ldr	r0, [sp, #12]
 8008592:	f7ff ffa7 	bl	80084e4 <__sfputs_r>
 8008596:	3001      	adds	r0, #1
 8008598:	d100      	bne.n	800859c <_vfiprintf_r+0x94>
 800859a:	e0ae      	b.n	80086fa <_vfiprintf_r+0x1f2>
 800859c:	6963      	ldr	r3, [r4, #20]
 800859e:	9a05      	ldr	r2, [sp, #20]
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	6163      	str	r3, [r4, #20]
 80085a4:	7833      	ldrb	r3, [r6, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d100      	bne.n	80085ac <_vfiprintf_r+0xa4>
 80085aa:	e0a6      	b.n	80086fa <_vfiprintf_r+0x1f2>
 80085ac:	2201      	movs	r2, #1
 80085ae:	2300      	movs	r3, #0
 80085b0:	4252      	negs	r2, r2
 80085b2:	6062      	str	r2, [r4, #4]
 80085b4:	a904      	add	r1, sp, #16
 80085b6:	3254      	adds	r2, #84	@ 0x54
 80085b8:	1852      	adds	r2, r2, r1
 80085ba:	1c75      	adds	r5, r6, #1
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	60e3      	str	r3, [r4, #12]
 80085c0:	60a3      	str	r3, [r4, #8]
 80085c2:	7013      	strb	r3, [r2, #0]
 80085c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80085c6:	4b59      	ldr	r3, [pc, #356]	@ (800872c <_vfiprintf_r+0x224>)
 80085c8:	2205      	movs	r2, #5
 80085ca:	0018      	movs	r0, r3
 80085cc:	7829      	ldrb	r1, [r5, #0]
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	f7fe f959 	bl	8006886 <memchr>
 80085d4:	1c6e      	adds	r6, r5, #1
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d11f      	bne.n	800861a <_vfiprintf_r+0x112>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	06d3      	lsls	r3, r2, #27
 80085de:	d504      	bpl.n	80085ea <_vfiprintf_r+0xe2>
 80085e0:	2353      	movs	r3, #83	@ 0x53
 80085e2:	a904      	add	r1, sp, #16
 80085e4:	185b      	adds	r3, r3, r1
 80085e6:	2120      	movs	r1, #32
 80085e8:	7019      	strb	r1, [r3, #0]
 80085ea:	0713      	lsls	r3, r2, #28
 80085ec:	d504      	bpl.n	80085f8 <_vfiprintf_r+0xf0>
 80085ee:	2353      	movs	r3, #83	@ 0x53
 80085f0:	a904      	add	r1, sp, #16
 80085f2:	185b      	adds	r3, r3, r1
 80085f4:	212b      	movs	r1, #43	@ 0x2b
 80085f6:	7019      	strb	r1, [r3, #0]
 80085f8:	782b      	ldrb	r3, [r5, #0]
 80085fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fc:	d016      	beq.n	800862c <_vfiprintf_r+0x124>
 80085fe:	002e      	movs	r6, r5
 8008600:	2100      	movs	r1, #0
 8008602:	200a      	movs	r0, #10
 8008604:	68e3      	ldr	r3, [r4, #12]
 8008606:	7832      	ldrb	r2, [r6, #0]
 8008608:	1c75      	adds	r5, r6, #1
 800860a:	3a30      	subs	r2, #48	@ 0x30
 800860c:	2a09      	cmp	r2, #9
 800860e:	d950      	bls.n	80086b2 <_vfiprintf_r+0x1aa>
 8008610:	2900      	cmp	r1, #0
 8008612:	d111      	bne.n	8008638 <_vfiprintf_r+0x130>
 8008614:	e017      	b.n	8008646 <_vfiprintf_r+0x13e>
 8008616:	3601      	adds	r6, #1
 8008618:	e7af      	b.n	800857a <_vfiprintf_r+0x72>
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	6822      	ldr	r2, [r4, #0]
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	2301      	movs	r3, #1
 8008622:	4083      	lsls	r3, r0
 8008624:	4313      	orrs	r3, r2
 8008626:	0035      	movs	r5, r6
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	e7cc      	b.n	80085c6 <_vfiprintf_r+0xbe>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	1d19      	adds	r1, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	9107      	str	r1, [sp, #28]
 8008634:	2b00      	cmp	r3, #0
 8008636:	db01      	blt.n	800863c <_vfiprintf_r+0x134>
 8008638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800863a:	e004      	b.n	8008646 <_vfiprintf_r+0x13e>
 800863c:	425b      	negs	r3, r3
 800863e:	60e3      	str	r3, [r4, #12]
 8008640:	2302      	movs	r3, #2
 8008642:	4313      	orrs	r3, r2
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	7833      	ldrb	r3, [r6, #0]
 8008648:	2b2e      	cmp	r3, #46	@ 0x2e
 800864a:	d10c      	bne.n	8008666 <_vfiprintf_r+0x15e>
 800864c:	7873      	ldrb	r3, [r6, #1]
 800864e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008650:	d134      	bne.n	80086bc <_vfiprintf_r+0x1b4>
 8008652:	9b07      	ldr	r3, [sp, #28]
 8008654:	3602      	adds	r6, #2
 8008656:	1d1a      	adds	r2, r3, #4
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	9207      	str	r2, [sp, #28]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da01      	bge.n	8008664 <_vfiprintf_r+0x15c>
 8008660:	2301      	movs	r3, #1
 8008662:	425b      	negs	r3, r3
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	4d32      	ldr	r5, [pc, #200]	@ (8008730 <_vfiprintf_r+0x228>)
 8008668:	2203      	movs	r2, #3
 800866a:	0028      	movs	r0, r5
 800866c:	7831      	ldrb	r1, [r6, #0]
 800866e:	f7fe f90a 	bl	8006886 <memchr>
 8008672:	2800      	cmp	r0, #0
 8008674:	d006      	beq.n	8008684 <_vfiprintf_r+0x17c>
 8008676:	2340      	movs	r3, #64	@ 0x40
 8008678:	1b40      	subs	r0, r0, r5
 800867a:	4083      	lsls	r3, r0
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	3601      	adds	r6, #1
 8008680:	4313      	orrs	r3, r2
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	7831      	ldrb	r1, [r6, #0]
 8008686:	2206      	movs	r2, #6
 8008688:	482a      	ldr	r0, [pc, #168]	@ (8008734 <_vfiprintf_r+0x22c>)
 800868a:	1c75      	adds	r5, r6, #1
 800868c:	7621      	strb	r1, [r4, #24]
 800868e:	f7fe f8fa 	bl	8006886 <memchr>
 8008692:	2800      	cmp	r0, #0
 8008694:	d040      	beq.n	8008718 <_vfiprintf_r+0x210>
 8008696:	4b28      	ldr	r3, [pc, #160]	@ (8008738 <_vfiprintf_r+0x230>)
 8008698:	2b00      	cmp	r3, #0
 800869a:	d122      	bne.n	80086e2 <_vfiprintf_r+0x1da>
 800869c:	2207      	movs	r2, #7
 800869e:	9b07      	ldr	r3, [sp, #28]
 80086a0:	3307      	adds	r3, #7
 80086a2:	4393      	bics	r3, r2
 80086a4:	3308      	adds	r3, #8
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	6963      	ldr	r3, [r4, #20]
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	6163      	str	r3, [r4, #20]
 80086b0:	e762      	b.n	8008578 <_vfiprintf_r+0x70>
 80086b2:	4343      	muls	r3, r0
 80086b4:	002e      	movs	r6, r5
 80086b6:	2101      	movs	r1, #1
 80086b8:	189b      	adds	r3, r3, r2
 80086ba:	e7a4      	b.n	8008606 <_vfiprintf_r+0xfe>
 80086bc:	2300      	movs	r3, #0
 80086be:	200a      	movs	r0, #10
 80086c0:	0019      	movs	r1, r3
 80086c2:	3601      	adds	r6, #1
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	7832      	ldrb	r2, [r6, #0]
 80086c8:	1c75      	adds	r5, r6, #1
 80086ca:	3a30      	subs	r2, #48	@ 0x30
 80086cc:	2a09      	cmp	r2, #9
 80086ce:	d903      	bls.n	80086d8 <_vfiprintf_r+0x1d0>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0c8      	beq.n	8008666 <_vfiprintf_r+0x15e>
 80086d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80086d6:	e7c6      	b.n	8008666 <_vfiprintf_r+0x15e>
 80086d8:	4341      	muls	r1, r0
 80086da:	002e      	movs	r6, r5
 80086dc:	2301      	movs	r3, #1
 80086de:	1889      	adds	r1, r1, r2
 80086e0:	e7f1      	b.n	80086c6 <_vfiprintf_r+0x1be>
 80086e2:	aa07      	add	r2, sp, #28
 80086e4:	9200      	str	r2, [sp, #0]
 80086e6:	0021      	movs	r1, r4
 80086e8:	003a      	movs	r2, r7
 80086ea:	4b14      	ldr	r3, [pc, #80]	@ (800873c <_vfiprintf_r+0x234>)
 80086ec:	9803      	ldr	r0, [sp, #12]
 80086ee:	f7fd fb43 	bl	8005d78 <_printf_float>
 80086f2:	9004      	str	r0, [sp, #16]
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	3301      	adds	r3, #1
 80086f8:	d1d6      	bne.n	80086a8 <_vfiprintf_r+0x1a0>
 80086fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086fc:	07db      	lsls	r3, r3, #31
 80086fe:	d405      	bmi.n	800870c <_vfiprintf_r+0x204>
 8008700:	89bb      	ldrh	r3, [r7, #12]
 8008702:	059b      	lsls	r3, r3, #22
 8008704:	d402      	bmi.n	800870c <_vfiprintf_r+0x204>
 8008706:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008708:	f7fe f8bc 	bl	8006884 <__retarget_lock_release_recursive>
 800870c:	89bb      	ldrh	r3, [r7, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	d500      	bpl.n	8008714 <_vfiprintf_r+0x20c>
 8008712:	e71e      	b.n	8008552 <_vfiprintf_r+0x4a>
 8008714:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008716:	e71e      	b.n	8008556 <_vfiprintf_r+0x4e>
 8008718:	aa07      	add	r2, sp, #28
 800871a:	9200      	str	r2, [sp, #0]
 800871c:	0021      	movs	r1, r4
 800871e:	003a      	movs	r2, r7
 8008720:	4b06      	ldr	r3, [pc, #24]	@ (800873c <_vfiprintf_r+0x234>)
 8008722:	9803      	ldr	r0, [sp, #12]
 8008724:	f7fd fdd6 	bl	80062d4 <_printf_i>
 8008728:	e7e3      	b.n	80086f2 <_vfiprintf_r+0x1ea>
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	08008ca6 	.word	0x08008ca6
 8008730:	08008cac 	.word	0x08008cac
 8008734:	08008cb0 	.word	0x08008cb0
 8008738:	08005d79 	.word	0x08005d79
 800873c:	080084e5 	.word	0x080084e5

08008740 <__swbuf_r>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	0006      	movs	r6, r0
 8008744:	000d      	movs	r5, r1
 8008746:	0014      	movs	r4, r2
 8008748:	2800      	cmp	r0, #0
 800874a:	d004      	beq.n	8008756 <__swbuf_r+0x16>
 800874c:	6a03      	ldr	r3, [r0, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <__swbuf_r+0x16>
 8008752:	f7fd ff5b 	bl	800660c <__sinit>
 8008756:	69a3      	ldr	r3, [r4, #24]
 8008758:	60a3      	str	r3, [r4, #8]
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	071b      	lsls	r3, r3, #28
 800875e:	d502      	bpl.n	8008766 <__swbuf_r+0x26>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <__swbuf_r+0x3a>
 8008766:	0021      	movs	r1, r4
 8008768:	0030      	movs	r0, r6
 800876a:	f000 f82b 	bl	80087c4 <__swsetup_r>
 800876e:	2800      	cmp	r0, #0
 8008770:	d003      	beq.n	800877a <__swbuf_r+0x3a>
 8008772:	2501      	movs	r5, #1
 8008774:	426d      	negs	r5, r5
 8008776:	0028      	movs	r0, r5
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	b2ef      	uxtb	r7, r5
 8008780:	1ac0      	subs	r0, r0, r3
 8008782:	6963      	ldr	r3, [r4, #20]
 8008784:	b2ed      	uxtb	r5, r5
 8008786:	4283      	cmp	r3, r0
 8008788:	dc05      	bgt.n	8008796 <__swbuf_r+0x56>
 800878a:	0021      	movs	r1, r4
 800878c:	0030      	movs	r0, r6
 800878e:	f7ff fd81 	bl	8008294 <_fflush_r>
 8008792:	2800      	cmp	r0, #0
 8008794:	d1ed      	bne.n	8008772 <__swbuf_r+0x32>
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	3001      	adds	r0, #1
 800879a:	3b01      	subs	r3, #1
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	701f      	strb	r7, [r3, #0]
 80087a6:	6963      	ldr	r3, [r4, #20]
 80087a8:	4283      	cmp	r3, r0
 80087aa:	d004      	beq.n	80087b6 <__swbuf_r+0x76>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	07db      	lsls	r3, r3, #31
 80087b0:	d5e1      	bpl.n	8008776 <__swbuf_r+0x36>
 80087b2:	2d0a      	cmp	r5, #10
 80087b4:	d1df      	bne.n	8008776 <__swbuf_r+0x36>
 80087b6:	0021      	movs	r1, r4
 80087b8:	0030      	movs	r0, r6
 80087ba:	f7ff fd6b 	bl	8008294 <_fflush_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0d9      	beq.n	8008776 <__swbuf_r+0x36>
 80087c2:	e7d6      	b.n	8008772 <__swbuf_r+0x32>

080087c4 <__swsetup_r>:
 80087c4:	4b2d      	ldr	r3, [pc, #180]	@ (800887c <__swsetup_r+0xb8>)
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	0005      	movs	r5, r0
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	000c      	movs	r4, r1
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d004      	beq.n	80087dc <__swsetup_r+0x18>
 80087d2:	6a03      	ldr	r3, [r0, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <__swsetup_r+0x18>
 80087d8:	f7fd ff18 	bl	800660c <__sinit>
 80087dc:	220c      	movs	r2, #12
 80087de:	5ea3      	ldrsh	r3, [r4, r2]
 80087e0:	071a      	lsls	r2, r3, #28
 80087e2:	d423      	bmi.n	800882c <__swsetup_r+0x68>
 80087e4:	06da      	lsls	r2, r3, #27
 80087e6:	d407      	bmi.n	80087f8 <__swsetup_r+0x34>
 80087e8:	2209      	movs	r2, #9
 80087ea:	602a      	str	r2, [r5, #0]
 80087ec:	2240      	movs	r2, #64	@ 0x40
 80087ee:	2001      	movs	r0, #1
 80087f0:	4313      	orrs	r3, r2
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	4240      	negs	r0, r0
 80087f6:	e03a      	b.n	800886e <__swsetup_r+0xaa>
 80087f8:	075b      	lsls	r3, r3, #29
 80087fa:	d513      	bpl.n	8008824 <__swsetup_r+0x60>
 80087fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087fe:	2900      	cmp	r1, #0
 8008800:	d008      	beq.n	8008814 <__swsetup_r+0x50>
 8008802:	0023      	movs	r3, r4
 8008804:	3344      	adds	r3, #68	@ 0x44
 8008806:	4299      	cmp	r1, r3
 8008808:	d002      	beq.n	8008810 <__swsetup_r+0x4c>
 800880a:	0028      	movs	r0, r5
 800880c:	f7fe febc 	bl	8007588 <_free_r>
 8008810:	2300      	movs	r3, #0
 8008812:	6363      	str	r3, [r4, #52]	@ 0x34
 8008814:	2224      	movs	r2, #36	@ 0x24
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	4393      	bics	r3, r2
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	2300      	movs	r3, #0
 800881e:	6063      	str	r3, [r4, #4]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	2308      	movs	r3, #8
 8008826:	89a2      	ldrh	r2, [r4, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <__swsetup_r+0x86>
 8008832:	21a0      	movs	r1, #160	@ 0xa0
 8008834:	2280      	movs	r2, #128	@ 0x80
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	0089      	lsls	r1, r1, #2
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	400b      	ands	r3, r1
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <__swsetup_r+0x86>
 8008842:	0021      	movs	r1, r4
 8008844:	0028      	movs	r0, r5
 8008846:	f000 f88f 	bl	8008968 <__smakebuf_r>
 800884a:	220c      	movs	r2, #12
 800884c:	5ea3      	ldrsh	r3, [r4, r2]
 800884e:	2101      	movs	r1, #1
 8008850:	001a      	movs	r2, r3
 8008852:	400a      	ands	r2, r1
 8008854:	420b      	tst	r3, r1
 8008856:	d00b      	beq.n	8008870 <__swsetup_r+0xac>
 8008858:	2200      	movs	r2, #0
 800885a:	60a2      	str	r2, [r4, #8]
 800885c:	6962      	ldr	r2, [r4, #20]
 800885e:	4252      	negs	r2, r2
 8008860:	61a2      	str	r2, [r4, #24]
 8008862:	2000      	movs	r0, #0
 8008864:	6922      	ldr	r2, [r4, #16]
 8008866:	4282      	cmp	r2, r0
 8008868:	d101      	bne.n	800886e <__swsetup_r+0xaa>
 800886a:	061a      	lsls	r2, r3, #24
 800886c:	d4be      	bmi.n	80087ec <__swsetup_r+0x28>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	0799      	lsls	r1, r3, #30
 8008872:	d400      	bmi.n	8008876 <__swsetup_r+0xb2>
 8008874:	6962      	ldr	r2, [r4, #20]
 8008876:	60a2      	str	r2, [r4, #8]
 8008878:	e7f3      	b.n	8008862 <__swsetup_r+0x9e>
 800887a:	46c0      	nop			@ (mov r8, r8)
 800887c:	20000018 	.word	0x20000018

08008880 <_raise_r>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	0004      	movs	r4, r0
 8008884:	000d      	movs	r5, r1
 8008886:	291f      	cmp	r1, #31
 8008888:	d904      	bls.n	8008894 <_raise_r+0x14>
 800888a:	2316      	movs	r3, #22
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	2001      	movs	r0, #1
 8008890:	4240      	negs	r0, r0
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <_raise_r+0x24>
 800889a:	008a      	lsls	r2, r1, #2
 800889c:	189b      	adds	r3, r3, r2
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	d108      	bne.n	80088b6 <_raise_r+0x36>
 80088a4:	0020      	movs	r0, r4
 80088a6:	f000 f831 	bl	800890c <_getpid_r>
 80088aa:	002a      	movs	r2, r5
 80088ac:	0001      	movs	r1, r0
 80088ae:	0020      	movs	r0, r4
 80088b0:	f000 f81a 	bl	80088e8 <_kill_r>
 80088b4:	e7ed      	b.n	8008892 <_raise_r+0x12>
 80088b6:	2a01      	cmp	r2, #1
 80088b8:	d009      	beq.n	80088ce <_raise_r+0x4e>
 80088ba:	1c51      	adds	r1, r2, #1
 80088bc:	d103      	bne.n	80088c6 <_raise_r+0x46>
 80088be:	2316      	movs	r3, #22
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	2001      	movs	r0, #1
 80088c4:	e7e5      	b.n	8008892 <_raise_r+0x12>
 80088c6:	2100      	movs	r1, #0
 80088c8:	0028      	movs	r0, r5
 80088ca:	6019      	str	r1, [r3, #0]
 80088cc:	4790      	blx	r2
 80088ce:	2000      	movs	r0, #0
 80088d0:	e7df      	b.n	8008892 <_raise_r+0x12>
	...

080088d4 <raise>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4b03      	ldr	r3, [pc, #12]	@ (80088e4 <raise+0x10>)
 80088d8:	0001      	movs	r1, r0
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	f7ff ffd0 	bl	8008880 <_raise_r>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	20000018 	.word	0x20000018

080088e8 <_kill_r>:
 80088e8:	2300      	movs	r3, #0
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	4d06      	ldr	r5, [pc, #24]	@ (8008908 <_kill_r+0x20>)
 80088ee:	0004      	movs	r4, r0
 80088f0:	0008      	movs	r0, r1
 80088f2:	0011      	movs	r1, r2
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	f7fa fbdb 	bl	80030b0 <_kill>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d103      	bne.n	8008906 <_kill_r+0x1e>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d000      	beq.n	8008906 <_kill_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	2000045c 	.word	0x2000045c

0800890c <_getpid_r>:
 800890c:	b510      	push	{r4, lr}
 800890e:	f7fa fbc9 	bl	80030a4 <_getpid>
 8008912:	bd10      	pop	{r4, pc}

08008914 <__swhatbuf_r>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	000e      	movs	r6, r1
 8008918:	001d      	movs	r5, r3
 800891a:	230e      	movs	r3, #14
 800891c:	5ec9      	ldrsh	r1, [r1, r3]
 800891e:	0014      	movs	r4, r2
 8008920:	b096      	sub	sp, #88	@ 0x58
 8008922:	2900      	cmp	r1, #0
 8008924:	da0c      	bge.n	8008940 <__swhatbuf_r+0x2c>
 8008926:	89b2      	ldrh	r2, [r6, #12]
 8008928:	2380      	movs	r3, #128	@ 0x80
 800892a:	0011      	movs	r1, r2
 800892c:	4019      	ands	r1, r3
 800892e:	421a      	tst	r2, r3
 8008930:	d114      	bne.n	800895c <__swhatbuf_r+0x48>
 8008932:	2380      	movs	r3, #128	@ 0x80
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	2000      	movs	r0, #0
 8008938:	6029      	str	r1, [r5, #0]
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	b016      	add	sp, #88	@ 0x58
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	466a      	mov	r2, sp
 8008942:	f000 f853 	bl	80089ec <_fstat_r>
 8008946:	2800      	cmp	r0, #0
 8008948:	dbed      	blt.n	8008926 <__swhatbuf_r+0x12>
 800894a:	23f0      	movs	r3, #240	@ 0xf0
 800894c:	9901      	ldr	r1, [sp, #4]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	4019      	ands	r1, r3
 8008952:	4b04      	ldr	r3, [pc, #16]	@ (8008964 <__swhatbuf_r+0x50>)
 8008954:	18c9      	adds	r1, r1, r3
 8008956:	424b      	negs	r3, r1
 8008958:	4159      	adcs	r1, r3
 800895a:	e7ea      	b.n	8008932 <__swhatbuf_r+0x1e>
 800895c:	2100      	movs	r1, #0
 800895e:	2340      	movs	r3, #64	@ 0x40
 8008960:	e7e9      	b.n	8008936 <__swhatbuf_r+0x22>
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	ffffe000 	.word	0xffffe000

08008968 <__smakebuf_r>:
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	2602      	movs	r6, #2
 800896c:	898b      	ldrh	r3, [r1, #12]
 800896e:	0005      	movs	r5, r0
 8008970:	000c      	movs	r4, r1
 8008972:	b085      	sub	sp, #20
 8008974:	4233      	tst	r3, r6
 8008976:	d007      	beq.n	8008988 <__smakebuf_r+0x20>
 8008978:	0023      	movs	r3, r4
 800897a:	3347      	adds	r3, #71	@ 0x47
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	2301      	movs	r3, #1
 8008982:	6163      	str	r3, [r4, #20]
 8008984:	b005      	add	sp, #20
 8008986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008988:	ab03      	add	r3, sp, #12
 800898a:	aa02      	add	r2, sp, #8
 800898c:	f7ff ffc2 	bl	8008914 <__swhatbuf_r>
 8008990:	9f02      	ldr	r7, [sp, #8]
 8008992:	9001      	str	r0, [sp, #4]
 8008994:	0039      	movs	r1, r7
 8008996:	0028      	movs	r0, r5
 8008998:	f7fe fe6c 	bl	8007674 <_malloc_r>
 800899c:	2800      	cmp	r0, #0
 800899e:	d108      	bne.n	80089b2 <__smakebuf_r+0x4a>
 80089a0:	220c      	movs	r2, #12
 80089a2:	5ea3      	ldrsh	r3, [r4, r2]
 80089a4:	059a      	lsls	r2, r3, #22
 80089a6:	d4ed      	bmi.n	8008984 <__smakebuf_r+0x1c>
 80089a8:	2203      	movs	r2, #3
 80089aa:	4393      	bics	r3, r2
 80089ac:	431e      	orrs	r6, r3
 80089ae:	81a6      	strh	r6, [r4, #12]
 80089b0:	e7e2      	b.n	8008978 <__smakebuf_r+0x10>
 80089b2:	2380      	movs	r3, #128	@ 0x80
 80089b4:	89a2      	ldrh	r2, [r4, #12]
 80089b6:	6020      	str	r0, [r4, #0]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	6120      	str	r0, [r4, #16]
 80089c0:	6167      	str	r7, [r4, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00c      	beq.n	80089e0 <__smakebuf_r+0x78>
 80089c6:	0028      	movs	r0, r5
 80089c8:	230e      	movs	r3, #14
 80089ca:	5ee1      	ldrsh	r1, [r4, r3]
 80089cc:	f000 f820 	bl	8008a10 <_isatty_r>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d005      	beq.n	80089e0 <__smakebuf_r+0x78>
 80089d4:	2303      	movs	r3, #3
 80089d6:	89a2      	ldrh	r2, [r4, #12]
 80089d8:	439a      	bics	r2, r3
 80089da:	3b02      	subs	r3, #2
 80089dc:	4313      	orrs	r3, r2
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	e7cc      	b.n	8008984 <__smakebuf_r+0x1c>
	...

080089ec <_fstat_r>:
 80089ec:	2300      	movs	r3, #0
 80089ee:	b570      	push	{r4, r5, r6, lr}
 80089f0:	4d06      	ldr	r5, [pc, #24]	@ (8008a0c <_fstat_r+0x20>)
 80089f2:	0004      	movs	r4, r0
 80089f4:	0008      	movs	r0, r1
 80089f6:	0011      	movs	r1, r2
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	f7fa fbb9 	bl	8003170 <_fstat>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d103      	bne.n	8008a0a <_fstat_r+0x1e>
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d000      	beq.n	8008a0a <_fstat_r+0x1e>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	2000045c 	.word	0x2000045c

08008a10 <_isatty_r>:
 8008a10:	2300      	movs	r3, #0
 8008a12:	b570      	push	{r4, r5, r6, lr}
 8008a14:	4d06      	ldr	r5, [pc, #24]	@ (8008a30 <_isatty_r+0x20>)
 8008a16:	0004      	movs	r4, r0
 8008a18:	0008      	movs	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7fa fbb6 	bl	800318c <_isatty>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d103      	bne.n	8008a2c <_isatty_r+0x1c>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d000      	beq.n	8008a2c <_isatty_r+0x1c>
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	bd70      	pop	{r4, r5, r6, pc}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	2000045c 	.word	0x2000045c

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
