
STM32L010RBT6_MP2760.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004adc  08004adc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00005adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00005ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ae4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004b40  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004b40  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6da  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bea  00000000  00000000  0001175e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00013348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b5  00000000  00000000  00013d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112d4  00000000  00000000  000144dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2c7  00000000  00000000  000257b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000670de  00000000  00000000  00032a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  00099b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009c344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049d4 	.word	0x080049d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080049d4 	.word	0x080049d4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MP2760_ReadRegister>:
{
    HAL_I2C_Mem_Write(&hi2c1, MP2760_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
}

uint8_t MP2760_ReadRegister(uint8_t reg)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af04      	add	r7, sp, #16
 8000476:	0002      	movs	r2, r0
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 800047c:	210f      	movs	r1, #15
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MP2760_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b29a      	uxth	r2, r3
 800048a:	4809      	ldr	r0, [pc, #36]	@ (80004b0 <MP2760_ReadRegister+0x40>)
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9302      	str	r3, [sp, #8]
 8000492:	2301      	movs	r3, #1
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	000c      	movs	r4, r1
 8000498:	187b      	adds	r3, r7, r1
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	21d2      	movs	r1, #210	@ 0xd2
 80004a0:	f000 ff00 	bl	80012a4 <HAL_I2C_Mem_Read>
    return value;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	781b      	ldrb	r3, [r3, #0]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b005      	add	sp, #20
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	20000078 	.word	0x20000078

080004b4 <MP2760_Live_Status>:
void MP2760_Live_Status(void)
{
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	b0a5      	sub	sp, #148	@ 0x94
 80004b8:	af02      	add	r7, sp, #8
    char msg[128];
    uint8_t charger_status = MP2760_ReadRegister(0x0B);
 80004ba:	2587      	movs	r5, #135	@ 0x87
 80004bc:	197c      	adds	r4, r7, r5
 80004be:	200b      	movs	r0, #11
 80004c0:	f7ff ffd6 	bl	8000470 <MP2760_ReadRegister>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
    uint8_t fault_status = MP2760_ReadRegister(0x0C);
 80004c8:	2686      	movs	r6, #134	@ 0x86
 80004ca:	19bc      	adds	r4, r7, r6
 80004cc:	200c      	movs	r0, #12
 80004ce:	f7ff ffcf 	bl	8000470 <MP2760_ReadRegister>
 80004d2:	0003      	movs	r3, r0
 80004d4:	7023      	strb	r3, [r4, #0]
    uint8_t input_status = MP2760_ReadRegister(0x0A);
 80004d6:	2385      	movs	r3, #133	@ 0x85
 80004d8:	18fc      	adds	r4, r7, r3
 80004da:	200a      	movs	r0, #10
 80004dc:	f7ff ffc8 	bl	8000470 <MP2760_ReadRegister>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]

    snprintf(msg, sizeof(msg), "\rCHG:0x%02X FLT:0x%02X INP:0x%02X", charger_status, fault_status, input_status);
 80004e4:	197b      	adds	r3, r7, r5
 80004e6:	781c      	ldrb	r4, [r3, #0]
 80004e8:	19bb      	adds	r3, r7, r6
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2285      	movs	r2, #133	@ 0x85
 80004ee:	18ba      	adds	r2, r7, r2
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	490c      	ldr	r1, [pc, #48]	@ (8000524 <MP2760_Live_Status+0x70>)
 80004f4:	1d38      	adds	r0, r7, #4
 80004f6:	9201      	str	r2, [sp, #4]
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	0023      	movs	r3, r4
 80004fc:	000a      	movs	r2, r1
 80004fe:	2180      	movs	r1, #128	@ 0x80
 8000500:	f003 fdb8 	bl	8004074 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff fdfe 	bl	8000108 <strlen>
 800050c:	0003      	movs	r3, r0
 800050e:	b29a      	uxth	r2, r3
 8000510:	2301      	movs	r3, #1
 8000512:	425b      	negs	r3, r3
 8000514:	1d39      	adds	r1, r7, #4
 8000516:	4804      	ldr	r0, [pc, #16]	@ (8000528 <MP2760_Live_Status+0x74>)
 8000518:	f003 f892 	bl	8003640 <HAL_UART_Transmit>
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b023      	add	sp, #140	@ 0x8c
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	080049ec 	.word	0x080049ec
 8000528:	200000cc 	.word	0x200000cc

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b08b      	sub	sp, #44	@ 0x2c
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 faa7 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f829 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f905 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 800053e:	f000 f893 	bl	8000668 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f8d1 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char hello[] = "Starting MP2760 Live Monitor...\r\n";
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <main+0x58>)
 800054a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800054c:	c313      	stmia	r3!, {r0, r1, r4}
 800054e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000550:	c313      	stmia	r3!, {r0, r1, r4}
 8000552:	ca03      	ldmia	r2!, {r0, r1}
 8000554:	c303      	stmia	r3!, {r0, r1}
 8000556:	8812      	ldrh	r2, [r2, #0]
 8000558:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), HAL_MAX_DELAY);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff fdd3 	bl	8000108 <strlen>
 8000562:	0003      	movs	r3, r0
 8000564:	b29a      	uxth	r2, r3
 8000566:	2301      	movs	r3, #1
 8000568:	425b      	negs	r3, r3
 800056a:	1d39      	adds	r1, r7, #4
 800056c:	4806      	ldr	r0, [pc, #24]	@ (8000588 <main+0x5c>)
 800056e:	f003 f867 	bl	8003640 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MP2760_Live_Status();
 8000572:	f7ff ff9f 	bl	80004b4 <MP2760_Live_Status>
	      HAL_Delay(1000); // Print every 1 second
 8000576:	23fa      	movs	r3, #250	@ 0xfa
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 faf2 	bl	8000b64 <HAL_Delay>
	  MP2760_Live_Status();
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7f6      	b.n	8000572 <main+0x46>
 8000584:	08004a10 	.word	0x08004a10
 8000588:	200000cc 	.word	0x200000cc

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b099      	sub	sp, #100	@ 0x64
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	242c      	movs	r4, #44	@ 0x2c
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2334      	movs	r3, #52	@ 0x34
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 fd9f 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	2318      	movs	r3, #24
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f003 fd97 	bl	80040e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2318      	movs	r3, #24
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f003 fd90 	bl	80040e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <SystemClock_Config+0xd8>)
 80005c6:	401a      	ands	r2, r3
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xd4>)
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	0109      	lsls	r1, r1, #4
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2210      	movs	r2, #16
 80005d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2201      	movs	r2, #1
 80005de:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	22a0      	movs	r2, #160	@ 0xa0
 80005ea:	0212      	lsls	r2, r2, #8
 80005ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 f922 	bl	8002840 <HAL_RCC_OscConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000600:	f000 f8d8 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	2118      	movs	r1, #24
 8000606:	187b      	adds	r3, r7, r1
 8000608:	220f      	movs	r2, #15
 800060a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2100      	movs	r1, #0
 8000628:	0018      	movs	r0, r3
 800062a:	f002 fc85 	bl	8002f38 <HAL_RCC_ClockConfig>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000632:	f000 f8bf 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000636:	003b      	movs	r3, r7
 8000638:	220a      	movs	r2, #10
 800063a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	003b      	movs	r3, r7
 800064a:	0018      	movs	r0, r3
 800064c:	f002 fe78 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000654:	f000 f8ae 	bl	80007b4 <Error_Handler>
  }
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b019      	add	sp, #100	@ 0x64
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	40007000 	.word	0x40007000
 8000664:	ffffe7ff 	.word	0xffffe7ff

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_I2C1_Init+0x78>)
 800066e:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <MX_I2C1_Init+0x7c>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x78>)
 8000674:	22c1      	movs	r2, #193	@ 0xc1
 8000676:	00d2      	lsls	r2, r2, #3
 8000678:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_I2C1_Init+0x78>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_I2C1_Init+0x78>)
 8000682:	2201      	movs	r2, #1
 8000684:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_I2C1_Init+0x78>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_I2C1_Init+0x78>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_I2C1_Init+0x78>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_I2C1_Init+0x78>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_I2C1_Init+0x78>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_I2C1_Init+0x78>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fd56 	bl	8001158 <HAL_I2C_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f880 	bl	80007b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <MX_I2C1_Init+0x78>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 f829 	bl	8002710 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006c2:	f000 f877 	bl	80007b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_I2C1_Init+0x78>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f002 f86c 	bl	80027a8 <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 f86e 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	20000078 	.word	0x20000078
 80006e4:	40005400 	.word	0x40005400

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	@ (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	22e1      	movs	r2, #225	@ 0xe1
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	0018      	movs	r0, r3
 800072e:	f002 ff33 	bl	8003598 <HAL_UART_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f83d 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000cc 	.word	0x200000cc
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fcc2 	bl	80040e0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_GPIO_Init+0x68>)
 800075e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_GPIO_Init+0x68>)
 8000762:	2101      	movs	r1, #1
 8000764:	430a      	orrs	r2, r1
 8000766:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_GPIO_Init+0x68>)
 800076a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076c:	2201      	movs	r2, #1
 800076e:	4013      	ands	r3, r2
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	22c0      	movs	r2, #192	@ 0xc0
 8000778:	0152      	lsls	r2, r2, #5
 800077a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2284      	movs	r2, #132	@ 0x84
 8000780:	0392      	lsls	r2, r2, #14
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	23a0      	movs	r3, #160	@ 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fb3c 	bl	8000e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2007      	movs	r0, #7
 800079e:	f000 fab1 	bl	8000d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 fac3 	bl	8000d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b006      	add	sp, #24
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_MspInit+0x24>)
 80007c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x24>)
 80007ca:	2101      	movs	r1, #1
 80007cc:	430a      	orrs	r2, r1
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <HAL_MspInit+0x24>)
 80007d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <HAL_MspInit+0x24>)
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	0549      	lsls	r1, r1, #21
 80007da:	430a      	orrs	r2, r1
 80007dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	240c      	movs	r4, #12
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fc70 	bl	80040e0 <memset>
  if(hi2c->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <HAL_I2C_MspInit+0x90>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d132      	bne.n	8000870 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <HAL_I2C_MspInit+0x94>)
 800080c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <HAL_I2C_MspInit+0x94>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <HAL_I2C_MspInit+0x94>)
 8000818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	22c0      	movs	r2, #192	@ 0xc0
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2212      	movs	r2, #18
 8000830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2206      	movs	r2, #6
 8000842:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	187a      	adds	r2, r7, r1
 8000846:	23a0      	movs	r3, #160	@ 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fadf 	bl	8000e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_I2C_MspInit+0x94>)
 8000854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_I2C_MspInit+0x94>)
 8000858:	2180      	movs	r1, #128	@ 0x80
 800085a:	0389      	lsls	r1, r1, #14
 800085c:	430a      	orrs	r2, r1
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2017      	movs	r0, #23
 8000866:	f000 fa4d 	bl	8000d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800086a:	2017      	movs	r0, #23
 800086c:	f000 fa5f 	bl	8000d2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b009      	add	sp, #36	@ 0x24
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	40005400 	.word	0x40005400
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b089      	sub	sp, #36	@ 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	240c      	movs	r4, #12
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	2314      	movs	r3, #20
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f003 fc24 	bl	80040e0 <memset>
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <HAL_UART_MspInit+0x80>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d129      	bne.n	80008f6 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <HAL_UART_MspInit+0x84>)
 80008a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <HAL_UART_MspInit+0x84>)
 80008a8:	2180      	movs	r1, #128	@ 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_UART_MspInit+0x84>)
 80008b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_UART_MspInit+0x84>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <HAL_UART_MspInit+0x84>)
 80008be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c0:	2201      	movs	r2, #1
 80008c2:	4013      	ands	r3, r2
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	220c      	movs	r2, #12
 80008ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2202      	movs	r2, #2
 80008d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2203      	movs	r2, #3
 80008e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2204      	movs	r2, #4
 80008e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	187a      	adds	r2, r7, r1
 80008ea:	23a0      	movs	r3, #160	@ 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fa8d 	bl	8000e10 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b009      	add	sp, #36	@ 0x24
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	40004400 	.word	0x40004400
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	e7fd      	b.n	800090c <NMI_Handler+0x4>

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	e7fd      	b.n	8000914 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f8fc 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fbe2 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000948:	2380      	movs	r3, #128	@ 0x80
 800094a:	015b      	lsls	r3, r3, #5
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fbdd 	bl	800110c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <I2C1_IRQHandler+0x2c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	23e0      	movs	r3, #224	@ 0xe0
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	4013      	ands	r3, r2
 8000968:	d004      	beq.n	8000974 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <I2C1_IRQHandler+0x2c>)
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fde7 	bl	8001540 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000972:	e003      	b.n	800097c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <I2C1_IRQHandler+0x2c>)
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fdc8 	bl	800150c <HAL_I2C_EV_IRQHandler>
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	20000078 	.word	0x20000078

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f003 fb9a 	bl	80040f0 <__errno>
 80009bc:	0003      	movs	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	425b      	negs	r3, r3
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	18d2      	adds	r2, r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <_sbrk+0x64>)
 80009d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b006      	add	sp, #24
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20005000 	.word	0x20005000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000154 	.word	0x20000154
 80009f0:	200002a8 	.word	0x200002a8

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a00:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f7ff fff6 	bl	80009f4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a08:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <LoopForever+0xa>)
    CMP R1, R2
 8000a10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a12:	d105      	bne.n	8000a20 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a14:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a16:	4912      	ldr	r1, [pc, #72]	@ (8000a60 <LoopForever+0x12>)
    STR R1, [R0]
 8000a18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a1c:	4912      	ldr	r1, [pc, #72]	@ (8000a68 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a1e:	6001      	str	r1, [r0, #0]

08000a20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a22:	4913      	ldr	r1, [pc, #76]	@ (8000a70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a24:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <LoopForever+0x26>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a10      	ldr	r2, [pc, #64]	@ (8000a78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a38:	4c10      	ldr	r4, [pc, #64]	@ (8000a7c <LoopForever+0x2e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fb59 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fd6f 	bl	800052c <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
   ldr   r0, =_estack
 8000a50:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a5c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a74:	08004ae4 	.word	0x08004ae4
  ldr r2, =_sbss
 8000a78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a7c:	200002a4 	.word	0x200002a4

08000a80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_IRQHandler>
	...

08000a84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Init+0x3c>)
 8000a96:	2140      	movs	r1, #64	@ 0x40
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f811 	bl	8000ac4 <HAL_InitTick>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fe87 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_InitTick+0x5c>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_InitTick+0x60>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	23fa      	movs	r3, #250	@ 0xfa
 8000ad8:	0098      	lsls	r0, r3, #2
 8000ada:	f7ff fb27 	bl	800012c <__udivsi3>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f7ff fb22 	bl	800012c <__udivsi3>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f92f 	bl	8000d4e <HAL_SYSTICK_Config>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e00f      	b.n	8000b18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d80b      	bhi.n	8000b16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f8fc 	bl	8000d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_InitTick+0x64>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	001a      	movs	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000158 	.word	0x20000158

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	20000158 	.word	0x20000158

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	001a      	movs	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	0002      	movs	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bbe:	d809      	bhi.n	8000bd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	231f      	movs	r3, #31
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_EnableIRQ+0x30>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
  }
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	@ 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	@ 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	@ 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	@ (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	@ 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	@ 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	@ 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d301      	bcc.n	8000cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <SysTick_Config+0x44>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff7c 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x44>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	0002      	movs	r2, r0
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff33 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ffaf 	bl	8000cbc <SysTick_Config>
 8000d5e:	0003      	movs	r3, r0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	210f      	movs	r1, #15
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2225      	movs	r2, #37	@ 0x25
 8000d7c:	5c9b      	ldrb	r3, [r3, r2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d006      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2204      	movs	r2, #4
 8000d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e02a      	b.n	8000de8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	221c      	movs	r2, #28
 8000db8:	401a      	ands	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2225      	movs	r2, #37	@ 0x25
 8000dca:	2101      	movs	r1, #1
 8000dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2224      	movs	r2, #36	@ 0x24
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	0010      	movs	r0, r2
 8000de6:	4798      	blx	r3
    }
  }
  return status;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2225      	movs	r2, #37	@ 0x25
 8000e02:	5c9b      	ldrb	r3, [r3, r2]
 8000e04:	b2db      	uxtb	r3, r3
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e26:	e155      	b.n	80010d4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x30>
 8000e3e:	e146      	b.n	80010ce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2207      	movs	r2, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	400b      	ands	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x17c>
 8000f8a:	e0a0      	b.n	80010ce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b57      	ldr	r3, [pc, #348]	@ (80010ec <HAL_GPIO_Init+0x2dc>)
 8000f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f90:	4b56      	ldr	r3, [pc, #344]	@ (80010ec <HAL_GPIO_Init+0x2dc>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f98:	4a55      	ldr	r2, [pc, #340]	@ (80010f0 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	589b      	ldr	r3, [r3, r2]
 8000fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	23a0      	movs	r3, #160	@ 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x1f6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80010f4 <HAL_GPIO_Init+0x2e4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x1f2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_GPIO_Init+0x2e8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1ee>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a48      	ldr	r2, [pc, #288]	@ (80010fc <HAL_GPIO_Init+0x2ec>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1ea>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a47      	ldr	r2, [pc, #284]	@ (8001100 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1e6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a46      	ldr	r2, [pc, #280]	@ (8001104 <HAL_GPIO_Init+0x2f4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1e2>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x1f8>
 8001006:	2300      	movs	r3, #0
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	2103      	movs	r1, #3
 800100c:	400a      	ands	r2, r1
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	@ (80010f0 <HAL_GPIO_Init+0x2e0>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	035b      	lsls	r3, r3, #13
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	039b      	lsls	r3, r3, #14
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800107a:	4b23      	ldr	r3, [pc, #140]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43da      	mvns	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	4013      	ands	r3, r2
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	40da      	lsrs	r2, r3
 80010dc:	1e13      	subs	r3, r2, #0
 80010de:	d000      	beq.n	80010e2 <HAL_GPIO_Init+0x2d2>
 80010e0:	e6a2      	b.n	8000e28 <HAL_GPIO_Init+0x18>
  }
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b006      	add	sp, #24
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	50000400 	.word	0x50000400
 80010f8:	50000800 	.word	0x50000800
 80010fc:	50000c00 	.word	0x50000c00
 8001100:	50001000 	.word	0x50001000
 8001104:	50001c00 	.word	0x50001c00
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	1dba      	adds	r2, r7, #6
 800111e:	8812      	ldrh	r2, [r2, #0]
 8001120:	4013      	ands	r3, r2
 8001122:	d008      	beq.n	8001136 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001126:	1dba      	adds	r2, r7, #6
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800112c:	1dbb      	adds	r3, r7, #6
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	0018      	movs	r0, r3
 8001132:	f000 f807 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	0002      	movs	r2, r0
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e08f      	b.n	800128a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2241      	movs	r2, #65	@ 0x41
 800116e:	5c9b      	ldrb	r3, [r3, r2]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2240      	movs	r2, #64	@ 0x40
 800117a:	2100      	movs	r1, #0
 800117c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fb31 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2241      	movs	r2, #65	@ 0x41
 800118a:	2124      	movs	r1, #36	@ 0x24
 800118c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	438a      	bics	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	493b      	ldr	r1, [pc, #236]	@ (8001294 <HAL_I2C_Init+0x13c>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4938      	ldr	r1, [pc, #224]	@ (8001298 <HAL_I2C_Init+0x140>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	0209      	lsls	r1, r1, #8
 80011d0:	430a      	orrs	r2, r1
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e007      	b.n	80011e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2184      	movs	r1, #132	@ 0x84
 80011e0:	0209      	lsls	r1, r1, #8
 80011e2:	430a      	orrs	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d109      	bne.n	8001202 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	0109      	lsls	r1, r1, #4
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	e007      	b.n	8001212 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4923      	ldr	r1, [pc, #140]	@ (800129c <HAL_I2C_Init+0x144>)
 800120e:	400a      	ands	r2, r1
 8001210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4920      	ldr	r1, [pc, #128]	@ (80012a0 <HAL_I2C_Init+0x148>)
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	491a      	ldr	r1, [pc, #104]	@ (8001298 <HAL_I2C_Init+0x140>)
 800122e:	400a      	ands	r2, r1
 8001230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	431a      	orrs	r2, r3
 800123c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69d9      	ldr	r1, [r3, #28]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2241      	movs	r2, #65	@ 0x41
 8001276:	2120      	movs	r1, #32
 8001278:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2242      	movs	r2, #66	@ 0x42
 8001284:	2100      	movs	r1, #0
 8001286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	f0ffffff 	.word	0xf0ffffff
 8001298:	ffff7fff 	.word	0xffff7fff
 800129c:	fffff7ff 	.word	0xfffff7ff
 80012a0:	02008000 	.word	0x02008000

080012a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	000c      	movs	r4, r1
 80012ae:	0010      	movs	r0, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	230a      	movs	r3, #10
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	1c22      	adds	r2, r4, #0
 80012b8:	801a      	strh	r2, [r3, #0]
 80012ba:	2308      	movs	r3, #8
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	1c02      	adds	r2, r0, #0
 80012c0:	801a      	strh	r2, [r3, #0]
 80012c2:	1dbb      	adds	r3, r7, #6
 80012c4:	1c0a      	adds	r2, r1, #0
 80012c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2241      	movs	r2, #65	@ 0x41
 80012cc:	5c9b      	ldrb	r3, [r3, r2]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d000      	beq.n	80012d6 <HAL_I2C_Mem_Read+0x32>
 80012d4:	e110      	b.n	80014f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80012d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <HAL_I2C_Mem_Read+0x42>
 80012dc:	232c      	movs	r3, #44	@ 0x2c
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e103      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2240      	movs	r2, #64	@ 0x40
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_I2C_Mem_Read+0x5c>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0fc      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2240      	movs	r2, #64	@ 0x40
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001308:	f7ff fc22 	bl	8000b50 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	0219      	lsls	r1, r3, #8
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2319      	movs	r3, #25
 800131c:	2201      	movs	r2, #1
 800131e:	f000 ff7f 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e7      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2241      	movs	r2, #65	@ 0x41
 800132e:	2122      	movs	r1, #34	@ 0x22
 8001330:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2242      	movs	r2, #66	@ 0x42
 8001336:	2140      	movs	r1, #64	@ 0x40
 8001338:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	222c      	movs	r2, #44	@ 0x2c
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	8812      	ldrh	r2, [r2, #0]
 800134e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001356:	1dbb      	adds	r3, r7, #6
 8001358:	881c      	ldrh	r4, [r3, #0]
 800135a:	2308      	movs	r3, #8
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	881a      	ldrh	r2, [r3, #0]
 8001360:	230a      	movs	r3, #10
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	8819      	ldrh	r1, [r3, #0]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	0023      	movs	r3, r4
 8001372:	f000 fa93 	bl	800189c <I2C_RequestMemoryRead>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d005      	beq.n	8001386 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0b9      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138a:	b29b      	uxth	r3, r3
 800138c:	2bff      	cmp	r3, #255	@ 0xff
 800138e:	d911      	bls.n	80013b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139a:	b2da      	uxtb	r2, r3
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	045c      	lsls	r4, r3, #17
 80013a0:	230a      	movs	r3, #10
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	8819      	ldrh	r1, [r3, #0]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	4b56      	ldr	r3, [pc, #344]	@ (8001504 <HAL_I2C_Mem_Read+0x260>)
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	0023      	movs	r3, r4
 80013ae:	f001 f911 	bl	80025d4 <I2C_TransferConfig>
 80013b2:	e012      	b.n	80013da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	049c      	lsls	r4, r3, #18
 80013c8:	230a      	movs	r3, #10
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	8819      	ldrh	r1, [r3, #0]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001504 <HAL_I2C_Mem_Read+0x260>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	0023      	movs	r3, r4
 80013d6:	f001 f8fd 	bl	80025d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	0013      	movs	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	2104      	movs	r1, #4
 80013e8:	f000 ff1a 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e082      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03a      	beq.n	80014a6 <HAL_I2C_Mem_Read+0x202>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d136      	bne.n	80014a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	0013      	movs	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	f000 feeb 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d001      	beq.n	8001452 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e053      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	2bff      	cmp	r3, #255	@ 0xff
 800145a:	d911      	bls.n	8001480 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001466:	b2da      	uxtb	r2, r3
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	045c      	lsls	r4, r3, #17
 800146c:	230a      	movs	r3, #10
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	8819      	ldrh	r1, [r3, #0]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	0023      	movs	r3, r4
 800147a:	f001 f8ab 	bl	80025d4 <I2C_TransferConfig>
 800147e:	e012      	b.n	80014a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148e:	b2da      	uxtb	r2, r3
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	049c      	lsls	r4, r3, #18
 8001494:	230a      	movs	r3, #10
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	8819      	ldrh	r1, [r3, #0]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	0023      	movs	r3, r4
 80014a2:	f001 f897 	bl	80025d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d194      	bne.n	80013da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 ff50 	bl	800235c <I2C_WaitOnSTOPFlagUntilTimeout>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e01a      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2220      	movs	r2, #32
 80014ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	490c      	ldr	r1, [pc, #48]	@ (8001508 <HAL_I2C_Mem_Read+0x264>)
 80014d8:	400a      	ands	r2, r1
 80014da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2241      	movs	r2, #65	@ 0x41
 80014e0:	2120      	movs	r1, #32
 80014e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2242      	movs	r2, #66	@ 0x42
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2240      	movs	r2, #64	@ 0x40
 80014f0:	2100      	movs	r1, #0
 80014f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e000      	b.n	80014fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80014f8:	2302      	movs	r3, #2
  }
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b007      	add	sp, #28
 8001500:	bd90      	pop	{r4, r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	80002400 	.word	0x80002400
 8001508:	fe00e800 	.word	0xfe00e800

0800150c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
  }
}
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	001a      	movs	r2, r3
 800155e:	2301      	movs	r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d010      	beq.n	8001586 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	09db      	lsrs	r3, r3, #7
 8001568:	001a      	movs	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800156e:	d00a      	beq.n	8001586 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	2201      	movs	r2, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	0052      	lsls	r2, r2, #1
 8001584:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	0a9b      	lsrs	r3, r3, #10
 800158a:	001a      	movs	r2, r3
 800158c:	2301      	movs	r3, #1
 800158e:	4013      	ands	r3, r2
 8001590:	d010      	beq.n	80015b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	09db      	lsrs	r3, r3, #7
 8001596:	001a      	movs	r2, r3
 8001598:	2301      	movs	r3, #1
 800159a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800159c:	d00a      	beq.n	80015b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	2208      	movs	r2, #8
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	0a5b      	lsrs	r3, r3, #9
 80015b8:	001a      	movs	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	d010      	beq.n	80015e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	09db      	lsrs	r3, r3, #7
 80015c4:	001a      	movs	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80015ca:	d00a      	beq.n	80015e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	2202      	movs	r2, #2
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	220b      	movs	r2, #11
 80015ec:	4013      	ands	r3, r2
 80015ee:	d005      	beq.n	80015fc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fca6 	bl	8001f48 <I2C_ITError>
  }
}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b006      	add	sp, #24
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	0008      	movs	r0, r1
 800162e:	0011      	movs	r1, r2
 8001630:	1cfb      	adds	r3, r7, #3
 8001632:	1c02      	adds	r2, r0, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	003b      	movs	r3, r7
 8001638:	1c0a      	adds	r2, r1, #0
 800163a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}

08001674 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2240      	movs	r2, #64	@ 0x40
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <I2C_Slave_ISR_IT+0x24>
 8001694:	2302      	movs	r3, #2
 8001696:	e0fb      	b.n	8001890 <I2C_Slave_ISR_IT+0x21c>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	001a      	movs	r2, r3
 80016a6:	2301      	movs	r3, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	d00c      	beq.n	80016c6 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	001a      	movs	r2, r3
 80016b2:	2301      	movs	r3, #1
 80016b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016b6:	d006      	beq.n	80016c6 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 fa58 	bl	8001b74 <I2C_ITSlaveCplt>
 80016c4:	e0df      	b.n	8001886 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	001a      	movs	r2, r3
 80016cc:	2301      	movs	r3, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	d054      	beq.n	800177c <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	001a      	movs	r2, r3
 80016d8:	2301      	movs	r3, #1
 80016da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016dc:	d04e      	beq.n	800177c <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12d      	bne.n	8001744 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2241      	movs	r2, #65	@ 0x41
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b28      	cmp	r3, #40	@ 0x28
 80016f2:	d10b      	bne.n	800170c <I2C_Slave_ISR_IT+0x98>
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	049b      	lsls	r3, r3, #18
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d106      	bne.n	800170c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	0011      	movs	r1, r2
 8001704:	0018      	movs	r0, r3
 8001706:	f000 fbc5 	bl	8001e94 <I2C_ITListenCplt>
 800170a:	e036      	b.n	800177a <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2241      	movs	r2, #65	@ 0x41
 8001710:	5c9b      	ldrb	r3, [r3, r2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b29      	cmp	r3, #41	@ 0x29
 8001716:	d110      	bne.n	800173a <I2C_Slave_ISR_IT+0xc6>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a5f      	ldr	r2, [pc, #380]	@ (8001898 <I2C_Slave_ISR_IT+0x224>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00c      	beq.n	800173a <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 fd37 	bl	800219e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 f9b8 	bl	8001aa8 <I2C_ITSlaveSeqCplt>
 8001738:	e01f      	b.n	800177a <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2210      	movs	r2, #16
 8001740:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001742:	e09d      	b.n	8001880 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2210      	movs	r2, #16
 800174a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	2204      	movs	r2, #4
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <I2C_Slave_ISR_IT+0xf6>
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	045b      	lsls	r3, r3, #17
 8001764:	429a      	cmp	r2, r3
 8001766:	d000      	beq.n	800176a <I2C_Slave_ISR_IT+0xf6>
 8001768:	e08a      	b.n	8001880 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f000 fbe8 	bl	8001f48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001778:	e082      	b.n	8001880 <I2C_Slave_ISR_IT+0x20c>
 800177a:	e081      	b.n	8001880 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	001a      	movs	r2, r3
 8001782:	2301      	movs	r3, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d031      	beq.n	80017ec <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	001a      	movs	r2, r3
 800178e:	2301      	movs	r3, #1
 8001790:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001792:	d02b      	beq.n	80017ec <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d018      	beq.n	80017d0 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d154      	bne.n	8001884 <I2C_Slave_ISR_IT+0x210>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001898 <I2C_Slave_ISR_IT+0x224>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d050      	beq.n	8001884 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 f95f 	bl	8001aa8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80017ea:	e04b      	b.n	8001884 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	001a      	movs	r2, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d00c      	beq.n	8001812 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	001a      	movs	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001802:	d006      	beq.n	8001812 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f8a8 	bl	8001960 <I2C_ITAddrCplt>
 8001810:	e039      	b.n	8001886 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	001a      	movs	r2, r3
 8001818:	2301      	movs	r3, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d033      	beq.n	8001886 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	001a      	movs	r2, r3
 8001824:	2301      	movs	r3, #1
 8001826:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001828:	d02d      	beq.n	8001886 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d018      	beq.n	8001866 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001864:	e00f      	b.n	8001886 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	045b      	lsls	r3, r3, #17
 800186c:	429a      	cmp	r2, r3
 800186e:	d002      	beq.n	8001876 <I2C_Slave_ISR_IT+0x202>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f915 	bl	8001aa8 <I2C_ITSlaveSeqCplt>
 800187e:	e002      	b.n	8001886 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	e000      	b.n	8001886 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8001884:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2240      	movs	r2, #64	@ 0x40
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b006      	add	sp, #24
 8001896:	bd80      	pop	{r7, pc}
 8001898:	ffff0000 	.word	0xffff0000

0800189c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	000c      	movs	r4, r1
 80018a6:	0010      	movs	r0, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	250a      	movs	r5, #10
 80018ac:	197b      	adds	r3, r7, r5
 80018ae:	1c22      	adds	r2, r4, #0
 80018b0:	801a      	strh	r2, [r3, #0]
 80018b2:	2308      	movs	r3, #8
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	1c02      	adds	r2, r0, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	1dbb      	adds	r3, r7, #6
 80018bc:	1c0a      	adds	r2, r1, #0
 80018be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018c0:	1dbb      	adds	r3, r7, #6
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	197b      	adds	r3, r7, r5
 80018c8:	8819      	ldrh	r1, [r3, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <I2C_RequestMemoryRead+0xc0>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	f000 fe7f 	bl	80025d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 fcf7 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e033      	b.n	8001952 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ea:	1dbb      	adds	r3, r7, #6
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018f2:	2308      	movs	r3, #8
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001900:	e019      	b.n	8001936 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001902:	2308      	movs	r3, #8
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001916:	6a39      	ldr	r1, [r7, #32]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fcd8 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e014      	b.n	8001952 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001928:	2308      	movs	r3, #8
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	0013      	movs	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	2140      	movs	r1, #64	@ 0x40
 8001944:	f000 fc6c 	bl	8002220 <I2C_WaitOnFlagUntilTimeout>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b004      	add	sp, #16
 8001958:	bdb0      	pop	{r4, r5, r7, pc}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	80002000 	.word	0x80002000

08001960 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2241      	movs	r2, #65	@ 0x41
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	001a      	movs	r2, r3
 8001974:	2328      	movs	r3, #40	@ 0x28
 8001976:	4013      	ands	r3, r2
 8001978:	2b28      	cmp	r3, #40	@ 0x28
 800197a:	d000      	beq.n	800197e <I2C_ITAddrCplt+0x1e>
 800197c:	e088      	b.n	8001a90 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	b2da      	uxtb	r2, r3
 8001988:	250f      	movs	r5, #15
 800198a:	197b      	adds	r3, r7, r5
 800198c:	2101      	movs	r1, #1
 800198e:	400a      	ands	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	b29a      	uxth	r2, r3
 800199c:	200c      	movs	r0, #12
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	21fe      	movs	r1, #254	@ 0xfe
 80019a2:	400a      	ands	r2, r1
 80019a4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	240a      	movs	r4, #10
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	0592      	lsls	r2, r2, #22
 80019b4:	0d92      	lsrs	r2, r2, #22
 80019b6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2308      	movs	r3, #8
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	21fe      	movs	r1, #254	@ 0xfe
 80019c6:	400a      	ands	r2, r1
 80019c8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d148      	bne.n	8001a64 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80019d2:	0021      	movs	r1, r4
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	09db      	lsrs	r3, r3, #7
 80019da:	b29a      	uxth	r2, r3
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	4053      	eors	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	001a      	movs	r2, r3
 80019e6:	2306      	movs	r3, #6
 80019e8:	4013      	ands	r3, r2
 80019ea:	d120      	bne.n	8001a2e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	187a      	adds	r2, r7, r1
 80019f0:	8812      	ldrh	r2, [r2, #0]
 80019f2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d14c      	bne.n	8001aa0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	197b      	adds	r3, r7, r5
 8001a22:	7819      	ldrb	r1, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fdfc 	bl	8001624 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a2c:	e038      	b.n	8001aa0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001a2e:	240c      	movs	r4, #12
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	2208      	movs	r2, #8
 8001a34:	18ba      	adds	r2, r7, r2
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	021a      	lsls	r2, r3, #8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 fe00 	bl	8002648 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fde1 	bl	8001624 <HAL_I2C_AddrCallback>
}
 8001a62:	e01d      	b.n	8001aa0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	021a      	lsls	r2, r3, #8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 fdeb 	bl	8002648 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2240      	movs	r2, #64	@ 0x40
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	230f      	movs	r3, #15
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	7819      	ldrb	r1, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fdcb 	bl	8001624 <HAL_I2C_AddrCallback>
}
 8001a8e:	e007      	b.n	8001aa0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2208      	movs	r2, #8
 8001a96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2240      	movs	r2, #64	@ 0x40
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	5499      	strb	r1, [r3, r2]
}
 8001aa0:	46c0      	nop			@ (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}

08001aa8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2242      	movs	r2, #66	@ 0x42
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0b9b      	lsrs	r3, r3, #14
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d008      	beq.n	8001ade <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4925      	ldr	r1, [pc, #148]	@ (8001b6c <I2C_ITSlaveSeqCplt+0xc4>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e00d      	b.n	8001afa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	0bdb      	lsrs	r3, r3, #15
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d007      	beq.n	8001afa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	491e      	ldr	r1, [pc, #120]	@ (8001b70 <I2C_ITSlaveSeqCplt+0xc8>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2241      	movs	r2, #65	@ 0x41
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b29      	cmp	r3, #41	@ 0x29
 8001b04:	d114      	bne.n	8001b30 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2241      	movs	r2, #65	@ 0x41
 8001b0a:	2128      	movs	r1, #40	@ 0x28
 8001b0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2221      	movs	r2, #33	@ 0x21
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2101      	movs	r1, #1
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fd95 	bl	8002648 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2240      	movs	r2, #64	@ 0x40
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff fd6b 	bl	8001604 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b2e:	e019      	b.n	8001b64 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2241      	movs	r2, #65	@ 0x41
 8001b34:	5c9b      	ldrb	r3, [r3, r2]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b3a:	d113      	bne.n	8001b64 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2241      	movs	r2, #65	@ 0x41
 8001b40:	2128      	movs	r1, #40	@ 0x28
 8001b42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2222      	movs	r2, #34	@ 0x22
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 fd7a 	bl	8002648 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	@ 0x40
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff fd58 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	ffffbfff 	.word	0xffffbfff
 8001b70:	ffff7fff 	.word	0xffff7fff

08001b74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b90:	200b      	movs	r0, #11
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	2141      	movs	r1, #65	@ 0x41
 8001b98:	5c52      	ldrb	r2, [r2, r1]
 8001b9a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b21      	cmp	r3, #33	@ 0x21
 8001baa:	d003      	beq.n	8001bb4 <I2C_ITSlaveCplt+0x40>
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b29      	cmp	r3, #41	@ 0x29
 8001bb2:	d109      	bne.n	8001bc8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001bb4:	4ab0      	ldr	r2, [pc, #704]	@ (8001e78 <I2C_ITSlaveCplt+0x304>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0011      	movs	r1, r2
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 fd44 	bl	8002648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2221      	movs	r2, #33	@ 0x21
 8001bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc6:	e020      	b.n	8001c0a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bc8:	220b      	movs	r2, #11
 8001bca:	18bb      	adds	r3, r7, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b22      	cmp	r3, #34	@ 0x22
 8001bd0:	d003      	beq.n	8001bda <I2C_ITSlaveCplt+0x66>
 8001bd2:	18bb      	adds	r3, r7, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bd8:	d109      	bne.n	8001bee <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001bda:	4aa8      	ldr	r2, [pc, #672]	@ (8001e7c <I2C_ITSlaveCplt+0x308>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fd31 	bl	8002648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2222      	movs	r2, #34	@ 0x22
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bec:	e00d      	b.n	8001c0a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001bee:	230b      	movs	r3, #11
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b28      	cmp	r3, #40	@ 0x28
 8001bf6:	d108      	bne.n	8001c0a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001bf8:	4aa1      	ldr	r2, [pc, #644]	@ (8001e80 <I2C_ITSlaveCplt+0x30c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 fd22 	bl	8002648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0209      	lsls	r1, r1, #8
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4997      	ldr	r1, [pc, #604]	@ (8001e84 <I2C_ITSlaveCplt+0x310>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fab5 	bl	800219e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	0b9b      	lsrs	r3, r3, #14
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	498f      	ldr	r1, [pc, #572]	@ (8001e88 <I2C_ITSlaveCplt+0x314>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c66:	e018      	b.n	8001c9a <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	0bdb      	lsrs	r3, r3, #15
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d012      	beq.n	8001c9a <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4983      	ldr	r1, [pc, #524]	@ (8001e8c <I2C_ITSlaveCplt+0x318>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d020      	beq.n	8001ce8 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4393      	bics	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	001a      	movs	r2, r3
 8001d04:	2301      	movs	r3, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	d051      	beq.n	8001dae <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	001a      	movs	r2, r3
 8001d10:	2301      	movs	r3, #1
 8001d12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d14:	d04b      	beq.n	8001dae <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12d      	bne.n	8001d7c <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2241      	movs	r2, #65	@ 0x41
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b28      	cmp	r3, #40	@ 0x28
 8001d2a:	d10b      	bne.n	8001d44 <I2C_ITSlaveCplt+0x1d0>
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d106      	bne.n	8001d44 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f8a9 	bl	8001e94 <I2C_ITListenCplt>
 8001d42:	e034      	b.n	8001dae <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b29      	cmp	r3, #41	@ 0x29
 8001d4e:	d110      	bne.n	8001d72 <I2C_ITSlaveCplt+0x1fe>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a4f      	ldr	r2, [pc, #316]	@ (8001e90 <I2C_ITSlaveCplt+0x31c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00c      	beq.n	8001d72 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 fa1b 	bl	800219e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7ff fe9c 	bl	8001aa8 <I2C_ITSlaveSeqCplt>
 8001d70:	e01d      	b.n	8001dae <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2210      	movs	r2, #16
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	e018      	b.n	8001dae <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	2204      	movs	r2, #4
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <I2C_ITSlaveCplt+0x22c>
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	045b      	lsls	r3, r3, #17
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d106      	bne.n	8001dae <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0011      	movs	r1, r2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 f8cd 	bl	8001f48 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2242      	movs	r2, #66	@ 0x42
 8001db2:	2100      	movs	r1, #0
 8001db4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f8bb 	bl	8001f48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2241      	movs	r2, #65	@ 0x41
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b28      	cmp	r3, #40	@ 0x28
 8001ddc:	d147      	bne.n	8001e6e <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0011      	movs	r1, r2
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f855 	bl	8001e94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001dea:	e040      	b.n	8001e6e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <I2C_ITSlaveCplt+0x31c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d016      	beq.n	8001e24 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fe55 	bl	8001aa8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <I2C_ITSlaveCplt+0x31c>)
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2241      	movs	r2, #65	@ 0x41
 8001e08:	2120      	movs	r1, #32
 8001e0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fc11 	bl	8001644 <HAL_I2C_ListenCpltCallback>
}
 8001e22:	e024      	b.n	8001e6e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2241      	movs	r2, #65	@ 0x41
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b22      	cmp	r3, #34	@ 0x22
 8001e2e:	d10f      	bne.n	8001e50 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	@ 0x41
 8001e34:	2120      	movs	r1, #32
 8001e36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2240      	movs	r2, #64	@ 0x40
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fbe3 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e4e:	e00e      	b.n	8001e6e <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2241      	movs	r2, #65	@ 0x41
 8001e54:	2120      	movs	r1, #32
 8001e56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2240      	movs	r2, #64	@ 0x40
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fbcb 	bl	8001604 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b006      	add	sp, #24
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	00008001 	.word	0x00008001
 8001e7c:	00008002 	.word	0x00008002
 8001e80:	00008003 	.word	0x00008003
 8001e84:	fe00e800 	.word	0xfe00e800
 8001e88:	ffffbfff 	.word	0xffffbfff
 8001e8c:	ffff7fff 	.word	0xffff7fff
 8001e90:	ffff0000 	.word	0xffff0000

08001e94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <I2C_ITListenCplt+0xac>)
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2241      	movs	r2, #65	@ 0x41
 8001eae:	2120      	movs	r1, #32
 8001eb0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2242      	movs	r2, #66	@ 0x42
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d022      	beq.n	8001f12 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d012      	beq.n	8001f12 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f12:	4a0c      	ldr	r2, [pc, #48]	@ (8001f44 <I2C_ITListenCplt+0xb0>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fb95 	bl	8002648 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2240      	movs	r2, #64	@ 0x40
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff fb87 	bl	8001644 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	ffff0000 	.word	0xffff0000
 8001f44:	00008003 	.word	0x00008003

08001f48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f52:	200f      	movs	r0, #15
 8001f54:	183b      	adds	r3, r7, r0
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	2141      	movs	r1, #65	@ 0x41
 8001f5a:	5c52      	ldrb	r2, [r2, r1]
 8001f5c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2242      	movs	r2, #66	@ 0x42
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a72      	ldr	r2, [pc, #456]	@ (8002134 <I2C_ITError+0x1ec>)
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b28      	cmp	r3, #40	@ 0x28
 8001f84:	d007      	beq.n	8001f96 <I2C_ITError+0x4e>
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b29      	cmp	r3, #41	@ 0x29
 8001f8c:	d003      	beq.n	8001f96 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f8e:	183b      	adds	r3, r7, r0
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f94:	d10c      	bne.n	8001fb0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2103      	movs	r1, #3
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fb54 	bl	8002648 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2241      	movs	r2, #65	@ 0x41
 8001fa4:	2128      	movs	r1, #40	@ 0x28
 8001fa6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <I2C_ITError+0x1f0>)
 8001fac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fae:	e032      	b.n	8002016 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fb0:	4a62      	ldr	r2, [pc, #392]	@ (800213c <I2C_ITError+0x1f4>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0011      	movs	r1, r2
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 fb46 	bl	8002648 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f8ed 	bl	800219e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2241      	movs	r2, #65	@ 0x41
 8001fc8:	5c9b      	ldrb	r3, [r3, r2]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b60      	cmp	r3, #96	@ 0x60
 8001fce:	d01f      	beq.n	8002010 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2241      	movs	r2, #65	@ 0x41
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d114      	bne.n	8002010 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2210      	movs	r2, #16
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d109      	bne.n	8002008 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002000:	2204      	movs	r2, #4
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2220      	movs	r2, #32
 800200e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	2b00      	cmp	r3, #0
 8002022:	d03b      	beq.n	800209c <I2C_ITError+0x154>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b11      	cmp	r3, #17
 8002028:	d002      	beq.n	8002030 <I2C_ITError+0xe8>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b21      	cmp	r3, #33	@ 0x21
 800202e:	d135      	bne.n	800209c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	401a      	ands	r2, r3
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	01db      	lsls	r3, r3, #7
 8002040:	429a      	cmp	r2, r3
 8002042:	d107      	bne.n	8002054 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	493c      	ldr	r1, [pc, #240]	@ (8002140 <I2C_ITError+0x1f8>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	0018      	movs	r0, r3
 800205a:	f7fe fecc 	bl	8000df6 <HAL_DMA_GetState>
 800205e:	0003      	movs	r3, r0
 8002060:	2b01      	cmp	r3, #1
 8002062:	d016      	beq.n	8002092 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <I2C_ITError+0x1fc>)
 800206a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	0018      	movs	r0, r3
 800207a:	f7fe fe75 	bl	8000d68 <HAL_DMA_Abort_IT>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d051      	beq.n	8002126 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	0018      	movs	r0, r3
 800208e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002090:	e049      	b.n	8002126 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f859 	bl	800214c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800209a:	e044      	b.n	8002126 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03b      	beq.n	800211c <I2C_ITError+0x1d4>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d002      	beq.n	80020b0 <I2C_ITError+0x168>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b22      	cmp	r3, #34	@ 0x22
 80020ae:	d135      	bne.n	800211c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	401a      	ands	r2, r3
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	491e      	ldr	r1, [pc, #120]	@ (8002148 <I2C_ITError+0x200>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe fe8c 	bl	8000df6 <HAL_DMA_GetState>
 80020de:	0003      	movs	r3, r0
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d016      	beq.n	8002112 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	4a16      	ldr	r2, [pc, #88]	@ (8002144 <I2C_ITError+0x1fc>)
 80020ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fe35 	bl	8000d68 <HAL_DMA_Abort_IT>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d013      	beq.n	800212a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	0018      	movs	r0, r3
 800210e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002110:	e00b      	b.n	800212a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f819 	bl	800214c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800211a:	e006      	b.n	800212a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f814 	bl	800214c <I2C_TreatErrorCallback>
  }
}
 8002124:	e002      	b.n	800212c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	e000      	b.n	800212c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800212a:	46c0      	nop			@ (mov r8, r8)
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b004      	add	sp, #16
 8002132:	bd80      	pop	{r7, pc}
 8002134:	ffff0000 	.word	0xffff0000
 8002138:	08001675 	.word	0x08001675
 800213c:	00008003 	.word	0x00008003
 8002140:	ffffbfff 	.word	0xffffbfff
 8002144:	080021e3 	.word	0x080021e3
 8002148:	ffff7fff 	.word	0xffff7fff

0800214c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2241      	movs	r2, #65	@ 0x41
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b60      	cmp	r3, #96	@ 0x60
 800215e:	d10f      	bne.n	8002180 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2241      	movs	r2, #65	@ 0x41
 8002164:	2120      	movs	r1, #32
 8002166:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2240      	movs	r2, #64	@ 0x40
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fa73 	bl	8001664 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800217e:	e00a      	b.n	8002196 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff fa5f 	bl	8001654 <HAL_I2C_ErrorCallback>
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}

0800219e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d103      	bne.n	80021bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d007      	beq.n	80021da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	430a      	orrs	r2, r1
 80021d8:	619a      	str	r2, [r3, #24]
  }
}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	2200      	movs	r2, #0
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	2200      	movs	r2, #0
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ff9a 	bl	800214c <I2C_TreatErrorCallback>
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	e03a      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f8d3 	bl	80023e4 <I2C_IsErrorOccurred>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e040      	b.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	d02d      	beq.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7fe fc80 	bl	8000b50 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <I2C_WaitOnFlagUntilTimeout+0x42>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d122      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	425a      	negs	r2, r3
 8002272:	4153      	adcs	r3, r2
 8002274:	b2db      	uxtb	r3, r3
 8002276:	001a      	movs	r2, r3
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d113      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	2220      	movs	r2, #32
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2241      	movs	r2, #65	@ 0x41
 8002290:	2120      	movs	r1, #32
 8002292:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2242      	movs	r2, #66	@ 0x42
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00f      	b.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	425a      	negs	r2, r3
 80022b8:	4153      	adcs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	001a      	movs	r2, r3
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d0b5      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022dc:	e032      	b.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f87d 	bl	80023e4 <I2C_IsErrorOccurred>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e030      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3301      	adds	r3, #1
 80022f6:	d025      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	f7fe fc2a 	bl	8000b50 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	d302      	bcc.n	800230e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11a      	bne.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d013      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2241      	movs	r2, #65	@ 0x41
 800232c:	2120      	movs	r1, #32
 800232e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2242      	movs	r2, #66	@ 0x42
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d1c5      	bne.n	80022de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}

0800235c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002368:	e02f      	b.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f837 	bl	80023e4 <I2C_IsErrorOccurred>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02d      	b.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7fe fbe7 	bl	8000b50 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d11a      	bne.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d013      	beq.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	2220      	movs	r2, #32
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2241      	movs	r2, #65	@ 0x41
 80023b2:	2120      	movs	r1, #32
 80023b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2242      	movs	r2, #66	@ 0x42
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2220      	movs	r2, #32
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d1c8      	bne.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2327      	movs	r3, #39	@ 0x27
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <I2C_IsErrorOccurred+0x2e>
 8002410:	e079      	b.n	8002506 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241a:	e057      	b.n	80024cc <I2C_IsErrorOccurred+0xe8>
 800241c:	2227      	movs	r2, #39	@ 0x27
 800241e:	18bb      	adds	r3, r7, r2
 8002420:	18ba      	adds	r2, r7, r2
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	d04f      	beq.n	80024cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe fb90 	bl	8000b50 <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_IsErrorOccurred+0x5e>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d144      	bne.n	80024cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	4013      	ands	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002450:	2013      	movs	r0, #19
 8002452:	183b      	adds	r3, r7, r0
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	2142      	movs	r1, #66	@ 0x42
 8002458:	5c52      	ldrb	r2, [r2, r1]
 800245a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	401a      	ands	r2, r3
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	429a      	cmp	r2, r3
 800246e:	d126      	bne.n	80024be <I2C_IsErrorOccurred+0xda>
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	01db      	lsls	r3, r3, #7
 8002476:	429a      	cmp	r2, r3
 8002478:	d021      	beq.n	80024be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b20      	cmp	r3, #32
 8002480:	d01d      	beq.n	80024be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2180      	movs	r1, #128	@ 0x80
 800248e:	01c9      	lsls	r1, r1, #7
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002494:	f7fe fb5c 	bl	8000b50 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249c:	e00f      	b.n	80024be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800249e:	f7fe fb57 	bl	8000b50 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b19      	cmp	r3, #25
 80024aa:	d908      	bls.n	80024be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2220      	movs	r2, #32
 80024b0:	4313      	orrs	r3, r2
 80024b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024b4:	2327      	movs	r3, #39	@ 0x27
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]

              break;
 80024bc:	e006      	b.n	80024cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2220      	movs	r2, #32
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d1e8      	bne.n	800249e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2220      	movs	r2, #32
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d004      	beq.n	80024e4 <I2C_IsErrorOccurred+0x100>
 80024da:	2327      	movs	r3, #39	@ 0x27
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d09b      	beq.n	800241c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024e4:	2327      	movs	r3, #39	@ 0x27
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2204      	movs	r2, #4
 80024fa:	4313      	orrs	r3, r2
 80024fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024fe:	2327      	movs	r3, #39	@ 0x27
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d00c      	beq.n	8002532 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2201      	movs	r2, #1
 800251c:	4313      	orrs	r3, r2
 800251e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2280      	movs	r2, #128	@ 0x80
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252a:	2327      	movs	r3, #39	@ 0x27
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4013      	ands	r3, r2
 800253a:	d00c      	beq.n	8002556 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2208      	movs	r2, #8
 8002540:	4313      	orrs	r3, r2
 8002542:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800254e:	2327      	movs	r3, #39	@ 0x27
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d00c      	beq.n	800257a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2202      	movs	r2, #2
 8002564:	4313      	orrs	r3, r2
 8002566:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002572:	2327      	movs	r3, #39	@ 0x27
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800257a:	2327      	movs	r3, #39	@ 0x27
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01d      	beq.n	80025c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff fe09 	bl	800219e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	490e      	ldr	r1, [pc, #56]	@ (80025d0 <I2C_IsErrorOccurred+0x1ec>)
 8002598:	400a      	ands	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2241      	movs	r2, #65	@ 0x41
 80025ac:	2120      	movs	r1, #32
 80025ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2242      	movs	r2, #66	@ 0x42
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	@ 0x40
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025c0:	2327      	movs	r3, #39	@ 0x27
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b00a      	add	sp, #40	@ 0x28
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	fe00e800 	.word	0xfe00e800

080025d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	0008      	movs	r0, r1
 80025de:	0011      	movs	r1, r2
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	240a      	movs	r4, #10
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	2009      	movs	r0, #9
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	1c0a      	adds	r2, r1, #0
 80025f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	059b      	lsls	r3, r3, #22
 80025f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	0419      	lsls	r1, r3, #16
 8002600:	23ff      	movs	r3, #255	@ 0xff
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002606:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	4313      	orrs	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800261e:	0d51      	lsrs	r1, r2, #21
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	00d2      	lsls	r2, r2, #3
 8002624:	400a      	ands	r2, r1
 8002626:	4907      	ldr	r1, [pc, #28]	@ (8002644 <I2C_TransferConfig+0x70>)
 8002628:	430a      	orrs	r2, r1
 800262a:	43d2      	mvns	r2, r2
 800262c:	401a      	ands	r2, r3
 800262e:	0011      	movs	r1, r2
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b007      	add	sp, #28
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	03ff63ff 	.word	0x03ff63ff

08002648 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	000a      	movs	r2, r1
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800265a:	1cbb      	adds	r3, r7, #2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	d010      	beq.n	8002686 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2242      	movs	r2, #66	@ 0x42
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2241      	movs	r2, #65	@ 0x41
 8002670:	5c9b      	ldrb	r3, [r3, r2]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	001a      	movs	r2, r3
 8002676:	2328      	movs	r3, #40	@ 0x28
 8002678:	4013      	ands	r3, r2
 800267a:	2b28      	cmp	r3, #40	@ 0x28
 800267c:	d003      	beq.n	8002686 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	22b0      	movs	r2, #176	@ 0xb0
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d010      	beq.n	80026b2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2244      	movs	r2, #68	@ 0x44
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2241      	movs	r2, #65	@ 0x41
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	001a      	movs	r2, r3
 80026a2:	2328      	movs	r3, #40	@ 0x28
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b28      	cmp	r3, #40	@ 0x28
 80026a8:	d003      	beq.n	80026b2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	22b0      	movs	r2, #176	@ 0xb0
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026b2:	1cbb      	adds	r3, r7, #2
 80026b4:	2200      	movs	r2, #0
 80026b6:	5e9b      	ldrsh	r3, [r3, r2]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da03      	bge.n	80026c4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	22b8      	movs	r2, #184	@ 0xb8
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80026c4:	1cbb      	adds	r3, r7, #2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d103      	bne.n	80026d4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2290      	movs	r2, #144	@ 0x90
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80026d4:	1cbb      	adds	r3, r7, #2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d103      	bne.n	80026e4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80026e4:	1cbb      	adds	r3, r7, #2
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d103      	bne.n	80026f4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2240      	movs	r2, #64	@ 0x40
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43d9      	mvns	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2241      	movs	r2, #65	@ 0x41
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	d138      	bne.n	8002798 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2240      	movs	r2, #64	@ 0x40
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002730:	2302      	movs	r3, #2
 8002732:	e032      	b.n	800279a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2240      	movs	r2, #64	@ 0x40
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2241      	movs	r2, #65	@ 0x41
 8002740:	2124      	movs	r1, #36	@ 0x24
 8002742:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	438a      	bics	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4911      	ldr	r1, [pc, #68]	@ (80027a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002760:	400a      	ands	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2241      	movs	r2, #65	@ 0x41
 8002788:	2120      	movs	r1, #32
 800278a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b002      	add	sp, #8
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	ffffefff 	.word	0xffffefff

080027a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2241      	movs	r2, #65	@ 0x41
 80027b6:	5c9b      	ldrb	r3, [r3, r2]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d139      	bne.n	8002832 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2240      	movs	r2, #64	@ 0x40
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e033      	b.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	2101      	movs	r1, #1
 80027d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2241      	movs	r2, #65	@ 0x41
 80027d8:	2124      	movs	r1, #36	@ 0x24
 80027da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a11      	ldr	r2, [pc, #68]	@ (800283c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2241      	movs	r2, #65	@ 0x41
 8002822:	2120      	movs	r1, #32
 8002824:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2240      	movs	r2, #64	@ 0x40
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}
 800283c:	fffff0ff 	.word	0xfffff0ff

08002840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f000 fb6c 	bl	8002f2c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002854:	4bc8      	ldr	r3, [pc, #800]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	220c      	movs	r2, #12
 800285a:	4013      	ands	r3, r2
 800285c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285e:	4bc6      	ldr	r3, [pc, #792]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	2380      	movs	r3, #128	@ 0x80
 8002864:	025b      	lsls	r3, r3, #9
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d100      	bne.n	8002876 <HAL_RCC_OscConfig+0x36>
 8002874:	e07d      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d112      	bne.n	80028a8 <HAL_RCC_OscConfig+0x68>
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	429a      	cmp	r2, r3
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4bba      	ldr	r3, [pc, #744]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d100      	bne.n	800289a <HAL_RCC_OscConfig+0x5a>
 8002898:	e06a      	b.n	8002970 <HAL_RCC_OscConfig+0x130>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d166      	bne.n	8002970 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f000 fb42 	bl	8002f2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	025b      	lsls	r3, r3, #9
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x84>
 80028b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4baf      	ldr	r3, [pc, #700]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	0249      	lsls	r1, r1, #9
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e027      	b.n	8002914 <HAL_RCC_OscConfig+0xd4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	23a0      	movs	r3, #160	@ 0xa0
 80028ca:	02db      	lsls	r3, r3, #11
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d10e      	bne.n	80028ee <HAL_RCC_OscConfig+0xae>
 80028d0:	4ba9      	ldr	r3, [pc, #676]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028d6:	2180      	movs	r1, #128	@ 0x80
 80028d8:	02c9      	lsls	r1, r1, #11
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4ba6      	ldr	r3, [pc, #664]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	0249      	lsls	r1, r1, #9
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e012      	b.n	8002914 <HAL_RCC_OscConfig+0xd4>
 80028ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028f4:	49a1      	ldr	r1, [pc, #644]	@ (8002b7c <HAL_RCC_OscConfig+0x33c>)
 80028f6:	400a      	ands	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4b9f      	ldr	r3, [pc, #636]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	025b      	lsls	r3, r3, #9
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4b9b      	ldr	r3, [pc, #620]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 800290e:	499c      	ldr	r1, [pc, #624]	@ (8002b80 <HAL_RCC_OscConfig+0x340>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe f918 	bl	8000b50 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002926:	f7fe f913 	bl	8000b50 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	@ 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e2f9      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002938:	4b8f      	ldr	r3, [pc, #572]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0xe6>
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe f903 	bl	8000b50 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe f8fe 	bl	8000b50 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e2e4      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002962:	4b85      	ldr	r3, [pc, #532]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x110>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x13e>
 800297c:	e099      	b.n	8002ab2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	2220      	movs	r2, #32
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800298c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b79      	ldr	r3, [pc, #484]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002992:	2120      	movs	r1, #32
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	2220      	movs	r2, #32
 800299c:	4393      	bics	r3, r2
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d13e      	bne.n	8002a2a <HAL_RCC_OscConfig+0x1ea>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d13b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80029b2:	4b71      	ldr	r3, [pc, #452]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_RCC_OscConfig+0x186>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e2b2      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_RCC_OscConfig+0x344>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	4b68      	ldr	r3, [pc, #416]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029dc:	4b66      	ldr	r3, [pc, #408]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2209      	movs	r2, #9
 80029e2:	4393      	bics	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	4b64      	ldr	r3, [pc, #400]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 fbeb 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 80029f2:	0001      	movs	r1, r0
 80029f4:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	220f      	movs	r2, #15
 80029fc:	4013      	ands	r3, r2
 80029fe:	4a62      	ldr	r2, [pc, #392]	@ (8002b88 <HAL_RCC_OscConfig+0x348>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	000a      	movs	r2, r1
 8002a04:	40da      	lsrs	r2, r3
 8002a06:	4b61      	ldr	r3, [pc, #388]	@ (8002b8c <HAL_RCC_OscConfig+0x34c>)
 8002a08:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002a0a:	4b61      	ldr	r3, [pc, #388]	@ (8002b90 <HAL_RCC_OscConfig+0x350>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2513      	movs	r5, #19
 8002a10:	197c      	adds	r4, r7, r5
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fe f856 	bl	8000ac4 <HAL_InitTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a1c:	197b      	adds	r3, r7, r5
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d046      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	e280      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d027      	beq.n	8002a80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a30:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2209      	movs	r2, #9
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe f885 	bl	8000b50 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe f880 	bl	8000b50 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e266      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a5e:	4b46      	ldr	r3, [pc, #280]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	d0f1      	beq.n	8002a4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a45      	ldr	r2, [pc, #276]	@ (8002b84 <HAL_RCC_OscConfig+0x344>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	021a      	lsls	r2, r3, #8
 8002a78:	4b3f      	ldr	r3, [pc, #252]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a80:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b3c      	ldr	r3, [pc, #240]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f860 	bl	8000b50 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe f85b 	bl	8000b50 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e241      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa8:	4b33      	ldr	r3, [pc, #204]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2204      	movs	r2, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f1      	bne.n	8002a96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x27e>
 8002abc:	e0a1      	b.n	8002c02 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d140      	bne.n	8002b46 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x29c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e227      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002adc:	4b26      	ldr	r3, [pc, #152]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <HAL_RCC_OscConfig+0x354>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	0a19      	lsrs	r1, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	061a      	lsls	r2, r3, #24
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	0b5b      	lsrs	r3, r3, #13
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	0212      	lsls	r2, r2, #8
 8002b10:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	210f      	movs	r1, #15
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	491a      	ldr	r1, [pc, #104]	@ (8002b88 <HAL_RCC_OscConfig+0x348>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <HAL_RCC_OscConfig+0x34c>)
 8002b24:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_RCC_OscConfig+0x350>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2513      	movs	r5, #19
 8002b2c:	197c      	adds	r4, r7, r5
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd ffc8 	bl	8000ac4 <HAL_InitTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b38:	197b      	adds	r3, r7, r5
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d060      	beq.n	8002c02 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002b40:	197b      	adds	r3, r7, r5
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	e1f2      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d03f      	beq.n	8002bce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_RCC_OscConfig+0x338>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	0049      	lsls	r1, r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fd fff8 	bl	8000b50 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7fd fff3 	bl	8000b50 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d911      	bls.n	8002b98 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1d9      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	fffeffff 	.word	0xfffeffff
 8002b80:	fffbffff 	.word	0xfffbffff
 8002b84:	ffffe0ff 	.word	0xffffe0ff
 8002b88:	08004a34 	.word	0x08004a34
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004
 8002b94:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b98:	4bc9      	ldr	r3, [pc, #804]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d0e0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	4bc6      	ldr	r3, [pc, #792]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4ac6      	ldr	r2, [pc, #792]	@ (8002ec4 <HAL_RCC_OscConfig+0x684>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	4bc3      	ldr	r3, [pc, #780]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb8:	4bc1      	ldr	r3, [pc, #772]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	0a19      	lsrs	r1, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	061a      	lsls	r2, r3, #24
 8002bc6:	4bbe      	ldr	r3, [pc, #760]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	e019      	b.n	8002c02 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bce:	4bbc      	ldr	r3, [pc, #752]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4bbb      	ldr	r3, [pc, #748]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bd4:	49bc      	ldr	r1, [pc, #752]	@ (8002ec8 <HAL_RCC_OscConfig+0x688>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fd ffb9 	bl	8000b50 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be4:	f7fd ffb4 	bl	8000b50 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e19a      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bf6:	4bb2      	ldr	r3, [pc, #712]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2208      	movs	r2, #8
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d036      	beq.n	8002c7a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d019      	beq.n	8002c48 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c14:	4baa      	ldr	r3, [pc, #680]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c18:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fd ff96 	bl	8000b50 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fd ff91 	bl	8000b50 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e177      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d0f1      	beq.n	8002c2a <HAL_RCC_OscConfig+0x3ea>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b9d      	ldr	r3, [pc, #628]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fd ff7c 	bl	8000b50 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fd ff77 	bl	8000b50 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e15d      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c70:	4b93      	ldr	r3, [pc, #588]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d1f1      	bne.n	8002c5e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x446>
 8002c84:	e0ae      	b.n	8002de4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2023      	movs	r0, #35	@ 0x23
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b8c      	ldr	r3, [pc, #560]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	055b      	lsls	r3, r3, #21
 8002c96:	4013      	ands	r3, r2
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b89      	ldr	r3, [pc, #548]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c9e:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	0549      	lsls	r1, r1, #21
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b87      	ldr	r3, [pc, #540]	@ (8002ecc <HAL_RCC_OscConfig+0x68c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	@ 0x80
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b84      	ldr	r3, [pc, #528]	@ (8002ecc <HAL_RCC_OscConfig+0x68c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b83      	ldr	r3, [pc, #524]	@ (8002ecc <HAL_RCC_OscConfig+0x68c>)
 8002cc0:	2180      	movs	r1, #128	@ 0x80
 8002cc2:	0049      	lsls	r1, r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc8:	f7fd ff42 	bl	8000b50 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fd ff3d 	bl	8000b50 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	@ 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e123      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <HAL_RCC_OscConfig+0x68c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4cc>
 8002cfc:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002cfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d00:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	0049      	lsls	r1, r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d0a:	e031      	b.n	8002d70 <HAL_RCC_OscConfig+0x530>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4ee>
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d1a:	496b      	ldr	r1, [pc, #428]	@ (8002ec8 <HAL_RCC_OscConfig+0x688>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d20:	4b67      	ldr	r3, [pc, #412]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d24:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d26:	496a      	ldr	r1, [pc, #424]	@ (8002ed0 <HAL_RCC_OscConfig+0x690>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d2c:	e020      	b.n	8002d70 <HAL_RCC_OscConfig+0x530>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	23a0      	movs	r3, #160	@ 0xa0
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10e      	bne.n	8002d58 <HAL_RCC_OscConfig+0x518>
 8002d3a:	4b61      	ldr	r3, [pc, #388]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d3e:	4b60      	ldr	r3, [pc, #384]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d40:	2180      	movs	r1, #128	@ 0x80
 8002d42:	00c9      	lsls	r1, r1, #3
 8002d44:	430a      	orrs	r2, r1
 8002d46:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d48:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	0049      	lsls	r1, r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0x530>
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d5c:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d5e:	495a      	ldr	r1, [pc, #360]	@ (8002ec8 <HAL_RCC_OscConfig+0x688>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d64:	4b56      	ldr	r3, [pc, #344]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d68:	4b55      	ldr	r3, [pc, #340]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d6a:	4959      	ldr	r1, [pc, #356]	@ (8002ed0 <HAL_RCC_OscConfig+0x690>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fd feea 	bl	8000b50 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fd fee5 	bl	8000b50 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a51      	ldr	r2, [pc, #324]	@ (8002ed4 <HAL_RCC_OscConfig+0x694>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0ca      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0x542>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fd fed4 	bl	8000b50 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dac:	e009      	b.n	8002dc2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fd fecf 	bl	8000b50 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	4a46      	ldr	r2, [pc, #280]	@ (8002ed4 <HAL_RCC_OscConfig+0x694>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0b4      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002dc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d1ef      	bne.n	8002dae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dce:	2323      	movs	r3, #35	@ 0x23
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ddc:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002dde:	493e      	ldr	r1, [pc, #248]	@ (8002ed8 <HAL_RCC_OscConfig+0x698>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d100      	bne.n	8002dee <HAL_RCC_OscConfig+0x5ae>
 8002dec:	e09d      	b.n	8002f2a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d100      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5b6>
 8002df4:	e076      	b.n	8002ee4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d145      	bne.n	8002e8a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_RCC_OscConfig+0x69c>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fea1 	bl	8000b50 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fd fe9c 	bl	8000b50 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e082      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e26:	4b26      	ldr	r3, [pc, #152]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	049b      	lsls	r3, r3, #18
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e32:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <HAL_RCC_OscConfig+0x6a0>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0449      	lsls	r1, r1, #17
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd fe76 	bl	8000b50 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fd fe71 	bl	8000b50 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e057      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e7c:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	049b      	lsls	r3, r3, #18
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x62a>
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002e90:	4912      	ldr	r1, [pc, #72]	@ (8002edc <HAL_RCC_OscConfig+0x69c>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fd fe5b 	bl	8000b50 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd fe56 	bl	8000b50 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e03c      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002eb2:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCC_OscConfig+0x680>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	049b      	lsls	r3, r3, #18
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x660>
 8002ebe:	e034      	b.n	8002f2a <HAL_RCC_OscConfig+0x6ea>
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	ffff1fff 	.word	0xffff1fff
 8002ec8:	fffffeff 	.word	0xfffffeff
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	fffffbff 	.word	0xfffffbff
 8002ed4:	00001388 	.word	0x00001388
 8002ed8:	efffffff 	.word	0xefffffff
 8002edc:	feffffff 	.word	0xfeffffff
 8002ee0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <HAL_RCC_OscConfig+0x6f4>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d10f      	bne.n	8002f26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	23f0      	movs	r3, #240	@ 0xf0
 8002f0a:	039b      	lsls	r3, r3, #14
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	23c0      	movs	r3, #192	@ 0xc0
 8002f1a:	041b      	lsls	r3, r3, #16
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b00a      	add	sp, #40	@ 0x28
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e128      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b96      	ldr	r3, [pc, #600]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d91e      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b93      	ldr	r3, [pc, #588]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4393      	bics	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	4b90      	ldr	r3, [pc, #576]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f6c:	f7fd fdf0 	bl	8000b50 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fd fdeb 	bl	8000b50 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a8a      	ldr	r2, [pc, #552]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e109      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b87      	ldr	r3, [pc, #540]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1ee      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa2:	4b83      	ldr	r3, [pc, #524]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	22f0      	movs	r2, #240	@ 0xf0
 8002fa8:	4393      	bics	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x8a>
 8002fc0:	e089      	b.n	80030d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fca:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d120      	bne.n	8003018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0e1      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe2:	4b73      	ldr	r3, [pc, #460]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	049b      	lsls	r3, r3, #18
 8002fea:	4013      	ands	r3, r2
 8002fec:	d114      	bne.n	8003018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0d5      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2204      	movs	r2, #4
 8003000:	4013      	ands	r3, r2
 8003002:	d109      	bne.n	8003018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0ca      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003008:	4b69      	ldr	r3, [pc, #420]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4013      	ands	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0c2      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003018:	4b65      	ldr	r3, [pc, #404]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2203      	movs	r2, #3
 800301e:	4393      	bics	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7fd fd90 	bl	8000b50 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d111      	bne.n	8003060 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800303c:	e009      	b.n	8003052 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7fd fd87 	bl	8000b50 <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	4a58      	ldr	r2, [pc, #352]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0a5      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003052:	4b57      	ldr	r3, [pc, #348]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	220c      	movs	r2, #12
 8003058:	4013      	ands	r3, r2
 800305a:	2b08      	cmp	r3, #8
 800305c:	d1ef      	bne.n	800303e <HAL_RCC_ClockConfig+0x106>
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d111      	bne.n	800308c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	e009      	b.n	800307e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306a:	f7fd fd71 	bl	8000b50 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	4a4d      	ldr	r2, [pc, #308]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e08f      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307e:	4b4c      	ldr	r3, [pc, #304]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	220c      	movs	r2, #12
 8003084:	4013      	ands	r3, r2
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d1ef      	bne.n	800306a <HAL_RCC_ClockConfig+0x132>
 800308a:	e024      	b.n	80030d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11b      	bne.n	80030cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003094:	e009      	b.n	80030aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f7fd fd5b 	bl	8000b50 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	4a42      	ldr	r2, [pc, #264]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e079      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030aa:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	220c      	movs	r2, #12
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d1ef      	bne.n	8003096 <HAL_RCC_ClockConfig+0x15e>
 80030b6:	e00e      	b.n	80030d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fd fd4a 	bl	8000b50 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	4a3a      	ldr	r2, [pc, #232]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e068      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030cc:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	220c      	movs	r2, #12
 80030d2:	4013      	ands	r3, r2
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d6:	4b34      	ldr	r3, [pc, #208]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d21e      	bcs.n	8003122 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e4:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	4393      	bics	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030f6:	f7fd fd2b 	bl	8000b50 <HAL_GetTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	e009      	b.n	8003114 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fd fd26 	bl	8000b50 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <HAL_RCC_ClockConfig+0x274>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e044      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003114:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCC_ClockConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d1ee      	bne.n	8003100 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a20      	ldr	r2, [pc, #128]	@ (80031b4 <HAL_RCC_ClockConfig+0x27c>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b1d      	ldr	r3, [pc, #116]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2208      	movs	r2, #8
 8003146:	4013      	ands	r3, r2
 8003148:	d00a      	beq.n	8003160 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a1a      	ldr	r2, [pc, #104]	@ (80031b8 <HAL_RCC_ClockConfig+0x280>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00da      	lsls	r2, r3, #3
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 800315c:	430a      	orrs	r2, r1
 800315e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003160:	f000 f832 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003164:	0001      	movs	r1, r0
 8003166:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <HAL_RCC_ClockConfig+0x278>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	220f      	movs	r2, #15
 800316e:	4013      	ands	r3, r2
 8003170:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <HAL_RCC_ClockConfig+0x284>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	000a      	movs	r2, r1
 8003176:	40da      	lsrs	r2, r3
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_ClockConfig+0x288>)
 800317a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_ClockConfig+0x28c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	250b      	movs	r5, #11
 8003182:	197c      	adds	r4, r7, r5
 8003184:	0018      	movs	r0, r3
 8003186:	f7fd fc9d 	bl	8000ac4 <HAL_InitTick>
 800318a:	0003      	movs	r3, r0
 800318c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800318e:	197b      	adds	r3, r7, r5
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003196:	197b      	adds	r3, r7, r5
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	e000      	b.n	800319e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bdb0      	pop	{r4, r5, r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	40022000 	.word	0x40022000
 80031ac:	00001388 	.word	0x00001388
 80031b0:	40021000 	.word	0x40021000
 80031b4:	fffff8ff 	.word	0xfffff8ff
 80031b8:	ffffc7ff 	.word	0xffffc7ff
 80031bc:	08004a34 	.word	0x08004a34
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031ce:	4b3c      	ldr	r3, [pc, #240]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	220c      	movs	r2, #12
 80031d8:	4013      	ands	r3, r2
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d013      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3e>
 80031de:	d85c      	bhi.n	800329a <HAL_RCC_GetSysClockFreq+0xd2>
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d002      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x22>
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d00b      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x38>
 80031e8:	e057      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031ea:	4b35      	ldr	r3, [pc, #212]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	4013      	ands	r3, r2
 80031f2:	d002      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031f6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80031f8:	e05d      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80031fa:	4b33      	ldr	r3, [pc, #204]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x100>)
 80031fc:	613b      	str	r3, [r7, #16]
      break;
 80031fe:	e05a      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003200:	4b32      	ldr	r3, [pc, #200]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003202:	613b      	str	r3, [r7, #16]
      break;
 8003204:	e057      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	0c9b      	lsrs	r3, r3, #18
 800320a:	220f      	movs	r2, #15
 800320c:	4013      	ands	r3, r2
 800320e:	4a30      	ldr	r2, [pc, #192]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0d9b      	lsrs	r3, r3, #22
 8003218:	2203      	movs	r2, #3
 800321a:	4013      	ands	r3, r2
 800321c:	3301      	adds	r3, #1
 800321e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003220:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	025b      	lsls	r3, r3, #9
 8003228:	4013      	ands	r3, r2
 800322a:	d00f      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	000a      	movs	r2, r1
 8003230:	0152      	lsls	r2, r2, #5
 8003232:	1a52      	subs	r2, r2, r1
 8003234:	0193      	lsls	r3, r2, #6
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	185b      	adds	r3, r3, r1
 800323c:	025b      	lsls	r3, r3, #9
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	0018      	movs	r0, r3
 8003242:	f7fc ff73 	bl	800012c <__udivsi3>
 8003246:	0003      	movs	r3, r0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e023      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2210      	movs	r2, #16
 8003252:	4013      	ands	r3, r2
 8003254:	d00f      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	000a      	movs	r2, r1
 800325a:	0152      	lsls	r2, r2, #5
 800325c:	1a52      	subs	r2, r2, r1
 800325e:	0193      	lsls	r3, r2, #6
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	185b      	adds	r3, r3, r1
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f7fc ff5e 	bl	800012c <__udivsi3>
 8003270:	0003      	movs	r3, r0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e00e      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	000a      	movs	r2, r1
 800327a:	0152      	lsls	r2, r2, #5
 800327c:	1a52      	subs	r2, r2, r1
 800327e:	0193      	lsls	r3, r2, #6
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	185b      	adds	r3, r3, r1
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f7fc ff4e 	bl	800012c <__udivsi3>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
      break;
 8003298:	e00d      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	0212      	lsls	r2, r2, #8
 80032ae:	409a      	lsls	r2, r3
 80032b0:	0013      	movs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
      break;
 80032b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032b6:	693b      	ldr	r3, [r7, #16]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b006      	add	sp, #24
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	003d0900 	.word	0x003d0900
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	08004a4c 	.word	0x08004a4c

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b02      	ldr	r3, [pc, #8]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	20000000 	.word	0x20000000

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff2 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f0:	0001      	movs	r1, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	2207      	movs	r2, #7
 80032fa:	4013      	ands	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	40d9      	lsrs	r1, r3
 8003302:	000b      	movs	r3, r1
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	40021000 	.word	0x40021000
 8003310:	08004a44 	.word	0x08004a44

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	0001      	movs	r1, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	0adb      	lsrs	r3, r3, #11
 8003324:	2207      	movs	r2, #7
 8003326:	4013      	ands	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x28>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	40d9      	lsrs	r1, r3
 800332e:	000b      	movs	r3, r1
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	40021000 	.word	0x40021000
 800333c:	08004a44 	.word	0x08004a44

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003348:	2017      	movs	r0, #23
 800334a:	183b      	adds	r3, r7, r0
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800335a:	e0c7      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335c:	4b84      	ldr	r3, [pc, #528]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800335e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	055b      	lsls	r3, r3, #21
 8003364:	4013      	ands	r3, r2
 8003366:	d109      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b81      	ldr	r3, [pc, #516]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800336a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336c:	4b80      	ldr	r3, [pc, #512]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	0549      	lsls	r1, r1, #21
 8003372:	430a      	orrs	r2, r1
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003376:	183b      	adds	r3, r7, r0
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b7d      	ldr	r3, [pc, #500]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4013      	ands	r3, r2
 8003386:	d11a      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003388:	4b7a      	ldr	r3, [pc, #488]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b79      	ldr	r3, [pc, #484]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	0049      	lsls	r1, r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd fbdb 	bl	8000b50 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fd fbd6 	bl	8000b50 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0d9      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b70      	ldr	r3, [pc, #448]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033be:	4b6c      	ldr	r3, [pc, #432]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	23c0      	movs	r3, #192	@ 0xc0
 80033c4:	039b      	lsls	r3, r3, #14
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	23c0      	movs	r3, #192	@ 0xc0
 80033d0:	039b      	lsls	r3, r3, #14
 80033d2:	4013      	ands	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d013      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	23c0      	movs	r3, #192	@ 0xc0
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	401a      	ands	r2, r3
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033ec:	4b60      	ldr	r3, [pc, #384]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	029b      	lsls	r3, r3, #10
 80033f4:	401a      	ands	r2, r3
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0b1      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003402:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003406:	23c0      	movs	r3, #192	@ 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	23c0      	movs	r3, #192	@ 0xc0
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4013      	ands	r3, r2
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d033      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2220      	movs	r2, #32
 800342a:	4013      	ands	r3, r2
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800342e:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	4a51      	ldr	r2, [pc, #324]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003438:	4b4d      	ldr	r3, [pc, #308]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800343a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800343c:	4b4c      	ldr	r3, [pc, #304]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	0309      	lsls	r1, r1, #12
 8003442:	430a      	orrs	r2, r1
 8003444:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003446:	4b4a      	ldr	r3, [pc, #296]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800344a:	4b49      	ldr	r3, [pc, #292]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800344c:	494b      	ldr	r1, [pc, #300]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800344e:	400a      	ands	r2, r1
 8003450:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003452:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4013      	ands	r3, r2
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fd fb75 	bl	8000b50 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd fb70 	bl	8000b50 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	4a42      	ldr	r2, [pc, #264]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e072      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003480:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4013      	ands	r3, r2
 800348a:	d0ef      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2220      	movs	r2, #32
 8003492:	4013      	ands	r3, r2
 8003494:	d01f      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	23c0      	movs	r3, #192	@ 0xc0
 800349c:	029b      	lsls	r3, r3, #10
 800349e:	401a      	ands	r2, r3
 80034a0:	23c0      	movs	r3, #192	@ 0xc0
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80034a8:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a35      	ldr	r2, [pc, #212]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	23c0      	movs	r3, #192	@ 0xc0
 80034b8:	039b      	lsls	r3, r3, #14
 80034ba:	401a      	ands	r2, r3
 80034bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	23c0      	movs	r3, #192	@ 0xc0
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	401a      	ands	r2, r3
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034d2:	430a      	orrs	r2, r1
 80034d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d6:	2317      	movs	r3, #23
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e0:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e4:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034e6:	4928      	ldr	r1, [pc, #160]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	220c      	movs	r2, #12
 80034fc:	4393      	bics	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003506:	430a      	orrs	r2, r1
 8003508:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003514:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	4a1c      	ldr	r2, [pc, #112]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003524:	430a      	orrs	r2, r1
 8003526:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	4013      	ands	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003542:	430a      	orrs	r2, r1
 8003544:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2280      	movs	r2, #128	@ 0x80
 800354c:	4013      	ands	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003560:	430a      	orrs	r2, r1
 8003562:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	fffcffff 	.word	0xfffcffff
 800357c:	fff7ffff 	.word	0xfff7ffff
 8003580:	00001388 	.word	0x00001388
 8003584:	ffcfffff 	.word	0xffcfffff
 8003588:	efffffff 	.word	0xefffffff
 800358c:	fffff3ff 	.word	0xfffff3ff
 8003590:	ffffcfff 	.word	0xffffcfff
 8003594:	fff3ffff 	.word	0xfff3ffff

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e044      	b.n	8003634 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2278      	movs	r2, #120	@ 0x78
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd f95f 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2224      	movs	r2, #36	@ 0x24
 80035c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2101      	movs	r1, #1
 80035d4:	438a      	bics	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fb16 	bl	8003c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f8c8 	bl	8003780 <UART_SetConfig>
 80035f0:	0003      	movs	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e01c      	b.n	8003634 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	490d      	ldr	r1, [pc, #52]	@ (800363c <HAL_UART_Init+0xa4>)
 8003606:	400a      	ands	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	212a      	movs	r1, #42	@ 0x2a
 8003616:	438a      	bics	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 fba5 	bl	8003d7c <UART_CheckIdleState>
 8003632:	0003      	movs	r3, r0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}
 800363c:	ffffb7ff 	.word	0xffffb7ff

08003640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003654:	2b20      	cmp	r3, #32
 8003656:	d000      	beq.n	800365a <HAL_UART_Transmit+0x1a>
 8003658:	e08c      	b.n	8003774 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_UART_Transmit+0x28>
 8003660:	1dbb      	adds	r3, r7, #6
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e084      	b.n	8003776 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	015b      	lsls	r3, r3, #5
 8003674:	429a      	cmp	r2, r3
 8003676:	d109      	bne.n	800368c <HAL_UART_Transmit+0x4c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2201      	movs	r2, #1
 8003684:	4013      	ands	r3, r2
 8003686:	d001      	beq.n	800368c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e074      	b.n	8003776 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2284      	movs	r2, #132	@ 0x84
 8003690:	2100      	movs	r1, #0
 8003692:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2221      	movs	r2, #33	@ 0x21
 8003698:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369a:	f7fd fa59 	bl	8000b50 <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1dba      	adds	r2, r7, #6
 80036a6:	2150      	movs	r1, #80	@ 0x50
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1dba      	adds	r2, r7, #6
 80036b0:	2152      	movs	r1, #82	@ 0x52
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	2380      	movs	r3, #128	@ 0x80
 80036bc:	015b      	lsls	r3, r3, #5
 80036be:	429a      	cmp	r2, r3
 80036c0:	d108      	bne.n	80036d4 <HAL_UART_Transmit+0x94>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e003      	b.n	80036dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036dc:	e02f      	b.n	800373e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	0013      	movs	r3, r2
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	@ 0x80
 80036ec:	f000 fbee 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d004      	beq.n	80036fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e03b      	b.n	8003776 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	001a      	movs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	05d2      	lsls	r2, r2, #23
 8003710:	0dd2      	lsrs	r2, r2, #23
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	3302      	adds	r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e007      	b.n	800372c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2252      	movs	r2, #82	@ 0x52
 8003730:	5a9b      	ldrh	r3, [r3, r2]
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b299      	uxth	r1, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2252      	movs	r2, #82	@ 0x52
 800373c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2252      	movs	r2, #82	@ 0x52
 8003742:	5a9b      	ldrh	r3, [r3, r2]
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1c9      	bne.n	80036de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	0013      	movs	r3, r2
 8003754:	2200      	movs	r2, #0
 8003756:	2140      	movs	r1, #64	@ 0x40
 8003758:	f000 fbb8 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d004      	beq.n	800376a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e005      	b.n	8003776 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b008      	add	sp, #32
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003788:	231a      	movs	r3, #26
 800378a:	2218      	movs	r2, #24
 800378c:	189b      	adds	r3, r3, r2
 800378e:	19db      	adds	r3, r3, r7
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	431a      	orrs	r2, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4ab4      	ldr	r2, [pc, #720]	@ (8003a84 <UART_SetConfig+0x304>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4aaf      	ldr	r2, [pc, #700]	@ (8003a88 <UART_SetConfig+0x308>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4aa9      	ldr	r2, [pc, #676]	@ (8003a8c <UART_SetConfig+0x30c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037f0:	4313      	orrs	r3, r2
 80037f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4aa5      	ldr	r2, [pc, #660]	@ (8003a90 <UART_SetConfig+0x310>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4aa1      	ldr	r2, [pc, #644]	@ (8003a94 <UART_SetConfig+0x314>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d131      	bne.n	8003878 <UART_SetConfig+0xf8>
 8003814:	4ba0      	ldr	r3, [pc, #640]	@ (8003a98 <UART_SetConfig+0x318>)
 8003816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003818:	220c      	movs	r2, #12
 800381a:	4013      	ands	r3, r2
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d01d      	beq.n	800385c <UART_SetConfig+0xdc>
 8003820:	d823      	bhi.n	800386a <UART_SetConfig+0xea>
 8003822:	2b08      	cmp	r3, #8
 8003824:	d00c      	beq.n	8003840 <UART_SetConfig+0xc0>
 8003826:	d820      	bhi.n	800386a <UART_SetConfig+0xea>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <UART_SetConfig+0xb2>
 800382c:	2b04      	cmp	r3, #4
 800382e:	d00e      	beq.n	800384e <UART_SetConfig+0xce>
 8003830:	e01b      	b.n	800386a <UART_SetConfig+0xea>
 8003832:	231b      	movs	r3, #27
 8003834:	2218      	movs	r2, #24
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e065      	b.n	800390c <UART_SetConfig+0x18c>
 8003840:	231b      	movs	r3, #27
 8003842:	2218      	movs	r2, #24
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	2202      	movs	r2, #2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e05e      	b.n	800390c <UART_SetConfig+0x18c>
 800384e:	231b      	movs	r3, #27
 8003850:	2218      	movs	r2, #24
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	2204      	movs	r2, #4
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e057      	b.n	800390c <UART_SetConfig+0x18c>
 800385c:	231b      	movs	r3, #27
 800385e:	2218      	movs	r2, #24
 8003860:	189b      	adds	r3, r3, r2
 8003862:	19db      	adds	r3, r3, r7
 8003864:	2208      	movs	r2, #8
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e050      	b.n	800390c <UART_SetConfig+0x18c>
 800386a:	231b      	movs	r3, #27
 800386c:	2218      	movs	r2, #24
 800386e:	189b      	adds	r3, r3, r2
 8003870:	19db      	adds	r3, r3, r7
 8003872:	2210      	movs	r2, #16
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e049      	b.n	800390c <UART_SetConfig+0x18c>
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a83      	ldr	r2, [pc, #524]	@ (8003a8c <UART_SetConfig+0x30c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d13e      	bne.n	8003900 <UART_SetConfig+0x180>
 8003882:	4b85      	ldr	r3, [pc, #532]	@ (8003a98 <UART_SetConfig+0x318>)
 8003884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003886:	23c0      	movs	r3, #192	@ 0xc0
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4013      	ands	r3, r2
 800388c:	22c0      	movs	r2, #192	@ 0xc0
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	4293      	cmp	r3, r2
 8003892:	d027      	beq.n	80038e4 <UART_SetConfig+0x164>
 8003894:	22c0      	movs	r2, #192	@ 0xc0
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	4293      	cmp	r3, r2
 800389a:	d82a      	bhi.n	80038f2 <UART_SetConfig+0x172>
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d011      	beq.n	80038c8 <UART_SetConfig+0x148>
 80038a4:	2280      	movs	r2, #128	@ 0x80
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d822      	bhi.n	80038f2 <UART_SetConfig+0x172>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <UART_SetConfig+0x13a>
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	00d2      	lsls	r2, r2, #3
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <UART_SetConfig+0x156>
 80038b8:	e01b      	b.n	80038f2 <UART_SetConfig+0x172>
 80038ba:	231b      	movs	r3, #27
 80038bc:	2218      	movs	r2, #24
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e021      	b.n	800390c <UART_SetConfig+0x18c>
 80038c8:	231b      	movs	r3, #27
 80038ca:	2218      	movs	r2, #24
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e01a      	b.n	800390c <UART_SetConfig+0x18c>
 80038d6:	231b      	movs	r3, #27
 80038d8:	2218      	movs	r2, #24
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	19db      	adds	r3, r3, r7
 80038de:	2204      	movs	r2, #4
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e013      	b.n	800390c <UART_SetConfig+0x18c>
 80038e4:	231b      	movs	r3, #27
 80038e6:	2218      	movs	r2, #24
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2208      	movs	r2, #8
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e00c      	b.n	800390c <UART_SetConfig+0x18c>
 80038f2:	231b      	movs	r3, #27
 80038f4:	2218      	movs	r2, #24
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	19db      	adds	r3, r3, r7
 80038fa:	2210      	movs	r2, #16
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e005      	b.n	800390c <UART_SetConfig+0x18c>
 8003900:	231b      	movs	r3, #27
 8003902:	2218      	movs	r2, #24
 8003904:	189b      	adds	r3, r3, r2
 8003906:	19db      	adds	r3, r3, r7
 8003908:	2210      	movs	r2, #16
 800390a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5e      	ldr	r2, [pc, #376]	@ (8003a8c <UART_SetConfig+0x30c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d000      	beq.n	8003918 <UART_SetConfig+0x198>
 8003916:	e084      	b.n	8003a22 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003918:	231b      	movs	r3, #27
 800391a:	2218      	movs	r2, #24
 800391c:	189b      	adds	r3, r3, r2
 800391e:	19db      	adds	r3, r3, r7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d01d      	beq.n	8003962 <UART_SetConfig+0x1e2>
 8003926:	dc20      	bgt.n	800396a <UART_SetConfig+0x1ea>
 8003928:	2b04      	cmp	r3, #4
 800392a:	d015      	beq.n	8003958 <UART_SetConfig+0x1d8>
 800392c:	dc1d      	bgt.n	800396a <UART_SetConfig+0x1ea>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0x1b8>
 8003932:	2b02      	cmp	r3, #2
 8003934:	d005      	beq.n	8003942 <UART_SetConfig+0x1c2>
 8003936:	e018      	b.n	800396a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7ff fcd6 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 800393c:	0003      	movs	r3, r0
 800393e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003940:	e01c      	b.n	800397c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003942:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <UART_SetConfig+0x318>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	4013      	ands	r3, r2
 800394a:	d002      	beq.n	8003952 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800394c:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <UART_SetConfig+0x31c>)
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003950:	e014      	b.n	800397c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003952:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <UART_SetConfig+0x320>)
 8003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003956:	e011      	b.n	800397c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003958:	f7ff fc36 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 800395c:	0003      	movs	r3, r0
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003960:	e00c      	b.n	800397c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003968:	e008      	b.n	800397c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800396e:	231a      	movs	r3, #26
 8003970:	2218      	movs	r2, #24
 8003972:	189b      	adds	r3, r3, r2
 8003974:	19db      	adds	r3, r3, r7
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
        break;
 800397a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d100      	bne.n	8003984 <UART_SetConfig+0x204>
 8003982:	e12f      	b.n	8003be4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	0013      	movs	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	189b      	adds	r3, r3, r2
 800398e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003990:	429a      	cmp	r2, r3
 8003992:	d305      	bcc.n	80039a0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800399a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800399c:	429a      	cmp	r2, r3
 800399e:	d906      	bls.n	80039ae <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80039a0:	231a      	movs	r3, #26
 80039a2:	2218      	movs	r2, #24
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	19db      	adds	r3, r3, r7
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e11a      	b.n	8003be4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	000b      	movs	r3, r1
 80039bc:	0e1b      	lsrs	r3, r3, #24
 80039be:	0010      	movs	r0, r2
 80039c0:	0205      	lsls	r5, r0, #8
 80039c2:	431d      	orrs	r5, r3
 80039c4:	000b      	movs	r3, r1
 80039c6:	021c      	lsls	r4, r3, #8
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	1900      	adds	r0, r0, r4
 80039da:	4169      	adcs	r1, r5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f7fc fc2b 	bl	8000244 <__aeabi_uldivmod>
 80039ee:	0002      	movs	r2, r0
 80039f0:	000b      	movs	r3, r1
 80039f2:	0013      	movs	r3, r2
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d309      	bcc.n	8003a14 <UART_SetConfig+0x294>
 8003a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	035b      	lsls	r3, r3, #13
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d204      	bcs.n	8003a14 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e0e7      	b.n	8003be4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003a14:	231a      	movs	r3, #26
 8003a16:	2218      	movs	r2, #24
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e0e0      	b.n	8003be4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d000      	beq.n	8003a30 <UART_SetConfig+0x2b0>
 8003a2e:	e082      	b.n	8003b36 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003a30:	231b      	movs	r3, #27
 8003a32:	2218      	movs	r2, #24
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d834      	bhi.n	8003aa8 <UART_SetConfig+0x328>
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <UART_SetConfig+0x324>)
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7ff fc4e 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a50:	e033      	b.n	8003aba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a52:	f7ff fc5f 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8003a56:	0003      	movs	r3, r0
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a5a:	e02e      	b.n	8003aba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <UART_SetConfig+0x318>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2210      	movs	r2, #16
 8003a62:	4013      	ands	r3, r2
 8003a64:	d002      	beq.n	8003a6c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <UART_SetConfig+0x31c>)
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a6a:	e026      	b.n	8003aba <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <UART_SetConfig+0x320>)
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a70:	e023      	b.n	8003aba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a72:	f7ff fba9 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003a76:	0003      	movs	r3, r0
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a7a:	e01e      	b.n	8003aba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a82:	e01a      	b.n	8003aba <UART_SetConfig+0x33a>
 8003a84:	efff69f3 	.word	0xefff69f3
 8003a88:	ffffcfff 	.word	0xffffcfff
 8003a8c:	40004800 	.word	0x40004800
 8003a90:	fffff4ff 	.word	0xfffff4ff
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	003d0900 	.word	0x003d0900
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	08004a58 	.word	0x08004a58
      default:
        pclk = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003aac:	231a      	movs	r3, #26
 8003aae:	2218      	movs	r2, #24
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
        break;
 8003ab8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d100      	bne.n	8003ac2 <UART_SetConfig+0x342>
 8003ac0:	e090      	b.n	8003be4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	005a      	lsls	r2, r3, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	18d2      	adds	r2, r2, r3
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	0010      	movs	r0, r2
 8003ad6:	f7fc fb29 	bl	800012c <__udivsi3>
 8003ada:	0003      	movs	r3, r0
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d921      	bls.n	8003b28 <UART_SetConfig+0x3a8>
 8003ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d21c      	bcs.n	8003b28 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	200e      	movs	r0, #14
 8003af4:	2418      	movs	r4, #24
 8003af6:	1903      	adds	r3, r0, r4
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	210f      	movs	r1, #15
 8003afc:	438a      	bics	r2, r1
 8003afe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2207      	movs	r2, #7
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b299      	uxth	r1, r3
 8003b0c:	1903      	adds	r3, r0, r4
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	1902      	adds	r2, r0, r4
 8003b12:	19d2      	adds	r2, r2, r7
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1902      	adds	r2, r0, r4
 8003b20:	19d2      	adds	r2, r2, r7
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e05d      	b.n	8003be4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003b28:	231a      	movs	r3, #26
 8003b2a:	2218      	movs	r2, #24
 8003b2c:	189b      	adds	r3, r3, r2
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e056      	b.n	8003be4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b36:	231b      	movs	r3, #27
 8003b38:	2218      	movs	r2, #24
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	19db      	adds	r3, r3, r7
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d822      	bhi.n	8003b8a <UART_SetConfig+0x40a>
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	4b2f      	ldr	r3, [pc, #188]	@ (8003c04 <UART_SetConfig+0x484>)
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4e:	f7ff fbcb 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8003b52:	0003      	movs	r3, r0
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b56:	e021      	b.n	8003b9c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7ff fbdc 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b60:	e01c      	b.n	8003b9c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <UART_SetConfig+0x488>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2210      	movs	r2, #16
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d002      	beq.n	8003b72 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b6c:	4b27      	ldr	r3, [pc, #156]	@ (8003c0c <UART_SetConfig+0x48c>)
 8003b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b70:	e014      	b.n	8003b9c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003b72:	4b27      	ldr	r3, [pc, #156]	@ (8003c10 <UART_SetConfig+0x490>)
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b76:	e011      	b.n	8003b9c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b78:	f7ff fb26 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b80:	e00c      	b.n	8003b9c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b88:	e008      	b.n	8003b9c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003b8e:	231a      	movs	r3, #26
 8003b90:	2218      	movs	r2, #24
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	19db      	adds	r3, r3, r7
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
        break;
 8003b9a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	085a      	lsrs	r2, r3, #1
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	18d2      	adds	r2, r2, r3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	0010      	movs	r0, r2
 8003bb4:	f7fc faba 	bl	800012c <__udivsi3>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d90a      	bls.n	8003bd8 <UART_SetConfig+0x458>
 8003bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bc4:	2380      	movs	r3, #128	@ 0x80
 8003bc6:	025b      	lsls	r3, r3, #9
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d205      	bcs.n	8003bd8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e005      	b.n	8003be4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd8:	231a      	movs	r3, #26
 8003bda:	2218      	movs	r2, #24
 8003bdc:	189b      	adds	r3, r3, r2
 8003bde:	19db      	adds	r3, r3, r7
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2200      	movs	r2, #0
 8003be8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2200      	movs	r2, #0
 8003bee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bf0:	231a      	movs	r3, #26
 8003bf2:	2218      	movs	r2, #24
 8003bf4:	189b      	adds	r3, r3, r2
 8003bf6:	19db      	adds	r3, r3, r7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b00e      	add	sp, #56	@ 0x38
 8003c00:	bdb0      	pop	{r4, r5, r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	08004a7c 	.word	0x08004a7c
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	003d0900 	.word	0x003d0900
 8003c10:	00f42400 	.word	0x00f42400

08003c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	2208      	movs	r2, #8
 8003c22:	4013      	ands	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d58 <UART_AdvFeatureConfig+0x144>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	2201      	movs	r2, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a43      	ldr	r2, [pc, #268]	@ (8003d5c <UART_AdvFeatureConfig+0x148>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a3b      	ldr	r2, [pc, #236]	@ (8003d60 <UART_AdvFeatureConfig+0x14c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	2204      	movs	r2, #4
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a34      	ldr	r2, [pc, #208]	@ (8003d64 <UART_AdvFeatureConfig+0x150>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	2210      	movs	r2, #16
 8003caa:	4013      	ands	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <UART_AdvFeatureConfig+0x154>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	2220      	movs	r2, #32
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	@ (8003d6c <UART_AdvFeatureConfig+0x158>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	2240      	movs	r2, #64	@ 0x40
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <UART_AdvFeatureConfig+0x15c>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d0e:	2380      	movs	r3, #128	@ 0x80
 8003d10:	035b      	lsls	r3, r3, #13
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10b      	bne.n	8003d2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <UART_AdvFeatureConfig+0x160>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	2280      	movs	r2, #128	@ 0x80
 8003d34:	4013      	ands	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d78 <UART_AdvFeatureConfig+0x164>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	0019      	movs	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	ffff7fff 	.word	0xffff7fff
 8003d5c:	fffdffff 	.word	0xfffdffff
 8003d60:	fffeffff 	.word	0xfffeffff
 8003d64:	fffbffff 	.word	0xfffbffff
 8003d68:	ffffefff 	.word	0xffffefff
 8003d6c:	ffffdfff 	.word	0xffffdfff
 8003d70:	ffefffff 	.word	0xffefffff
 8003d74:	ff9fffff 	.word	0xff9fffff
 8003d78:	fff7ffff 	.word	0xfff7ffff

08003d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b092      	sub	sp, #72	@ 0x48
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2284      	movs	r2, #132	@ 0x84
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d8c:	f7fc fee0 	bl	8000b50 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d12c      	bne.n	8003dfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	0391      	lsls	r1, r2, #14
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4a46      	ldr	r2, [pc, #280]	@ (8003ec4 <UART_CheckIdleState+0x148>)
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f88c 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d021      	beq.n	8003dfc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2180      	movs	r1, #128	@ 0x80
 8003dda:	438a      	bics	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2278      	movs	r2, #120	@ 0x78
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e05f      	b.n	8003ebc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d146      	bne.n	8003e98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0c:	2280      	movs	r2, #128	@ 0x80
 8003e0e:	03d1      	lsls	r1, r2, #15
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec4 <UART_CheckIdleState+0x148>)
 8003e14:	9200      	str	r2, [sp, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f000 f858 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d03b      	beq.n	8003e98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e20:	f3ef 8310 	mrs	r3, PRIMASK
 8003e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4921      	ldr	r1, [pc, #132]	@ (8003ec8 <UART_CheckIdleState+0x14c>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8310 	mrs	r3, PRIMASK
 8003e56:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2280      	movs	r2, #128	@ 0x80
 8003e88:	2120      	movs	r1, #32
 8003e8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2278      	movs	r2, #120	@ 0x78
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e011      	b.n	8003ebc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2280      	movs	r2, #128	@ 0x80
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2278      	movs	r2, #120	@ 0x78
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b010      	add	sp, #64	@ 0x40
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	01ffffff 	.word	0x01ffffff
 8003ec8:	fffffedf 	.word	0xfffffedf

08003ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	e051      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	d04e      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fc fe34 	bl	8000b50 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e051      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2204      	movs	r2, #4
 8003f06:	4013      	ands	r3, r2
 8003f08:	d03b      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b80      	cmp	r3, #128	@ 0x80
 8003f0e:	d038      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d035      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d111      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 f83c 	bl	8003fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2284      	movs	r2, #132	@ 0x84
 8003f38:	2108      	movs	r1, #8
 8003f3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2278      	movs	r2, #120	@ 0x78
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e02c      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	2380      	movs	r3, #128	@ 0x80
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	401a      	ands	r2, r3
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d112      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2280      	movs	r2, #128	@ 0x80
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 f81f 	bl	8003fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2284      	movs	r2, #132	@ 0x84
 8003f72:	2120      	movs	r1, #32
 8003f74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2278      	movs	r2, #120	@ 0x78
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e00f      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	425a      	negs	r2, r3
 8003f92:	4153      	adcs	r3, r2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	001a      	movs	r2, r3
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d09e      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b004      	add	sp, #16
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	@ 0x38
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8003fba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4926      	ldr	r1, [pc, #152]	@ (8004070 <UART_EndRxTransfer+0xc4>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fea:	623b      	str	r3, [r7, #32]
  return(result);
 8003fec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	f383 8810 	msr	PRIMASK, r3
}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	438a      	bics	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401c:	2b01      	cmp	r3, #1
 800401e:	d118      	bne.n	8004052 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	60bb      	str	r3, [r7, #8]
  return(result);
 8004026:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402a:	2301      	movs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2110      	movs	r1, #16
 8004042:	438a      	bics	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	2120      	movs	r1, #32
 8004058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b00e      	add	sp, #56	@ 0x38
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	fffffedf 	.word	0xfffffedf

08004074 <sniprintf>:
 8004074:	b40c      	push	{r2, r3}
 8004076:	b530      	push	{r4, r5, lr}
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <sniprintf+0x68>)
 800407a:	000c      	movs	r4, r1
 800407c:	681d      	ldr	r5, [r3, #0]
 800407e:	b09d      	sub	sp, #116	@ 0x74
 8004080:	2900      	cmp	r1, #0
 8004082:	da08      	bge.n	8004096 <sniprintf+0x22>
 8004084:	238b      	movs	r3, #139	@ 0x8b
 8004086:	2001      	movs	r0, #1
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	4240      	negs	r0, r0
 800408c:	b01d      	add	sp, #116	@ 0x74
 800408e:	bc30      	pop	{r4, r5}
 8004090:	bc08      	pop	{r3}
 8004092:	b002      	add	sp, #8
 8004094:	4718      	bx	r3
 8004096:	2382      	movs	r3, #130	@ 0x82
 8004098:	466a      	mov	r2, sp
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	8293      	strh	r3, [r2, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	9002      	str	r0, [sp, #8]
 80040a2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80040a4:	9006      	str	r0, [sp, #24]
 80040a6:	4299      	cmp	r1, r3
 80040a8:	d000      	beq.n	80040ac <sniprintf+0x38>
 80040aa:	1e4b      	subs	r3, r1, #1
 80040ac:	9304      	str	r3, [sp, #16]
 80040ae:	9307      	str	r3, [sp, #28]
 80040b0:	2301      	movs	r3, #1
 80040b2:	466a      	mov	r2, sp
 80040b4:	425b      	negs	r3, r3
 80040b6:	82d3      	strh	r3, [r2, #22]
 80040b8:	0028      	movs	r0, r5
 80040ba:	ab21      	add	r3, sp, #132	@ 0x84
 80040bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040be:	a902      	add	r1, sp, #8
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	f000 f99d 	bl	8004400 <_svfiprintf_r>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	da01      	bge.n	80040ce <sniprintf+0x5a>
 80040ca:	238b      	movs	r3, #139	@ 0x8b
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	2c00      	cmp	r4, #0
 80040d0:	d0dc      	beq.n	800408c <sniprintf+0x18>
 80040d2:	2200      	movs	r2, #0
 80040d4:	9b02      	ldr	r3, [sp, #8]
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e7d8      	b.n	800408c <sniprintf+0x18>
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	2000000c 	.word	0x2000000c

080040e0 <memset>:
 80040e0:	0003      	movs	r3, r0
 80040e2:	1882      	adds	r2, r0, r2
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <__errno>:
 80040f0:	4b01      	ldr	r3, [pc, #4]	@ (80040f8 <__errno+0x8>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	4770      	bx	lr
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	2000000c 	.word	0x2000000c

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	2600      	movs	r6, #0
 8004100:	4c0c      	ldr	r4, [pc, #48]	@ (8004134 <__libc_init_array+0x38>)
 8004102:	4d0d      	ldr	r5, [pc, #52]	@ (8004138 <__libc_init_array+0x3c>)
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	2600      	movs	r6, #0
 800410e:	f000 fc61 	bl	80049d4 <_init>
 8004112:	4c0a      	ldr	r4, [pc, #40]	@ (800413c <__libc_init_array+0x40>)
 8004114:	4d0a      	ldr	r5, [pc, #40]	@ (8004140 <__libc_init_array+0x44>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	00b3      	lsls	r3, r6, #2
 8004122:	58eb      	ldr	r3, [r5, r3]
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	00b3      	lsls	r3, r6, #2
 800412c:	58eb      	ldr	r3, [r5, r3]
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	08004adc 	.word	0x08004adc
 8004138:	08004adc 	.word	0x08004adc
 800413c:	08004ae0 	.word	0x08004ae0
 8004140:	08004adc 	.word	0x08004adc

08004144 <__retarget_lock_acquire_recursive>:
 8004144:	4770      	bx	lr

08004146 <__retarget_lock_release_recursive>:
 8004146:	4770      	bx	lr

08004148 <_free_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	0005      	movs	r5, r0
 800414c:	1e0c      	subs	r4, r1, #0
 800414e:	d010      	beq.n	8004172 <_free_r+0x2a>
 8004150:	3c04      	subs	r4, #4
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da00      	bge.n	800415a <_free_r+0x12>
 8004158:	18e4      	adds	r4, r4, r3
 800415a:	0028      	movs	r0, r5
 800415c:	f000 f8e0 	bl	8004320 <__malloc_lock>
 8004160:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <_free_r+0x90>)
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <_free_r+0x2c>
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	6014      	str	r4, [r2, #0]
 800416c:	0028      	movs	r0, r5
 800416e:	f000 f8df 	bl	8004330 <__malloc_unlock>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	42a3      	cmp	r3, r4
 8004176:	d908      	bls.n	800418a <_free_r+0x42>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	1821      	adds	r1, r4, r0
 800417c:	428b      	cmp	r3, r1
 800417e:	d1f3      	bne.n	8004168 <_free_r+0x20>
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	1809      	adds	r1, r1, r0
 8004186:	6021      	str	r1, [r4, #0]
 8004188:	e7ee      	b.n	8004168 <_free_r+0x20>
 800418a:	001a      	movs	r2, r3
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <_free_r+0x4e>
 8004192:	42a3      	cmp	r3, r4
 8004194:	d9f9      	bls.n	800418a <_free_r+0x42>
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	1850      	adds	r0, r2, r1
 800419a:	42a0      	cmp	r0, r4
 800419c:	d10b      	bne.n	80041b6 <_free_r+0x6e>
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	1809      	adds	r1, r1, r0
 80041a2:	1850      	adds	r0, r2, r1
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	4283      	cmp	r3, r0
 80041a8:	d1e0      	bne.n	800416c <_free_r+0x24>
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	1841      	adds	r1, r0, r1
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	e7da      	b.n	800416c <_free_r+0x24>
 80041b6:	42a0      	cmp	r0, r4
 80041b8:	d902      	bls.n	80041c0 <_free_r+0x78>
 80041ba:	230c      	movs	r3, #12
 80041bc:	602b      	str	r3, [r5, #0]
 80041be:	e7d5      	b.n	800416c <_free_r+0x24>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	1821      	adds	r1, r4, r0
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d103      	bne.n	80041d0 <_free_r+0x88>
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	1809      	adds	r1, r1, r0
 80041ce:	6021      	str	r1, [r4, #0]
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6054      	str	r4, [r2, #4]
 80041d4:	e7ca      	b.n	800416c <_free_r+0x24>
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	200002a0 	.word	0x200002a0

080041dc <sbrk_aligned>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4e0f      	ldr	r6, [pc, #60]	@ (800421c <sbrk_aligned+0x40>)
 80041e0:	000d      	movs	r5, r1
 80041e2:	6831      	ldr	r1, [r6, #0]
 80041e4:	0004      	movs	r4, r0
 80041e6:	2900      	cmp	r1, #0
 80041e8:	d102      	bne.n	80041f0 <sbrk_aligned+0x14>
 80041ea:	f000 fb95 	bl	8004918 <_sbrk_r>
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	0029      	movs	r1, r5
 80041f2:	0020      	movs	r0, r4
 80041f4:	f000 fb90 	bl	8004918 <_sbrk_r>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d103      	bne.n	8004204 <sbrk_aligned+0x28>
 80041fc:	2501      	movs	r5, #1
 80041fe:	426d      	negs	r5, r5
 8004200:	0028      	movs	r0, r5
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	2303      	movs	r3, #3
 8004206:	1cc5      	adds	r5, r0, #3
 8004208:	439d      	bics	r5, r3
 800420a:	42a8      	cmp	r0, r5
 800420c:	d0f8      	beq.n	8004200 <sbrk_aligned+0x24>
 800420e:	1a29      	subs	r1, r5, r0
 8004210:	0020      	movs	r0, r4
 8004212:	f000 fb81 	bl	8004918 <_sbrk_r>
 8004216:	3001      	adds	r0, #1
 8004218:	d1f2      	bne.n	8004200 <sbrk_aligned+0x24>
 800421a:	e7ef      	b.n	80041fc <sbrk_aligned+0x20>
 800421c:	2000029c 	.word	0x2000029c

08004220 <_malloc_r>:
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	2203      	movs	r2, #3
 8004224:	1ccb      	adds	r3, r1, #3
 8004226:	4393      	bics	r3, r2
 8004228:	3308      	adds	r3, #8
 800422a:	0005      	movs	r5, r0
 800422c:	001f      	movs	r7, r3
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d234      	bcs.n	800429c <_malloc_r+0x7c>
 8004232:	270c      	movs	r7, #12
 8004234:	42b9      	cmp	r1, r7
 8004236:	d833      	bhi.n	80042a0 <_malloc_r+0x80>
 8004238:	0028      	movs	r0, r5
 800423a:	f000 f871 	bl	8004320 <__malloc_lock>
 800423e:	4e37      	ldr	r6, [pc, #220]	@ (800431c <_malloc_r+0xfc>)
 8004240:	6833      	ldr	r3, [r6, #0]
 8004242:	001c      	movs	r4, r3
 8004244:	2c00      	cmp	r4, #0
 8004246:	d12f      	bne.n	80042a8 <_malloc_r+0x88>
 8004248:	0039      	movs	r1, r7
 800424a:	0028      	movs	r0, r5
 800424c:	f7ff ffc6 	bl	80041dc <sbrk_aligned>
 8004250:	0004      	movs	r4, r0
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d15f      	bne.n	8004316 <_malloc_r+0xf6>
 8004256:	6834      	ldr	r4, [r6, #0]
 8004258:	9400      	str	r4, [sp, #0]
 800425a:	9b00      	ldr	r3, [sp, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d14a      	bne.n	80042f6 <_malloc_r+0xd6>
 8004260:	2c00      	cmp	r4, #0
 8004262:	d052      	beq.n	800430a <_malloc_r+0xea>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	0028      	movs	r0, r5
 8004268:	18e3      	adds	r3, r4, r3
 800426a:	9900      	ldr	r1, [sp, #0]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	f000 fb53 	bl	8004918 <_sbrk_r>
 8004272:	9b01      	ldr	r3, [sp, #4]
 8004274:	4283      	cmp	r3, r0
 8004276:	d148      	bne.n	800430a <_malloc_r+0xea>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	0028      	movs	r0, r5
 800427c:	1aff      	subs	r7, r7, r3
 800427e:	0039      	movs	r1, r7
 8004280:	f7ff ffac 	bl	80041dc <sbrk_aligned>
 8004284:	3001      	adds	r0, #1
 8004286:	d040      	beq.n	800430a <_malloc_r+0xea>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	19db      	adds	r3, r3, r7
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	6833      	ldr	r3, [r6, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	2a00      	cmp	r2, #0
 8004294:	d133      	bne.n	80042fe <_malloc_r+0xde>
 8004296:	9b00      	ldr	r3, [sp, #0]
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	e019      	b.n	80042d0 <_malloc_r+0xb0>
 800429c:	2b00      	cmp	r3, #0
 800429e:	dac9      	bge.n	8004234 <_malloc_r+0x14>
 80042a0:	230c      	movs	r3, #12
 80042a2:	602b      	str	r3, [r5, #0]
 80042a4:	2000      	movs	r0, #0
 80042a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042a8:	6821      	ldr	r1, [r4, #0]
 80042aa:	1bc9      	subs	r1, r1, r7
 80042ac:	d420      	bmi.n	80042f0 <_malloc_r+0xd0>
 80042ae:	290b      	cmp	r1, #11
 80042b0:	d90a      	bls.n	80042c8 <_malloc_r+0xa8>
 80042b2:	19e2      	adds	r2, r4, r7
 80042b4:	6027      	str	r7, [r4, #0]
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	d104      	bne.n	80042c4 <_malloc_r+0xa4>
 80042ba:	6032      	str	r2, [r6, #0]
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	6011      	str	r1, [r2, #0]
 80042c0:	6053      	str	r3, [r2, #4]
 80042c2:	e005      	b.n	80042d0 <_malloc_r+0xb0>
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e7f9      	b.n	80042bc <_malloc_r+0x9c>
 80042c8:	6862      	ldr	r2, [r4, #4]
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d10e      	bne.n	80042ec <_malloc_r+0xcc>
 80042ce:	6032      	str	r2, [r6, #0]
 80042d0:	0028      	movs	r0, r5
 80042d2:	f000 f82d 	bl	8004330 <__malloc_unlock>
 80042d6:	0020      	movs	r0, r4
 80042d8:	2207      	movs	r2, #7
 80042da:	300b      	adds	r0, #11
 80042dc:	1d23      	adds	r3, r4, #4
 80042de:	4390      	bics	r0, r2
 80042e0:	1ac2      	subs	r2, r0, r3
 80042e2:	4298      	cmp	r0, r3
 80042e4:	d0df      	beq.n	80042a6 <_malloc_r+0x86>
 80042e6:	1a1b      	subs	r3, r3, r0
 80042e8:	50a3      	str	r3, [r4, r2]
 80042ea:	e7dc      	b.n	80042a6 <_malloc_r+0x86>
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	e7ef      	b.n	80042d0 <_malloc_r+0xb0>
 80042f0:	0023      	movs	r3, r4
 80042f2:	6864      	ldr	r4, [r4, #4]
 80042f4:	e7a6      	b.n	8004244 <_malloc_r+0x24>
 80042f6:	9c00      	ldr	r4, [sp, #0]
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	e7ad      	b.n	800425a <_malloc_r+0x3a>
 80042fe:	001a      	movs	r2, r3
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	42a3      	cmp	r3, r4
 8004304:	d1fb      	bne.n	80042fe <_malloc_r+0xde>
 8004306:	2300      	movs	r3, #0
 8004308:	e7da      	b.n	80042c0 <_malloc_r+0xa0>
 800430a:	230c      	movs	r3, #12
 800430c:	0028      	movs	r0, r5
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	f000 f80e 	bl	8004330 <__malloc_unlock>
 8004314:	e7c6      	b.n	80042a4 <_malloc_r+0x84>
 8004316:	6007      	str	r7, [r0, #0]
 8004318:	e7da      	b.n	80042d0 <_malloc_r+0xb0>
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	200002a0 	.word	0x200002a0

08004320 <__malloc_lock>:
 8004320:	b510      	push	{r4, lr}
 8004322:	4802      	ldr	r0, [pc, #8]	@ (800432c <__malloc_lock+0xc>)
 8004324:	f7ff ff0e 	bl	8004144 <__retarget_lock_acquire_recursive>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000298 	.word	0x20000298

08004330 <__malloc_unlock>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4802      	ldr	r0, [pc, #8]	@ (800433c <__malloc_unlock+0xc>)
 8004334:	f7ff ff07 	bl	8004146 <__retarget_lock_release_recursive>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	20000298 	.word	0x20000298

08004340 <__ssputs_r>:
 8004340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004342:	688e      	ldr	r6, [r1, #8]
 8004344:	b085      	sub	sp, #20
 8004346:	001f      	movs	r7, r3
 8004348:	000c      	movs	r4, r1
 800434a:	680b      	ldr	r3, [r1, #0]
 800434c:	9002      	str	r0, [sp, #8]
 800434e:	9203      	str	r2, [sp, #12]
 8004350:	42be      	cmp	r6, r7
 8004352:	d830      	bhi.n	80043b6 <__ssputs_r+0x76>
 8004354:	210c      	movs	r1, #12
 8004356:	5e62      	ldrsh	r2, [r4, r1]
 8004358:	2190      	movs	r1, #144	@ 0x90
 800435a:	00c9      	lsls	r1, r1, #3
 800435c:	420a      	tst	r2, r1
 800435e:	d028      	beq.n	80043b2 <__ssputs_r+0x72>
 8004360:	2003      	movs	r0, #3
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	1a5b      	subs	r3, r3, r1
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	6963      	ldr	r3, [r4, #20]
 800436a:	4343      	muls	r3, r0
 800436c:	9801      	ldr	r0, [sp, #4]
 800436e:	0fdd      	lsrs	r5, r3, #31
 8004370:	18ed      	adds	r5, r5, r3
 8004372:	1c7b      	adds	r3, r7, #1
 8004374:	181b      	adds	r3, r3, r0
 8004376:	106d      	asrs	r5, r5, #1
 8004378:	42ab      	cmp	r3, r5
 800437a:	d900      	bls.n	800437e <__ssputs_r+0x3e>
 800437c:	001d      	movs	r5, r3
 800437e:	0552      	lsls	r2, r2, #21
 8004380:	d528      	bpl.n	80043d4 <__ssputs_r+0x94>
 8004382:	0029      	movs	r1, r5
 8004384:	9802      	ldr	r0, [sp, #8]
 8004386:	f7ff ff4b 	bl	8004220 <_malloc_r>
 800438a:	1e06      	subs	r6, r0, #0
 800438c:	d02c      	beq.n	80043e8 <__ssputs_r+0xa8>
 800438e:	9a01      	ldr	r2, [sp, #4]
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	f000 fade 	bl	8004952 <memcpy>
 8004396:	89a2      	ldrh	r2, [r4, #12]
 8004398:	4b18      	ldr	r3, [pc, #96]	@ (80043fc <__ssputs_r+0xbc>)
 800439a:	401a      	ands	r2, r3
 800439c:	2380      	movs	r3, #128	@ 0x80
 800439e:	4313      	orrs	r3, r2
 80043a0:	81a3      	strh	r3, [r4, #12]
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	6126      	str	r6, [r4, #16]
 80043a6:	18f6      	adds	r6, r6, r3
 80043a8:	6026      	str	r6, [r4, #0]
 80043aa:	003e      	movs	r6, r7
 80043ac:	6165      	str	r5, [r4, #20]
 80043ae:	1aed      	subs	r5, r5, r3
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	42be      	cmp	r6, r7
 80043b4:	d900      	bls.n	80043b8 <__ssputs_r+0x78>
 80043b6:	003e      	movs	r6, r7
 80043b8:	0032      	movs	r2, r6
 80043ba:	9903      	ldr	r1, [sp, #12]
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	f000 fa99 	bl	80048f4 <memmove>
 80043c2:	2000      	movs	r0, #0
 80043c4:	68a3      	ldr	r3, [r4, #8]
 80043c6:	1b9b      	subs	r3, r3, r6
 80043c8:	60a3      	str	r3, [r4, #8]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	199b      	adds	r3, r3, r6
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	b005      	add	sp, #20
 80043d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d4:	002a      	movs	r2, r5
 80043d6:	9802      	ldr	r0, [sp, #8]
 80043d8:	f000 fac4 	bl	8004964 <_realloc_r>
 80043dc:	1e06      	subs	r6, r0, #0
 80043de:	d1e0      	bne.n	80043a2 <__ssputs_r+0x62>
 80043e0:	6921      	ldr	r1, [r4, #16]
 80043e2:	9802      	ldr	r0, [sp, #8]
 80043e4:	f7ff feb0 	bl	8004148 <_free_r>
 80043e8:	230c      	movs	r3, #12
 80043ea:	2001      	movs	r0, #1
 80043ec:	9a02      	ldr	r2, [sp, #8]
 80043ee:	4240      	negs	r0, r0
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	89a2      	ldrh	r2, [r4, #12]
 80043f4:	3334      	adds	r3, #52	@ 0x34
 80043f6:	4313      	orrs	r3, r2
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	e7e9      	b.n	80043d0 <__ssputs_r+0x90>
 80043fc:	fffffb7f 	.word	0xfffffb7f

08004400 <_svfiprintf_r>:
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b0a1      	sub	sp, #132	@ 0x84
 8004404:	9003      	str	r0, [sp, #12]
 8004406:	001d      	movs	r5, r3
 8004408:	898b      	ldrh	r3, [r1, #12]
 800440a:	000f      	movs	r7, r1
 800440c:	0016      	movs	r6, r2
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	d511      	bpl.n	8004436 <_svfiprintf_r+0x36>
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10e      	bne.n	8004436 <_svfiprintf_r+0x36>
 8004418:	2140      	movs	r1, #64	@ 0x40
 800441a:	f7ff ff01 	bl	8004220 <_malloc_r>
 800441e:	6038      	str	r0, [r7, #0]
 8004420:	6138      	str	r0, [r7, #16]
 8004422:	2800      	cmp	r0, #0
 8004424:	d105      	bne.n	8004432 <_svfiprintf_r+0x32>
 8004426:	230c      	movs	r3, #12
 8004428:	9a03      	ldr	r2, [sp, #12]
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	2001      	movs	r0, #1
 800442e:	4240      	negs	r0, r0
 8004430:	e0cf      	b.n	80045d2 <_svfiprintf_r+0x1d2>
 8004432:	2340      	movs	r3, #64	@ 0x40
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	ac08      	add	r4, sp, #32
 800443a:	6163      	str	r3, [r4, #20]
 800443c:	3320      	adds	r3, #32
 800443e:	7663      	strb	r3, [r4, #25]
 8004440:	3310      	adds	r3, #16
 8004442:	76a3      	strb	r3, [r4, #26]
 8004444:	9507      	str	r5, [sp, #28]
 8004446:	0035      	movs	r5, r6
 8004448:	782b      	ldrb	r3, [r5, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <_svfiprintf_r+0x52>
 800444e:	2b25      	cmp	r3, #37	@ 0x25
 8004450:	d148      	bne.n	80044e4 <_svfiprintf_r+0xe4>
 8004452:	1bab      	subs	r3, r5, r6
 8004454:	9305      	str	r3, [sp, #20]
 8004456:	42b5      	cmp	r5, r6
 8004458:	d00b      	beq.n	8004472 <_svfiprintf_r+0x72>
 800445a:	0032      	movs	r2, r6
 800445c:	0039      	movs	r1, r7
 800445e:	9803      	ldr	r0, [sp, #12]
 8004460:	f7ff ff6e 	bl	8004340 <__ssputs_r>
 8004464:	3001      	adds	r0, #1
 8004466:	d100      	bne.n	800446a <_svfiprintf_r+0x6a>
 8004468:	e0ae      	b.n	80045c8 <_svfiprintf_r+0x1c8>
 800446a:	6963      	ldr	r3, [r4, #20]
 800446c:	9a05      	ldr	r2, [sp, #20]
 800446e:	189b      	adds	r3, r3, r2
 8004470:	6163      	str	r3, [r4, #20]
 8004472:	782b      	ldrb	r3, [r5, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d100      	bne.n	800447a <_svfiprintf_r+0x7a>
 8004478:	e0a6      	b.n	80045c8 <_svfiprintf_r+0x1c8>
 800447a:	2201      	movs	r2, #1
 800447c:	2300      	movs	r3, #0
 800447e:	4252      	negs	r2, r2
 8004480:	6062      	str	r2, [r4, #4]
 8004482:	a904      	add	r1, sp, #16
 8004484:	3254      	adds	r2, #84	@ 0x54
 8004486:	1852      	adds	r2, r2, r1
 8004488:	1c6e      	adds	r6, r5, #1
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	60e3      	str	r3, [r4, #12]
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	7013      	strb	r3, [r2, #0]
 8004492:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004494:	4b54      	ldr	r3, [pc, #336]	@ (80045e8 <_svfiprintf_r+0x1e8>)
 8004496:	2205      	movs	r2, #5
 8004498:	0018      	movs	r0, r3
 800449a:	7831      	ldrb	r1, [r6, #0]
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	f000 fa4d 	bl	800493c <memchr>
 80044a2:	1c75      	adds	r5, r6, #1
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d11f      	bne.n	80044e8 <_svfiprintf_r+0xe8>
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	06d3      	lsls	r3, r2, #27
 80044ac:	d504      	bpl.n	80044b8 <_svfiprintf_r+0xb8>
 80044ae:	2353      	movs	r3, #83	@ 0x53
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	185b      	adds	r3, r3, r1
 80044b4:	2120      	movs	r1, #32
 80044b6:	7019      	strb	r1, [r3, #0]
 80044b8:	0713      	lsls	r3, r2, #28
 80044ba:	d504      	bpl.n	80044c6 <_svfiprintf_r+0xc6>
 80044bc:	2353      	movs	r3, #83	@ 0x53
 80044be:	a904      	add	r1, sp, #16
 80044c0:	185b      	adds	r3, r3, r1
 80044c2:	212b      	movs	r1, #43	@ 0x2b
 80044c4:	7019      	strb	r1, [r3, #0]
 80044c6:	7833      	ldrb	r3, [r6, #0]
 80044c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ca:	d016      	beq.n	80044fa <_svfiprintf_r+0xfa>
 80044cc:	0035      	movs	r5, r6
 80044ce:	2100      	movs	r1, #0
 80044d0:	200a      	movs	r0, #10
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	782a      	ldrb	r2, [r5, #0]
 80044d6:	1c6e      	adds	r6, r5, #1
 80044d8:	3a30      	subs	r2, #48	@ 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d950      	bls.n	8004580 <_svfiprintf_r+0x180>
 80044de:	2900      	cmp	r1, #0
 80044e0:	d111      	bne.n	8004506 <_svfiprintf_r+0x106>
 80044e2:	e017      	b.n	8004514 <_svfiprintf_r+0x114>
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7af      	b.n	8004448 <_svfiprintf_r+0x48>
 80044e8:	9b05      	ldr	r3, [sp, #20]
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	1ac0      	subs	r0, r0, r3
 80044ee:	2301      	movs	r3, #1
 80044f0:	4083      	lsls	r3, r0
 80044f2:	4313      	orrs	r3, r2
 80044f4:	002e      	movs	r6, r5
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	e7cc      	b.n	8004494 <_svfiprintf_r+0x94>
 80044fa:	9b07      	ldr	r3, [sp, #28]
 80044fc:	1d19      	adds	r1, r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	9107      	str	r1, [sp, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	db01      	blt.n	800450a <_svfiprintf_r+0x10a>
 8004506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004508:	e004      	b.n	8004514 <_svfiprintf_r+0x114>
 800450a:	425b      	negs	r3, r3
 800450c:	60e3      	str	r3, [r4, #12]
 800450e:	2302      	movs	r3, #2
 8004510:	4313      	orrs	r3, r2
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	782b      	ldrb	r3, [r5, #0]
 8004516:	2b2e      	cmp	r3, #46	@ 0x2e
 8004518:	d10c      	bne.n	8004534 <_svfiprintf_r+0x134>
 800451a:	786b      	ldrb	r3, [r5, #1]
 800451c:	2b2a      	cmp	r3, #42	@ 0x2a
 800451e:	d134      	bne.n	800458a <_svfiprintf_r+0x18a>
 8004520:	9b07      	ldr	r3, [sp, #28]
 8004522:	3502      	adds	r5, #2
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9207      	str	r2, [sp, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da01      	bge.n	8004532 <_svfiprintf_r+0x132>
 800452e:	2301      	movs	r3, #1
 8004530:	425b      	negs	r3, r3
 8004532:	9309      	str	r3, [sp, #36]	@ 0x24
 8004534:	4e2d      	ldr	r6, [pc, #180]	@ (80045ec <_svfiprintf_r+0x1ec>)
 8004536:	2203      	movs	r2, #3
 8004538:	0030      	movs	r0, r6
 800453a:	7829      	ldrb	r1, [r5, #0]
 800453c:	f000 f9fe 	bl	800493c <memchr>
 8004540:	2800      	cmp	r0, #0
 8004542:	d006      	beq.n	8004552 <_svfiprintf_r+0x152>
 8004544:	2340      	movs	r3, #64	@ 0x40
 8004546:	1b80      	subs	r0, r0, r6
 8004548:	4083      	lsls	r3, r0
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	3501      	adds	r5, #1
 800454e:	4313      	orrs	r3, r2
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	7829      	ldrb	r1, [r5, #0]
 8004554:	2206      	movs	r2, #6
 8004556:	4826      	ldr	r0, [pc, #152]	@ (80045f0 <_svfiprintf_r+0x1f0>)
 8004558:	1c6e      	adds	r6, r5, #1
 800455a:	7621      	strb	r1, [r4, #24]
 800455c:	f000 f9ee 	bl	800493c <memchr>
 8004560:	2800      	cmp	r0, #0
 8004562:	d038      	beq.n	80045d6 <_svfiprintf_r+0x1d6>
 8004564:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <_svfiprintf_r+0x1f4>)
 8004566:	2b00      	cmp	r3, #0
 8004568:	d122      	bne.n	80045b0 <_svfiprintf_r+0x1b0>
 800456a:	2207      	movs	r2, #7
 800456c:	9b07      	ldr	r3, [sp, #28]
 800456e:	3307      	adds	r3, #7
 8004570:	4393      	bics	r3, r2
 8004572:	3308      	adds	r3, #8
 8004574:	9307      	str	r3, [sp, #28]
 8004576:	6963      	ldr	r3, [r4, #20]
 8004578:	9a04      	ldr	r2, [sp, #16]
 800457a:	189b      	adds	r3, r3, r2
 800457c:	6163      	str	r3, [r4, #20]
 800457e:	e762      	b.n	8004446 <_svfiprintf_r+0x46>
 8004580:	4343      	muls	r3, r0
 8004582:	0035      	movs	r5, r6
 8004584:	2101      	movs	r1, #1
 8004586:	189b      	adds	r3, r3, r2
 8004588:	e7a4      	b.n	80044d4 <_svfiprintf_r+0xd4>
 800458a:	2300      	movs	r3, #0
 800458c:	200a      	movs	r0, #10
 800458e:	0019      	movs	r1, r3
 8004590:	3501      	adds	r5, #1
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	782a      	ldrb	r2, [r5, #0]
 8004596:	1c6e      	adds	r6, r5, #1
 8004598:	3a30      	subs	r2, #48	@ 0x30
 800459a:	2a09      	cmp	r2, #9
 800459c:	d903      	bls.n	80045a6 <_svfiprintf_r+0x1a6>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0c8      	beq.n	8004534 <_svfiprintf_r+0x134>
 80045a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80045a4:	e7c6      	b.n	8004534 <_svfiprintf_r+0x134>
 80045a6:	4341      	muls	r1, r0
 80045a8:	0035      	movs	r5, r6
 80045aa:	2301      	movs	r3, #1
 80045ac:	1889      	adds	r1, r1, r2
 80045ae:	e7f1      	b.n	8004594 <_svfiprintf_r+0x194>
 80045b0:	aa07      	add	r2, sp, #28
 80045b2:	9200      	str	r2, [sp, #0]
 80045b4:	0021      	movs	r1, r4
 80045b6:	003a      	movs	r2, r7
 80045b8:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <_svfiprintf_r+0x1f8>)
 80045ba:	9803      	ldr	r0, [sp, #12]
 80045bc:	e000      	b.n	80045c0 <_svfiprintf_r+0x1c0>
 80045be:	bf00      	nop
 80045c0:	9004      	str	r0, [sp, #16]
 80045c2:	9b04      	ldr	r3, [sp, #16]
 80045c4:	3301      	adds	r3, #1
 80045c6:	d1d6      	bne.n	8004576 <_svfiprintf_r+0x176>
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045cc:	065b      	lsls	r3, r3, #25
 80045ce:	d500      	bpl.n	80045d2 <_svfiprintf_r+0x1d2>
 80045d0:	e72c      	b.n	800442c <_svfiprintf_r+0x2c>
 80045d2:	b021      	add	sp, #132	@ 0x84
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d6:	aa07      	add	r2, sp, #28
 80045d8:	9200      	str	r2, [sp, #0]
 80045da:	0021      	movs	r1, r4
 80045dc:	003a      	movs	r2, r7
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <_svfiprintf_r+0x1f8>)
 80045e0:	9803      	ldr	r0, [sp, #12]
 80045e2:	f000 f87b 	bl	80046dc <_printf_i>
 80045e6:	e7eb      	b.n	80045c0 <_svfiprintf_r+0x1c0>
 80045e8:	08004aa0 	.word	0x08004aa0
 80045ec:	08004aa6 	.word	0x08004aa6
 80045f0:	08004aaa 	.word	0x08004aaa
 80045f4:	00000000 	.word	0x00000000
 80045f8:	08004341 	.word	0x08004341

080045fc <_printf_common>:
 80045fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045fe:	0016      	movs	r6, r2
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	688a      	ldr	r2, [r1, #8]
 8004604:	690b      	ldr	r3, [r1, #16]
 8004606:	000c      	movs	r4, r1
 8004608:	9000      	str	r0, [sp, #0]
 800460a:	4293      	cmp	r3, r2
 800460c:	da00      	bge.n	8004610 <_printf_common+0x14>
 800460e:	0013      	movs	r3, r2
 8004610:	0022      	movs	r2, r4
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	3243      	adds	r2, #67	@ 0x43
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	2a00      	cmp	r2, #0
 800461a:	d001      	beq.n	8004620 <_printf_common+0x24>
 800461c:	3301      	adds	r3, #1
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	069b      	lsls	r3, r3, #26
 8004624:	d502      	bpl.n	800462c <_printf_common+0x30>
 8004626:	6833      	ldr	r3, [r6, #0]
 8004628:	3302      	adds	r3, #2
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	2306      	movs	r3, #6
 8004630:	0015      	movs	r5, r2
 8004632:	401d      	ands	r5, r3
 8004634:	421a      	tst	r2, r3
 8004636:	d027      	beq.n	8004688 <_printf_common+0x8c>
 8004638:	0023      	movs	r3, r4
 800463a:	3343      	adds	r3, #67	@ 0x43
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	4193      	sbcs	r3, r2
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	0692      	lsls	r2, r2, #26
 8004646:	d430      	bmi.n	80046aa <_printf_common+0xae>
 8004648:	0022      	movs	r2, r4
 800464a:	9901      	ldr	r1, [sp, #4]
 800464c:	9800      	ldr	r0, [sp, #0]
 800464e:	9d08      	ldr	r5, [sp, #32]
 8004650:	3243      	adds	r2, #67	@ 0x43
 8004652:	47a8      	blx	r5
 8004654:	3001      	adds	r0, #1
 8004656:	d025      	beq.n	80046a4 <_printf_common+0xa8>
 8004658:	2206      	movs	r2, #6
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	2500      	movs	r5, #0
 800465e:	4013      	ands	r3, r2
 8004660:	2b04      	cmp	r3, #4
 8004662:	d105      	bne.n	8004670 <_printf_common+0x74>
 8004664:	6833      	ldr	r3, [r6, #0]
 8004666:	68e5      	ldr	r5, [r4, #12]
 8004668:	1aed      	subs	r5, r5, r3
 800466a:	43eb      	mvns	r3, r5
 800466c:	17db      	asrs	r3, r3, #31
 800466e:	401d      	ands	r5, r3
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	6922      	ldr	r2, [r4, #16]
 8004674:	4293      	cmp	r3, r2
 8004676:	dd01      	ble.n	800467c <_printf_common+0x80>
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	18ed      	adds	r5, r5, r3
 800467c:	2600      	movs	r6, #0
 800467e:	42b5      	cmp	r5, r6
 8004680:	d120      	bne.n	80046c4 <_printf_common+0xc8>
 8004682:	2000      	movs	r0, #0
 8004684:	e010      	b.n	80046a8 <_printf_common+0xac>
 8004686:	3501      	adds	r5, #1
 8004688:	68e3      	ldr	r3, [r4, #12]
 800468a:	6832      	ldr	r2, [r6, #0]
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	42ab      	cmp	r3, r5
 8004690:	ddd2      	ble.n	8004638 <_printf_common+0x3c>
 8004692:	0022      	movs	r2, r4
 8004694:	2301      	movs	r3, #1
 8004696:	9901      	ldr	r1, [sp, #4]
 8004698:	9800      	ldr	r0, [sp, #0]
 800469a:	9f08      	ldr	r7, [sp, #32]
 800469c:	3219      	adds	r2, #25
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	d1f0      	bne.n	8004686 <_printf_common+0x8a>
 80046a4:	2001      	movs	r0, #1
 80046a6:	4240      	negs	r0, r0
 80046a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046aa:	2030      	movs	r0, #48	@ 0x30
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	3143      	adds	r1, #67	@ 0x43
 80046b0:	7008      	strb	r0, [r1, #0]
 80046b2:	0021      	movs	r1, r4
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	3145      	adds	r1, #69	@ 0x45
 80046b8:	7809      	ldrb	r1, [r1, #0]
 80046ba:	18a2      	adds	r2, r4, r2
 80046bc:	3243      	adds	r2, #67	@ 0x43
 80046be:	3302      	adds	r3, #2
 80046c0:	7011      	strb	r1, [r2, #0]
 80046c2:	e7c1      	b.n	8004648 <_printf_common+0x4c>
 80046c4:	0022      	movs	r2, r4
 80046c6:	2301      	movs	r3, #1
 80046c8:	9901      	ldr	r1, [sp, #4]
 80046ca:	9800      	ldr	r0, [sp, #0]
 80046cc:	9f08      	ldr	r7, [sp, #32]
 80046ce:	321a      	adds	r2, #26
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	d0e6      	beq.n	80046a4 <_printf_common+0xa8>
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7d1      	b.n	800467e <_printf_common+0x82>
	...

080046dc <_printf_i>:
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046de:	b08b      	sub	sp, #44	@ 0x2c
 80046e0:	9206      	str	r2, [sp, #24]
 80046e2:	000a      	movs	r2, r1
 80046e4:	3243      	adds	r2, #67	@ 0x43
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	9005      	str	r0, [sp, #20]
 80046ea:	9203      	str	r2, [sp, #12]
 80046ec:	7e0a      	ldrb	r2, [r1, #24]
 80046ee:	000c      	movs	r4, r1
 80046f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046f2:	2a78      	cmp	r2, #120	@ 0x78
 80046f4:	d809      	bhi.n	800470a <_printf_i+0x2e>
 80046f6:	2a62      	cmp	r2, #98	@ 0x62
 80046f8:	d80b      	bhi.n	8004712 <_printf_i+0x36>
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	d100      	bne.n	8004700 <_printf_i+0x24>
 80046fe:	e0ba      	b.n	8004876 <_printf_i+0x19a>
 8004700:	497a      	ldr	r1, [pc, #488]	@ (80048ec <_printf_i+0x210>)
 8004702:	9104      	str	r1, [sp, #16]
 8004704:	2a58      	cmp	r2, #88	@ 0x58
 8004706:	d100      	bne.n	800470a <_printf_i+0x2e>
 8004708:	e08e      	b.n	8004828 <_printf_i+0x14c>
 800470a:	0025      	movs	r5, r4
 800470c:	3542      	adds	r5, #66	@ 0x42
 800470e:	702a      	strb	r2, [r5, #0]
 8004710:	e022      	b.n	8004758 <_printf_i+0x7c>
 8004712:	0010      	movs	r0, r2
 8004714:	3863      	subs	r0, #99	@ 0x63
 8004716:	2815      	cmp	r0, #21
 8004718:	d8f7      	bhi.n	800470a <_printf_i+0x2e>
 800471a:	f7fb fcfd 	bl	8000118 <__gnu_thumb1_case_shi>
 800471e:	0016      	.short	0x0016
 8004720:	fff6001f 	.word	0xfff6001f
 8004724:	fff6fff6 	.word	0xfff6fff6
 8004728:	001ffff6 	.word	0x001ffff6
 800472c:	fff6fff6 	.word	0xfff6fff6
 8004730:	fff6fff6 	.word	0xfff6fff6
 8004734:	0036009f 	.word	0x0036009f
 8004738:	fff6007e 	.word	0xfff6007e
 800473c:	00b0fff6 	.word	0x00b0fff6
 8004740:	0036fff6 	.word	0x0036fff6
 8004744:	fff6fff6 	.word	0xfff6fff6
 8004748:	0082      	.short	0x0082
 800474a:	0025      	movs	r5, r4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	3542      	adds	r5, #66	@ 0x42
 8004750:	1d11      	adds	r1, r2, #4
 8004752:	6019      	str	r1, [r3, #0]
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	702b      	strb	r3, [r5, #0]
 8004758:	2301      	movs	r3, #1
 800475a:	e09e      	b.n	800489a <_printf_i+0x1be>
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	6809      	ldr	r1, [r1, #0]
 8004760:	1d02      	adds	r2, r0, #4
 8004762:	060d      	lsls	r5, r1, #24
 8004764:	d50b      	bpl.n	800477e <_printf_i+0xa2>
 8004766:	6806      	ldr	r6, [r0, #0]
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	2e00      	cmp	r6, #0
 800476c:	da03      	bge.n	8004776 <_printf_i+0x9a>
 800476e:	232d      	movs	r3, #45	@ 0x2d
 8004770:	9a03      	ldr	r2, [sp, #12]
 8004772:	4276      	negs	r6, r6
 8004774:	7013      	strb	r3, [r2, #0]
 8004776:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <_printf_i+0x210>)
 8004778:	270a      	movs	r7, #10
 800477a:	9304      	str	r3, [sp, #16]
 800477c:	e018      	b.n	80047b0 <_printf_i+0xd4>
 800477e:	6806      	ldr	r6, [r0, #0]
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	0649      	lsls	r1, r1, #25
 8004784:	d5f1      	bpl.n	800476a <_printf_i+0x8e>
 8004786:	b236      	sxth	r6, r6
 8004788:	e7ef      	b.n	800476a <_printf_i+0x8e>
 800478a:	6808      	ldr	r0, [r1, #0]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	c940      	ldmia	r1!, {r6}
 8004790:	0605      	lsls	r5, r0, #24
 8004792:	d402      	bmi.n	800479a <_printf_i+0xbe>
 8004794:	0640      	lsls	r0, r0, #25
 8004796:	d500      	bpl.n	800479a <_printf_i+0xbe>
 8004798:	b2b6      	uxth	r6, r6
 800479a:	6019      	str	r1, [r3, #0]
 800479c:	4b53      	ldr	r3, [pc, #332]	@ (80048ec <_printf_i+0x210>)
 800479e:	270a      	movs	r7, #10
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	2a6f      	cmp	r2, #111	@ 0x6f
 80047a4:	d100      	bne.n	80047a8 <_printf_i+0xcc>
 80047a6:	3f02      	subs	r7, #2
 80047a8:	0023      	movs	r3, r4
 80047aa:	2200      	movs	r2, #0
 80047ac:	3343      	adds	r3, #67	@ 0x43
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	60a3      	str	r3, [r4, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db06      	blt.n	80047c6 <_printf_i+0xea>
 80047b8:	2104      	movs	r1, #4
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	9d03      	ldr	r5, [sp, #12]
 80047be:	438a      	bics	r2, r1
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	4333      	orrs	r3, r6
 80047c4:	d00c      	beq.n	80047e0 <_printf_i+0x104>
 80047c6:	9d03      	ldr	r5, [sp, #12]
 80047c8:	0030      	movs	r0, r6
 80047ca:	0039      	movs	r1, r7
 80047cc:	f7fb fd34 	bl	8000238 <__aeabi_uidivmod>
 80047d0:	9b04      	ldr	r3, [sp, #16]
 80047d2:	3d01      	subs	r5, #1
 80047d4:	5c5b      	ldrb	r3, [r3, r1]
 80047d6:	702b      	strb	r3, [r5, #0]
 80047d8:	0033      	movs	r3, r6
 80047da:	0006      	movs	r6, r0
 80047dc:	429f      	cmp	r7, r3
 80047de:	d9f3      	bls.n	80047c8 <_printf_i+0xec>
 80047e0:	2f08      	cmp	r7, #8
 80047e2:	d109      	bne.n	80047f8 <_printf_i+0x11c>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07db      	lsls	r3, r3, #31
 80047e8:	d506      	bpl.n	80047f8 <_printf_i+0x11c>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	dc02      	bgt.n	80047f8 <_printf_i+0x11c>
 80047f2:	2330      	movs	r3, #48	@ 0x30
 80047f4:	3d01      	subs	r5, #1
 80047f6:	702b      	strb	r3, [r5, #0]
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1b5b      	subs	r3, r3, r5
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	9b07      	ldr	r3, [sp, #28]
 8004800:	0021      	movs	r1, r4
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	9805      	ldr	r0, [sp, #20]
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	aa09      	add	r2, sp, #36	@ 0x24
 800480a:	f7ff fef7 	bl	80045fc <_printf_common>
 800480e:	3001      	adds	r0, #1
 8004810:	d148      	bne.n	80048a4 <_printf_i+0x1c8>
 8004812:	2001      	movs	r0, #1
 8004814:	4240      	negs	r0, r0
 8004816:	b00b      	add	sp, #44	@ 0x2c
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	2220      	movs	r2, #32
 800481c:	6809      	ldr	r1, [r1, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	2278      	movs	r2, #120	@ 0x78
 8004824:	4932      	ldr	r1, [pc, #200]	@ (80048f0 <_printf_i+0x214>)
 8004826:	9104      	str	r1, [sp, #16]
 8004828:	0021      	movs	r1, r4
 800482a:	3145      	adds	r1, #69	@ 0x45
 800482c:	700a      	strb	r2, [r1, #0]
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	c940      	ldmia	r1!, {r6}
 8004834:	0610      	lsls	r0, r2, #24
 8004836:	d402      	bmi.n	800483e <_printf_i+0x162>
 8004838:	0650      	lsls	r0, r2, #25
 800483a:	d500      	bpl.n	800483e <_printf_i+0x162>
 800483c:	b2b6      	uxth	r6, r6
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	07d3      	lsls	r3, r2, #31
 8004842:	d502      	bpl.n	800484a <_printf_i+0x16e>
 8004844:	2320      	movs	r3, #32
 8004846:	4313      	orrs	r3, r2
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	2e00      	cmp	r6, #0
 800484c:	d001      	beq.n	8004852 <_printf_i+0x176>
 800484e:	2710      	movs	r7, #16
 8004850:	e7aa      	b.n	80047a8 <_printf_i+0xcc>
 8004852:	2220      	movs	r2, #32
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	4393      	bics	r3, r2
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	e7f8      	b.n	800484e <_printf_i+0x172>
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	680d      	ldr	r5, [r1, #0]
 8004860:	1d10      	adds	r0, r2, #4
 8004862:	6949      	ldr	r1, [r1, #20]
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	062e      	lsls	r6, r5, #24
 800486a:	d501      	bpl.n	8004870 <_printf_i+0x194>
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	e002      	b.n	8004876 <_printf_i+0x19a>
 8004870:	066d      	lsls	r5, r5, #25
 8004872:	d5fb      	bpl.n	800486c <_printf_i+0x190>
 8004874:	8019      	strh	r1, [r3, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	9d03      	ldr	r5, [sp, #12]
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	e7bf      	b.n	80047fe <_printf_i+0x122>
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	1d11      	adds	r1, r2, #4
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	6815      	ldr	r5, [r2, #0]
 8004886:	2100      	movs	r1, #0
 8004888:	0028      	movs	r0, r5
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	f000 f856 	bl	800493c <memchr>
 8004890:	2800      	cmp	r0, #0
 8004892:	d001      	beq.n	8004898 <_printf_i+0x1bc>
 8004894:	1b40      	subs	r0, r0, r5
 8004896:	6060      	str	r0, [r4, #4]
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	2300      	movs	r3, #0
 800489e:	9a03      	ldr	r2, [sp, #12]
 80048a0:	7013      	strb	r3, [r2, #0]
 80048a2:	e7ac      	b.n	80047fe <_printf_i+0x122>
 80048a4:	002a      	movs	r2, r5
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	9906      	ldr	r1, [sp, #24]
 80048aa:	9805      	ldr	r0, [sp, #20]
 80048ac:	9d07      	ldr	r5, [sp, #28]
 80048ae:	47a8      	blx	r5
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0ae      	beq.n	8004812 <_printf_i+0x136>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	079b      	lsls	r3, r3, #30
 80048b8:	d415      	bmi.n	80048e6 <_printf_i+0x20a>
 80048ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048bc:	68e0      	ldr	r0, [r4, #12]
 80048be:	4298      	cmp	r0, r3
 80048c0:	daa9      	bge.n	8004816 <_printf_i+0x13a>
 80048c2:	0018      	movs	r0, r3
 80048c4:	e7a7      	b.n	8004816 <_printf_i+0x13a>
 80048c6:	0022      	movs	r2, r4
 80048c8:	2301      	movs	r3, #1
 80048ca:	9906      	ldr	r1, [sp, #24]
 80048cc:	9805      	ldr	r0, [sp, #20]
 80048ce:	9e07      	ldr	r6, [sp, #28]
 80048d0:	3219      	adds	r2, #25
 80048d2:	47b0      	blx	r6
 80048d4:	3001      	adds	r0, #1
 80048d6:	d09c      	beq.n	8004812 <_printf_i+0x136>
 80048d8:	3501      	adds	r5, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dcf0      	bgt.n	80048c6 <_printf_i+0x1ea>
 80048e4:	e7e9      	b.n	80048ba <_printf_i+0x1de>
 80048e6:	2500      	movs	r5, #0
 80048e8:	e7f7      	b.n	80048da <_printf_i+0x1fe>
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	08004ab1 	.word	0x08004ab1
 80048f0:	08004ac2 	.word	0x08004ac2

080048f4 <memmove>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4288      	cmp	r0, r1
 80048f8:	d902      	bls.n	8004900 <memmove+0xc>
 80048fa:	188b      	adds	r3, r1, r2
 80048fc:	4298      	cmp	r0, r3
 80048fe:	d308      	bcc.n	8004912 <memmove+0x1e>
 8004900:	2300      	movs	r3, #0
 8004902:	429a      	cmp	r2, r3
 8004904:	d007      	beq.n	8004916 <memmove+0x22>
 8004906:	5ccc      	ldrb	r4, [r1, r3]
 8004908:	54c4      	strb	r4, [r0, r3]
 800490a:	3301      	adds	r3, #1
 800490c:	e7f9      	b.n	8004902 <memmove+0xe>
 800490e:	5c8b      	ldrb	r3, [r1, r2]
 8004910:	5483      	strb	r3, [r0, r2]
 8004912:	3a01      	subs	r2, #1
 8004914:	d2fb      	bcs.n	800490e <memmove+0x1a>
 8004916:	bd10      	pop	{r4, pc}

08004918 <_sbrk_r>:
 8004918:	2300      	movs	r3, #0
 800491a:	b570      	push	{r4, r5, r6, lr}
 800491c:	4d06      	ldr	r5, [pc, #24]	@ (8004938 <_sbrk_r+0x20>)
 800491e:	0004      	movs	r4, r0
 8004920:	0008      	movs	r0, r1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7fc f830 	bl	8000988 <_sbrk>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d103      	bne.n	8004934 <_sbrk_r+0x1c>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <_sbrk_r+0x1c>
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	20000294 	.word	0x20000294

0800493c <memchr>:
 800493c:	b2c9      	uxtb	r1, r1
 800493e:	1882      	adds	r2, r0, r2
 8004940:	4290      	cmp	r0, r2
 8004942:	d101      	bne.n	8004948 <memchr+0xc>
 8004944:	2000      	movs	r0, #0
 8004946:	4770      	bx	lr
 8004948:	7803      	ldrb	r3, [r0, #0]
 800494a:	428b      	cmp	r3, r1
 800494c:	d0fb      	beq.n	8004946 <memchr+0xa>
 800494e:	3001      	adds	r0, #1
 8004950:	e7f6      	b.n	8004940 <memchr+0x4>

08004952 <memcpy>:
 8004952:	2300      	movs	r3, #0
 8004954:	b510      	push	{r4, lr}
 8004956:	429a      	cmp	r2, r3
 8004958:	d100      	bne.n	800495c <memcpy+0xa>
 800495a:	bd10      	pop	{r4, pc}
 800495c:	5ccc      	ldrb	r4, [r1, r3]
 800495e:	54c4      	strb	r4, [r0, r3]
 8004960:	3301      	adds	r3, #1
 8004962:	e7f8      	b.n	8004956 <memcpy+0x4>

08004964 <_realloc_r>:
 8004964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004966:	0006      	movs	r6, r0
 8004968:	000c      	movs	r4, r1
 800496a:	0015      	movs	r5, r2
 800496c:	2900      	cmp	r1, #0
 800496e:	d105      	bne.n	800497c <_realloc_r+0x18>
 8004970:	0011      	movs	r1, r2
 8004972:	f7ff fc55 	bl	8004220 <_malloc_r>
 8004976:	0004      	movs	r4, r0
 8004978:	0020      	movs	r0, r4
 800497a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800497c:	2a00      	cmp	r2, #0
 800497e:	d103      	bne.n	8004988 <_realloc_r+0x24>
 8004980:	f7ff fbe2 	bl	8004148 <_free_r>
 8004984:	002c      	movs	r4, r5
 8004986:	e7f7      	b.n	8004978 <_realloc_r+0x14>
 8004988:	f000 f81c 	bl	80049c4 <_malloc_usable_size_r>
 800498c:	0007      	movs	r7, r0
 800498e:	4285      	cmp	r5, r0
 8004990:	d802      	bhi.n	8004998 <_realloc_r+0x34>
 8004992:	0843      	lsrs	r3, r0, #1
 8004994:	42ab      	cmp	r3, r5
 8004996:	d3ef      	bcc.n	8004978 <_realloc_r+0x14>
 8004998:	0029      	movs	r1, r5
 800499a:	0030      	movs	r0, r6
 800499c:	f7ff fc40 	bl	8004220 <_malloc_r>
 80049a0:	9001      	str	r0, [sp, #4]
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d101      	bne.n	80049aa <_realloc_r+0x46>
 80049a6:	9c01      	ldr	r4, [sp, #4]
 80049a8:	e7e6      	b.n	8004978 <_realloc_r+0x14>
 80049aa:	002a      	movs	r2, r5
 80049ac:	42bd      	cmp	r5, r7
 80049ae:	d900      	bls.n	80049b2 <_realloc_r+0x4e>
 80049b0:	003a      	movs	r2, r7
 80049b2:	0021      	movs	r1, r4
 80049b4:	9801      	ldr	r0, [sp, #4]
 80049b6:	f7ff ffcc 	bl	8004952 <memcpy>
 80049ba:	0021      	movs	r1, r4
 80049bc:	0030      	movs	r0, r6
 80049be:	f7ff fbc3 	bl	8004148 <_free_r>
 80049c2:	e7f0      	b.n	80049a6 <_realloc_r+0x42>

080049c4 <_malloc_usable_size_r>:
 80049c4:	1f0b      	subs	r3, r1, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1f18      	subs	r0, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da01      	bge.n	80049d2 <_malloc_usable_size_r+0xe>
 80049ce:	580b      	ldr	r3, [r1, r0]
 80049d0:	18c0      	adds	r0, r0, r3
 80049d2:	4770      	bx	lr

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
