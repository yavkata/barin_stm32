
STM32L010RBT6_MP2760.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003678  08003678  00004678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e4  080036e4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036ec  080036ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003700  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003700  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b384  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af2  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00011eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000790  00000000  00000000  00012858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104d7  00000000  00000000  00012fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc21  00000000  00000000  000234bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063384  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00093464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  000934a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000956bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003660 	.word	0x08003660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003660 	.word	0x08003660

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fa50 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f808 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f8e4 	bl	8000624 <MX_GPIO_Init>
  MX_I2C1_Init();
 800045c:	f000 f872 	bl	8000544 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000460:	f000 f8b0 	bl	80005c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	e7fd      	b.n	8000464 <main+0x18>

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b099      	sub	sp, #100	@ 0x64
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	242c      	movs	r4, #44	@ 0x2c
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2334      	movs	r3, #52	@ 0x34
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 f8c5 	bl	8003608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	2318      	movs	r3, #24
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f003 f8bd 	bl	8003608 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048e:	003b      	movs	r3, r7
 8000490:	0018      	movs	r0, r3
 8000492:	2318      	movs	r3, #24
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f003 f8b6 	bl	8003608 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <SystemClock_Config+0xd4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a27      	ldr	r2, [pc, #156]	@ (8000540 <SystemClock_Config+0xd8>)
 80004a2:	401a      	ands	r2, r3
 80004a4:	4b25      	ldr	r3, [pc, #148]	@ (800053c <SystemClock_Config+0xd4>)
 80004a6:	2180      	movs	r1, #128	@ 0x80
 80004a8:	0109      	lsls	r1, r1, #4
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004ae:	0021      	movs	r1, r4
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2210      	movs	r2, #16
 80004b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2201      	movs	r2, #1
 80004ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	22a0      	movs	r2, #160	@ 0xa0
 80004c6:	0212      	lsls	r2, r2, #8
 80004c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fd1e 	bl	8001f14 <HAL_RCC_OscConfig>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004dc:	f000 f8d8 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	2118      	movs	r1, #24
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	220f      	movs	r2, #15
 80004e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2100      	movs	r1, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f002 f881 	bl	800260c <HAL_RCC_ClockConfig>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800050e:	f000 f8bf 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000512:	003b      	movs	r3, r7
 8000514:	220a      	movs	r2, #10
 8000516:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000524:	003b      	movs	r3, r7
 8000526:	0018      	movs	r0, r3
 8000528:	f002 fa74 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000530:	f000 f8ae 	bl	8000690 <Error_Handler>
  }
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b019      	add	sp, #100	@ 0x64
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	40007000 	.word	0x40007000
 8000540:	ffffe7ff 	.word	0xffffe7ff

08000544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000548:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_I2C1_Init+0x78>)
 800054a:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <MX_I2C1_Init+0x7c>)
 800054c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000550:	22c1      	movs	r2, #193	@ 0xc1
 8000552:	00d2      	lsls	r2, r2, #3
 8000554:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_I2C1_Init+0x78>)
 800055e:	2201      	movs	r2, #1
 8000560:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000568:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_I2C1_Init+0x78>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_I2C1_Init+0x78>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000580:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fcfc 	bl	8000f80 <HAL_I2C_Init>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800058c:	f000 f880 	bl	8000690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <MX_I2C1_Init+0x78>)
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fc25 	bl	8001de4 <HAL_I2CEx_ConfigAnalogFilter>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800059e:	f000 f877 	bl	8000690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_I2C1_Init+0x78>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fc68 	bl	8001e7c <HAL_I2CEx_ConfigDigitalFilter>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005b0:	f000 f86e 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40005400 	.word	0x40005400

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	@ (8000620 <MX_USART2_UART_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ce:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005d0:	22e1      	movs	r2, #225	@ 0xe1
 80005d2:	0252      	lsls	r2, r2, #9
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4b05      	ldr	r3, [pc, #20]	@ (800061c <MX_USART2_UART_Init+0x58>)
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fb2f 	bl	8002c6c <HAL_UART_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f83d 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000007c 	.word	0x2000007c
 8000620:	40004400 	.word	0x40004400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	0018      	movs	r0, r3
 800062e:	2314      	movs	r3, #20
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 ffe8 	bl	8003608 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_GPIO_Init+0x68>)
 800063a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_GPIO_Init+0x68>)
 800063e:	2101      	movs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_GPIO_Init+0x68>)
 8000646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000648:	2201      	movs	r2, #1
 800064a:	4013      	ands	r3, r2
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	22c0      	movs	r2, #192	@ 0xc0
 8000654:	0152      	lsls	r2, r2, #5
 8000656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2284      	movs	r2, #132	@ 0x84
 800065c:	0392      	lsls	r2, r2, #14
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	23a0      	movs	r3, #160	@ 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fae2 	bl	8000c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2007      	movs	r0, #7
 800067a:	f000 fa57 	bl	8000b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800067e:	2007      	movs	r0, #7
 8000680:	f000 fa69 	bl	8000b56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b006      	add	sp, #24
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <HAL_MspInit+0x24>)
 80006a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_MspInit+0x24>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <HAL_MspInit+0x24>)
 80006ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <HAL_MspInit+0x24>)
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	0549      	lsls	r1, r1, #21
 80006b6:	430a      	orrs	r2, r1
 80006b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	@ 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	240c      	movs	r4, #12
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f002 ff96 	bl	8003608 <memset>
  if(hi2c->Instance==I2C1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <HAL_I2C_MspInit+0x90>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d132      	bne.n	800074c <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_I2C_MspInit+0x94>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <HAL_I2C_MspInit+0x94>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <HAL_I2C_MspInit+0x94>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	22c0      	movs	r2, #192	@ 0xc0
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2212      	movs	r2, #18
 800070c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2203      	movs	r2, #3
 8000718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2206      	movs	r2, #6
 800071e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	187a      	adds	r2, r7, r1
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa85 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_I2C_MspInit+0x94>)
 8000730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_I2C_MspInit+0x94>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0389      	lsls	r1, r1, #14
 8000738:	430a      	orrs	r2, r1
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2017      	movs	r0, #23
 8000742:	f000 f9f3 	bl	8000b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000746:	2017      	movs	r0, #23
 8000748:	f000 fa05 	bl	8000b56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b009      	add	sp, #36	@ 0x24
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	40005400 	.word	0x40005400
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	240c      	movs	r4, #12
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f002 ff4a 	bl	8003608 <memset>
  if(huart->Instance==USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <HAL_UART_MspInit+0x80>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d129      	bne.n	80007d2 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_UART_MspInit+0x84>)
 8000780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_UART_MspInit+0x84>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_UART_MspInit+0x84>)
 800078e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <HAL_UART_MspInit+0x84>)
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_UART_MspInit+0x84>)
 800079a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079c:	2201      	movs	r2, #1
 800079e:	4013      	ands	r3, r2
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	220c      	movs	r2, #12
 80007aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2204      	movs	r2, #4
 80007c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	187a      	adds	r2, r7, r1
 80007c6:	23a0      	movs	r3, #160	@ 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fa33 	bl	8000c38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b009      	add	sp, #36	@ 0x24
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8c6 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800081a:	2380      	movs	r3, #128	@ 0x80
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fb88 	bl	8000f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fb83 	bl	8000f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <I2C1_IRQHandler+0x2c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	23e0      	movs	r3, #224	@ 0xe0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	4013      	ands	r3, r2
 8000844:	d004      	beq.n	8000850 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <I2C1_IRQHandler+0x2c>)
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fc59 	bl	8001100 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800084e:	e003      	b.n	8000858 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <I2C1_IRQHandler+0x2c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fc3a 	bl	80010cc <HAL_I2C_EV_IRQHandler>
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	20000028 	.word	0x20000028

08000864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000870:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000872:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000874:	f7ff fff6 	bl	8000864 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000878:	4812      	ldr	r0, [pc, #72]	@ (80008c4 <LoopForever+0x6>)
    LDR R1, [R0]
 800087a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800087c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <LoopForever+0xa>)
    CMP R1, R2
 8000880:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000882:	d105      	bne.n	8000890 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000884:	4811      	ldr	r0, [pc, #68]	@ (80008cc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000886:	4912      	ldr	r1, [pc, #72]	@ (80008d0 <LoopForever+0x12>)
    STR R1, [R0]
 8000888:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800088a:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800088c:	4912      	ldr	r1, [pc, #72]	@ (80008d8 <LoopForever+0x1a>)
    STR R1, [R0]
 800088e:	6001      	str	r1, [r0, #0]

08000890 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	4812      	ldr	r0, [pc, #72]	@ (80008dc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000892:	4913      	ldr	r1, [pc, #76]	@ (80008e0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <LoopForever+0x26>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008a8:	4c10      	ldr	r4, [pc, #64]	@ (80008ec <LoopForever+0x2e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 feaf 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fdc7 	bl	800044c <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
   ldr   r0, =_estack
 80008c0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80008c4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008c8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80008cc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80008d0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008d4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008d8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	080036f4 	.word	0x080036f4
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	20000108 	.word	0x20000108

080008f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>
	...

080008f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_Init+0x3c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_Init+0x3c>)
 8000906:	2140      	movs	r1, #64	@ 0x40
 8000908:	430a      	orrs	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f811 	bl	8000934 <HAL_InitTick>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d003      	beq.n	800091e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e001      	b.n	8000922 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091e:	f7ff febd 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_InitTick+0x5c>)
 800093e:	681c      	ldr	r4, [r3, #0]
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_InitTick+0x60>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	0019      	movs	r1, r3
 8000946:	23fa      	movs	r3, #250	@ 0xfa
 8000948:	0098      	lsls	r0, r3, #2
 800094a:	f7ff fbdd 	bl	8000108 <__udivsi3>
 800094e:	0003      	movs	r3, r0
 8000950:	0019      	movs	r1, r3
 8000952:	0020      	movs	r0, r4
 8000954:	f7ff fbd8 	bl	8000108 <__udivsi3>
 8000958:	0003      	movs	r3, r0
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f90b 	bl	8000b76 <HAL_SYSTICK_Config>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e00f      	b.n	8000988 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d80b      	bhi.n	8000986 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2301      	movs	r3, #1
 8000972:	425b      	negs	r3, r3
 8000974:	2200      	movs	r2, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f8d8 	bl	8000b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_InitTick+0x64>)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b003      	add	sp, #12
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	18d2      	adds	r2, r2, r3
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <HAL_IncTick+0x20>)
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000104 	.word	0x20000104

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000104 	.word	0x20000104

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009e6:	d809      	bhi.n	80009fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	231f      	movs	r3, #31
 80009f0:	401a      	ands	r2, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <__NVIC_EnableIRQ+0x30>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	4091      	lsls	r1, r2
 80009f8:	000a      	movs	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
  }
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a1c:	d828      	bhi.n	8000a70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000adc <__NVIC_SetPriority+0xd4>)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	33c0      	adds	r3, #192	@ 0xc0
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	589b      	ldr	r3, [r3, r2]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	@ 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	@ 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	481f      	ldr	r0, [pc, #124]	@ (8000adc <__NVIC_SetPriority+0xd4>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	33c0      	adds	r3, #192	@ 0xc0
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6e:	e031      	b.n	8000ad4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0019      	movs	r1, r3
 8000a78:	230f      	movs	r3, #15
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3306      	adds	r3, #6
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1dfa      	adds	r2, r7, #7
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	400a      	ands	r2, r1
 8000a94:	00d2      	lsls	r2, r2, #3
 8000a96:	21ff      	movs	r1, #255	@ 0xff
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	43d2      	mvns	r2, r2
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	22ff      	movs	r2, #255	@ 0xff
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	001c      	movs	r4, r3
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	3306      	adds	r3, #6
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18c3      	adds	r3, r0, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b003      	add	sp, #12
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	045b      	lsls	r3, r3, #17
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d301      	bcc.n	8000afc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af8:	2301      	movs	r3, #1
 8000afa:	e010      	b.n	8000b1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <SysTick_Config+0x44>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	3a01      	subs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2103      	movs	r1, #3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff ff7c 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SysTick_Config+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <SysTick_Config+0x44>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	210f      	movs	r1, #15
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	1c02      	adds	r2, r0, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ff5d 	bl	8000a08 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff ff33 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ffaf 	bl	8000ae4 <SysTick_Config>
 8000b86:	0003      	movs	r3, r0
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b98:	210f      	movs	r1, #15
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2225      	movs	r2, #37	@ 0x25
 8000ba4:	5c9b      	ldrb	r3, [r3, r2]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d006      	beq.n	8000bba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e02a      	b.n	8000c10 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	210e      	movs	r1, #14
 8000bc6:	438a      	bics	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	221c      	movs	r2, #28
 8000be0:	401a      	ands	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	2101      	movs	r1, #1
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2225      	movs	r2, #37	@ 0x25
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2224      	movs	r2, #36	@ 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	4798      	blx	r3
    }
  }
  return status;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
}
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2225      	movs	r2, #37	@ 0x25
 8000c2a:	5c9b      	ldrb	r3, [r3, r2]
 8000c2c:	b2db      	uxtb	r3, r3
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c4e:	e155      	b.n	8000efc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <HAL_GPIO_Init+0x30>
 8000c66:	e146      	b.n	8000ef6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	43da      	mvns	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	2201      	movs	r2, #1
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	58d3      	ldr	r3, [r2, r3]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2107      	movs	r1, #7
 8000d56:	400b      	ands	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2203      	movs	r2, #3
 8000d90:	401a      	ands	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	23c0      	movs	r3, #192	@ 0xc0
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d100      	bne.n	8000db4 <HAL_GPIO_Init+0x17c>
 8000db2:	e0a0      	b.n	8000ef6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b57      	ldr	r3, [pc, #348]	@ (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db8:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <HAL_GPIO_Init+0x2dc>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc0:	4a55      	ldr	r2, [pc, #340]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	589b      	ldr	r3, [r3, r2]
 8000dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	23a0      	movs	r3, #160	@ 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x1f6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x1f2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1ee>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1ea>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <HAL_GPIO_Init+0x2f0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1e6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a46      	ldr	r2, [pc, #280]	@ (8000f2c <HAL_GPIO_Init+0x2f4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1e2>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e00a      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x1f8>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	2103      	movs	r1, #3
 8000e34:	400a      	ands	r2, r1
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	4935      	ldr	r1, [pc, #212]	@ (8000f18 <HAL_GPIO_Init+0x2e0>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	035b      	lsls	r3, r3, #13
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	039b      	lsls	r3, r3, #14
 8000e90:	4013      	ands	r3, r2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	029b      	lsls	r3, r3, #10
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	025b      	lsls	r3, r3, #9
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	1e13      	subs	r3, r2, #0
 8000f06:	d000      	beq.n	8000f0a <HAL_GPIO_Init+0x2d2>
 8000f08:	e6a2      	b.n	8000c50 <HAL_GPIO_Init+0x18>
  }
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b006      	add	sp, #24
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000
 8000f1c:	50000400 	.word	0x50000400
 8000f20:	50000800 	.word	0x50000800
 8000f24:	50000c00 	.word	0x50000c00
 8000f28:	50001000 	.word	0x50001000
 8000f2c:	50001c00 	.word	0x50001c00
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	1dba      	adds	r2, r7, #6
 8000f46:	8812      	ldrh	r2, [r2, #0]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d008      	beq.n	8000f5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f4e:	1dba      	adds	r2, r7, #6
 8000f50:	8812      	ldrh	r2, [r2, #0]
 8000f52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f54:	1dbb      	adds	r3, r7, #6
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f807 	bl	8000f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0002      	movs	r2, r0
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e08f      	b.n	80010b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2241      	movs	r2, #65	@ 0x41
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d107      	bne.n	8000fae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2240      	movs	r2, #64	@ 0x40
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fb8b 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2241      	movs	r2, #65	@ 0x41
 8000fb2:	2124      	movs	r1, #36	@ 0x24
 8000fb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	438a      	bics	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	493b      	ldr	r1, [pc, #236]	@ (80010bc <HAL_I2C_Init+0x13c>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4938      	ldr	r1, [pc, #224]	@ (80010c0 <HAL_I2C_Init+0x140>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d108      	bne.n	8000ffe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0209      	lsls	r1, r1, #8
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	e007      	b.n	800100e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2184      	movs	r1, #132	@ 0x84
 8001008:	0209      	lsls	r1, r1, #8
 800100a:	430a      	orrs	r2, r1
 800100c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d109      	bne.n	800102a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	0109      	lsls	r1, r1, #4
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	e007      	b.n	800103a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4923      	ldr	r1, [pc, #140]	@ (80010c4 <HAL_I2C_Init+0x144>)
 8001036:	400a      	ands	r2, r1
 8001038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4920      	ldr	r1, [pc, #128]	@ (80010c8 <HAL_I2C_Init+0x148>)
 8001046:	430a      	orrs	r2, r1
 8001048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	491a      	ldr	r1, [pc, #104]	@ (80010c0 <HAL_I2C_Init+0x140>)
 8001056:	400a      	ands	r2, r1
 8001058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	431a      	orrs	r2, r3
 8001064:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69d9      	ldr	r1, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2101      	movs	r1, #1
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2241      	movs	r2, #65	@ 0x41
 800109e:	2120      	movs	r1, #32
 80010a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2242      	movs	r2, #66	@ 0x42
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	f0ffffff 	.word	0xf0ffffff
 80010c0:	ffff7fff 	.word	0xffff7fff
 80010c4:	fffff7ff 	.word	0xfffff7ff
 80010c8:	02008000 	.word	0x02008000

080010cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	4798      	blx	r3
  }
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b004      	add	sp, #16
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	001a      	movs	r2, r3
 800111e:	2301      	movs	r3, #1
 8001120:	4013      	ands	r3, r2
 8001122:	d010      	beq.n	8001146 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	09db      	lsrs	r3, r3, #7
 8001128:	001a      	movs	r2, r3
 800112a:	2301      	movs	r3, #1
 800112c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800112e:	d00a      	beq.n	8001146 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001134:	2201      	movs	r2, #1
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	0052      	lsls	r2, r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	0a9b      	lsrs	r3, r3, #10
 800114a:	001a      	movs	r2, r3
 800114c:	2301      	movs	r3, #1
 800114e:	4013      	ands	r3, r2
 8001150:	d010      	beq.n	8001174 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	09db      	lsrs	r3, r3, #7
 8001156:	001a      	movs	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800115c:	d00a      	beq.n	8001174 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	2208      	movs	r2, #8
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2280      	movs	r2, #128	@ 0x80
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	0a5b      	lsrs	r3, r3, #9
 8001178:	001a      	movs	r2, r3
 800117a:	2301      	movs	r3, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d010      	beq.n	80011a2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	09db      	lsrs	r3, r3, #7
 8001184:	001a      	movs	r2, r3
 8001186:	2301      	movs	r3, #1
 8001188:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800118a:	d00a      	beq.n	80011a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001190:	2202      	movs	r2, #2
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	220b      	movs	r2, #11
 80011ac:	4013      	ands	r3, r2
 80011ae:	d005      	beq.n	80011bc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fc44 	bl	8001a44 <I2C_ITError>
  }
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	0008      	movs	r0, r1
 80011ee:	0011      	movs	r1, r2
 80011f0:	1cfb      	adds	r3, r7, #3
 80011f2:	1c02      	adds	r2, r0, #0
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	003b      	movs	r3, r7
 80011f8:	1c0a      	adds	r2, r1, #0
 80011fa:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2240      	movs	r2, #64	@ 0x40
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <I2C_Slave_ISR_IT+0x24>
 8001254:	2302      	movs	r3, #2
 8001256:	e0fb      	b.n	8001450 <I2C_Slave_ISR_IT+0x21c>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	2101      	movs	r1, #1
 800125e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	001a      	movs	r2, r3
 8001266:	2301      	movs	r3, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d00c      	beq.n	8001286 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	001a      	movs	r2, r3
 8001272:	2301      	movs	r3, #1
 8001274:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001276:	d006      	beq.n	8001286 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	0011      	movs	r1, r2
 800127e:	0018      	movs	r0, r3
 8001280:	f000 f9f6 	bl	8001670 <I2C_ITSlaveCplt>
 8001284:	e0df      	b.n	8001446 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	001a      	movs	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	4013      	ands	r3, r2
 8001290:	d054      	beq.n	800133c <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	001a      	movs	r2, r3
 8001298:	2301      	movs	r3, #1
 800129a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800129c:	d04e      	beq.n	800133c <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12d      	bne.n	8001304 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2241      	movs	r2, #65	@ 0x41
 80012ac:	5c9b      	ldrb	r3, [r3, r2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b28      	cmp	r3, #40	@ 0x28
 80012b2:	d10b      	bne.n	80012cc <I2C_Slave_ISR_IT+0x98>
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	049b      	lsls	r3, r3, #18
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d106      	bne.n	80012cc <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fb63 	bl	8001990 <I2C_ITListenCplt>
 80012ca:	e036      	b.n	800133a <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2241      	movs	r2, #65	@ 0x41
 80012d0:	5c9b      	ldrb	r3, [r3, r2]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b29      	cmp	r3, #41	@ 0x29
 80012d6:	d110      	bne.n	80012fa <I2C_Slave_ISR_IT+0xc6>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	4a5f      	ldr	r2, [pc, #380]	@ (8001458 <I2C_Slave_ISR_IT+0x224>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d00c      	beq.n	80012fa <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2210      	movs	r2, #16
 80012e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 fcd5 	bl	8001c9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f956 	bl	80015a4 <I2C_ITSlaveSeqCplt>
 80012f8:	e01f      	b.n	800133a <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2210      	movs	r2, #16
 8001300:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001302:	e09d      	b.n	8001440 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2210      	movs	r2, #16
 800130a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	2204      	movs	r2, #4
 8001312:	431a      	orrs	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <I2C_Slave_ISR_IT+0xf6>
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	045b      	lsls	r3, r3, #17
 8001324:	429a      	cmp	r2, r3
 8001326:	d000      	beq.n	800132a <I2C_Slave_ISR_IT+0xf6>
 8001328:	e08a      	b.n	8001440 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 fb86 	bl	8001a44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001338:	e082      	b.n	8001440 <I2C_Slave_ISR_IT+0x20c>
 800133a:	e081      	b.n	8001440 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	001a      	movs	r2, r3
 8001342:	2301      	movs	r3, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d031      	beq.n	80013ac <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	001a      	movs	r2, r3
 800134e:	2301      	movs	r3, #1
 8001350:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001352:	d02b      	beq.n	80013ac <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001358:	b29b      	uxth	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d018      	beq.n	8001390 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d154      	bne.n	8001444 <I2C_Slave_ISR_IT+0x210>
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <I2C_Slave_ISR_IT+0x224>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d050      	beq.n	8001444 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f8fd 	bl	80015a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80013aa:	e04b      	b.n	8001444 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	001a      	movs	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d00c      	beq.n	80013d2 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	001a      	movs	r2, r3
 80013be:	2301      	movs	r3, #1
 80013c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80013c2:	d006      	beq.n	80013d2 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f846 	bl	800145c <I2C_ITAddrCplt>
 80013d0:	e039      	b.n	8001446 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	001a      	movs	r2, r3
 80013d8:	2301      	movs	r3, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d033      	beq.n	8001446 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	001a      	movs	r2, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80013e8:	d02d      	beq.n	8001446 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d018      	beq.n	8001426 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001424:	e00f      	b.n	8001446 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	045b      	lsls	r3, r3, #17
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <I2C_Slave_ISR_IT+0x202>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	0018      	movs	r0, r3
 800143a:	f000 f8b3 	bl	80015a4 <I2C_ITSlaveSeqCplt>
 800143e:	e002      	b.n	8001446 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	e000      	b.n	8001446 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8001444:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2240      	movs	r2, #64	@ 0x40
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b006      	add	sp, #24
 8001456:	bd80      	pop	{r7, pc}
 8001458:	ffff0000 	.word	0xffff0000

0800145c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2241      	movs	r2, #65	@ 0x41
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	001a      	movs	r2, r3
 8001470:	2328      	movs	r3, #40	@ 0x28
 8001472:	4013      	ands	r3, r2
 8001474:	2b28      	cmp	r3, #40	@ 0x28
 8001476:	d000      	beq.n	800147a <I2C_ITAddrCplt+0x1e>
 8001478:	e088      	b.n	800158c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	b2da      	uxtb	r2, r3
 8001484:	250f      	movs	r5, #15
 8001486:	197b      	adds	r3, r7, r5
 8001488:	2101      	movs	r1, #1
 800148a:	400a      	ands	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	b29a      	uxth	r2, r3
 8001498:	200c      	movs	r0, #12
 800149a:	183b      	adds	r3, r7, r0
 800149c:	21fe      	movs	r1, #254	@ 0xfe
 800149e:	400a      	ands	r2, r1
 80014a0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	240a      	movs	r4, #10
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	0592      	lsls	r2, r2, #22
 80014b0:	0d92      	lsrs	r2, r2, #22
 80014b2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	2308      	movs	r3, #8
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	21fe      	movs	r1, #254	@ 0xfe
 80014c2:	400a      	ands	r2, r1
 80014c4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d148      	bne.n	8001560 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80014ce:	0021      	movs	r1, r4
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	09db      	lsrs	r3, r3, #7
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	183b      	adds	r3, r7, r0
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4053      	eors	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	001a      	movs	r2, r3
 80014e2:	2306      	movs	r3, #6
 80014e4:	4013      	ands	r3, r2
 80014e6:	d120      	bne.n	800152a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80014e8:	183b      	adds	r3, r7, r0
 80014ea:	187a      	adds	r2, r7, r1
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d14c      	bne.n	800159c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2208      	movs	r2, #8
 800150e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2240      	movs	r2, #64	@ 0x40
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001518:	183b      	adds	r3, r7, r0
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	197b      	adds	r3, r7, r5
 800151e:	7819      	ldrb	r1, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff fe5e 	bl	80011e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001528:	e038      	b.n	800159c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800152a:	240c      	movs	r4, #12
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2208      	movs	r2, #8
 8001530:	18ba      	adds	r2, r7, r2
 8001532:	8812      	ldrh	r2, [r2, #0]
 8001534:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	021a      	lsls	r2, r3, #8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f000 fbec 	bl	8001d1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2240      	movs	r2, #64	@ 0x40
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800154c:	193b      	adds	r3, r7, r4
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	230f      	movs	r3, #15
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	7819      	ldrb	r1, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fe43 	bl	80011e4 <HAL_I2C_AddrCallback>
}
 800155e:	e01d      	b.n	800159c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	021a      	lsls	r2, r3, #8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f000 fbd7 	bl	8001d1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2240      	movs	r2, #64	@ 0x40
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001576:	230c      	movs	r3, #12
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	7819      	ldrb	r1, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fe2d 	bl	80011e4 <HAL_I2C_AddrCallback>
}
 800158a:	e007      	b.n	800159c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2208      	movs	r2, #8
 8001592:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}

080015a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2242      	movs	r2, #66	@ 0x42
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	0b9b      	lsrs	r3, r3, #14
 80015c0:	001a      	movs	r2, r3
 80015c2:	2301      	movs	r3, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	d008      	beq.n	80015da <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4925      	ldr	r1, [pc, #148]	@ (8001668 <I2C_ITSlaveSeqCplt+0xc4>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e00d      	b.n	80015f6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0bdb      	lsrs	r3, r3, #15
 80015de:	001a      	movs	r2, r3
 80015e0:	2301      	movs	r3, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d007      	beq.n	80015f6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	491e      	ldr	r1, [pc, #120]	@ (800166c <I2C_ITSlaveSeqCplt+0xc8>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2241      	movs	r2, #65	@ 0x41
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b29      	cmp	r3, #41	@ 0x29
 8001600:	d114      	bne.n	800162c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	@ 0x41
 8001606:	2128      	movs	r1, #40	@ 0x28
 8001608:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2221      	movs	r2, #33	@ 0x21
 800160e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2101      	movs	r1, #1
 8001614:	0018      	movs	r0, r3
 8001616:	f000 fb81 	bl	8001d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2240      	movs	r2, #64	@ 0x40
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fdcd 	bl	80011c4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800162a:	e019      	b.n	8001660 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2241      	movs	r2, #65	@ 0x41
 8001630:	5c9b      	ldrb	r3, [r3, r2]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b2a      	cmp	r3, #42	@ 0x2a
 8001636:	d113      	bne.n	8001660 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2241      	movs	r2, #65	@ 0x41
 800163c:	2128      	movs	r1, #40	@ 0x28
 800163e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2222      	movs	r2, #34	@ 0x22
 8001644:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2102      	movs	r1, #2
 800164a:	0018      	movs	r0, r3
 800164c:	f000 fb66 	bl	8001d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2240      	movs	r2, #64	@ 0x40
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fdba 	bl	80011d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}
 8001668:	ffffbfff 	.word	0xffffbfff
 800166c:	ffff7fff 	.word	0xffff7fff

08001670 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800168c:	200b      	movs	r0, #11
 800168e:	183b      	adds	r3, r7, r0
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	2141      	movs	r1, #65	@ 0x41
 8001694:	5c52      	ldrb	r2, [r2, r1]
 8001696:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2220      	movs	r2, #32
 800169e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b21      	cmp	r3, #33	@ 0x21
 80016a6:	d003      	beq.n	80016b0 <I2C_ITSlaveCplt+0x40>
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b29      	cmp	r3, #41	@ 0x29
 80016ae:	d109      	bne.n	80016c4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80016b0:	4ab0      	ldr	r2, [pc, #704]	@ (8001974 <I2C_ITSlaveCplt+0x304>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fb30 	bl	8001d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2221      	movs	r2, #33	@ 0x21
 80016c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80016c2:	e020      	b.n	8001706 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80016c4:	220b      	movs	r2, #11
 80016c6:	18bb      	adds	r3, r7, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b22      	cmp	r3, #34	@ 0x22
 80016cc:	d003      	beq.n	80016d6 <I2C_ITSlaveCplt+0x66>
 80016ce:	18bb      	adds	r3, r7, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80016d4:	d109      	bne.n	80016ea <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80016d6:	4aa8      	ldr	r2, [pc, #672]	@ (8001978 <I2C_ITSlaveCplt+0x308>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 fb1d 	bl	8001d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2222      	movs	r2, #34	@ 0x22
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e8:	e00d      	b.n	8001706 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80016ea:	230b      	movs	r3, #11
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b28      	cmp	r3, #40	@ 0x28
 80016f2:	d108      	bne.n	8001706 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80016f4:	4aa1      	ldr	r2, [pc, #644]	@ (800197c <I2C_ITSlaveCplt+0x30c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 fb0e 	bl	8001d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0209      	lsls	r1, r1, #8
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4997      	ldr	r1, [pc, #604]	@ (8001980 <I2C_ITSlaveCplt+0x310>)
 8001724:	400a      	ands	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 fab5 	bl	8001c9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	0b9b      	lsrs	r3, r3, #14
 8001734:	001a      	movs	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d013      	beq.n	8001764 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	498f      	ldr	r1, [pc, #572]	@ (8001984 <I2C_ITSlaveCplt+0x314>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001762:	e018      	b.n	8001796 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	0bdb      	lsrs	r3, r3, #15
 8001768:	001a      	movs	r2, r3
 800176a:	2301      	movs	r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d012      	beq.n	8001796 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4983      	ldr	r1, [pc, #524]	@ (8001988 <I2C_ITSlaveCplt+0x318>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	001a      	movs	r2, r3
 800179c:	2301      	movs	r3, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	d020      	beq.n	80017e4 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4393      	bics	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00c      	beq.n	80017e4 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	2204      	movs	r2, #4
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	001a      	movs	r2, r3
 8001800:	2301      	movs	r3, #1
 8001802:	4013      	ands	r3, r2
 8001804:	d051      	beq.n	80018aa <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	001a      	movs	r2, r3
 800180c:	2301      	movs	r3, #1
 800180e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001810:	d04b      	beq.n	80018aa <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d12d      	bne.n	8001878 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2241      	movs	r2, #65	@ 0x41
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b28      	cmp	r3, #40	@ 0x28
 8001826:	d10b      	bne.n	8001840 <I2C_ITSlaveCplt+0x1d0>
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	049b      	lsls	r3, r3, #18
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f8a9 	bl	8001990 <I2C_ITListenCplt>
 800183e:	e034      	b.n	80018aa <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2241      	movs	r2, #65	@ 0x41
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b29      	cmp	r3, #41	@ 0x29
 800184a:	d110      	bne.n	800186e <I2C_ITSlaveCplt+0x1fe>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a4f      	ldr	r2, [pc, #316]	@ (800198c <I2C_ITSlaveCplt+0x31c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00c      	beq.n	800186e <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0018      	movs	r0, r3
 8001860:	f000 fa1b 	bl	8001c9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0018      	movs	r0, r3
 8001868:	f7ff fe9c 	bl	80015a4 <I2C_ITSlaveSeqCplt>
 800186c:	e01d      	b.n	80018aa <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2210      	movs	r2, #16
 8001874:	61da      	str	r2, [r3, #28]
 8001876:	e018      	b.n	80018aa <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2210      	movs	r2, #16
 800187e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001884:	2204      	movs	r2, #4
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <I2C_ITSlaveCplt+0x22c>
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	045b      	lsls	r3, r3, #17
 8001898:	429a      	cmp	r2, r3
 800189a:	d106      	bne.n	80018aa <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f000 f8cd 	bl	8001a44 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2242      	movs	r2, #66	@ 0x42
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8bb 	bl	8001a44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2241      	movs	r2, #65	@ 0x41
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b28      	cmp	r3, #40	@ 0x28
 80018d8:	d147      	bne.n	800196a <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f855 	bl	8001990 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80018e6:	e040      	b.n	800196a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	4a27      	ldr	r2, [pc, #156]	@ (800198c <I2C_ITSlaveCplt+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d016      	beq.n	8001920 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fe55 	bl	80015a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a23      	ldr	r2, [pc, #140]	@ (800198c <I2C_ITSlaveCplt+0x31c>)
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2241      	movs	r2, #65	@ 0x41
 8001904:	2120      	movs	r1, #32
 8001906:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2240      	movs	r2, #64	@ 0x40
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fc73 	bl	8001204 <HAL_I2C_ListenCpltCallback>
}
 800191e:	e024      	b.n	800196a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2241      	movs	r2, #65	@ 0x41
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b22      	cmp	r3, #34	@ 0x22
 800192a:	d10f      	bne.n	800194c <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2241      	movs	r2, #65	@ 0x41
 8001930:	2120      	movs	r1, #32
 8001932:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2240      	movs	r2, #64	@ 0x40
 800193e:	2100      	movs	r1, #0
 8001940:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fc45 	bl	80011d4 <HAL_I2C_SlaveRxCpltCallback>
}
 800194a:	e00e      	b.n	800196a <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2241      	movs	r2, #65	@ 0x41
 8001950:	2120      	movs	r1, #32
 8001952:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2240      	movs	r2, #64	@ 0x40
 800195e:	2100      	movs	r1, #0
 8001960:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fc2d 	bl	80011c4 <HAL_I2C_SlaveTxCpltCallback>
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	00008001 	.word	0x00008001
 8001978:	00008002 	.word	0x00008002
 800197c:	00008003 	.word	0x00008003
 8001980:	fe00e800 	.word	0xfe00e800
 8001984:	ffffbfff 	.word	0xffffbfff
 8001988:	ffff7fff 	.word	0xffff7fff
 800198c:	ffff0000 	.word	0xffff0000

08001990 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <I2C_ITListenCplt+0xac>)
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2241      	movs	r2, #65	@ 0x41
 80019aa:	2120      	movs	r1, #32
 80019ac:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2242      	movs	r2, #66	@ 0x42
 80019b2:	2100      	movs	r1, #0
 80019b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	001a      	movs	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d022      	beq.n	8001a0e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	2204      	movs	r2, #4
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <I2C_ITListenCplt+0xb0>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f981 	bl	8001d1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2240      	movs	r2, #64	@ 0x40
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fbe9 	bl	8001204 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	ffff0000 	.word	0xffff0000
 8001a40:	00008003 	.word	0x00008003

08001a44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001a4e:	200f      	movs	r0, #15
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	2141      	movs	r1, #65	@ 0x41
 8001a56:	5c52      	ldrb	r2, [r2, r1]
 8001a58:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2242      	movs	r2, #66	@ 0x42
 8001a5e:	2100      	movs	r1, #0
 8001a60:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a72      	ldr	r2, [pc, #456]	@ (8001c30 <I2C_ITError+0x1ec>)
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b28      	cmp	r3, #40	@ 0x28
 8001a80:	d007      	beq.n	8001a92 <I2C_ITError+0x4e>
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b29      	cmp	r3, #41	@ 0x29
 8001a88:	d003      	beq.n	8001a92 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a90:	d10c      	bne.n	8001aac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2103      	movs	r1, #3
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f940 	bl	8001d1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2241      	movs	r2, #65	@ 0x41
 8001aa0:	2128      	movs	r1, #40	@ 0x28
 8001aa2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <I2C_ITError+0x1f0>)
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aaa:	e032      	b.n	8001b12 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001aac:	4a62      	ldr	r2, [pc, #392]	@ (8001c38 <I2C_ITError+0x1f4>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 f932 	bl	8001d1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 f8ed 	bl	8001c9a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2241      	movs	r2, #65	@ 0x41
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b60      	cmp	r3, #96	@ 0x60
 8001aca:	d01f      	beq.n	8001b0c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2241      	movs	r2, #65	@ 0x41
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2220      	movs	r2, #32
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d114      	bne.n	8001b0c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d109      	bne.n	8001b04 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	2204      	movs	r2, #4
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03b      	beq.n	8001b98 <I2C_ITError+0x154>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d002      	beq.n	8001b2c <I2C_ITError+0xe8>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b21      	cmp	r3, #33	@ 0x21
 8001b2a:	d135      	bne.n	8001b98 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	01db      	lsls	r3, r3, #7
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	493c      	ldr	r1, [pc, #240]	@ (8001c3c <I2C_ITError+0x1f8>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff f862 	bl	8000c1e <HAL_DMA_GetState>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d016      	beq.n	8001b8e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b64:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <I2C_ITError+0x1fc>)
 8001b66:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2240      	movs	r2, #64	@ 0x40
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff f80b 	bl	8000b90 <HAL_DMA_Abort_IT>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d051      	beq.n	8001c22 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	0018      	movs	r0, r3
 8001b8a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b8c:	e049      	b.n	8001c22 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f859 	bl	8001c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b96:	e044      	b.n	8001c22 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03b      	beq.n	8001c18 <I2C_ITError+0x1d4>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d002      	beq.n	8001bac <I2C_ITError+0x168>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b22      	cmp	r3, #34	@ 0x22
 8001baa:	d135      	bne.n	8001c18 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	491e      	ldr	r1, [pc, #120]	@ (8001c44 <I2C_ITError+0x200>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff f822 	bl	8000c1e <HAL_DMA_GetState>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d016      	beq.n	8001c0e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <I2C_ITError+0x1fc>)
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2240      	movs	r2, #64	@ 0x40
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe ffcb 	bl	8000b90 <HAL_DMA_Abort_IT>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d013      	beq.n	8001c26 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c08:	0018      	movs	r0, r3
 8001c0a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c0c:	e00b      	b.n	8001c26 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f819 	bl	8001c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c16:	e006      	b.n	8001c26 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f814 	bl	8001c48 <I2C_TreatErrorCallback>
  }
}
 8001c20:	e002      	b.n	8001c28 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	e000      	b.n	8001c28 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c26:	46c0      	nop			@ (mov r8, r8)
}
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	ffff0000 	.word	0xffff0000
 8001c34:	08001235 	.word	0x08001235
 8001c38:	00008003 	.word	0x00008003
 8001c3c:	ffffbfff 	.word	0xffffbfff
 8001c40:	08001cdf 	.word	0x08001cdf
 8001c44:	ffff7fff 	.word	0xffff7fff

08001c48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2241      	movs	r2, #65	@ 0x41
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b60      	cmp	r3, #96	@ 0x60
 8001c5a:	d10f      	bne.n	8001c7c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2241      	movs	r2, #65	@ 0x41
 8001c60:	2120      	movs	r1, #32
 8001c62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fad5 	bl	8001224 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c7a:	e00a      	b.n	8001c92 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fac1 	bl	8001214 <HAL_I2C_ErrorCallback>
}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d103      	bne.n	8001cb8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d007      	beq.n	8001cd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	619a      	str	r2, [r3, #24]
  }
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff ff9a 	bl	8001c48 <I2C_TreatErrorCallback>
}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	000a      	movs	r2, r1
 8001d26:	1cbb      	adds	r3, r7, #2
 8001d28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	d010      	beq.n	8001d5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2242      	movs	r2, #66	@ 0x42
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2241      	movs	r2, #65	@ 0x41
 8001d44:	5c9b      	ldrb	r3, [r3, r2]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2328      	movs	r3, #40	@ 0x28
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b28      	cmp	r3, #40	@ 0x28
 8001d50:	d003      	beq.n	8001d5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	22b0      	movs	r2, #176	@ 0xb0
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001d5a:	1cbb      	adds	r3, r7, #2
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d010      	beq.n	8001d86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2244      	movs	r2, #68	@ 0x44
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2241      	movs	r2, #65	@ 0x41
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	001a      	movs	r2, r3
 8001d76:	2328      	movs	r3, #40	@ 0x28
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b28      	cmp	r3, #40	@ 0x28
 8001d7c:	d003      	beq.n	8001d86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	22b0      	movs	r2, #176	@ 0xb0
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001d86:	1cbb      	adds	r3, r7, #2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	5e9b      	ldrsh	r3, [r3, r2]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da03      	bge.n	8001d98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22b8      	movs	r2, #184	@ 0xb8
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001d98:	1cbb      	adds	r3, r7, #2
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d103      	bne.n	8001da8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2290      	movs	r2, #144	@ 0x90
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001da8:	1cbb      	adds	r3, r7, #2
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d103      	bne.n	8001db8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001db8:	1cbb      	adds	r3, r7, #2
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2b40      	cmp	r3, #64	@ 0x40
 8001dbe:	d103      	bne.n	8001dc8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2240      	movs	r2, #64	@ 0x40
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43d9      	mvns	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2241      	movs	r2, #65	@ 0x41
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d138      	bne.n	8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e032      	b.n	8001e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2240      	movs	r2, #64	@ 0x40
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2241      	movs	r2, #65	@ 0x41
 8001e14:	2124      	movs	r1, #36	@ 0x24
 8001e16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4911      	ldr	r1, [pc, #68]	@ (8001e78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2241      	movs	r2, #65	@ 0x41
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
  }
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	ffffefff 	.word	0xffffefff

08001e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2241      	movs	r2, #65	@ 0x41
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d139      	bne.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2240      	movs	r2, #64	@ 0x40
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e033      	b.n	8001f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	@ 0x40
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2241      	movs	r2, #65	@ 0x41
 8001eac:	2124      	movs	r1, #36	@ 0x24
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2241      	movs	r2, #65	@ 0x41
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2240      	movs	r2, #64	@ 0x40
 8001efe:	2100      	movs	r1, #0
 8001f00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	fffff0ff 	.word	0xfffff0ff

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f000 fb6c 	bl	8002600 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f28:	4bc8      	ldr	r3, [pc, #800]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f32:	4bc6      	ldr	r3, [pc, #792]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x36>
 8001f48:	e07d      	b.n	8002046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d007      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d112      	bne.n	8001f7c <HAL_RCC_OscConfig+0x68>
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10d      	bne.n	8001f7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	4bba      	ldr	r3, [pc, #744]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5a>
 8001f6c:	e06a      	b.n	8002044 <HAL_RCC_OscConfig+0x130>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d166      	bne.n	8002044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f000 fb42 	bl	8002600 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x84>
 8001f88:	4bb0      	ldr	r3, [pc, #704]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4baf      	ldr	r3, [pc, #700]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001f8e:	2180      	movs	r1, #128	@ 0x80
 8001f90:	0249      	lsls	r1, r1, #9
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e027      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	23a0      	movs	r3, #160	@ 0xa0
 8001f9e:	02db      	lsls	r3, r3, #11
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xae>
 8001fa4:	4ba9      	ldr	r3, [pc, #676]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4ba8      	ldr	r3, [pc, #672]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	02c9      	lsls	r1, r1, #11
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4ba6      	ldr	r3, [pc, #664]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4ba5      	ldr	r3, [pc, #660]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0249      	lsls	r1, r1, #9
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e012      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fc2:	4ba2      	ldr	r3, [pc, #648]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4ba1      	ldr	r3, [pc, #644]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fc8:	49a1      	ldr	r1, [pc, #644]	@ (8002250 <HAL_RCC_OscConfig+0x33c>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	4b9f      	ldr	r3, [pc, #636]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b9a      	ldr	r3, [pc, #616]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8001fe2:	499c      	ldr	r1, [pc, #624]	@ (8002254 <HAL_RCC_OscConfig+0x340>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d014      	beq.n	800201a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fce6 	bl	80009c0 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fce1 	bl	80009c0 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	@ 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e2f9      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800200c:	4b8f      	ldr	r3, [pc, #572]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0xe6>
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fcd1 	bl	80009c0 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fccc 	bl	80009c0 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2e4      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	4013      	ands	r3, r2
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x110>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCC_OscConfig+0x13e>
 8002050:	e099      	b.n	8002186 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	2220      	movs	r2, #32
 800205c:	4013      	ands	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002060:	4b7a      	ldr	r3, [pc, #488]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b79      	ldr	r3, [pc, #484]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002066:	2120      	movs	r1, #32
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	2220      	movs	r2, #32
 8002070:	4393      	bics	r3, r2
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d13e      	bne.n	80020fe <HAL_RCC_OscConfig+0x1ea>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d13b      	bne.n	80020fe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002086:	4b71      	ldr	r3, [pc, #452]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	4013      	ands	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_RCC_OscConfig+0x186>
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e2b2      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b6c      	ldr	r3, [pc, #432]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_RCC_OscConfig+0x344>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	021a      	lsls	r2, r3, #8
 80020aa:	4b68      	ldr	r3, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020b0:	4b66      	ldr	r3, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2209      	movs	r2, #9
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	4b64      	ldr	r3, [pc, #400]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80020bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 fbeb 	bl	800289c <HAL_RCC_GetSysClockFreq>
 80020c6:	0001      	movs	r1, r0
 80020c8:	4b60      	ldr	r3, [pc, #384]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	220f      	movs	r2, #15
 80020d0:	4013      	ands	r3, r2
 80020d2:	4a62      	ldr	r2, [pc, #392]	@ (800225c <HAL_RCC_OscConfig+0x348>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	000a      	movs	r2, r1
 80020d8:	40da      	lsrs	r2, r3
 80020da:	4b61      	ldr	r3, [pc, #388]	@ (8002260 <HAL_RCC_OscConfig+0x34c>)
 80020dc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020de:	4b61      	ldr	r3, [pc, #388]	@ (8002264 <HAL_RCC_OscConfig+0x350>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2513      	movs	r5, #19
 80020e4:	197c      	adds	r4, r7, r5
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7fe fc24 	bl	8000934 <HAL_InitTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d046      	beq.n	8002186 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80020f8:	197b      	adds	r3, r7, r5
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	e280      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d027      	beq.n	8002154 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002104:	4b51      	ldr	r3, [pc, #324]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2209      	movs	r2, #9
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	4b4f      	ldr	r3, [pc, #316]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fc53 	bl	80009c0 <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe fc4e 	bl	80009c0 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e266      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002132:	4b46      	ldr	r3, [pc, #280]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	4013      	ands	r3, r2
 800213a:	d0f1      	beq.n	8002120 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b43      	ldr	r3, [pc, #268]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a45      	ldr	r2, [pc, #276]	@ (8002258 <HAL_RCC_OscConfig+0x344>)
 8002142:	4013      	ands	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	021a      	lsls	r2, r3, #8
 800214c:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e018      	b.n	8002186 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002154:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fc2e 	bl	80009c0 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216a:	f7fe fc29 	bl	80009c0 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e241      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217c:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2204      	movs	r2, #4
 8002182:	4013      	ands	r3, r2
 8002184:	d1f1      	bne.n	800216a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2210      	movs	r2, #16
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x27e>
 8002190:	e0a1      	b.n	80022d6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d140      	bne.n	800221a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002198:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x29c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e227      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b26      	ldr	r3, [pc, #152]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_RCC_OscConfig+0x354>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4b23      	ldr	r3, [pc, #140]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	0a19      	lsrs	r1, r3, #8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	0b5b      	lsrs	r3, r3, #13
 80021de:	3301      	adds	r3, #1
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0212      	lsls	r2, r2, #8
 80021e4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	210f      	movs	r1, #15
 80021ee:	400b      	ands	r3, r1
 80021f0:	491a      	ldr	r1, [pc, #104]	@ (800225c <HAL_RCC_OscConfig+0x348>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_RCC_OscConfig+0x34c>)
 80021f8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_RCC_OscConfig+0x350>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2513      	movs	r5, #19
 8002200:	197c      	adds	r4, r7, r5
 8002202:	0018      	movs	r0, r3
 8002204:	f7fe fb96 	bl	8000934 <HAL_InitTick>
 8002208:	0003      	movs	r3, r0
 800220a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800220c:	197b      	adds	r3, r7, r5
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d060      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002214:	197b      	adds	r3, r7, r5
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	e1f2      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03f      	beq.n	80022a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002228:	2180      	movs	r1, #128	@ 0x80
 800222a:	0049      	lsls	r1, r1, #1
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fbc6 	bl	80009c0 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002238:	e018      	b.n	800226c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223a:	f7fe fbc1 	bl	80009c0 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d911      	bls.n	800226c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1d9      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
 800224c:	40021000 	.word	0x40021000
 8002250:	fffeffff 	.word	0xfffeffff
 8002254:	fffbffff 	.word	0xfffbffff
 8002258:	ffffe0ff 	.word	0xffffe0ff
 800225c:	08003678 	.word	0x08003678
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004
 8002268:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800226c:	4bc9      	ldr	r3, [pc, #804]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d0e0      	beq.n	800223a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002278:	4bc6      	ldr	r3, [pc, #792]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4ac6      	ldr	r2, [pc, #792]	@ (8002598 <HAL_RCC_OscConfig+0x684>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1a      	ldr	r2, [r3, #32]
 8002286:	4bc3      	ldr	r3, [pc, #780]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4bc1      	ldr	r3, [pc, #772]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	0a19      	lsrs	r1, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	061a      	lsls	r2, r3, #24
 800229a:	4bbe      	ldr	r3, [pc, #760]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e019      	b.n	80022d6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022a2:	4bbc      	ldr	r3, [pc, #752]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4bbb      	ldr	r3, [pc, #748]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80022a8:	49bc      	ldr	r1, [pc, #752]	@ (800259c <HAL_RCC_OscConfig+0x688>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fb87 	bl	80009c0 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b8:	f7fe fb82 	bl	80009c0 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e19a      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022ca:	4bb2      	ldr	r3, [pc, #712]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2208      	movs	r2, #8
 80022dc:	4013      	ands	r3, r2
 80022de:	d036      	beq.n	800234e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d019      	beq.n	800231c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e8:	4baa      	ldr	r3, [pc, #680]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80022ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ec:	4ba9      	ldr	r3, [pc, #676]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe fb64 	bl	80009c0 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fb5f 	bl	80009c0 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e177      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002310:	4ba0      	ldr	r3, [pc, #640]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d0f1      	beq.n	80022fe <HAL_RCC_OscConfig+0x3ea>
 800231a:	e018      	b.n	800234e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231c:	4b9d      	ldr	r3, [pc, #628]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800231e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002320:	4b9c      	ldr	r3, [pc, #624]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002322:	2101      	movs	r1, #1
 8002324:	438a      	bics	r2, r1
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe fb4a 	bl	80009c0 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe fb45 	bl	80009c0 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e15d      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002344:	4b93      	ldr	r3, [pc, #588]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d1f1      	bne.n	8002332 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <HAL_RCC_OscConfig+0x446>
 8002358:	e0ae      	b.n	80024b8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2023      	movs	r0, #35	@ 0x23
 800235c:	183b      	adds	r3, r7, r0
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b8c      	ldr	r3, [pc, #560]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	055b      	lsls	r3, r3, #21
 800236a:	4013      	ands	r3, r2
 800236c:	d109      	bne.n	8002382 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b89      	ldr	r3, [pc, #548]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002374:	2180      	movs	r1, #128	@ 0x80
 8002376:	0549      	lsls	r1, r1, #21
 8002378:	430a      	orrs	r2, r1
 800237a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800237c:	183b      	adds	r3, r7, r0
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <HAL_RCC_OscConfig+0x68c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4013      	ands	r3, r2
 800238c:	d11a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238e:	4b84      	ldr	r3, [pc, #528]	@ (80025a0 <HAL_RCC_OscConfig+0x68c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b83      	ldr	r3, [pc, #524]	@ (80025a0 <HAL_RCC_OscConfig+0x68c>)
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0049      	lsls	r1, r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239c:	f7fe fb10 	bl	80009c0 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fb0b 	bl	80009c0 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	@ 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e123      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b79      	ldr	r3, [pc, #484]	@ (80025a0 <HAL_RCC_OscConfig+0x68c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4cc>
 80023d0:	4b70      	ldr	r3, [pc, #448]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	0049      	lsls	r1, r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80023de:	e031      	b.n	8002444 <HAL_RCC_OscConfig+0x530>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x4ee>
 80023e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ec:	4b69      	ldr	r3, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023ee:	496b      	ldr	r1, [pc, #428]	@ (800259c <HAL_RCC_OscConfig+0x688>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80023f4:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023f8:	4b66      	ldr	r3, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80023fa:	496a      	ldr	r1, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x690>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002400:	e020      	b.n	8002444 <HAL_RCC_OscConfig+0x530>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	23a0      	movs	r3, #160	@ 0xa0
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	429a      	cmp	r2, r3
 800240c:	d10e      	bne.n	800242c <HAL_RCC_OscConfig+0x518>
 800240e:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002412:	4b60      	ldr	r3, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002414:	2180      	movs	r1, #128	@ 0x80
 8002416:	00c9      	lsls	r1, r1, #3
 8002418:	430a      	orrs	r2, r1
 800241a:	651a      	str	r2, [r3, #80]	@ 0x50
 800241c:	4b5d      	ldr	r3, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800241e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002420:	4b5c      	ldr	r3, [pc, #368]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	0049      	lsls	r1, r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	651a      	str	r2, [r3, #80]	@ 0x50
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x530>
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800242e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002430:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002432:	495a      	ldr	r1, [pc, #360]	@ (800259c <HAL_RCC_OscConfig+0x688>)
 8002434:	400a      	ands	r2, r1
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50
 8002438:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800243a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800243c:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800243e:	4959      	ldr	r1, [pc, #356]	@ (80025a4 <HAL_RCC_OscConfig+0x690>)
 8002440:	400a      	ands	r2, r1
 8002442:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fab8 	bl	80009c0 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002454:	e009      	b.n	800246a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fab3 	bl	80009c0 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a51      	ldr	r2, [pc, #324]	@ (80025a8 <HAL_RCC_OscConfig+0x694>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0ca      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800246c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4013      	ands	r3, r2
 8002474:	d0ef      	beq.n	8002456 <HAL_RCC_OscConfig+0x542>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe faa2 	bl	80009c0 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002480:	e009      	b.n	8002496 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fa9d 	bl	80009c0 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	4a46      	ldr	r2, [pc, #280]	@ (80025a8 <HAL_RCC_OscConfig+0x694>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0b4      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002496:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002498:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a2:	2323      	movs	r3, #35	@ 0x23
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80024ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80024b2:	493e      	ldr	r1, [pc, #248]	@ (80025ac <HAL_RCC_OscConfig+0x698>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d100      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5ae>
 80024c0:	e09d      	b.n	80025fe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_OscConfig+0x5b6>
 80024c8:	e076      	b.n	80025b8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d145      	bne.n	800255e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80024d8:	4935      	ldr	r1, [pc, #212]	@ (80025b0 <HAL_RCC_OscConfig+0x69c>)
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fa6f 	bl	80009c0 <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fa6a 	bl	80009c0 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e082      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024fa:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	049b      	lsls	r3, r3, #18
 8002502:	4013      	ands	r3, r2
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002506:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a2a      	ldr	r2, [pc, #168]	@ (80025b4 <HAL_RCC_OscConfig+0x6a0>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	431a      	orrs	r2, r3
 8002520:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002522:	430a      	orrs	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	0449      	lsls	r1, r1, #17
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fa44 	bl	80009c0 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fa3f 	bl	80009c0 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e057      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	049b      	lsls	r3, r3, #18
 8002558:	4013      	ands	r3, r2
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x62a>
 800255c:	e04f      	b.n	80025fe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002564:	4912      	ldr	r1, [pc, #72]	@ (80025b0 <HAL_RCC_OscConfig+0x69c>)
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fa29 	bl	80009c0 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fa24 	bl	80009c0 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03c      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002586:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_RCC_OscConfig+0x680>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	049b      	lsls	r3, r3, #18
 800258e:	4013      	ands	r3, r2
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x660>
 8002592:	e034      	b.n	80025fe <HAL_RCC_OscConfig+0x6ea>
 8002594:	40021000 	.word	0x40021000
 8002598:	ffff1fff 	.word	0xffff1fff
 800259c:	fffffeff 	.word	0xfffffeff
 80025a0:	40007000 	.word	0x40007000
 80025a4:	fffffbff 	.word	0xfffffbff
 80025a8:	00001388 	.word	0x00001388
 80025ac:	efffffff 	.word	0xefffffff
 80025b0:	feffffff 	.word	0xfeffffff
 80025b4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCC_OscConfig+0x6f4>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	401a      	ands	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10f      	bne.n	80025fa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	23f0      	movs	r3, #240	@ 0xf0
 80025de:	039b      	lsls	r3, r3, #14
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	23c0      	movs	r3, #192	@ 0xc0
 80025ee:	041b      	lsls	r3, r3, #16
 80025f0:	401a      	ands	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b00a      	add	sp, #40	@ 0x28
 8002606:	bdb0      	pop	{r4, r5, r7, pc}
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e128      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b96      	ldr	r3, [pc, #600]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d91e      	bls.n	800266c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b93      	ldr	r3, [pc, #588]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	4393      	bics	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	4b90      	ldr	r3, [pc, #576]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002640:	f7fe f9be 	bl	80009c0 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	e009      	b.n	800265e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe f9b9 	bl	80009c0 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a8a      	ldr	r2, [pc, #552]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e109      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b87      	ldr	r3, [pc, #540]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002676:	4b83      	ldr	r3, [pc, #524]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	22f0      	movs	r2, #240	@ 0xf0
 800267c:	4393      	bics	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b7f      	ldr	r3, [pc, #508]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d100      	bne.n	8002696 <HAL_RCC_ClockConfig+0x8a>
 8002694:	e089      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269e:	4b79      	ldr	r3, [pc, #484]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	4013      	ands	r3, r2
 80026a8:	d120      	bne.n	80026ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0e1      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026b6:	4b73      	ldr	r3, [pc, #460]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	049b      	lsls	r3, r3, #18
 80026be:	4013      	ands	r3, r2
 80026c0:	d114      	bne.n	80026ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0d5      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2204      	movs	r2, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	d109      	bne.n	80026ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0ca      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0c2      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ec:	4b65      	ldr	r3, [pc, #404]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2203      	movs	r2, #3
 80026f2:	4393      	bics	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4b62      	ldr	r3, [pc, #392]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe f95e 	bl	80009c0 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d111      	bne.n	8002734 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002710:	e009      	b.n	8002726 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002712:	f7fe f955 	bl	80009c0 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	4a58      	ldr	r2, [pc, #352]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0a5      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002726:	4b57      	ldr	r3, [pc, #348]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	220c      	movs	r2, #12
 800272c:	4013      	ands	r3, r2
 800272e:	2b08      	cmp	r3, #8
 8002730:	d1ef      	bne.n	8002712 <HAL_RCC_ClockConfig+0x106>
 8002732:	e03a      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d111      	bne.n	8002760 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	e009      	b.n	8002752 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273e:	f7fe f93f 	bl	80009c0 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	4a4d      	ldr	r2, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e08f      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002752:	4b4c      	ldr	r3, [pc, #304]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	220c      	movs	r2, #12
 8002758:	4013      	ands	r3, r2
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d1ef      	bne.n	800273e <HAL_RCC_ClockConfig+0x132>
 800275e:	e024      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d11b      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002768:	e009      	b.n	800277e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276a:	f7fe f929 	bl	80009c0 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4a42      	ldr	r2, [pc, #264]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e079      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	4b41      	ldr	r3, [pc, #260]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	220c      	movs	r2, #12
 8002784:	4013      	ands	r3, r2
 8002786:	2b04      	cmp	r3, #4
 8002788:	d1ef      	bne.n	800276a <HAL_RCC_ClockConfig+0x15e>
 800278a:	e00e      	b.n	80027aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe f918 	bl	80009c0 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	4a3a      	ldr	r2, [pc, #232]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e068      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	220c      	movs	r2, #12
 80027a6:	4013      	ands	r3, r2
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d21e      	bcs.n	80027f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b8:	4b30      	ldr	r3, [pc, #192]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4393      	bics	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ca:	f7fe f8f9 	bl	80009c0 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	e009      	b.n	80027e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe f8f4 	bl	80009c0 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	4a28      	ldr	r2, [pc, #160]	@ (8002880 <HAL_RCC_ClockConfig+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e044      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_ClockConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <HAL_RCC_ClockConfig+0x27c>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	4013      	ands	r3, r2
 800281c:	d00a      	beq.n	8002834 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_RCC_ClockConfig+0x280>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00da      	lsls	r2, r3, #3
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002834:	f000 f832 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002838:	0001      	movs	r1, r0
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_RCC_ClockConfig+0x278>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	220f      	movs	r2, #15
 8002842:	4013      	ands	r3, r2
 8002844:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <HAL_RCC_ClockConfig+0x284>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	000a      	movs	r2, r1
 800284a:	40da      	lsrs	r2, r3
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_RCC_ClockConfig+0x288>)
 800284e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_ClockConfig+0x28c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	250b      	movs	r5, #11
 8002856:	197c      	adds	r4, r7, r5
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe f86b 	bl	8000934 <HAL_InitTick>
 800285e:	0003      	movs	r3, r0
 8002860:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002862:	197b      	adds	r3, r7, r5
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800286a:	197b      	adds	r3, r7, r5
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	e000      	b.n	8002872 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b004      	add	sp, #16
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	40022000 	.word	0x40022000
 8002880:	00001388 	.word	0x00001388
 8002884:	40021000 	.word	0x40021000
 8002888:	fffff8ff 	.word	0xfffff8ff
 800288c:	ffffc7ff 	.word	0xffffc7ff
 8002890:	08003678 	.word	0x08003678
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	220c      	movs	r2, #12
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d013      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x3e>
 80028b2:	d85c      	bhi.n	800296e <HAL_RCC_GetSysClockFreq+0xd2>
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d002      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x22>
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d00b      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x38>
 80028bc:	e057      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028be:	4b35      	ldr	r3, [pc, #212]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2210      	movs	r2, #16
 80028c4:	4013      	ands	r3, r2
 80028c6:	d002      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028c8:	4b33      	ldr	r3, [pc, #204]	@ (8002998 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ca:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028cc:	e05d      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80028ce:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_RCC_GetSysClockFreq+0x100>)
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	e05a      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	e057      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	220f      	movs	r2, #15
 80028e0:	4013      	ands	r3, r2
 80028e2:	4a30      	ldr	r2, [pc, #192]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0d9b      	lsrs	r3, r3, #22
 80028ec:	2203      	movs	r2, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	3301      	adds	r3, #1
 80028f2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	4013      	ands	r3, r2
 80028fe:	d00f      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	000a      	movs	r2, r1
 8002904:	0152      	lsls	r2, r2, #5
 8002906:	1a52      	subs	r2, r2, r1
 8002908:	0193      	lsls	r3, r2, #6
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	185b      	adds	r3, r3, r1
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f7fd fbf7 	bl	8000108 <__udivsi3>
 800291a:	0003      	movs	r3, r0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e023      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002920:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	4013      	ands	r3, r2
 8002928:	d00f      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	000a      	movs	r2, r1
 800292e:	0152      	lsls	r2, r2, #5
 8002930:	1a52      	subs	r2, r2, r1
 8002932:	0193      	lsls	r3, r2, #6
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	185b      	adds	r3, r3, r1
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f7fd fbe2 	bl	8000108 <__udivsi3>
 8002944:	0003      	movs	r3, r0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e00e      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	000a      	movs	r2, r1
 800294e:	0152      	lsls	r2, r2, #5
 8002950:	1a52      	subs	r2, r2, r1
 8002952:	0193      	lsls	r3, r2, #6
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	185b      	adds	r3, r3, r1
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbd2 	bl	8000108 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	e00d      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0b5b      	lsrs	r3, r3, #13
 8002974:	2207      	movs	r2, #7
 8002976:	4013      	ands	r3, r2
 8002978:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	2280      	movs	r2, #128	@ 0x80
 8002980:	0212      	lsls	r2, r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b006      	add	sp, #24
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	003d0900 	.word	0x003d0900
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	08003690 	.word	0x08003690

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b02      	ldr	r3, [pc, #8]	@ (80029b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff2 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c4:	0001      	movs	r1, r0
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	2207      	movs	r2, #7
 80029ce:	4013      	ands	r3, r2
 80029d0:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	40d9      	lsrs	r1, r3
 80029d6:	000b      	movs	r3, r1
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08003688 	.word	0x08003688

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffdc 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029f0:	0001      	movs	r1, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	2207      	movs	r2, #7
 80029fa:	4013      	ands	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	40d9      	lsrs	r1, r3
 8002a02:	000b      	movs	r3, r1
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08003688 	.word	0x08003688

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2017      	movs	r0, #23
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d100      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a2e:	e0c7      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a30:	4b84      	ldr	r3, [pc, #528]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	055b      	lsls	r3, r3, #21
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	4b81      	ldr	r3, [pc, #516]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a40:	4b80      	ldr	r3, [pc, #512]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a42:	2180      	movs	r1, #128	@ 0x80
 8002a44:	0549      	lsls	r1, r1, #21
 8002a46:	430a      	orrs	r2, r1
 8002a48:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b7d      	ldr	r3, [pc, #500]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d11a      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b79      	ldr	r3, [pc, #484]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	0049      	lsls	r1, r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fd ffa9 	bl	80009c0 <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a74:	f7fd ffa4 	bl	80009c0 <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0d9      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a92:	4b6c      	ldr	r3, [pc, #432]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	23c0      	movs	r3, #192	@ 0xc0
 8002a98:	039b      	lsls	r3, r3, #14
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	23c0      	movs	r3, #192	@ 0xc0
 8002aa4:	039b      	lsls	r3, r3, #14
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d013      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	23c0      	movs	r3, #192	@ 0xc0
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ac0:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	401a      	ands	r2, r3
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0b1      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ad8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ada:	23c0      	movs	r3, #192	@ 0xc0
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d03b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	23c0      	movs	r3, #192	@ 0xc0
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d033      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	d02e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b02:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b06:	4a51      	ldr	r2, [pc, #324]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b10:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b12:	2180      	movs	r1, #128	@ 0x80
 8002b14:	0309      	lsls	r1, r1, #12
 8002b16:	430a      	orrs	r2, r1
 8002b18:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b20:	494b      	ldr	r1, [pc, #300]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d014      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fd ff43 	bl	80009c0 <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3e:	e009      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fd ff3e 	bl	80009c0 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	4a42      	ldr	r2, [pc, #264]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e072      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b54:	4b3b      	ldr	r3, [pc, #236]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b58:	2380      	movs	r3, #128	@ 0x80
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2220      	movs	r2, #32
 8002b66:	4013      	ands	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	23c0      	movs	r3, #192	@ 0xc0
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	401a      	ands	r2, r3
 8002b74:	23c0      	movs	r3, #192	@ 0xc0
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002b7c:	4b31      	ldr	r3, [pc, #196]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	23c0      	movs	r3, #192	@ 0xc0
 8002b8c:	039b      	lsls	r3, r3, #14
 8002b8e:	401a      	ands	r2, r3
 8002b90:	4b2c      	ldr	r3, [pc, #176]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	23c0      	movs	r3, #192	@ 0xc0
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002baa:	2317      	movs	r3, #23
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b23      	ldr	r3, [pc, #140]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bba:	4928      	ldr	r1, [pc, #160]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	220c      	movs	r2, #12
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2204      	movs	r2, #4
 8002be4:	4013      	ands	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be8:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c24:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b006      	add	sp, #24
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	fffcffff 	.word	0xfffcffff
 8002c50:	fff7ffff 	.word	0xfff7ffff
 8002c54:	00001388 	.word	0x00001388
 8002c58:	ffcfffff 	.word	0xffcfffff
 8002c5c:	efffffff 	.word	0xefffffff
 8002c60:	fffff3ff 	.word	0xfffff3ff
 8002c64:	ffffcfff 	.word	0xffffcfff
 8002c68:	fff3ffff 	.word	0xfff3ffff

08002c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e044      	b.n	8002d08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2278      	movs	r2, #120	@ 0x78
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7fd fd63 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2224      	movs	r2, #36	@ 0x24
 8002c9a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fa76 	bl	80031a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 f828 	bl	8002d14 <UART_SetConfig>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e01c      	b.n	8002d08 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	490d      	ldr	r1, [pc, #52]	@ (8002d10 <HAL_UART_Init+0xa4>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	212a      	movs	r1, #42	@ 0x2a
 8002cea:	438a      	bics	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fb05 	bl	8003310 <UART_CheckIdleState>
 8002d06:	0003      	movs	r3, r0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	ffffb7ff 	.word	0xffffb7ff

08002d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d14:	b5b0      	push	{r4, r5, r7, lr}
 8002d16:	b08e      	sub	sp, #56	@ 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d1c:	231a      	movs	r3, #26
 8002d1e:	2218      	movs	r2, #24
 8002d20:	189b      	adds	r3, r3, r2
 8002d22:	19db      	adds	r3, r3, r7
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4ab4      	ldr	r2, [pc, #720]	@ (8003018 <UART_SetConfig+0x304>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4aaf      	ldr	r2, [pc, #700]	@ (800301c <UART_SetConfig+0x308>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4aa9      	ldr	r2, [pc, #676]	@ (8003020 <UART_SetConfig+0x30c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d84:	4313      	orrs	r3, r2
 8002d86:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4aa5      	ldr	r2, [pc, #660]	@ (8003024 <UART_SetConfig+0x310>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4aa1      	ldr	r2, [pc, #644]	@ (8003028 <UART_SetConfig+0x314>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d131      	bne.n	8002e0c <UART_SetConfig+0xf8>
 8002da8:	4ba0      	ldr	r3, [pc, #640]	@ (800302c <UART_SetConfig+0x318>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dac:	220c      	movs	r2, #12
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d01d      	beq.n	8002df0 <UART_SetConfig+0xdc>
 8002db4:	d823      	bhi.n	8002dfe <UART_SetConfig+0xea>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d00c      	beq.n	8002dd4 <UART_SetConfig+0xc0>
 8002dba:	d820      	bhi.n	8002dfe <UART_SetConfig+0xea>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <UART_SetConfig+0xb2>
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d00e      	beq.n	8002de2 <UART_SetConfig+0xce>
 8002dc4:	e01b      	b.n	8002dfe <UART_SetConfig+0xea>
 8002dc6:	231b      	movs	r3, #27
 8002dc8:	2218      	movs	r2, #24
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e065      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002dd4:	231b      	movs	r3, #27
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	189b      	adds	r3, r3, r2
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e05e      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002de2:	231b      	movs	r3, #27
 8002de4:	2218      	movs	r2, #24
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	19db      	adds	r3, r3, r7
 8002dea:	2204      	movs	r2, #4
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e057      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002df0:	231b      	movs	r3, #27
 8002df2:	2218      	movs	r2, #24
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	19db      	adds	r3, r3, r7
 8002df8:	2208      	movs	r2, #8
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e050      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002dfe:	231b      	movs	r3, #27
 8002e00:	2218      	movs	r2, #24
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	19db      	adds	r3, r3, r7
 8002e06:	2210      	movs	r2, #16
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e049      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a83      	ldr	r2, [pc, #524]	@ (8003020 <UART_SetConfig+0x30c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d13e      	bne.n	8002e94 <UART_SetConfig+0x180>
 8002e16:	4b85      	ldr	r3, [pc, #532]	@ (800302c <UART_SetConfig+0x318>)
 8002e18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e1a:	23c0      	movs	r3, #192	@ 0xc0
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4013      	ands	r3, r2
 8002e20:	22c0      	movs	r2, #192	@ 0xc0
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d027      	beq.n	8002e78 <UART_SetConfig+0x164>
 8002e28:	22c0      	movs	r2, #192	@ 0xc0
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d82a      	bhi.n	8002e86 <UART_SetConfig+0x172>
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d011      	beq.n	8002e5c <UART_SetConfig+0x148>
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d822      	bhi.n	8002e86 <UART_SetConfig+0x172>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <UART_SetConfig+0x13a>
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	00d2      	lsls	r2, r2, #3
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00e      	beq.n	8002e6a <UART_SetConfig+0x156>
 8002e4c:	e01b      	b.n	8002e86 <UART_SetConfig+0x172>
 8002e4e:	231b      	movs	r3, #27
 8002e50:	2218      	movs	r2, #24
 8002e52:	189b      	adds	r3, r3, r2
 8002e54:	19db      	adds	r3, r3, r7
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e021      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e5c:	231b      	movs	r3, #27
 8002e5e:	2218      	movs	r2, #24
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2202      	movs	r2, #2
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e01a      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e6a:	231b      	movs	r3, #27
 8002e6c:	2218      	movs	r2, #24
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	19db      	adds	r3, r3, r7
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e013      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e78:	231b      	movs	r3, #27
 8002e7a:	2218      	movs	r2, #24
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2208      	movs	r2, #8
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e00c      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e86:	231b      	movs	r3, #27
 8002e88:	2218      	movs	r2, #24
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	19db      	adds	r3, r3, r7
 8002e8e:	2210      	movs	r2, #16
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e005      	b.n	8002ea0 <UART_SetConfig+0x18c>
 8002e94:	231b      	movs	r3, #27
 8002e96:	2218      	movs	r2, #24
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	19db      	adds	r3, r3, r7
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <UART_SetConfig+0x30c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d000      	beq.n	8002eac <UART_SetConfig+0x198>
 8002eaa:	e084      	b.n	8002fb6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eac:	231b      	movs	r3, #27
 8002eae:	2218      	movs	r2, #24
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	19db      	adds	r3, r3, r7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d01d      	beq.n	8002ef6 <UART_SetConfig+0x1e2>
 8002eba:	dc20      	bgt.n	8002efe <UART_SetConfig+0x1ea>
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d015      	beq.n	8002eec <UART_SetConfig+0x1d8>
 8002ec0:	dc1d      	bgt.n	8002efe <UART_SetConfig+0x1ea>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <UART_SetConfig+0x1b8>
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d005      	beq.n	8002ed6 <UART_SetConfig+0x1c2>
 8002eca:	e018      	b.n	8002efe <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f7ff fd76 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ed4:	e01c      	b.n	8002f10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed6:	4b55      	ldr	r3, [pc, #340]	@ (800302c <UART_SetConfig+0x318>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	4013      	ands	r3, r2
 8002ede:	d002      	beq.n	8002ee6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ee0:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <UART_SetConfig+0x31c>)
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ee4:	e014      	b.n	8002f10 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002ee6:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <UART_SetConfig+0x320>)
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002eea:	e011      	b.n	8002f10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eec:	f7ff fcd6 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ef4:	e00c      	b.n	8002f10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002efc:	e008      	b.n	8002f10 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002f02:	231a      	movs	r3, #26
 8002f04:	2218      	movs	r2, #24
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	19db      	adds	r3, r3, r7
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
        break;
 8002f0e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d100      	bne.n	8002f18 <UART_SetConfig+0x204>
 8002f16:	e12f      	b.n	8003178 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	0013      	movs	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	189b      	adds	r3, r3, r2
 8002f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d305      	bcc.n	8002f34 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d906      	bls.n	8002f42 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002f34:	231a      	movs	r3, #26
 8002f36:	2218      	movs	r2, #24
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e11a      	b.n	8003178 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	6939      	ldr	r1, [r7, #16]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	000b      	movs	r3, r1
 8002f50:	0e1b      	lsrs	r3, r3, #24
 8002f52:	0010      	movs	r0, r2
 8002f54:	0205      	lsls	r5, r0, #8
 8002f56:	431d      	orrs	r5, r3
 8002f58:	000b      	movs	r3, r1
 8002f5a:	021c      	lsls	r4, r3, #8
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68b8      	ldr	r0, [r7, #8]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	1900      	adds	r0, r0, r4
 8002f6e:	4169      	adcs	r1, r5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f7fd f94f 	bl	8000220 <__aeabi_uldivmod>
 8002f82:	0002      	movs	r2, r0
 8002f84:	000b      	movs	r3, r1
 8002f86:	0013      	movs	r3, r2
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8c:	23c0      	movs	r3, #192	@ 0xc0
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d309      	bcc.n	8002fa8 <UART_SetConfig+0x294>
 8002f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	035b      	lsls	r3, r3, #13
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d204      	bcs.n	8002fa8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e0e7      	b.n	8003178 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002fa8:	231a      	movs	r3, #26
 8002faa:	2218      	movs	r2, #24
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e0e0      	b.n	8003178 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d000      	beq.n	8002fc4 <UART_SetConfig+0x2b0>
 8002fc2:	e082      	b.n	80030ca <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002fc4:	231b      	movs	r3, #27
 8002fc6:	2218      	movs	r2, #24
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d834      	bhi.n	800303c <UART_SetConfig+0x328>
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <UART_SetConfig+0x324>)
 8002fd6:	18d3      	adds	r3, r2, r3
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7ff fcee 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fe4:	e033      	b.n	800304e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe6:	f7ff fcff 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8002fea:	0003      	movs	r3, r0
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fee:	e02e      	b.n	800304e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <UART_SetConfig+0x318>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d002      	beq.n	8003000 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <UART_SetConfig+0x31c>)
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ffe:	e026      	b.n	800304e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <UART_SetConfig+0x320>)
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003004:	e023      	b.n	800304e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7ff fc49 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800300a:	0003      	movs	r3, r0
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800300e:	e01e      	b.n	800304e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0x33a>
 8003018:	efff69f3 	.word	0xefff69f3
 800301c:	ffffcfff 	.word	0xffffcfff
 8003020:	40004800 	.word	0x40004800
 8003024:	fffff4ff 	.word	0xfffff4ff
 8003028:	40004400 	.word	0x40004400
 800302c:	40021000 	.word	0x40021000
 8003030:	003d0900 	.word	0x003d0900
 8003034:	00f42400 	.word	0x00f42400
 8003038:	0800369c 	.word	0x0800369c
      default:
        pclk = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003040:	231a      	movs	r3, #26
 8003042:	2218      	movs	r2, #24
 8003044:	189b      	adds	r3, r3, r2
 8003046:	19db      	adds	r3, r3, r7
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
        break;
 800304c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d100      	bne.n	8003056 <UART_SetConfig+0x342>
 8003054:	e090      	b.n	8003178 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003058:	005a      	lsls	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	18d2      	adds	r2, r2, r3
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0019      	movs	r1, r3
 8003068:	0010      	movs	r0, r2
 800306a:	f7fd f84d 	bl	8000108 <__udivsi3>
 800306e:	0003      	movs	r3, r0
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d921      	bls.n	80030bc <UART_SetConfig+0x3a8>
 8003078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	025b      	lsls	r3, r3, #9
 800307e:	429a      	cmp	r2, r3
 8003080:	d21c      	bcs.n	80030bc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	b29a      	uxth	r2, r3
 8003086:	200e      	movs	r0, #14
 8003088:	2418      	movs	r4, #24
 800308a:	1903      	adds	r3, r0, r4
 800308c:	19db      	adds	r3, r3, r7
 800308e:	210f      	movs	r1, #15
 8003090:	438a      	bics	r2, r1
 8003092:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	b299      	uxth	r1, r3
 80030a0:	1903      	adds	r3, r0, r4
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	1902      	adds	r2, r0, r4
 80030a6:	19d2      	adds	r2, r2, r7
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1902      	adds	r2, r0, r4
 80030b4:	19d2      	adds	r2, r2, r7
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	e05d      	b.n	8003178 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80030bc:	231a      	movs	r3, #26
 80030be:	2218      	movs	r2, #24
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e056      	b.n	8003178 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ca:	231b      	movs	r3, #27
 80030cc:	2218      	movs	r2, #24
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d822      	bhi.n	800311e <UART_SetConfig+0x40a>
 80030d8:	009a      	lsls	r2, r3, #2
 80030da:	4b2f      	ldr	r3, [pc, #188]	@ (8003198 <UART_SetConfig+0x484>)
 80030dc:	18d3      	adds	r3, r2, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e2:	f7ff fc6b 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80030e6:	0003      	movs	r3, r0
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030ea:	e021      	b.n	8003130 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7ff fc7c 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 80030f0:	0003      	movs	r3, r0
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030f4:	e01c      	b.n	8003130 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f6:	4b29      	ldr	r3, [pc, #164]	@ (800319c <UART_SetConfig+0x488>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	4013      	ands	r3, r2
 80030fe:	d002      	beq.n	8003106 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <UART_SetConfig+0x48c>)
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003104:	e014      	b.n	8003130 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003106:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <UART_SetConfig+0x490>)
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800310a:	e011      	b.n	8003130 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310c:	f7ff fbc6 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8003110:	0003      	movs	r3, r0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003114:	e00c      	b.n	8003130 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800311c:	e008      	b.n	8003130 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003122:	231a      	movs	r3, #26
 8003124:	2218      	movs	r2, #24
 8003126:	189b      	adds	r3, r3, r2
 8003128:	19db      	adds	r3, r3, r7
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
        break;
 800312e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d020      	beq.n	8003178 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	085a      	lsrs	r2, r3, #1
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	18d2      	adds	r2, r2, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0019      	movs	r1, r3
 8003146:	0010      	movs	r0, r2
 8003148:	f7fc ffde 	bl	8000108 <__udivsi3>
 800314c:	0003      	movs	r3, r0
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003152:	2b0f      	cmp	r3, #15
 8003154:	d90a      	bls.n	800316c <UART_SetConfig+0x458>
 8003156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	429a      	cmp	r2, r3
 800315e:	d205      	bcs.n	800316c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	b29a      	uxth	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e005      	b.n	8003178 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800316c:	231a      	movs	r3, #26
 800316e:	2218      	movs	r2, #24
 8003170:	189b      	adds	r3, r3, r2
 8003172:	19db      	adds	r3, r3, r7
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2200      	movs	r2, #0
 800317c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2200      	movs	r2, #0
 8003182:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003184:	231a      	movs	r3, #26
 8003186:	2218      	movs	r2, #24
 8003188:	189b      	adds	r3, r3, r2
 800318a:	19db      	adds	r3, r3, r7
 800318c:	781b      	ldrb	r3, [r3, #0]
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b00e      	add	sp, #56	@ 0x38
 8003194:	bdb0      	pop	{r4, r5, r7, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	080036c0 	.word	0x080036c0
 800319c:	40021000 	.word	0x40021000
 80031a0:	003d0900 	.word	0x003d0900
 80031a4:	00f42400 	.word	0x00f42400

080031a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	2208      	movs	r2, #8
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <UART_AdvFeatureConfig+0x144>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d00b      	beq.n	80031f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a43      	ldr	r2, [pc, #268]	@ (80032f0 <UART_AdvFeatureConfig+0x148>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d00b      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a3b      	ldr	r2, [pc, #236]	@ (80032f4 <UART_AdvFeatureConfig+0x14c>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	d00b      	beq.n	8003238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a34      	ldr	r2, [pc, #208]	@ (80032f8 <UART_AdvFeatureConfig+0x150>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2210      	movs	r2, #16
 800323e:	4013      	ands	r3, r2
 8003240:	d00b      	beq.n	800325a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a2c      	ldr	r2, [pc, #176]	@ (80032fc <UART_AdvFeatureConfig+0x154>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	2220      	movs	r2, #32
 8003260:	4013      	ands	r3, r2
 8003262:	d00b      	beq.n	800327c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4a25      	ldr	r2, [pc, #148]	@ (8003300 <UART_AdvFeatureConfig+0x158>)
 800326c:	4013      	ands	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	d01d      	beq.n	80032c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <UART_AdvFeatureConfig+0x15c>)
 800328e:	4013      	ands	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	035b      	lsls	r3, r3, #13
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d10b      	bne.n	80032c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <UART_AdvFeatureConfig+0x160>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	4013      	ands	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a0e      	ldr	r2, [pc, #56]	@ (800330c <UART_AdvFeatureConfig+0x164>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffff7fff 	.word	0xffff7fff
 80032f0:	fffdffff 	.word	0xfffdffff
 80032f4:	fffeffff 	.word	0xfffeffff
 80032f8:	fffbffff 	.word	0xfffbffff
 80032fc:	ffffefff 	.word	0xffffefff
 8003300:	ffffdfff 	.word	0xffffdfff
 8003304:	ffefffff 	.word	0xffefffff
 8003308:	ff9fffff 	.word	0xff9fffff
 800330c:	fff7ffff 	.word	0xfff7ffff

08003310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b092      	sub	sp, #72	@ 0x48
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2284      	movs	r2, #132	@ 0x84
 800331c:	2100      	movs	r1, #0
 800331e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003320:	f7fd fb4e 	bl	80009c0 <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2208      	movs	r2, #8
 8003330:	4013      	ands	r3, r2
 8003332:	2b08      	cmp	r3, #8
 8003334:	d12c      	bne.n	8003390 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003338:	2280      	movs	r2, #128	@ 0x80
 800333a:	0391      	lsls	r1, r2, #14
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4a46      	ldr	r2, [pc, #280]	@ (8003458 <UART_CheckIdleState+0x148>)
 8003340:	9200      	str	r2, [sp, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	f000 f88c 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d021      	beq.n	8003390 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334c:	f3ef 8310 	mrs	r3, PRIMASK
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003356:	2301      	movs	r3, #1
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	f383 8810 	msr	PRIMASK, r3
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2180      	movs	r1, #128	@ 0x80
 800336e:	438a      	bics	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	f383 8810 	msr	PRIMASK, r3
}
 800337c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2278      	movs	r2, #120	@ 0x78
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e05f      	b.n	8003450 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2204      	movs	r2, #4
 8003398:	4013      	ands	r3, r2
 800339a:	2b04      	cmp	r3, #4
 800339c:	d146      	bne.n	800342c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a0:	2280      	movs	r2, #128	@ 0x80
 80033a2:	03d1      	lsls	r1, r2, #15
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <UART_CheckIdleState+0x148>)
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f000 f858 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d03b      	beq.n	800342c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b4:	f3ef 8310 	mrs	r3, PRIMASK
 80033b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80033be:	2301      	movs	r3, #1
 80033c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4921      	ldr	r1, [pc, #132]	@ (800345c <UART_CheckIdleState+0x14c>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80033ec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80033f0:	2301      	movs	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	438a      	bics	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	2120      	movs	r1, #32
 800341e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2278      	movs	r2, #120	@ 0x78
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e011      	b.n	8003450 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2280      	movs	r2, #128	@ 0x80
 8003436:	2120      	movs	r1, #32
 8003438:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2278      	movs	r2, #120	@ 0x78
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b010      	add	sp, #64	@ 0x40
 8003456:	bd80      	pop	{r7, pc}
 8003458:	01ffffff 	.word	0x01ffffff
 800345c:	fffffedf 	.word	0xfffffedf

08003460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003470:	e051      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3301      	adds	r3, #1
 8003476:	d04e      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fd faa2 	bl	80009c0 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e051      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2204      	movs	r2, #4
 800349a:	4013      	ands	r3, r2
 800349c:	d03b      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b80      	cmp	r3, #128	@ 0x80
 80034a2:	d038      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b40      	cmp	r3, #64	@ 0x40
 80034a8:	d035      	beq.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2208      	movs	r2, #8
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d111      	bne.n	80034dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 f83c 	bl	8003540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2284      	movs	r2, #132	@ 0x84
 80034cc:	2108      	movs	r1, #8
 80034ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2278      	movs	r2, #120	@ 0x78
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02c      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	401a      	ands	r2, r3
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d112      	bne.n	8003516 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2280      	movs	r2, #128	@ 0x80
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f81f 	bl	8003540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2284      	movs	r2, #132	@ 0x84
 8003506:	2120      	movs	r1, #32
 8003508:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2278      	movs	r2, #120	@ 0x78
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e00f      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	425a      	negs	r2, r3
 8003526:	4153      	adcs	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	001a      	movs	r2, r3
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d09e      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08e      	sub	sp, #56	@ 0x38
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003548:	f3ef 8310 	mrs	r3, PRIMASK
 800354c:	617b      	str	r3, [r7, #20]
  return(result);
 800354e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4926      	ldr	r1, [pc, #152]	@ (8003604 <UART_EndRxTransfer+0xc4>)
 800356a:	400a      	ands	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8310 	mrs	r3, PRIMASK
 800357e:	623b      	str	r3, [r7, #32]
  return(result);
 8003580:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	438a      	bics	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d118      	bne.n	80035e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b4:	f3ef 8310 	mrs	r3, PRIMASK
 80035b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035be:	2301      	movs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2110      	movs	r1, #16
 80035d6:	438a      	bics	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	2120      	movs	r1, #32
 80035ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b00e      	add	sp, #56	@ 0x38
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	fffffedf 	.word	0xfffffedf

08003608 <memset>:
 8003608:	0003      	movs	r3, r0
 800360a:	1882      	adds	r2, r0, r2
 800360c:	4293      	cmp	r3, r2
 800360e:	d100      	bne.n	8003612 <memset+0xa>
 8003610:	4770      	bx	lr
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	e7f9      	b.n	800360c <memset+0x4>

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	2600      	movs	r6, #0
 800361c:	4c0c      	ldr	r4, [pc, #48]	@ (8003650 <__libc_init_array+0x38>)
 800361e:	4d0d      	ldr	r5, [pc, #52]	@ (8003654 <__libc_init_array+0x3c>)
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	42a6      	cmp	r6, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	2600      	movs	r6, #0
 800362a:	f000 f819 	bl	8003660 <_init>
 800362e:	4c0a      	ldr	r4, [pc, #40]	@ (8003658 <__libc_init_array+0x40>)
 8003630:	4d0a      	ldr	r5, [pc, #40]	@ (800365c <__libc_init_array+0x44>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	42a6      	cmp	r6, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	00b3      	lsls	r3, r6, #2
 800363e:	58eb      	ldr	r3, [r5, r3]
 8003640:	4798      	blx	r3
 8003642:	3601      	adds	r6, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	00b3      	lsls	r3, r6, #2
 8003648:	58eb      	ldr	r3, [r5, r3]
 800364a:	4798      	blx	r3
 800364c:	3601      	adds	r6, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	080036ec 	.word	0x080036ec
 8003654:	080036ec 	.word	0x080036ec
 8003658:	080036f0 	.word	0x080036f0
 800365c:	080036ec 	.word	0x080036ec

08003660 <_init>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr

0800366c <_fini>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr
