
STM32L010RBT6_MP2760.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08009b98  08009b98  0000ab98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2dc  0800a2dc  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e4  0800a2e4  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e4  0800a2e4  0000b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2e8  0800a2e8  0000b2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a2ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  0800a4c0  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  0800a4c0  0000c420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf7f  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da2  00000000  00000000  0001817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00019f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000858  00000000  00000000  0001a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f8a  00000000  00000000  0001b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc6e  00000000  00000000  0002d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068dfa  00000000  00000000  0003ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000a3c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009b80 	.word	0x08009b80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08009b80 	.word	0x08009b80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa5b 	bl	80018f8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f99f 	bl	8001790 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa4d 	bl	80018f8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa43 	bl	80018f8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9c9 	bl	8001818 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9bf 	bl	8001818 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 faec 	bl	8002ae4 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fae7 	bl	8002ae4 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fmul>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0044      	lsls	r4, r0, #1
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0246      	lsls	r6, r0, #9
 800068e:	1c0f      	adds	r7, r1, #0
 8000690:	0a76      	lsrs	r6, r6, #9
 8000692:	0e24      	lsrs	r4, r4, #24
 8000694:	0fc5      	lsrs	r5, r0, #31
 8000696:	2c00      	cmp	r4, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x1c>
 800069a:	e0da      	b.n	8000852 <__aeabi_fmul+0x1d2>
 800069c:	2cff      	cmp	r4, #255	@ 0xff
 800069e:	d074      	beq.n	800078a <__aeabi_fmul+0x10a>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	00f6      	lsls	r6, r6, #3
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431e      	orrs	r6, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	4699      	mov	r9, r3
 80006ac:	469a      	mov	sl, r3
 80006ae:	3c7f      	subs	r4, #127	@ 0x7f
 80006b0:	027b      	lsls	r3, r7, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	4698      	mov	r8, r3
 80006b6:	007b      	lsls	r3, r7, #1
 80006b8:	0e1b      	lsrs	r3, r3, #24
 80006ba:	0fff      	lsrs	r7, r7, #31
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d074      	beq.n	80007aa <__aeabi_fmul+0x12a>
 80006c0:	2bff      	cmp	r3, #255	@ 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fmul+0x46>
 80006c4:	e08e      	b.n	80007e4 <__aeabi_fmul+0x164>
 80006c6:	4642      	mov	r2, r8
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	04c9      	lsls	r1, r1, #19
 80006ce:	4311      	orrs	r1, r2
 80006d0:	3b7f      	subs	r3, #127	@ 0x7f
 80006d2:	002a      	movs	r2, r5
 80006d4:	18e4      	adds	r4, r4, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	407a      	eors	r2, r7
 80006da:	4688      	mov	r8, r1
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	dc75      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80006e2:	464b      	mov	r3, r9
 80006e4:	2000      	movs	r0, #0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	dd0f      	ble.n	800070a <__aeabi_fmul+0x8a>
 80006ea:	4649      	mov	r1, r9
 80006ec:	2301      	movs	r3, #1
 80006ee:	408b      	lsls	r3, r1
 80006f0:	21a6      	movs	r1, #166	@ 0xa6
 80006f2:	00c9      	lsls	r1, r1, #3
 80006f4:	420b      	tst	r3, r1
 80006f6:	d169      	bne.n	80007cc <__aeabi_fmul+0x14c>
 80006f8:	2190      	movs	r1, #144	@ 0x90
 80006fa:	0089      	lsls	r1, r1, #2
 80006fc:	420b      	tst	r3, r1
 80006fe:	d000      	beq.n	8000702 <__aeabi_fmul+0x82>
 8000700:	e100      	b.n	8000904 <__aeabi_fmul+0x284>
 8000702:	2188      	movs	r1, #136	@ 0x88
 8000704:	4219      	tst	r1, r3
 8000706:	d000      	beq.n	800070a <__aeabi_fmul+0x8a>
 8000708:	e0f5      	b.n	80008f6 <__aeabi_fmul+0x276>
 800070a:	4641      	mov	r1, r8
 800070c:	0409      	lsls	r1, r1, #16
 800070e:	0c09      	lsrs	r1, r1, #16
 8000710:	4643      	mov	r3, r8
 8000712:	0008      	movs	r0, r1
 8000714:	0c35      	lsrs	r5, r6, #16
 8000716:	0436      	lsls	r6, r6, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	0c36      	lsrs	r6, r6, #16
 800071c:	4370      	muls	r0, r6
 800071e:	4369      	muls	r1, r5
 8000720:	435e      	muls	r6, r3
 8000722:	435d      	muls	r5, r3
 8000724:	1876      	adds	r6, r6, r1
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	199b      	adds	r3, r3, r6
 800072a:	4299      	cmp	r1, r3
 800072c:	d903      	bls.n	8000736 <__aeabi_fmul+0xb6>
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	0249      	lsls	r1, r1, #9
 8000732:	468c      	mov	ip, r1
 8000734:	4465      	add	r5, ip
 8000736:	0400      	lsls	r0, r0, #16
 8000738:	0419      	lsls	r1, r3, #16
 800073a:	0c00      	lsrs	r0, r0, #16
 800073c:	1809      	adds	r1, r1, r0
 800073e:	018e      	lsls	r6, r1, #6
 8000740:	1e70      	subs	r0, r6, #1
 8000742:	4186      	sbcs	r6, r0
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	0e89      	lsrs	r1, r1, #26
 8000748:	195b      	adds	r3, r3, r5
 800074a:	430e      	orrs	r6, r1
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	431e      	orrs	r6, r3
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	d46c      	bmi.n	800082e <__aeabi_fmul+0x1ae>
 8000754:	0023      	movs	r3, r4
 8000756:	337f      	adds	r3, #127	@ 0x7f
 8000758:	2b00      	cmp	r3, #0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fmul+0xde>
 800075c:	e0b1      	b.n	80008c2 <__aeabi_fmul+0x242>
 800075e:	0015      	movs	r5, r2
 8000760:	0771      	lsls	r1, r6, #29
 8000762:	d00b      	beq.n	800077c <__aeabi_fmul+0xfc>
 8000764:	200f      	movs	r0, #15
 8000766:	0021      	movs	r1, r4
 8000768:	4030      	ands	r0, r6
 800076a:	2804      	cmp	r0, #4
 800076c:	d006      	beq.n	800077c <__aeabi_fmul+0xfc>
 800076e:	3604      	adds	r6, #4
 8000770:	0132      	lsls	r2, r6, #4
 8000772:	d503      	bpl.n	800077c <__aeabi_fmul+0xfc>
 8000774:	4b6e      	ldr	r3, [pc, #440]	@ (8000930 <__aeabi_fmul+0x2b0>)
 8000776:	401e      	ands	r6, r3
 8000778:	000b      	movs	r3, r1
 800077a:	3380      	adds	r3, #128	@ 0x80
 800077c:	2bfe      	cmp	r3, #254	@ 0xfe
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0x102>
 8000780:	e0bd      	b.n	80008fe <__aeabi_fmul+0x27e>
 8000782:	01b2      	lsls	r2, r6, #6
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	b2db      	uxtb	r3, r3
 8000788:	e048      	b.n	800081c <__aeabi_fmul+0x19c>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fmul+0x110>
 800078e:	e092      	b.n	80008b6 <__aeabi_fmul+0x236>
 8000790:	2308      	movs	r3, #8
 8000792:	4699      	mov	r9, r3
 8000794:	3b06      	subs	r3, #6
 8000796:	469a      	mov	sl, r3
 8000798:	027b      	lsls	r3, r7, #9
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	4698      	mov	r8, r3
 800079e:	007b      	lsls	r3, r7, #1
 80007a0:	24ff      	movs	r4, #255	@ 0xff
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	0fff      	lsrs	r7, r7, #31
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d18a      	bne.n	80006c0 <__aeabi_fmul+0x40>
 80007aa:	4642      	mov	r2, r8
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d164      	bne.n	800087a <__aeabi_fmul+0x1fa>
 80007b0:	4649      	mov	r1, r9
 80007b2:	3201      	adds	r2, #1
 80007b4:	4311      	orrs	r1, r2
 80007b6:	4689      	mov	r9, r1
 80007b8:	290a      	cmp	r1, #10
 80007ba:	dc08      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80007bc:	407d      	eors	r5, r7
 80007be:	2001      	movs	r0, #1
 80007c0:	b2ea      	uxtb	r2, r5
 80007c2:	2902      	cmp	r1, #2
 80007c4:	dc91      	bgt.n	80006ea <__aeabi_fmul+0x6a>
 80007c6:	0015      	movs	r5, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e027      	b.n	800081c <__aeabi_fmul+0x19c>
 80007cc:	0015      	movs	r5, r2
 80007ce:	4653      	mov	r3, sl
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x156>
 80007d4:	e093      	b.n	80008fe <__aeabi_fmul+0x27e>
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d01a      	beq.n	8000810 <__aeabi_fmul+0x190>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12c      	bne.n	8000838 <__aeabi_fmul+0x1b8>
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	e01b      	b.n	800081c <__aeabi_fmul+0x19c>
 80007e4:	4643      	mov	r3, r8
 80007e6:	34ff      	adds	r4, #255	@ 0xff
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d055      	beq.n	8000898 <__aeabi_fmul+0x218>
 80007ec:	2103      	movs	r1, #3
 80007ee:	464b      	mov	r3, r9
 80007f0:	430b      	orrs	r3, r1
 80007f2:	0019      	movs	r1, r3
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_fmul+0x17a>
 80007f8:	e092      	b.n	8000920 <__aeabi_fmul+0x2a0>
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d000      	beq.n	8000800 <__aeabi_fmul+0x180>
 80007fe:	e08c      	b.n	800091a <__aeabi_fmul+0x29a>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	03d2      	lsls	r2, r2, #15
 8000804:	4216      	tst	r6, r2
 8000806:	d003      	beq.n	8000810 <__aeabi_fmul+0x190>
 8000808:	4643      	mov	r3, r8
 800080a:	4213      	tst	r3, r2
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x190>
 800080e:	e07d      	b.n	800090c <__aeabi_fmul+0x28c>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	4332      	orrs	r2, r6
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	23ff      	movs	r3, #255	@ 0xff
 800081c:	05d8      	lsls	r0, r3, #23
 800081e:	07ed      	lsls	r5, r5, #31
 8000820:	4310      	orrs	r0, r2
 8000822:	4328      	orrs	r0, r5
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	2301      	movs	r3, #1
 8000830:	0015      	movs	r5, r2
 8000832:	0871      	lsrs	r1, r6, #1
 8000834:	401e      	ands	r6, r3
 8000836:	430e      	orrs	r6, r1
 8000838:	0023      	movs	r3, r4
 800083a:	3380      	adds	r3, #128	@ 0x80
 800083c:	1c61      	adds	r1, r4, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	dd41      	ble.n	80008c6 <__aeabi_fmul+0x246>
 8000842:	0772      	lsls	r2, r6, #29
 8000844:	d094      	beq.n	8000770 <__aeabi_fmul+0xf0>
 8000846:	220f      	movs	r2, #15
 8000848:	4032      	ands	r2, r6
 800084a:	2a04      	cmp	r2, #4
 800084c:	d000      	beq.n	8000850 <__aeabi_fmul+0x1d0>
 800084e:	e78e      	b.n	800076e <__aeabi_fmul+0xee>
 8000850:	e78e      	b.n	8000770 <__aeabi_fmul+0xf0>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d105      	bne.n	8000862 <__aeabi_fmul+0x1e2>
 8000856:	2304      	movs	r3, #4
 8000858:	4699      	mov	r9, r3
 800085a:	3b03      	subs	r3, #3
 800085c:	2400      	movs	r4, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e726      	b.n	80006b0 <__aeabi_fmul+0x30>
 8000862:	0030      	movs	r0, r6
 8000864:	f002 f920 	bl	8002aa8 <__clzsi2>
 8000868:	2476      	movs	r4, #118	@ 0x76
 800086a:	1f43      	subs	r3, r0, #5
 800086c:	409e      	lsls	r6, r3
 800086e:	2300      	movs	r3, #0
 8000870:	4264      	negs	r4, r4
 8000872:	4699      	mov	r9, r3
 8000874:	469a      	mov	sl, r3
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	e71a      	b.n	80006b0 <__aeabi_fmul+0x30>
 800087a:	4640      	mov	r0, r8
 800087c:	f002 f914 	bl	8002aa8 <__clzsi2>
 8000880:	464b      	mov	r3, r9
 8000882:	1a24      	subs	r4, r4, r0
 8000884:	3c76      	subs	r4, #118	@ 0x76
 8000886:	2b0a      	cmp	r3, #10
 8000888:	dca1      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 800088a:	4643      	mov	r3, r8
 800088c:	3805      	subs	r0, #5
 800088e:	4083      	lsls	r3, r0
 8000890:	407d      	eors	r5, r7
 8000892:	4698      	mov	r8, r3
 8000894:	b2ea      	uxtb	r2, r5
 8000896:	e724      	b.n	80006e2 <__aeabi_fmul+0x62>
 8000898:	464a      	mov	r2, r9
 800089a:	3302      	adds	r3, #2
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	407a      	eors	r2, r7
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	dc92      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80008a8:	4649      	mov	r1, r9
 80008aa:	0015      	movs	r5, r2
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d026      	beq.n	80008fe <__aeabi_fmul+0x27e>
 80008b0:	4699      	mov	r9, r3
 80008b2:	2002      	movs	r0, #2
 80008b4:	e719      	b.n	80006ea <__aeabi_fmul+0x6a>
 80008b6:	230c      	movs	r3, #12
 80008b8:	4699      	mov	r9, r3
 80008ba:	3b09      	subs	r3, #9
 80008bc:	24ff      	movs	r4, #255	@ 0xff
 80008be:	469a      	mov	sl, r3
 80008c0:	e6f6      	b.n	80006b0 <__aeabi_fmul+0x30>
 80008c2:	0015      	movs	r5, r2
 80008c4:	0021      	movs	r1, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b1b      	cmp	r3, #27
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x250>
 80008ce:	e786      	b.n	80007de <__aeabi_fmul+0x15e>
 80008d0:	319e      	adds	r1, #158	@ 0x9e
 80008d2:	0032      	movs	r2, r6
 80008d4:	408e      	lsls	r6, r1
 80008d6:	40da      	lsrs	r2, r3
 80008d8:	1e73      	subs	r3, r6, #1
 80008da:	419e      	sbcs	r6, r3
 80008dc:	4332      	orrs	r2, r6
 80008de:	0753      	lsls	r3, r2, #29
 80008e0:	d004      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008e2:	230f      	movs	r3, #15
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d000      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008ea:	3204      	adds	r2, #4
 80008ec:	0153      	lsls	r3, r2, #5
 80008ee:	d510      	bpl.n	8000912 <__aeabi_fmul+0x292>
 80008f0:	2301      	movs	r3, #1
 80008f2:	2200      	movs	r2, #0
 80008f4:	e792      	b.n	800081c <__aeabi_fmul+0x19c>
 80008f6:	003d      	movs	r5, r7
 80008f8:	4646      	mov	r6, r8
 80008fa:	4682      	mov	sl, r0
 80008fc:	e767      	b.n	80007ce <__aeabi_fmul+0x14e>
 80008fe:	23ff      	movs	r3, #255	@ 0xff
 8000900:	2200      	movs	r2, #0
 8000902:	e78b      	b.n	800081c <__aeabi_fmul+0x19c>
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	2500      	movs	r5, #0
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	e786      	b.n	800081a <__aeabi_fmul+0x19a>
 800090c:	003d      	movs	r5, r7
 800090e:	431a      	orrs	r2, r3
 8000910:	e783      	b.n	800081a <__aeabi_fmul+0x19a>
 8000912:	0192      	lsls	r2, r2, #6
 8000914:	2300      	movs	r3, #0
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e780      	b.n	800081c <__aeabi_fmul+0x19c>
 800091a:	003d      	movs	r5, r7
 800091c:	4646      	mov	r6, r8
 800091e:	e777      	b.n	8000810 <__aeabi_fmul+0x190>
 8000920:	002a      	movs	r2, r5
 8000922:	2301      	movs	r3, #1
 8000924:	407a      	eors	r2, r7
 8000926:	408b      	lsls	r3, r1
 8000928:	2003      	movs	r0, #3
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	e6e9      	b.n	8000702 <__aeabi_fmul+0x82>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	f7ffffff 	.word	0xf7ffffff

08000934 <__aeabi_i2f>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	2800      	cmp	r0, #0
 8000938:	d012      	beq.n	8000960 <__aeabi_i2f+0x2c>
 800093a:	17c3      	asrs	r3, r0, #31
 800093c:	18c5      	adds	r5, r0, r3
 800093e:	405d      	eors	r5, r3
 8000940:	0fc4      	lsrs	r4, r0, #31
 8000942:	0028      	movs	r0, r5
 8000944:	f002 f8b0 	bl	8002aa8 <__clzsi2>
 8000948:	239e      	movs	r3, #158	@ 0x9e
 800094a:	1a1b      	subs	r3, r3, r0
 800094c:	2b96      	cmp	r3, #150	@ 0x96
 800094e:	dc0f      	bgt.n	8000970 <__aeabi_i2f+0x3c>
 8000950:	2808      	cmp	r0, #8
 8000952:	d038      	beq.n	80009c6 <__aeabi_i2f+0x92>
 8000954:	3808      	subs	r0, #8
 8000956:	4085      	lsls	r5, r0
 8000958:	026d      	lsls	r5, r5, #9
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e002      	b.n	8000966 <__aeabi_i2f+0x32>
 8000960:	2400      	movs	r4, #0
 8000962:	2000      	movs	r0, #0
 8000964:	2500      	movs	r5, #0
 8000966:	05c0      	lsls	r0, r0, #23
 8000968:	4328      	orrs	r0, r5
 800096a:	07e4      	lsls	r4, r4, #31
 800096c:	4320      	orrs	r0, r4
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	2b99      	cmp	r3, #153	@ 0x99
 8000972:	dc14      	bgt.n	800099e <__aeabi_i2f+0x6a>
 8000974:	1f42      	subs	r2, r0, #5
 8000976:	4095      	lsls	r5, r2
 8000978:	002a      	movs	r2, r5
 800097a:	4915      	ldr	r1, [pc, #84]	@ (80009d0 <__aeabi_i2f+0x9c>)
 800097c:	4011      	ands	r1, r2
 800097e:	0755      	lsls	r5, r2, #29
 8000980:	d01c      	beq.n	80009bc <__aeabi_i2f+0x88>
 8000982:	250f      	movs	r5, #15
 8000984:	402a      	ands	r2, r5
 8000986:	2a04      	cmp	r2, #4
 8000988:	d018      	beq.n	80009bc <__aeabi_i2f+0x88>
 800098a:	3104      	adds	r1, #4
 800098c:	08ca      	lsrs	r2, r1, #3
 800098e:	0149      	lsls	r1, r1, #5
 8000990:	d515      	bpl.n	80009be <__aeabi_i2f+0x8a>
 8000992:	239f      	movs	r3, #159	@ 0x9f
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	1a18      	subs	r0, r3, r0
 8000998:	0a55      	lsrs	r5, r2, #9
 800099a:	b2c0      	uxtb	r0, r0
 800099c:	e7e3      	b.n	8000966 <__aeabi_i2f+0x32>
 800099e:	2205      	movs	r2, #5
 80009a0:	0029      	movs	r1, r5
 80009a2:	1a12      	subs	r2, r2, r0
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	0002      	movs	r2, r0
 80009a8:	321b      	adds	r2, #27
 80009aa:	4095      	lsls	r5, r2
 80009ac:	002a      	movs	r2, r5
 80009ae:	1e55      	subs	r5, r2, #1
 80009b0:	41aa      	sbcs	r2, r5
 80009b2:	430a      	orrs	r2, r1
 80009b4:	4906      	ldr	r1, [pc, #24]	@ (80009d0 <__aeabi_i2f+0x9c>)
 80009b6:	4011      	ands	r1, r2
 80009b8:	0755      	lsls	r5, r2, #29
 80009ba:	d1e2      	bne.n	8000982 <__aeabi_i2f+0x4e>
 80009bc:	08ca      	lsrs	r2, r1, #3
 80009be:	0252      	lsls	r2, r2, #9
 80009c0:	0a55      	lsrs	r5, r2, #9
 80009c2:	b2d8      	uxtb	r0, r3
 80009c4:	e7cf      	b.n	8000966 <__aeabi_i2f+0x32>
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	308e      	adds	r0, #142	@ 0x8e
 80009cc:	e7cb      	b.n	8000966 <__aeabi_i2f+0x32>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	fbffffff 	.word	0xfbffffff

080009d4 <__aeabi_dadd>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	464f      	mov	r7, r9
 80009d8:	4646      	mov	r6, r8
 80009da:	46d6      	mov	lr, sl
 80009dc:	b5c0      	push	{r6, r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	9000      	str	r0, [sp, #0]
 80009e2:	9101      	str	r1, [sp, #4]
 80009e4:	030e      	lsls	r6, r1, #12
 80009e6:	004c      	lsls	r4, r1, #1
 80009e8:	0fcd      	lsrs	r5, r1, #31
 80009ea:	0a71      	lsrs	r1, r6, #9
 80009ec:	9e00      	ldr	r6, [sp, #0]
 80009ee:	005f      	lsls	r7, r3, #1
 80009f0:	0f76      	lsrs	r6, r6, #29
 80009f2:	430e      	orrs	r6, r1
 80009f4:	9900      	ldr	r1, [sp, #0]
 80009f6:	9200      	str	r2, [sp, #0]
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4689      	mov	r9, r1
 80009fe:	0319      	lsls	r1, r3, #12
 8000a00:	0d7b      	lsrs	r3, r7, #21
 8000a02:	4698      	mov	r8, r3
 8000a04:	9b01      	ldr	r3, [sp, #4]
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	0fdb      	lsrs	r3, r3, #31
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	0f5b      	lsrs	r3, r3, #29
 8000a12:	430b      	orrs	r3, r1
 8000a14:	4641      	mov	r1, r8
 8000a16:	0d64      	lsrs	r4, r4, #21
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	1a61      	subs	r1, r4, r1
 8000a1c:	4565      	cmp	r5, ip
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x4e>
 8000a20:	e0a6      	b.n	8000b70 <__aeabi_dadd+0x19c>
 8000a22:	2900      	cmp	r1, #0
 8000a24:	dd72      	ble.n	8000b0c <__aeabi_dadd+0x138>
 8000a26:	4647      	mov	r7, r8
 8000a28:	2f00      	cmp	r7, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x5a>
 8000a2c:	e0dd      	b.n	8000bea <__aeabi_dadd+0x216>
 8000a2e:	4fcc      	ldr	r7, [pc, #816]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000a30:	42bc      	cmp	r4, r7
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x62>
 8000a34:	e19a      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000a36:	2701      	movs	r7, #1
 8000a38:	2938      	cmp	r1, #56	@ 0x38
 8000a3a:	dc17      	bgt.n	8000a6c <__aeabi_dadd+0x98>
 8000a3c:	2780      	movs	r7, #128	@ 0x80
 8000a3e:	043f      	lsls	r7, r7, #16
 8000a40:	433b      	orrs	r3, r7
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dadd+0x74>
 8000a46:	e1dd      	b.n	8000e04 <__aeabi_dadd+0x430>
 8000a48:	2720      	movs	r7, #32
 8000a4a:	1a78      	subs	r0, r7, r1
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	4087      	lsls	r7, r0
 8000a50:	46ba      	mov	sl, r7
 8000a52:	0017      	movs	r7, r2
 8000a54:	40cf      	lsrs	r7, r1
 8000a56:	4684      	mov	ip, r0
 8000a58:	0038      	movs	r0, r7
 8000a5a:	4657      	mov	r7, sl
 8000a5c:	4307      	orrs	r7, r0
 8000a5e:	4660      	mov	r0, ip
 8000a60:	4082      	lsls	r2, r0
 8000a62:	40cb      	lsrs	r3, r1
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	1af6      	subs	r6, r6, r3
 8000a6a:	4317      	orrs	r7, r2
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1bdf      	subs	r7, r3, r7
 8000a70:	45b9      	cmp	r9, r7
 8000a72:	4180      	sbcs	r0, r0
 8000a74:	4240      	negs	r0, r0
 8000a76:	1a36      	subs	r6, r6, r0
 8000a78:	0233      	lsls	r3, r6, #8
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_dadd+0xaa>
 8000a7c:	e0ff      	b.n	8000c7e <__aeabi_dadd+0x2aa>
 8000a7e:	0276      	lsls	r6, r6, #9
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0xb4>
 8000a86:	e13c      	b.n	8000d02 <__aeabi_dadd+0x32e>
 8000a88:	0030      	movs	r0, r6
 8000a8a:	f002 f80d 	bl	8002aa8 <__clzsi2>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	3b08      	subs	r3, #8
 8000a92:	2120      	movs	r1, #32
 8000a94:	0038      	movs	r0, r7
 8000a96:	1aca      	subs	r2, r1, r3
 8000a98:	40d0      	lsrs	r0, r2
 8000a9a:	409e      	lsls	r6, r3
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	409f      	lsls	r7, r3
 8000aa0:	4332      	orrs	r2, r6
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0xd4>
 8000aa6:	e1a6      	b.n	8000df6 <__aeabi_dadd+0x422>
 8000aa8:	1b18      	subs	r0, r3, r4
 8000aaa:	3001      	adds	r0, #1
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	003e      	movs	r6, r7
 8000ab0:	408f      	lsls	r7, r1
 8000ab2:	40c6      	lsrs	r6, r0
 8000ab4:	1e7b      	subs	r3, r7, #1
 8000ab6:	419f      	sbcs	r7, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	408b      	lsls	r3, r1
 8000abc:	4337      	orrs	r7, r6
 8000abe:	431f      	orrs	r7, r3
 8000ac0:	40c2      	lsrs	r2, r0
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0016      	movs	r6, r2
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0xfa>
 8000acc:	e1df      	b.n	8000e8e <__aeabi_dadd+0x4ba>
 8000ace:	077b      	lsls	r3, r7, #29
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x100>
 8000ad2:	e332      	b.n	800113a <__aeabi_dadd+0x766>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	403b      	ands	r3, r7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d004      	beq.n	8000ae8 <__aeabi_dadd+0x114>
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	42ba      	cmp	r2, r7
 8000ae2:	41bf      	sbcs	r7, r7
 8000ae4:	427f      	negs	r7, r7
 8000ae6:	19f6      	adds	r6, r6, r7
 8000ae8:	0233      	lsls	r3, r6, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dadd+0x11a>
 8000aec:	e323      	b.n	8001136 <__aeabi_dadd+0x762>
 8000aee:	4b9c      	ldr	r3, [pc, #624]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000af0:	3401      	adds	r4, #1
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x124>
 8000af6:	e0b4      	b.n	8000c62 <__aeabi_dadd+0x28e>
 8000af8:	4b9a      	ldr	r3, [pc, #616]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000afa:	0564      	lsls	r4, r4, #21
 8000afc:	401e      	ands	r6, r3
 8000afe:	0d64      	lsrs	r4, r4, #21
 8000b00:	0777      	lsls	r7, r6, #29
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	0276      	lsls	r6, r6, #9
 8000b06:	4317      	orrs	r7, r2
 8000b08:	0b36      	lsrs	r6, r6, #12
 8000b0a:	e0ac      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x13e>
 8000b10:	e07e      	b.n	8000c10 <__aeabi_dadd+0x23c>
 8000b12:	4641      	mov	r1, r8
 8000b14:	1b09      	subs	r1, r1, r4
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x148>
 8000b1a:	e160      	b.n	8000dde <__aeabi_dadd+0x40a>
 8000b1c:	0034      	movs	r4, r6
 8000b1e:	4648      	mov	r0, r9
 8000b20:	4304      	orrs	r4, r0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x152>
 8000b24:	e1c9      	b.n	8000eba <__aeabi_dadd+0x4e6>
 8000b26:	1e4c      	subs	r4, r1, #1
 8000b28:	2901      	cmp	r1, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x15a>
 8000b2c:	e22e      	b.n	8000f8c <__aeabi_dadd+0x5b8>
 8000b2e:	4d8c      	ldr	r5, [pc, #560]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b30:	42a9      	cmp	r1, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x162>
 8000b34:	e224      	b.n	8000f80 <__aeabi_dadd+0x5ac>
 8000b36:	2701      	movs	r7, #1
 8000b38:	2c38      	cmp	r4, #56	@ 0x38
 8000b3a:	dc11      	bgt.n	8000b60 <__aeabi_dadd+0x18c>
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x170>
 8000b42:	e20b      	b.n	8000f5c <__aeabi_dadd+0x588>
 8000b44:	2420      	movs	r4, #32
 8000b46:	0037      	movs	r7, r6
 8000b48:	4648      	mov	r0, r9
 8000b4a:	1a64      	subs	r4, r4, r1
 8000b4c:	40a7      	lsls	r7, r4
 8000b4e:	40c8      	lsrs	r0, r1
 8000b50:	4307      	orrs	r7, r0
 8000b52:	4648      	mov	r0, r9
 8000b54:	40a0      	lsls	r0, r4
 8000b56:	40ce      	lsrs	r6, r1
 8000b58:	1e44      	subs	r4, r0, #1
 8000b5a:	41a0      	sbcs	r0, r4
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	4307      	orrs	r7, r0
 8000b60:	1bd7      	subs	r7, r2, r7
 8000b62:	42ba      	cmp	r2, r7
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4252      	negs	r2, r2
 8000b68:	4665      	mov	r5, ip
 8000b6a:	4644      	mov	r4, r8
 8000b6c:	1a9e      	subs	r6, r3, r2
 8000b6e:	e783      	b.n	8000a78 <__aeabi_dadd+0xa4>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_dadd+0x1a2>
 8000b74:	e09c      	b.n	8000cb0 <__aeabi_dadd+0x2dc>
 8000b76:	4647      	mov	r7, r8
 8000b78:	2f00      	cmp	r7, #0
 8000b7a:	d167      	bne.n	8000c4c <__aeabi_dadd+0x278>
 8000b7c:	001f      	movs	r7, r3
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x1b0>
 8000b82:	e0e4      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000b84:	1e48      	subs	r0, r1, #1
 8000b86:	2901      	cmp	r1, #1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1b8>
 8000b8a:	e19b      	b.n	8000ec4 <__aeabi_dadd+0x4f0>
 8000b8c:	4f74      	ldr	r7, [pc, #464]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b8e:	42b9      	cmp	r1, r7
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x1c0>
 8000b92:	e0eb      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000b94:	2701      	movs	r7, #1
 8000b96:	0001      	movs	r1, r0
 8000b98:	2838      	cmp	r0, #56	@ 0x38
 8000b9a:	dc11      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000b9c:	291f      	cmp	r1, #31
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x1ce>
 8000ba0:	e1c7      	b.n	8000f32 <__aeabi_dadd+0x55e>
 8000ba2:	2720      	movs	r7, #32
 8000ba4:	1a78      	subs	r0, r7, r1
 8000ba6:	001f      	movs	r7, r3
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4087      	lsls	r7, r0
 8000bac:	0010      	movs	r0, r2
 8000bae:	40c8      	lsrs	r0, r1
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4660      	mov	r0, ip
 8000bb4:	4082      	lsls	r2, r0
 8000bb6:	40cb      	lsrs	r3, r1
 8000bb8:	1e50      	subs	r0, r2, #1
 8000bba:	4182      	sbcs	r2, r0
 8000bbc:	18f6      	adds	r6, r6, r3
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	444f      	add	r7, r9
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	1836      	adds	r6, r6, r0
 8000bca:	0233      	lsls	r3, r6, #8
 8000bcc:	d557      	bpl.n	8000c7e <__aeabi_dadd+0x2aa>
 8000bce:	4b64      	ldr	r3, [pc, #400]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d045      	beq.n	8000c62 <__aeabi_dadd+0x28e>
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4b62      	ldr	r3, [pc, #392]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000bda:	087a      	lsrs	r2, r7, #1
 8000bdc:	401e      	ands	r6, r3
 8000bde:	4039      	ands	r1, r7
 8000be0:	430a      	orrs	r2, r1
 8000be2:	07f7      	lsls	r7, r6, #31
 8000be4:	4317      	orrs	r7, r2
 8000be6:	0876      	lsrs	r6, r6, #1
 8000be8:	e771      	b.n	8000ace <__aeabi_dadd+0xfa>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4317      	orrs	r7, r2
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x21e>
 8000bf0:	e0ad      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000bf2:	1e4f      	subs	r7, r1, #1
 8000bf4:	46bc      	mov	ip, r7
 8000bf6:	2901      	cmp	r1, #1
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x228>
 8000bfa:	e182      	b.n	8000f02 <__aeabi_dadd+0x52e>
 8000bfc:	4f58      	ldr	r7, [pc, #352]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bfe:	42b9      	cmp	r1, r7
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x230>
 8000c02:	e190      	b.n	8000f26 <__aeabi_dadd+0x552>
 8000c04:	4661      	mov	r1, ip
 8000c06:	2701      	movs	r7, #1
 8000c08:	2938      	cmp	r1, #56	@ 0x38
 8000c0a:	dd00      	ble.n	8000c0e <__aeabi_dadd+0x23a>
 8000c0c:	e72e      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000c0e:	e718      	b.n	8000a42 <__aeabi_dadd+0x6e>
 8000c10:	4f55      	ldr	r7, [pc, #340]	@ (8000d68 <__aeabi_dadd+0x394>)
 8000c12:	1c61      	adds	r1, r4, #1
 8000c14:	4239      	tst	r1, r7
 8000c16:	d000      	beq.n	8000c1a <__aeabi_dadd+0x246>
 8000c18:	e0d0      	b.n	8000dbc <__aeabi_dadd+0x3e8>
 8000c1a:	0031      	movs	r1, r6
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	001f      	movs	r7, r3
 8000c20:	4301      	orrs	r1, r0
 8000c22:	4317      	orrs	r7, r2
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x256>
 8000c28:	e13d      	b.n	8000ea6 <__aeabi_dadd+0x4d2>
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x25c>
 8000c2e:	e1bc      	b.n	8000faa <__aeabi_dadd+0x5d6>
 8000c30:	2f00      	cmp	r7, #0
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x262>
 8000c34:	e1bf      	b.n	8000fb6 <__aeabi_dadd+0x5e2>
 8000c36:	464b      	mov	r3, r9
 8000c38:	2100      	movs	r1, #0
 8000c3a:	08d8      	lsrs	r0, r3, #3
 8000c3c:	0777      	lsls	r7, r6, #29
 8000c3e:	4307      	orrs	r7, r0
 8000c40:	08f0      	lsrs	r0, r6, #3
 8000c42:	0306      	lsls	r6, r0, #12
 8000c44:	054c      	lsls	r4, r1, #21
 8000c46:	0b36      	lsrs	r6, r6, #12
 8000c48:	0d64      	lsrs	r4, r4, #21
 8000c4a:	e00c      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000c4c:	4f44      	ldr	r7, [pc, #272]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c4e:	42bc      	cmp	r4, r7
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x280>
 8000c52:	e08b      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000c54:	2701      	movs	r7, #1
 8000c56:	2938      	cmp	r1, #56	@ 0x38
 8000c58:	dcb2      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000c5a:	2780      	movs	r7, #128	@ 0x80
 8000c5c:	043f      	lsls	r7, r7, #16
 8000c5e:	433b      	orrs	r3, r7
 8000c60:	e79c      	b.n	8000b9c <__aeabi_dadd+0x1c8>
 8000c62:	2600      	movs	r6, #0
 8000c64:	2700      	movs	r7, #0
 8000c66:	0524      	lsls	r4, r4, #20
 8000c68:	4334      	orrs	r4, r6
 8000c6a:	07ed      	lsls	r5, r5, #31
 8000c6c:	432c      	orrs	r4, r5
 8000c6e:	0038      	movs	r0, r7
 8000c70:	0021      	movs	r1, r4
 8000c72:	b002      	add	sp, #8
 8000c74:	bce0      	pop	{r5, r6, r7}
 8000c76:	46ba      	mov	sl, r7
 8000c78:	46b1      	mov	r9, r6
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	077b      	lsls	r3, r7, #29
 8000c80:	d004      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c82:	230f      	movs	r3, #15
 8000c84:	403b      	ands	r3, r7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c8a:	e728      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000c8c:	08f8      	lsrs	r0, r7, #3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c90:	0777      	lsls	r7, r6, #29
 8000c92:	4307      	orrs	r7, r0
 8000c94:	08f0      	lsrs	r0, r6, #3
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x2c8>
 8000c9a:	e24a      	b.n	8001132 <__aeabi_dadd+0x75e>
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	d059      	beq.n	8000d56 <__aeabi_dadd+0x382>
 8000ca2:	2680      	movs	r6, #128	@ 0x80
 8000ca4:	0336      	lsls	r6, r6, #12
 8000ca6:	4306      	orrs	r6, r0
 8000ca8:	0336      	lsls	r6, r6, #12
 8000caa:	4c2d      	ldr	r4, [pc, #180]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cac:	0b36      	lsrs	r6, r6, #12
 8000cae:	e7da      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d061      	beq.n	8000d78 <__aeabi_dadd+0x3a4>
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	1b09      	subs	r1, r1, r4
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x2ea>
 8000cbc:	e0b9      	b.n	8000e32 <__aeabi_dadd+0x45e>
 8000cbe:	4c28      	ldr	r4, [pc, #160]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x2f2>
 8000cc4:	e1a5      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	2938      	cmp	r1, #56	@ 0x38
 8000cca:	dc13      	bgt.n	8000cf4 <__aeabi_dadd+0x320>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	0424      	lsls	r4, r4, #16
 8000cd0:	4326      	orrs	r6, r4
 8000cd2:	291f      	cmp	r1, #31
 8000cd4:	dd00      	ble.n	8000cd8 <__aeabi_dadd+0x304>
 8000cd6:	e1c8      	b.n	800106a <__aeabi_dadd+0x696>
 8000cd8:	2420      	movs	r4, #32
 8000cda:	0037      	movs	r7, r6
 8000cdc:	4648      	mov	r0, r9
 8000cde:	1a64      	subs	r4, r4, r1
 8000ce0:	40a7      	lsls	r7, r4
 8000ce2:	40c8      	lsrs	r0, r1
 8000ce4:	4307      	orrs	r7, r0
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	40a0      	lsls	r0, r4
 8000cea:	40ce      	lsrs	r6, r1
 8000cec:	1e44      	subs	r4, r0, #1
 8000cee:	41a0      	sbcs	r0, r4
 8000cf0:	199b      	adds	r3, r3, r6
 8000cf2:	4307      	orrs	r7, r0
 8000cf4:	18bf      	adds	r7, r7, r2
 8000cf6:	4297      	cmp	r7, r2
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	4252      	negs	r2, r2
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	18d6      	adds	r6, r2, r3
 8000d00:	e763      	b.n	8000bca <__aeabi_dadd+0x1f6>
 8000d02:	0038      	movs	r0, r7
 8000d04:	f001 fed0 	bl	8002aa8 <__clzsi2>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dadd+0x33e>
 8000d10:	e6bf      	b.n	8000a92 <__aeabi_dadd+0xbe>
 8000d12:	003a      	movs	r2, r7
 8000d14:	3808      	subs	r0, #8
 8000d16:	4082      	lsls	r2, r0
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_dadd+0x34a>
 8000d1c:	e083      	b.n	8000e26 <__aeabi_dadd+0x452>
 8000d1e:	1b1b      	subs	r3, r3, r4
 8000d20:	1c58      	adds	r0, r3, #1
 8000d22:	281f      	cmp	r0, #31
 8000d24:	dc00      	bgt.n	8000d28 <__aeabi_dadd+0x354>
 8000d26:	e1b4      	b.n	8001092 <__aeabi_dadd+0x6be>
 8000d28:	0017      	movs	r7, r2
 8000d2a:	3b1f      	subs	r3, #31
 8000d2c:	40df      	lsrs	r7, r3
 8000d2e:	2820      	cmp	r0, #32
 8000d30:	d005      	beq.n	8000d3e <__aeabi_dadd+0x36a>
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	1a1b      	subs	r3, r3, r0
 8000d36:	409a      	lsls	r2, r3
 8000d38:	1e53      	subs	r3, r2, #1
 8000d3a:	419a      	sbcs	r2, r3
 8000d3c:	4317      	orrs	r7, r2
 8000d3e:	2400      	movs	r4, #0
 8000d40:	2f00      	cmp	r7, #0
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_dadd+0x386>
 8000d44:	077b      	lsls	r3, r7, #29
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x376>
 8000d48:	e6c4      	b.n	8000ad4 <__aeabi_dadd+0x100>
 8000d4a:	0026      	movs	r6, r4
 8000d4c:	e79e      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	000c      	movs	r4, r1
 8000d52:	08d8      	lsrs	r0, r3, #3
 8000d54:	e79b      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000d56:	2700      	movs	r7, #0
 8000d58:	4c01      	ldr	r4, [pc, #4]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	e783      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff
 8000d68:	000007fe 	.word	0x000007fe
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	0777      	lsls	r7, r6, #29
 8000d70:	08d8      	lsrs	r0, r3, #3
 8000d72:	4307      	orrs	r7, r0
 8000d74:	08f0      	lsrs	r0, r6, #3
 8000d76:	e791      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000d78:	4fcd      	ldr	r7, [pc, #820]	@ (80010b0 <__aeabi_dadd+0x6dc>)
 8000d7a:	1c61      	adds	r1, r4, #1
 8000d7c:	4239      	tst	r1, r7
 8000d7e:	d16b      	bne.n	8000e58 <__aeabi_dadd+0x484>
 8000d80:	0031      	movs	r1, r6
 8000d82:	4648      	mov	r0, r9
 8000d84:	4301      	orrs	r1, r0
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dadd+0x3b8>
 8000d8a:	e14b      	b.n	8001024 <__aeabi_dadd+0x650>
 8000d8c:	001f      	movs	r7, r3
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	2900      	cmp	r1, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x3c2>
 8000d94:	e181      	b.n	800109a <__aeabi_dadd+0x6c6>
 8000d96:	2f00      	cmp	r7, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x3c8>
 8000d9a:	e74c      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000d9c:	444a      	add	r2, r9
 8000d9e:	454a      	cmp	r2, r9
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	18f6      	adds	r6, r6, r3
 8000da4:	4240      	negs	r0, r0
 8000da6:	1836      	adds	r6, r6, r0
 8000da8:	0233      	lsls	r3, r6, #8
 8000daa:	d500      	bpl.n	8000dae <__aeabi_dadd+0x3da>
 8000dac:	e1b0      	b.n	8001110 <__aeabi_dadd+0x73c>
 8000dae:	0017      	movs	r7, r2
 8000db0:	4691      	mov	r9, r2
 8000db2:	4337      	orrs	r7, r6
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dadd+0x3e4>
 8000db6:	e73e      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e754      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	1a89      	subs	r1, r1, r2
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	45c1      	cmp	r9, r8
 8000dc4:	41bf      	sbcs	r7, r7
 8000dc6:	1af1      	subs	r1, r6, r3
 8000dc8:	427f      	negs	r7, r7
 8000dca:	1bc9      	subs	r1, r1, r7
 8000dcc:	020f      	lsls	r7, r1, #8
 8000dce:	d461      	bmi.n	8000e94 <__aeabi_dadd+0x4c0>
 8000dd0:	4647      	mov	r7, r8
 8000dd2:	430f      	orrs	r7, r1
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x404>
 8000dd6:	e0bd      	b.n	8000f54 <__aeabi_dadd+0x580>
 8000dd8:	000e      	movs	r6, r1
 8000dda:	4647      	mov	r7, r8
 8000ddc:	e651      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000dde:	4cb5      	ldr	r4, [pc, #724]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x412>
 8000de4:	e100      	b.n	8000fe8 <__aeabi_dadd+0x614>
 8000de6:	2701      	movs	r7, #1
 8000de8:	2938      	cmp	r1, #56	@ 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x41a>
 8000dec:	e6b8      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000dee:	2480      	movs	r4, #128	@ 0x80
 8000df0:	0424      	lsls	r4, r4, #16
 8000df2:	4326      	orrs	r6, r4
 8000df4:	e6a3      	b.n	8000b3e <__aeabi_dadd+0x16a>
 8000df6:	4eb0      	ldr	r6, [pc, #704]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000df8:	1ae4      	subs	r4, r4, r3
 8000dfa:	4016      	ands	r6, r2
 8000dfc:	077b      	lsls	r3, r7, #29
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x42e>
 8000e00:	e73f      	b.n	8000c82 <__aeabi_dadd+0x2ae>
 8000e02:	e743      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000e04:	000f      	movs	r7, r1
 8000e06:	0018      	movs	r0, r3
 8000e08:	3f20      	subs	r7, #32
 8000e0a:	40f8      	lsrs	r0, r7
 8000e0c:	4684      	mov	ip, r0
 8000e0e:	2920      	cmp	r1, #32
 8000e10:	d003      	beq.n	8000e1a <__aeabi_dadd+0x446>
 8000e12:	2740      	movs	r7, #64	@ 0x40
 8000e14:	1a79      	subs	r1, r7, r1
 8000e16:	408b      	lsls	r3, r1
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	1e53      	subs	r3, r2, #1
 8000e1c:	419a      	sbcs	r2, r3
 8000e1e:	4663      	mov	r3, ip
 8000e20:	0017      	movs	r7, r2
 8000e22:	431f      	orrs	r7, r3
 8000e24:	e622      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000e26:	48a4      	ldr	r0, [pc, #656]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000e28:	1ae1      	subs	r1, r4, r3
 8000e2a:	4010      	ands	r0, r2
 8000e2c:	0747      	lsls	r7, r0, #29
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	e707      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e32:	0034      	movs	r4, r6
 8000e34:	4648      	mov	r0, r9
 8000e36:	4304      	orrs	r4, r0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x468>
 8000e3a:	e0fa      	b.n	8001032 <__aeabi_dadd+0x65e>
 8000e3c:	1e4c      	subs	r4, r1, #1
 8000e3e:	2901      	cmp	r1, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x470>
 8000e42:	e0d7      	b.n	8000ff4 <__aeabi_dadd+0x620>
 8000e44:	4f9b      	ldr	r7, [pc, #620]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x478>
 8000e4a:	e0e2      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000e4c:	2701      	movs	r7, #1
 8000e4e:	2c38      	cmp	r4, #56	@ 0x38
 8000e50:	dd00      	ble.n	8000e54 <__aeabi_dadd+0x480>
 8000e52:	e74f      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8000e54:	0021      	movs	r1, r4
 8000e56:	e73c      	b.n	8000cd2 <__aeabi_dadd+0x2fe>
 8000e58:	4c96      	ldr	r4, [pc, #600]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x48c>
 8000e5e:	e0dd      	b.n	800101c <__aeabi_dadd+0x648>
 8000e60:	444a      	add	r2, r9
 8000e62:	454a      	cmp	r2, r9
 8000e64:	4180      	sbcs	r0, r0
 8000e66:	18f3      	adds	r3, r6, r3
 8000e68:	4240      	negs	r0, r0
 8000e6a:	1818      	adds	r0, r3, r0
 8000e6c:	07c7      	lsls	r7, r0, #31
 8000e6e:	0852      	lsrs	r2, r2, #1
 8000e70:	4317      	orrs	r7, r2
 8000e72:	0846      	lsrs	r6, r0, #1
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	d005      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e78:	220f      	movs	r2, #15
 8000e7a:	000c      	movs	r4, r1
 8000e7c:	403a      	ands	r2, r7
 8000e7e:	2a04      	cmp	r2, #4
 8000e80:	d000      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e82:	e62c      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000e84:	0776      	lsls	r6, r6, #29
 8000e86:	08ff      	lsrs	r7, r7, #3
 8000e88:	4337      	orrs	r7, r6
 8000e8a:	0900      	lsrs	r0, r0, #4
 8000e8c:	e6d9      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e8e:	2700      	movs	r7, #0
 8000e90:	2600      	movs	r6, #0
 8000e92:	e6e8      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000e94:	4649      	mov	r1, r9
 8000e96:	1a57      	subs	r7, r2, r1
 8000e98:	42ba      	cmp	r2, r7
 8000e9a:	4192      	sbcs	r2, r2
 8000e9c:	1b9e      	subs	r6, r3, r6
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	4665      	mov	r5, ip
 8000ea2:	1ab6      	subs	r6, r6, r2
 8000ea4:	e5ed      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d000      	beq.n	8000eac <__aeabi_dadd+0x4d8>
 8000eaa:	e0c6      	b.n	800103a <__aeabi_dadd+0x666>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	d167      	bne.n	8000f80 <__aeabi_dadd+0x5ac>
 8000eb0:	2680      	movs	r6, #128	@ 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4c7f      	ldr	r4, [pc, #508]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000eb6:	0336      	lsls	r6, r6, #12
 8000eb8:	e6d5      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000eba:	4665      	mov	r5, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	001e      	movs	r6, r3
 8000ec0:	08d0      	lsrs	r0, r2, #3
 8000ec2:	e6e4      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000ec4:	444a      	add	r2, r9
 8000ec6:	454a      	cmp	r2, r9
 8000ec8:	4180      	sbcs	r0, r0
 8000eca:	18f3      	adds	r3, r6, r3
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1818      	adds	r0, r3, r0
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0203      	lsls	r3, r0, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x504>
 8000ed6:	e096      	b.n	8001006 <__aeabi_dadd+0x632>
 8000ed8:	4b77      	ldr	r3, [pc, #476]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000eda:	0849      	lsrs	r1, r1, #1
 8000edc:	4018      	ands	r0, r3
 8000ede:	07c3      	lsls	r3, r0, #31
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	0844      	lsrs	r4, r0, #1
 8000ee4:	0749      	lsls	r1, r1, #29
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x516>
 8000ee8:	e129      	b.n	800113e <__aeabi_dadd+0x76a>
 8000eea:	220f      	movs	r2, #15
 8000eec:	401a      	ands	r2, r3
 8000eee:	2a04      	cmp	r2, #4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x520>
 8000ef2:	e0ea      	b.n	80010ca <__aeabi_dadd+0x6f6>
 8000ef4:	1d1f      	adds	r7, r3, #4
 8000ef6:	429f      	cmp	r7, r3
 8000ef8:	41b6      	sbcs	r6, r6
 8000efa:	4276      	negs	r6, r6
 8000efc:	1936      	adds	r6, r6, r4
 8000efe:	2402      	movs	r4, #2
 8000f00:	e6c4      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000f02:	4649      	mov	r1, r9
 8000f04:	1a8f      	subs	r7, r1, r2
 8000f06:	45b9      	cmp	r9, r7
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	1af6      	subs	r6, r6, r3
 8000f0c:	4240      	negs	r0, r0
 8000f0e:	1a36      	subs	r6, r6, r0
 8000f10:	0233      	lsls	r3, r6, #8
 8000f12:	d406      	bmi.n	8000f22 <__aeabi_dadd+0x54e>
 8000f14:	0773      	lsls	r3, r6, #29
 8000f16:	08ff      	lsrs	r7, r7, #3
 8000f18:	2101      	movs	r1, #1
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	08f0      	lsrs	r0, r6, #3
 8000f1e:	e690      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000f20:	4665      	mov	r5, ip
 8000f22:	2401      	movs	r4, #1
 8000f24:	e5ab      	b.n	8000a7e <__aeabi_dadd+0xaa>
 8000f26:	464b      	mov	r3, r9
 8000f28:	0777      	lsls	r7, r6, #29
 8000f2a:	08d8      	lsrs	r0, r3, #3
 8000f2c:	4307      	orrs	r7, r0
 8000f2e:	08f0      	lsrs	r0, r6, #3
 8000f30:	e6b4      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f32:	000f      	movs	r7, r1
 8000f34:	0018      	movs	r0, r3
 8000f36:	3f20      	subs	r7, #32
 8000f38:	40f8      	lsrs	r0, r7
 8000f3a:	4684      	mov	ip, r0
 8000f3c:	2920      	cmp	r1, #32
 8000f3e:	d003      	beq.n	8000f48 <__aeabi_dadd+0x574>
 8000f40:	2740      	movs	r7, #64	@ 0x40
 8000f42:	1a79      	subs	r1, r7, r1
 8000f44:	408b      	lsls	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	1e53      	subs	r3, r2, #1
 8000f4a:	419a      	sbcs	r2, r3
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	0017      	movs	r7, r2
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e635      	b.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000f54:	2500      	movs	r5, #0
 8000f56:	2400      	movs	r4, #0
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e684      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	0035      	movs	r5, r6
 8000f60:	3c20      	subs	r4, #32
 8000f62:	40e5      	lsrs	r5, r4
 8000f64:	2920      	cmp	r1, #32
 8000f66:	d005      	beq.n	8000f74 <__aeabi_dadd+0x5a0>
 8000f68:	2440      	movs	r4, #64	@ 0x40
 8000f6a:	1a61      	subs	r1, r4, r1
 8000f6c:	408e      	lsls	r6, r1
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4331      	orrs	r1, r6
 8000f72:	4689      	mov	r9, r1
 8000f74:	4648      	mov	r0, r9
 8000f76:	1e41      	subs	r1, r0, #1
 8000f78:	4188      	sbcs	r0, r1
 8000f7a:	0007      	movs	r7, r0
 8000f7c:	432f      	orrs	r7, r5
 8000f7e:	e5ef      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000f80:	08d2      	lsrs	r2, r2, #3
 8000f82:	075f      	lsls	r7, r3, #29
 8000f84:	4665      	mov	r5, ip
 8000f86:	4317      	orrs	r7, r2
 8000f88:	08d8      	lsrs	r0, r3, #3
 8000f8a:	e687      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f8c:	1a17      	subs	r7, r2, r0
 8000f8e:	42ba      	cmp	r2, r7
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	1b9e      	subs	r6, r3, r6
 8000f94:	4252      	negs	r2, r2
 8000f96:	1ab6      	subs	r6, r6, r2
 8000f98:	0233      	lsls	r3, r6, #8
 8000f9a:	d4c1      	bmi.n	8000f20 <__aeabi_dadd+0x54c>
 8000f9c:	0773      	lsls	r3, r6, #29
 8000f9e:	08ff      	lsrs	r7, r7, #3
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	08f0      	lsrs	r0, r6, #3
 8000fa8:	e64b      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d07b      	beq.n	80010a6 <__aeabi_dadd+0x6d2>
 8000fae:	4665      	mov	r5, ip
 8000fb0:	001e      	movs	r6, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	e63f      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000fb6:	1a81      	subs	r1, r0, r2
 8000fb8:	4688      	mov	r8, r1
 8000fba:	45c1      	cmp	r9, r8
 8000fbc:	41a4      	sbcs	r4, r4
 8000fbe:	1af1      	subs	r1, r6, r3
 8000fc0:	4264      	negs	r4, r4
 8000fc2:	1b09      	subs	r1, r1, r4
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	0424      	lsls	r4, r4, #16
 8000fc8:	4221      	tst	r1, r4
 8000fca:	d077      	beq.n	80010bc <__aeabi_dadd+0x6e8>
 8000fcc:	1a10      	subs	r0, r2, r0
 8000fce:	4282      	cmp	r2, r0
 8000fd0:	4192      	sbcs	r2, r2
 8000fd2:	0007      	movs	r7, r0
 8000fd4:	1b9e      	subs	r6, r3, r6
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1ab6      	subs	r6, r6, r2
 8000fda:	4337      	orrs	r7, r6
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x60c>
 8000fde:	e0a0      	b.n	8001122 <__aeabi_dadd+0x74e>
 8000fe0:	4665      	mov	r5, ip
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e63e      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000fe8:	075f      	lsls	r7, r3, #29
 8000fea:	08d2      	lsrs	r2, r2, #3
 8000fec:	4665      	mov	r5, ip
 8000fee:	4317      	orrs	r7, r2
 8000ff0:	08d8      	lsrs	r0, r3, #3
 8000ff2:	e653      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000ff4:	1881      	adds	r1, r0, r2
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	4192      	sbcs	r2, r2
 8000ffa:	18f0      	adds	r0, r6, r3
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	1880      	adds	r0, r0, r2
 8001000:	0203      	lsls	r3, r0, #8
 8001002:	d500      	bpl.n	8001006 <__aeabi_dadd+0x632>
 8001004:	e768      	b.n	8000ed8 <__aeabi_dadd+0x504>
 8001006:	0747      	lsls	r7, r0, #29
 8001008:	08c9      	lsrs	r1, r1, #3
 800100a:	430f      	orrs	r7, r1
 800100c:	08c0      	lsrs	r0, r0, #3
 800100e:	2101      	movs	r1, #1
 8001010:	e617      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001012:	08d2      	lsrs	r2, r2, #3
 8001014:	075f      	lsls	r7, r3, #29
 8001016:	4317      	orrs	r7, r2
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	e63f      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800101c:	000c      	movs	r4, r1
 800101e:	2600      	movs	r6, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e620      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001024:	2900      	cmp	r1, #0
 8001026:	d156      	bne.n	80010d6 <__aeabi_dadd+0x702>
 8001028:	075f      	lsls	r7, r3, #29
 800102a:	08d2      	lsrs	r2, r2, #3
 800102c:	4317      	orrs	r7, r2
 800102e:	08d8      	lsrs	r0, r3, #3
 8001030:	e634      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001032:	000c      	movs	r4, r1
 8001034:	001e      	movs	r6, r3
 8001036:	08d0      	lsrs	r0, r2, #3
 8001038:	e629      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 800103a:	08c1      	lsrs	r1, r0, #3
 800103c:	0770      	lsls	r0, r6, #29
 800103e:	4301      	orrs	r1, r0
 8001040:	08f0      	lsrs	r0, r6, #3
 8001042:	2f00      	cmp	r7, #0
 8001044:	d062      	beq.n	800110c <__aeabi_dadd+0x738>
 8001046:	2480      	movs	r4, #128	@ 0x80
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	4220      	tst	r0, r4
 800104c:	d007      	beq.n	800105e <__aeabi_dadd+0x68a>
 800104e:	08de      	lsrs	r6, r3, #3
 8001050:	4226      	tst	r6, r4
 8001052:	d104      	bne.n	800105e <__aeabi_dadd+0x68a>
 8001054:	4665      	mov	r5, ip
 8001056:	0030      	movs	r0, r6
 8001058:	08d1      	lsrs	r1, r2, #3
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4319      	orrs	r1, r3
 800105e:	0f4f      	lsrs	r7, r1, #29
 8001060:	00c9      	lsls	r1, r1, #3
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	077f      	lsls	r7, r7, #29
 8001066:	430f      	orrs	r7, r1
 8001068:	e618      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800106a:	000c      	movs	r4, r1
 800106c:	0030      	movs	r0, r6
 800106e:	3c20      	subs	r4, #32
 8001070:	40e0      	lsrs	r0, r4
 8001072:	4684      	mov	ip, r0
 8001074:	2920      	cmp	r1, #32
 8001076:	d005      	beq.n	8001084 <__aeabi_dadd+0x6b0>
 8001078:	2440      	movs	r4, #64	@ 0x40
 800107a:	1a61      	subs	r1, r4, r1
 800107c:	408e      	lsls	r6, r1
 800107e:	4649      	mov	r1, r9
 8001080:	4331      	orrs	r1, r6
 8001082:	4689      	mov	r9, r1
 8001084:	4648      	mov	r0, r9
 8001086:	1e41      	subs	r1, r0, #1
 8001088:	4188      	sbcs	r0, r1
 800108a:	4661      	mov	r1, ip
 800108c:	0007      	movs	r7, r0
 800108e:	430f      	orrs	r7, r1
 8001090:	e630      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8001092:	2120      	movs	r1, #32
 8001094:	2700      	movs	r7, #0
 8001096:	1a09      	subs	r1, r1, r0
 8001098:	e50e      	b.n	8000ab8 <__aeabi_dadd+0xe4>
 800109a:	001e      	movs	r6, r3
 800109c:	2f00      	cmp	r7, #0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x6ce>
 80010a0:	e522      	b.n	8000ae8 <__aeabi_dadd+0x114>
 80010a2:	2400      	movs	r4, #0
 80010a4:	e758      	b.n	8000f58 <__aeabi_dadd+0x584>
 80010a6:	2500      	movs	r5, #0
 80010a8:	2400      	movs	r4, #0
 80010aa:	2600      	movs	r6, #0
 80010ac:	e5db      	b.n	8000c66 <__aeabi_dadd+0x292>
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	000007fe 	.word	0x000007fe
 80010b4:	000007ff 	.word	0x000007ff
 80010b8:	ff7fffff 	.word	0xff7fffff
 80010bc:	4647      	mov	r7, r8
 80010be:	430f      	orrs	r7, r1
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x6f0>
 80010c2:	e747      	b.n	8000f54 <__aeabi_dadd+0x580>
 80010c4:	000e      	movs	r6, r1
 80010c6:	46c1      	mov	r9, r8
 80010c8:	e5b5      	b.n	8000c36 <__aeabi_dadd+0x262>
 80010ca:	08df      	lsrs	r7, r3, #3
 80010cc:	0764      	lsls	r4, r4, #29
 80010ce:	2102      	movs	r1, #2
 80010d0:	4327      	orrs	r7, r4
 80010d2:	0900      	lsrs	r0, r0, #4
 80010d4:	e5b5      	b.n	8000c42 <__aeabi_dadd+0x26e>
 80010d6:	0019      	movs	r1, r3
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	0777      	lsls	r7, r6, #29
 80010dc:	4307      	orrs	r7, r0
 80010de:	4311      	orrs	r1, r2
 80010e0:	08f0      	lsrs	r0, r6, #3
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x714>
 80010e6:	e5d9      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	0309      	lsls	r1, r1, #12
 80010ec:	4208      	tst	r0, r1
 80010ee:	d007      	beq.n	8001100 <__aeabi_dadd+0x72c>
 80010f0:	08dc      	lsrs	r4, r3, #3
 80010f2:	420c      	tst	r4, r1
 80010f4:	d104      	bne.n	8001100 <__aeabi_dadd+0x72c>
 80010f6:	08d2      	lsrs	r2, r2, #3
 80010f8:	075b      	lsls	r3, r3, #29
 80010fa:	431a      	orrs	r2, r3
 80010fc:	0017      	movs	r7, r2
 80010fe:	0020      	movs	r0, r4
 8001100:	0f7b      	lsrs	r3, r7, #29
 8001102:	00ff      	lsls	r7, r7, #3
 8001104:	08ff      	lsrs	r7, r7, #3
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	431f      	orrs	r7, r3
 800110a:	e5c7      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800110c:	000f      	movs	r7, r1
 800110e:	e5c5      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <__aeabi_dadd+0x788>)
 8001112:	08d2      	lsrs	r2, r2, #3
 8001114:	4033      	ands	r3, r6
 8001116:	075f      	lsls	r7, r3, #29
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	2401      	movs	r4, #1
 800111c:	4317      	orrs	r7, r2
 800111e:	0b1e      	lsrs	r6, r3, #12
 8001120:	e5a1      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001122:	4226      	tst	r6, r4
 8001124:	d012      	beq.n	800114c <__aeabi_dadd+0x778>
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_dadd+0x788>)
 8001128:	4665      	mov	r5, ip
 800112a:	0002      	movs	r2, r0
 800112c:	2401      	movs	r4, #1
 800112e:	401e      	ands	r6, r3
 8001130:	e4e6      	b.n	8000b00 <__aeabi_dadd+0x12c>
 8001132:	0021      	movs	r1, r4
 8001134:	e585      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001136:	0017      	movs	r7, r2
 8001138:	e5a8      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 800113a:	003a      	movs	r2, r7
 800113c:	e4d4      	b.n	8000ae8 <__aeabi_dadd+0x114>
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	0764      	lsls	r4, r4, #29
 8001142:	431c      	orrs	r4, r3
 8001144:	0027      	movs	r7, r4
 8001146:	2102      	movs	r1, #2
 8001148:	0900      	lsrs	r0, r0, #4
 800114a:	e57a      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800114c:	08c0      	lsrs	r0, r0, #3
 800114e:	0777      	lsls	r7, r6, #29
 8001150:	4307      	orrs	r7, r0
 8001152:	4665      	mov	r5, ip
 8001154:	2100      	movs	r1, #0
 8001156:	08f0      	lsrs	r0, r6, #3
 8001158:	e573      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	ff7fffff 	.word	0xff7fffff

08001160 <__aeabi_ddiv>:
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	46de      	mov	lr, fp
 8001164:	4645      	mov	r5, r8
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	b5e0      	push	{r5, r6, r7, lr}
 800116c:	b087      	sub	sp, #28
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	030b      	lsls	r3, r1, #12
 8001174:	0b1b      	lsrs	r3, r3, #12
 8001176:	469b      	mov	fp, r3
 8001178:	0fca      	lsrs	r2, r1, #31
 800117a:	004b      	lsls	r3, r1, #1
 800117c:	0004      	movs	r4, r0
 800117e:	4680      	mov	r8, r0
 8001180:	0d5b      	lsrs	r3, r3, #21
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x28>
 8001186:	e098      	b.n	80012ba <__aeabi_ddiv+0x15a>
 8001188:	4a7c      	ldr	r2, [pc, #496]	@ (800137c <__aeabi_ddiv+0x21c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d037      	beq.n	80011fe <__aeabi_ddiv+0x9e>
 800118e:	4659      	mov	r1, fp
 8001190:	0f42      	lsrs	r2, r0, #29
 8001192:	00c9      	lsls	r1, r1, #3
 8001194:	430a      	orrs	r2, r1
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	0409      	lsls	r1, r1, #16
 800119a:	4311      	orrs	r1, r2
 800119c:	00c2      	lsls	r2, r0, #3
 800119e:	4690      	mov	r8, r2
 80011a0:	4a77      	ldr	r2, [pc, #476]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011a2:	4689      	mov	r9, r1
 80011a4:	4692      	mov	sl, r2
 80011a6:	449a      	add	sl, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	2400      	movs	r4, #0
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	9e00      	ldr	r6, [sp, #0]
 80011b0:	9f01      	ldr	r7, [sp, #4]
 80011b2:	033b      	lsls	r3, r7, #12
 80011b4:	0b1b      	lsrs	r3, r3, #12
 80011b6:	469b      	mov	fp, r3
 80011b8:	007b      	lsls	r3, r7, #1
 80011ba:	0030      	movs	r0, r6
 80011bc:	0d5b      	lsrs	r3, r3, #21
 80011be:	0ffd      	lsrs	r5, r7, #31
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d059      	beq.n	8001278 <__aeabi_ddiv+0x118>
 80011c4:	4a6d      	ldr	r2, [pc, #436]	@ (800137c <__aeabi_ddiv+0x21c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d048      	beq.n	800125c <__aeabi_ddiv+0xfc>
 80011ca:	4659      	mov	r1, fp
 80011cc:	0f72      	lsrs	r2, r6, #29
 80011ce:	00c9      	lsls	r1, r1, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0409      	lsls	r1, r1, #16
 80011d6:	4311      	orrs	r1, r2
 80011d8:	468b      	mov	fp, r1
 80011da:	4969      	ldr	r1, [pc, #420]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011dc:	00f2      	lsls	r2, r6, #3
 80011de:	468c      	mov	ip, r1
 80011e0:	4651      	mov	r1, sl
 80011e2:	4463      	add	r3, ip
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	469a      	mov	sl, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	9e02      	ldr	r6, [sp, #8]
 80011ec:	406e      	eors	r6, r5
 80011ee:	b2f6      	uxtb	r6, r6
 80011f0:	2c0f      	cmp	r4, #15
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x96>
 80011f4:	e0ce      	b.n	8001394 <__aeabi_ddiv+0x234>
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <__aeabi_ddiv+0x224>)
 80011f8:	00a4      	lsls	r4, r4, #2
 80011fa:	591b      	ldr	r3, [r3, r4]
 80011fc:	469f      	mov	pc, r3
 80011fe:	465a      	mov	r2, fp
 8001200:	4302      	orrs	r2, r0
 8001202:	4691      	mov	r9, r2
 8001204:	d000      	beq.n	8001208 <__aeabi_ddiv+0xa8>
 8001206:	e090      	b.n	800132a <__aeabi_ddiv+0x1ca>
 8001208:	469a      	mov	sl, r3
 800120a:	2302      	movs	r3, #2
 800120c:	4690      	mov	r8, r2
 800120e:	2408      	movs	r4, #8
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	e7cc      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001214:	46cb      	mov	fp, r9
 8001216:	4642      	mov	r2, r8
 8001218:	9d02      	ldr	r5, [sp, #8]
 800121a:	9903      	ldr	r1, [sp, #12]
 800121c:	2902      	cmp	r1, #2
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0xc2>
 8001220:	e1de      	b.n	80015e0 <__aeabi_ddiv+0x480>
 8001222:	2903      	cmp	r1, #3
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0xc8>
 8001226:	e08d      	b.n	8001344 <__aeabi_ddiv+0x1e4>
 8001228:	2901      	cmp	r1, #1
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0xce>
 800122c:	e179      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 800122e:	002e      	movs	r6, r5
 8001230:	2200      	movs	r2, #0
 8001232:	2300      	movs	r3, #0
 8001234:	2400      	movs	r4, #0
 8001236:	4690      	mov	r8, r2
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	4323      	orrs	r3, r4
 800123c:	07f6      	lsls	r6, r6, #31
 800123e:	4333      	orrs	r3, r6
 8001240:	4640      	mov	r0, r8
 8001242:	0019      	movs	r1, r3
 8001244:	b007      	add	sp, #28
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	2200      	movs	r2, #0
 8001254:	2400      	movs	r4, #0
 8001256:	4690      	mov	r8, r2
 8001258:	4b48      	ldr	r3, [pc, #288]	@ (800137c <__aeabi_ddiv+0x21c>)
 800125a:	e7ed      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800125c:	465a      	mov	r2, fp
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	431a      	orrs	r2, r3
 8001262:	4b49      	ldr	r3, [pc, #292]	@ (8001388 <__aeabi_ddiv+0x228>)
 8001264:	469c      	mov	ip, r3
 8001266:	44e2      	add	sl, ip
 8001268:	2a00      	cmp	r2, #0
 800126a:	d159      	bne.n	8001320 <__aeabi_ddiv+0x1c0>
 800126c:	2302      	movs	r3, #2
 800126e:	431c      	orrs	r4, r3
 8001270:	2300      	movs	r3, #0
 8001272:	2102      	movs	r1, #2
 8001274:	469b      	mov	fp, r3
 8001276:	e7b8      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001278:	465a      	mov	r2, fp
 800127a:	9b00      	ldr	r3, [sp, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	d049      	beq.n	8001314 <__aeabi_ddiv+0x1b4>
 8001280:	465b      	mov	r3, fp
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x128>
 8001286:	e19c      	b.n	80015c2 <__aeabi_ddiv+0x462>
 8001288:	4658      	mov	r0, fp
 800128a:	f001 fc0d 	bl	8002aa8 <__clzsi2>
 800128e:	0002      	movs	r2, r0
 8001290:	0003      	movs	r3, r0
 8001292:	3a0b      	subs	r2, #11
 8001294:	271d      	movs	r7, #29
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	1aba      	subs	r2, r7, r2
 800129a:	0019      	movs	r1, r3
 800129c:	4658      	mov	r0, fp
 800129e:	40d6      	lsrs	r6, r2
 80012a0:	3908      	subs	r1, #8
 80012a2:	4088      	lsls	r0, r1
 80012a4:	0032      	movs	r2, r6
 80012a6:	4302      	orrs	r2, r0
 80012a8:	4693      	mov	fp, r2
 80012aa:	9a00      	ldr	r2, [sp, #0]
 80012ac:	408a      	lsls	r2, r1
 80012ae:	4937      	ldr	r1, [pc, #220]	@ (800138c <__aeabi_ddiv+0x22c>)
 80012b0:	4453      	add	r3, sl
 80012b2:	468a      	mov	sl, r1
 80012b4:	2100      	movs	r1, #0
 80012b6:	449a      	add	sl, r3
 80012b8:	e797      	b.n	80011ea <__aeabi_ddiv+0x8a>
 80012ba:	465b      	mov	r3, fp
 80012bc:	4303      	orrs	r3, r0
 80012be:	4699      	mov	r9, r3
 80012c0:	d021      	beq.n	8001306 <__aeabi_ddiv+0x1a6>
 80012c2:	465b      	mov	r3, fp
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x16a>
 80012c8:	e169      	b.n	800159e <__aeabi_ddiv+0x43e>
 80012ca:	4658      	mov	r0, fp
 80012cc:	f001 fbec 	bl	8002aa8 <__clzsi2>
 80012d0:	230b      	movs	r3, #11
 80012d2:	425b      	negs	r3, r3
 80012d4:	469c      	mov	ip, r3
 80012d6:	0002      	movs	r2, r0
 80012d8:	4484      	add	ip, r0
 80012da:	4666      	mov	r6, ip
 80012dc:	231d      	movs	r3, #29
 80012de:	1b9b      	subs	r3, r3, r6
 80012e0:	0026      	movs	r6, r4
 80012e2:	0011      	movs	r1, r2
 80012e4:	4658      	mov	r0, fp
 80012e6:	40de      	lsrs	r6, r3
 80012e8:	3908      	subs	r1, #8
 80012ea:	4088      	lsls	r0, r1
 80012ec:	0033      	movs	r3, r6
 80012ee:	4303      	orrs	r3, r0
 80012f0:	4699      	mov	r9, r3
 80012f2:	0023      	movs	r3, r4
 80012f4:	408b      	lsls	r3, r1
 80012f6:	4698      	mov	r8, r3
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <__aeabi_ddiv+0x230>)
 80012fa:	2400      	movs	r4, #0
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	469a      	mov	sl, r3
 8001300:	2300      	movs	r3, #0
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	e753      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001306:	2300      	movs	r3, #0
 8001308:	4698      	mov	r8, r3
 800130a:	469a      	mov	sl, r3
 800130c:	3301      	adds	r3, #1
 800130e:	2404      	movs	r4, #4
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	e74c      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001314:	2301      	movs	r3, #1
 8001316:	431c      	orrs	r4, r3
 8001318:	2300      	movs	r3, #0
 800131a:	2101      	movs	r1, #1
 800131c:	469b      	mov	fp, r3
 800131e:	e764      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001320:	2303      	movs	r3, #3
 8001322:	0032      	movs	r2, r6
 8001324:	2103      	movs	r1, #3
 8001326:	431c      	orrs	r4, r3
 8001328:	e75f      	b.n	80011ea <__aeabi_ddiv+0x8a>
 800132a:	469a      	mov	sl, r3
 800132c:	2303      	movs	r3, #3
 800132e:	46d9      	mov	r9, fp
 8001330:	240c      	movs	r4, #12
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	e73b      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001336:	2300      	movs	r3, #0
 8001338:	2480      	movs	r4, #128	@ 0x80
 800133a:	4698      	mov	r8, r3
 800133c:	2600      	movs	r6, #0
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	e779      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001344:	2480      	movs	r4, #128	@ 0x80
 8001346:	465b      	mov	r3, fp
 8001348:	0324      	lsls	r4, r4, #12
 800134a:	431c      	orrs	r4, r3
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	002e      	movs	r6, r5
 8001350:	4690      	mov	r8, r2
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001354:	0b24      	lsrs	r4, r4, #12
 8001356:	e76f      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001358:	2480      	movs	r4, #128	@ 0x80
 800135a:	464b      	mov	r3, r9
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	4223      	tst	r3, r4
 8001360:	d002      	beq.n	8001368 <__aeabi_ddiv+0x208>
 8001362:	465b      	mov	r3, fp
 8001364:	4223      	tst	r3, r4
 8001366:	d0f0      	beq.n	800134a <__aeabi_ddiv+0x1ea>
 8001368:	2480      	movs	r4, #128	@ 0x80
 800136a:	464b      	mov	r3, r9
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	431c      	orrs	r4, r3
 8001370:	0324      	lsls	r4, r4, #12
 8001372:	9e02      	ldr	r6, [sp, #8]
 8001374:	4b01      	ldr	r3, [pc, #4]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	e75e      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	000007ff 	.word	0x000007ff
 8001380:	fffffc01 	.word	0xfffffc01
 8001384:	08009ebc 	.word	0x08009ebc
 8001388:	fffff801 	.word	0xfffff801
 800138c:	000003f3 	.word	0x000003f3
 8001390:	fffffc0d 	.word	0xfffffc0d
 8001394:	45cb      	cmp	fp, r9
 8001396:	d200      	bcs.n	800139a <__aeabi_ddiv+0x23a>
 8001398:	e0f8      	b.n	800158c <__aeabi_ddiv+0x42c>
 800139a:	d100      	bne.n	800139e <__aeabi_ddiv+0x23e>
 800139c:	e0f3      	b.n	8001586 <__aeabi_ddiv+0x426>
 800139e:	2301      	movs	r3, #1
 80013a0:	425b      	negs	r3, r3
 80013a2:	469c      	mov	ip, r3
 80013a4:	4644      	mov	r4, r8
 80013a6:	4648      	mov	r0, r9
 80013a8:	2500      	movs	r5, #0
 80013aa:	44e2      	add	sl, ip
 80013ac:	465b      	mov	r3, fp
 80013ae:	0e17      	lsrs	r7, r2, #24
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	431f      	orrs	r7, r3
 80013b4:	0c19      	lsrs	r1, r3, #16
 80013b6:	043b      	lsls	r3, r7, #16
 80013b8:	0212      	lsls	r2, r2, #8
 80013ba:	9700      	str	r7, [sp, #0]
 80013bc:	0c1f      	lsrs	r7, r3, #16
 80013be:	4691      	mov	r9, r2
 80013c0:	9102      	str	r1, [sp, #8]
 80013c2:	9703      	str	r7, [sp, #12]
 80013c4:	f7fe ff42 	bl	800024c <__aeabi_uidivmod>
 80013c8:	0002      	movs	r2, r0
 80013ca:	437a      	muls	r2, r7
 80013cc:	040b      	lsls	r3, r1, #16
 80013ce:	0c21      	lsrs	r1, r4, #16
 80013d0:	4680      	mov	r8, r0
 80013d2:	4319      	orrs	r1, r3
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d909      	bls.n	80013ec <__aeabi_ddiv+0x28c>
 80013d8:	9f00      	ldr	r7, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	46bc      	mov	ip, r7
 80013de:	425b      	negs	r3, r3
 80013e0:	4461      	add	r1, ip
 80013e2:	469c      	mov	ip, r3
 80013e4:	44e0      	add	r8, ip
 80013e6:	428f      	cmp	r7, r1
 80013e8:	d800      	bhi.n	80013ec <__aeabi_ddiv+0x28c>
 80013ea:	e15c      	b.n	80016a6 <__aeabi_ddiv+0x546>
 80013ec:	1a88      	subs	r0, r1, r2
 80013ee:	9902      	ldr	r1, [sp, #8]
 80013f0:	f7fe ff2c 	bl	800024c <__aeabi_uidivmod>
 80013f4:	9a03      	ldr	r2, [sp, #12]
 80013f6:	0424      	lsls	r4, r4, #16
 80013f8:	4342      	muls	r2, r0
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	0c24      	lsrs	r4, r4, #16
 80013fe:	0003      	movs	r3, r0
 8001400:	430c      	orrs	r4, r1
 8001402:	42a2      	cmp	r2, r4
 8001404:	d906      	bls.n	8001414 <__aeabi_ddiv+0x2b4>
 8001406:	9900      	ldr	r1, [sp, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	468c      	mov	ip, r1
 800140c:	4464      	add	r4, ip
 800140e:	42a1      	cmp	r1, r4
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x2b4>
 8001412:	e142      	b.n	800169a <__aeabi_ddiv+0x53a>
 8001414:	1aa0      	subs	r0, r4, r2
 8001416:	4642      	mov	r2, r8
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	4693      	mov	fp, r2
 800141e:	464b      	mov	r3, r9
 8001420:	4659      	mov	r1, fp
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	001f      	movs	r7, r3
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	040b      	lsls	r3, r1, #16
 800142a:	4649      	mov	r1, r9
 800142c:	0409      	lsls	r1, r1, #16
 800142e:	0c09      	lsrs	r1, r1, #16
 8001430:	000c      	movs	r4, r1
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	435c      	muls	r4, r3
 8001436:	0c12      	lsrs	r2, r2, #16
 8001438:	437b      	muls	r3, r7
 800143a:	4688      	mov	r8, r1
 800143c:	4351      	muls	r1, r2
 800143e:	437a      	muls	r2, r7
 8001440:	0c27      	lsrs	r7, r4, #16
 8001442:	46bc      	mov	ip, r7
 8001444:	185b      	adds	r3, r3, r1
 8001446:	4463      	add	r3, ip
 8001448:	4299      	cmp	r1, r3
 800144a:	d903      	bls.n	8001454 <__aeabi_ddiv+0x2f4>
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	0249      	lsls	r1, r1, #9
 8001450:	468c      	mov	ip, r1
 8001452:	4462      	add	r2, ip
 8001454:	0c19      	lsrs	r1, r3, #16
 8001456:	0424      	lsls	r4, r4, #16
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c24      	lsrs	r4, r4, #16
 800145c:	188a      	adds	r2, r1, r2
 800145e:	191c      	adds	r4, r3, r4
 8001460:	4290      	cmp	r0, r2
 8001462:	d302      	bcc.n	800146a <__aeabi_ddiv+0x30a>
 8001464:	d116      	bne.n	8001494 <__aeabi_ddiv+0x334>
 8001466:	42a5      	cmp	r5, r4
 8001468:	d214      	bcs.n	8001494 <__aeabi_ddiv+0x334>
 800146a:	465b      	mov	r3, fp
 800146c:	9f00      	ldr	r7, [sp, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	444d      	add	r5, r9
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	454d      	cmp	r5, r9
 8001476:	419b      	sbcs	r3, r3
 8001478:	46bc      	mov	ip, r7
 800147a:	425b      	negs	r3, r3
 800147c:	4463      	add	r3, ip
 800147e:	18c0      	adds	r0, r0, r3
 8001480:	4287      	cmp	r7, r0
 8001482:	d300      	bcc.n	8001486 <__aeabi_ddiv+0x326>
 8001484:	e102      	b.n	800168c <__aeabi_ddiv+0x52c>
 8001486:	4282      	cmp	r2, r0
 8001488:	d900      	bls.n	800148c <__aeabi_ddiv+0x32c>
 800148a:	e129      	b.n	80016e0 <__aeabi_ddiv+0x580>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x330>
 800148e:	e124      	b.n	80016da <__aeabi_ddiv+0x57a>
 8001490:	9b05      	ldr	r3, [sp, #20]
 8001492:	469b      	mov	fp, r3
 8001494:	1b2c      	subs	r4, r5, r4
 8001496:	42a5      	cmp	r5, r4
 8001498:	41ad      	sbcs	r5, r5
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	1a80      	subs	r0, r0, r2
 800149e:	426d      	negs	r5, r5
 80014a0:	1b40      	subs	r0, r0, r5
 80014a2:	4283      	cmp	r3, r0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x348>
 80014a6:	e10f      	b.n	80016c8 <__aeabi_ddiv+0x568>
 80014a8:	9902      	ldr	r1, [sp, #8]
 80014aa:	f7fe fecf 	bl	800024c <__aeabi_uidivmod>
 80014ae:	9a03      	ldr	r2, [sp, #12]
 80014b0:	040b      	lsls	r3, r1, #16
 80014b2:	4342      	muls	r2, r0
 80014b4:	0c21      	lsrs	r1, r4, #16
 80014b6:	0005      	movs	r5, r0
 80014b8:	4319      	orrs	r1, r3
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d900      	bls.n	80014c0 <__aeabi_ddiv+0x360>
 80014be:	e0cb      	b.n	8001658 <__aeabi_ddiv+0x4f8>
 80014c0:	1a88      	subs	r0, r1, r2
 80014c2:	9902      	ldr	r1, [sp, #8]
 80014c4:	f7fe fec2 	bl	800024c <__aeabi_uidivmod>
 80014c8:	9a03      	ldr	r2, [sp, #12]
 80014ca:	0424      	lsls	r4, r4, #16
 80014cc:	4342      	muls	r2, r0
 80014ce:	0409      	lsls	r1, r1, #16
 80014d0:	0c24      	lsrs	r4, r4, #16
 80014d2:	0003      	movs	r3, r0
 80014d4:	430c      	orrs	r4, r1
 80014d6:	42a2      	cmp	r2, r4
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x37c>
 80014da:	e0ca      	b.n	8001672 <__aeabi_ddiv+0x512>
 80014dc:	4641      	mov	r1, r8
 80014de:	1aa4      	subs	r4, r4, r2
 80014e0:	042a      	lsls	r2, r5, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	9f04      	ldr	r7, [sp, #16]
 80014e6:	0413      	lsls	r3, r2, #16
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	4359      	muls	r1, r3
 80014ec:	4640      	mov	r0, r8
 80014ee:	437b      	muls	r3, r7
 80014f0:	469c      	mov	ip, r3
 80014f2:	0c15      	lsrs	r5, r2, #16
 80014f4:	4368      	muls	r0, r5
 80014f6:	0c0b      	lsrs	r3, r1, #16
 80014f8:	4484      	add	ip, r0
 80014fa:	4463      	add	r3, ip
 80014fc:	437d      	muls	r5, r7
 80014fe:	4298      	cmp	r0, r3
 8001500:	d903      	bls.n	800150a <__aeabi_ddiv+0x3aa>
 8001502:	2080      	movs	r0, #128	@ 0x80
 8001504:	0240      	lsls	r0, r0, #9
 8001506:	4684      	mov	ip, r0
 8001508:	4465      	add	r5, ip
 800150a:	0c18      	lsrs	r0, r3, #16
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	0c09      	lsrs	r1, r1, #16
 8001512:	1940      	adds	r0, r0, r5
 8001514:	185b      	adds	r3, r3, r1
 8001516:	4284      	cmp	r4, r0
 8001518:	d327      	bcc.n	800156a <__aeabi_ddiv+0x40a>
 800151a:	d023      	beq.n	8001564 <__aeabi_ddiv+0x404>
 800151c:	2301      	movs	r3, #1
 800151e:	0035      	movs	r5, r6
 8001520:	431a      	orrs	r2, r3
 8001522:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <__aeabi_ddiv+0x614>)
 8001524:	4453      	add	r3, sl
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd60      	ble.n	80015ec <__aeabi_ddiv+0x48c>
 800152a:	0751      	lsls	r1, r2, #29
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x3d0>
 800152e:	e086      	b.n	800163e <__aeabi_ddiv+0x4de>
 8001530:	002e      	movs	r6, r5
 8001532:	08d1      	lsrs	r1, r2, #3
 8001534:	465a      	mov	r2, fp
 8001536:	01d2      	lsls	r2, r2, #7
 8001538:	d506      	bpl.n	8001548 <__aeabi_ddiv+0x3e8>
 800153a:	465a      	mov	r2, fp
 800153c:	4b8e      	ldr	r3, [pc, #568]	@ (8001778 <__aeabi_ddiv+0x618>)
 800153e:	401a      	ands	r2, r3
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	4693      	mov	fp, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4453      	add	r3, sl
 8001548:	4a8c      	ldr	r2, [pc, #560]	@ (800177c <__aeabi_ddiv+0x61c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	dd00      	ble.n	8001550 <__aeabi_ddiv+0x3f0>
 800154e:	e680      	b.n	8001252 <__aeabi_ddiv+0xf2>
 8001550:	465a      	mov	r2, fp
 8001552:	0752      	lsls	r2, r2, #29
 8001554:	430a      	orrs	r2, r1
 8001556:	4690      	mov	r8, r2
 8001558:	465a      	mov	r2, fp
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	0254      	lsls	r4, r2, #9
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	e669      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001564:	0035      	movs	r5, r6
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0db      	beq.n	8001522 <__aeabi_ddiv+0x3c2>
 800156a:	9d00      	ldr	r5, [sp, #0]
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	46ac      	mov	ip, r5
 8001570:	4464      	add	r4, ip
 8001572:	42ac      	cmp	r4, r5
 8001574:	d200      	bcs.n	8001578 <__aeabi_ddiv+0x418>
 8001576:	e09e      	b.n	80016b6 <__aeabi_ddiv+0x556>
 8001578:	4284      	cmp	r4, r0
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0x41e>
 800157c:	e0e1      	b.n	8001742 <__aeabi_ddiv+0x5e2>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x422>
 8001580:	e0ee      	b.n	8001760 <__aeabi_ddiv+0x600>
 8001582:	000a      	movs	r2, r1
 8001584:	e7ca      	b.n	800151c <__aeabi_ddiv+0x3bc>
 8001586:	4542      	cmp	r2, r8
 8001588:	d900      	bls.n	800158c <__aeabi_ddiv+0x42c>
 800158a:	e708      	b.n	800139e <__aeabi_ddiv+0x23e>
 800158c:	464b      	mov	r3, r9
 800158e:	07dc      	lsls	r4, r3, #31
 8001590:	0858      	lsrs	r0, r3, #1
 8001592:	4643      	mov	r3, r8
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	431c      	orrs	r4, r3
 8001598:	4643      	mov	r3, r8
 800159a:	07dd      	lsls	r5, r3, #31
 800159c:	e706      	b.n	80013ac <__aeabi_ddiv+0x24c>
 800159e:	f001 fa83 	bl	8002aa8 <__clzsi2>
 80015a2:	2315      	movs	r3, #21
 80015a4:	469c      	mov	ip, r3
 80015a6:	4484      	add	ip, r0
 80015a8:	0002      	movs	r2, r0
 80015aa:	4663      	mov	r3, ip
 80015ac:	3220      	adds	r2, #32
 80015ae:	2b1c      	cmp	r3, #28
 80015b0:	dc00      	bgt.n	80015b4 <__aeabi_ddiv+0x454>
 80015b2:	e692      	b.n	80012da <__aeabi_ddiv+0x17a>
 80015b4:	0023      	movs	r3, r4
 80015b6:	3808      	subs	r0, #8
 80015b8:	4083      	lsls	r3, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	4698      	mov	r8, r3
 80015c0:	e69a      	b.n	80012f8 <__aeabi_ddiv+0x198>
 80015c2:	f001 fa71 	bl	8002aa8 <__clzsi2>
 80015c6:	0002      	movs	r2, r0
 80015c8:	0003      	movs	r3, r0
 80015ca:	3215      	adds	r2, #21
 80015cc:	3320      	adds	r3, #32
 80015ce:	2a1c      	cmp	r2, #28
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_ddiv+0x474>
 80015d2:	e65f      	b.n	8001294 <__aeabi_ddiv+0x134>
 80015d4:	9900      	ldr	r1, [sp, #0]
 80015d6:	3808      	subs	r0, #8
 80015d8:	4081      	lsls	r1, r0
 80015da:	2200      	movs	r2, #0
 80015dc:	468b      	mov	fp, r1
 80015de:	e666      	b.n	80012ae <__aeabi_ddiv+0x14e>
 80015e0:	2200      	movs	r2, #0
 80015e2:	002e      	movs	r6, r5
 80015e4:	2400      	movs	r4, #0
 80015e6:	4690      	mov	r8, r2
 80015e8:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <__aeabi_ddiv+0x620>)
 80015ea:	e625      	b.n	8001238 <__aeabi_ddiv+0xd8>
 80015ec:	002e      	movs	r6, r5
 80015ee:	2101      	movs	r1, #1
 80015f0:	1ac9      	subs	r1, r1, r3
 80015f2:	2938      	cmp	r1, #56	@ 0x38
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_ddiv+0x498>
 80015f6:	e61b      	b.n	8001230 <__aeabi_ddiv+0xd0>
 80015f8:	291f      	cmp	r1, #31
 80015fa:	dc7e      	bgt.n	80016fa <__aeabi_ddiv+0x59a>
 80015fc:	4861      	ldr	r0, [pc, #388]	@ (8001784 <__aeabi_ddiv+0x624>)
 80015fe:	0014      	movs	r4, r2
 8001600:	4450      	add	r0, sl
 8001602:	465b      	mov	r3, fp
 8001604:	4082      	lsls	r2, r0
 8001606:	4083      	lsls	r3, r0
 8001608:	40cc      	lsrs	r4, r1
 800160a:	1e50      	subs	r0, r2, #1
 800160c:	4182      	sbcs	r2, r0
 800160e:	4323      	orrs	r3, r4
 8001610:	431a      	orrs	r2, r3
 8001612:	465b      	mov	r3, fp
 8001614:	40cb      	lsrs	r3, r1
 8001616:	0751      	lsls	r1, r2, #29
 8001618:	d009      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 800161a:	210f      	movs	r1, #15
 800161c:	4011      	ands	r1, r2
 800161e:	2904      	cmp	r1, #4
 8001620:	d005      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 8001622:	1d11      	adds	r1, r2, #4
 8001624:	4291      	cmp	r1, r2
 8001626:	4192      	sbcs	r2, r2
 8001628:	4252      	negs	r2, r2
 800162a:	189b      	adds	r3, r3, r2
 800162c:	000a      	movs	r2, r1
 800162e:	0219      	lsls	r1, r3, #8
 8001630:	d400      	bmi.n	8001634 <__aeabi_ddiv+0x4d4>
 8001632:	e09b      	b.n	800176c <__aeabi_ddiv+0x60c>
 8001634:	2200      	movs	r2, #0
 8001636:	2301      	movs	r3, #1
 8001638:	2400      	movs	r4, #0
 800163a:	4690      	mov	r8, r2
 800163c:	e5fc      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800163e:	210f      	movs	r1, #15
 8001640:	4011      	ands	r1, r2
 8001642:	2904      	cmp	r1, #4
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x4e8>
 8001646:	e773      	b.n	8001530 <__aeabi_ddiv+0x3d0>
 8001648:	1d11      	adds	r1, r2, #4
 800164a:	4291      	cmp	r1, r2
 800164c:	4192      	sbcs	r2, r2
 800164e:	4252      	negs	r2, r2
 8001650:	002e      	movs	r6, r5
 8001652:	08c9      	lsrs	r1, r1, #3
 8001654:	4493      	add	fp, r2
 8001656:	e76d      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 8001658:	9b00      	ldr	r3, [sp, #0]
 800165a:	3d01      	subs	r5, #1
 800165c:	469c      	mov	ip, r3
 800165e:	4461      	add	r1, ip
 8001660:	428b      	cmp	r3, r1
 8001662:	d900      	bls.n	8001666 <__aeabi_ddiv+0x506>
 8001664:	e72c      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001666:	428a      	cmp	r2, r1
 8001668:	d800      	bhi.n	800166c <__aeabi_ddiv+0x50c>
 800166a:	e729      	b.n	80014c0 <__aeabi_ddiv+0x360>
 800166c:	1e85      	subs	r5, r0, #2
 800166e:	4461      	add	r1, ip
 8001670:	e726      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001672:	9900      	ldr	r1, [sp, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	468c      	mov	ip, r1
 8001678:	4464      	add	r4, ip
 800167a:	42a1      	cmp	r1, r4
 800167c:	d900      	bls.n	8001680 <__aeabi_ddiv+0x520>
 800167e:	e72d      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001680:	42a2      	cmp	r2, r4
 8001682:	d800      	bhi.n	8001686 <__aeabi_ddiv+0x526>
 8001684:	e72a      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001686:	1e83      	subs	r3, r0, #2
 8001688:	4464      	add	r4, ip
 800168a:	e727      	b.n	80014dc <__aeabi_ddiv+0x37c>
 800168c:	4287      	cmp	r7, r0
 800168e:	d000      	beq.n	8001692 <__aeabi_ddiv+0x532>
 8001690:	e6fe      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001692:	45a9      	cmp	r9, r5
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x538>
 8001696:	e6fb      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001698:	e6f5      	b.n	8001486 <__aeabi_ddiv+0x326>
 800169a:	42a2      	cmp	r2, r4
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x540>
 800169e:	e6b9      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a0:	1e83      	subs	r3, r0, #2
 80016a2:	4464      	add	r4, ip
 80016a4:	e6b6      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a6:	428a      	cmp	r2, r1
 80016a8:	d800      	bhi.n	80016ac <__aeabi_ddiv+0x54c>
 80016aa:	e69f      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016ac:	46bc      	mov	ip, r7
 80016ae:	1e83      	subs	r3, r0, #2
 80016b0:	4698      	mov	r8, r3
 80016b2:	4461      	add	r1, ip
 80016b4:	e69a      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016b6:	000a      	movs	r2, r1
 80016b8:	4284      	cmp	r4, r0
 80016ba:	d000      	beq.n	80016be <__aeabi_ddiv+0x55e>
 80016bc:	e72e      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016be:	454b      	cmp	r3, r9
 80016c0:	d000      	beq.n	80016c4 <__aeabi_ddiv+0x564>
 80016c2:	e72b      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016c4:	0035      	movs	r5, r6
 80016c6:	e72c      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <__aeabi_ddiv+0x614>)
 80016ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001788 <__aeabi_ddiv+0x628>)
 80016cc:	4453      	add	r3, sl
 80016ce:	4592      	cmp	sl, r2
 80016d0:	db43      	blt.n	800175a <__aeabi_ddiv+0x5fa>
 80016d2:	2201      	movs	r2, #1
 80016d4:	2100      	movs	r1, #0
 80016d6:	4493      	add	fp, r2
 80016d8:	e72c      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 80016da:	42ac      	cmp	r4, r5
 80016dc:	d800      	bhi.n	80016e0 <__aeabi_ddiv+0x580>
 80016de:	e6d7      	b.n	8001490 <__aeabi_ddiv+0x330>
 80016e0:	2302      	movs	r3, #2
 80016e2:	425b      	negs	r3, r3
 80016e4:	469c      	mov	ip, r3
 80016e6:	9900      	ldr	r1, [sp, #0]
 80016e8:	444d      	add	r5, r9
 80016ea:	454d      	cmp	r5, r9
 80016ec:	419b      	sbcs	r3, r3
 80016ee:	44e3      	add	fp, ip
 80016f0:	468c      	mov	ip, r1
 80016f2:	425b      	negs	r3, r3
 80016f4:	4463      	add	r3, ip
 80016f6:	18c0      	adds	r0, r0, r3
 80016f8:	e6cc      	b.n	8001494 <__aeabi_ddiv+0x334>
 80016fa:	201f      	movs	r0, #31
 80016fc:	4240      	negs	r0, r0
 80016fe:	1ac3      	subs	r3, r0, r3
 8001700:	4658      	mov	r0, fp
 8001702:	40d8      	lsrs	r0, r3
 8001704:	2920      	cmp	r1, #32
 8001706:	d004      	beq.n	8001712 <__aeabi_ddiv+0x5b2>
 8001708:	4659      	mov	r1, fp
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <__aeabi_ddiv+0x62c>)
 800170c:	4453      	add	r3, sl
 800170e:	4099      	lsls	r1, r3
 8001710:	430a      	orrs	r2, r1
 8001712:	1e53      	subs	r3, r2, #1
 8001714:	419a      	sbcs	r2, r3
 8001716:	2307      	movs	r3, #7
 8001718:	0019      	movs	r1, r3
 800171a:	4302      	orrs	r2, r0
 800171c:	2400      	movs	r4, #0
 800171e:	4011      	ands	r1, r2
 8001720:	4213      	tst	r3, r2
 8001722:	d009      	beq.n	8001738 <__aeabi_ddiv+0x5d8>
 8001724:	3308      	adds	r3, #8
 8001726:	4013      	ands	r3, r2
 8001728:	2b04      	cmp	r3, #4
 800172a:	d01d      	beq.n	8001768 <__aeabi_ddiv+0x608>
 800172c:	1d13      	adds	r3, r2, #4
 800172e:	4293      	cmp	r3, r2
 8001730:	4189      	sbcs	r1, r1
 8001732:	001a      	movs	r2, r3
 8001734:	4249      	negs	r1, r1
 8001736:	0749      	lsls	r1, r1, #29
 8001738:	08d2      	lsrs	r2, r2, #3
 800173a:	430a      	orrs	r2, r1
 800173c:	4690      	mov	r8, r2
 800173e:	2300      	movs	r3, #0
 8001740:	e57a      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001742:	4649      	mov	r1, r9
 8001744:	9f00      	ldr	r7, [sp, #0]
 8001746:	004d      	lsls	r5, r1, #1
 8001748:	454d      	cmp	r5, r9
 800174a:	4189      	sbcs	r1, r1
 800174c:	46bc      	mov	ip, r7
 800174e:	4249      	negs	r1, r1
 8001750:	4461      	add	r1, ip
 8001752:	46a9      	mov	r9, r5
 8001754:	3a02      	subs	r2, #2
 8001756:	1864      	adds	r4, r4, r1
 8001758:	e7ae      	b.n	80016b8 <__aeabi_ddiv+0x558>
 800175a:	2201      	movs	r2, #1
 800175c:	4252      	negs	r2, r2
 800175e:	e746      	b.n	80015ee <__aeabi_ddiv+0x48e>
 8001760:	4599      	cmp	r9, r3
 8001762:	d3ee      	bcc.n	8001742 <__aeabi_ddiv+0x5e2>
 8001764:	000a      	movs	r2, r1
 8001766:	e7aa      	b.n	80016be <__aeabi_ddiv+0x55e>
 8001768:	2100      	movs	r1, #0
 800176a:	e7e5      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 800176c:	0759      	lsls	r1, r3, #29
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	0b1c      	lsrs	r4, r3, #12
 8001772:	e7e1      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 8001774:	000003ff 	.word	0x000003ff
 8001778:	feffffff 	.word	0xfeffffff
 800177c:	000007fe 	.word	0x000007fe
 8001780:	000007ff 	.word	0x000007ff
 8001784:	0000041e 	.word	0x0000041e
 8001788:	fffffc02 	.word	0xfffffc02
 800178c:	0000043e 	.word	0x0000043e

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	000d      	movs	r5, r1
 800179e:	0004      	movs	r4, r0
 80017a0:	0fe8      	lsrs	r0, r5, #31
 80017a2:	4683      	mov	fp, r0
 80017a4:	0309      	lsls	r1, r1, #12
 80017a6:	0fd8      	lsrs	r0, r3, #31
 80017a8:	0b09      	lsrs	r1, r1, #12
 80017aa:	4682      	mov	sl, r0
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <__eqdf2+0x84>)
 80017ae:	468c      	mov	ip, r1
 80017b0:	031f      	lsls	r7, r3, #12
 80017b2:	0069      	lsls	r1, r5, #1
 80017b4:	005e      	lsls	r6, r3, #1
 80017b6:	0d49      	lsrs	r1, r1, #21
 80017b8:	0b3f      	lsrs	r7, r7, #12
 80017ba:	0d76      	lsrs	r6, r6, #21
 80017bc:	4281      	cmp	r1, r0
 80017be:	d018      	beq.n	80017f2 <__eqdf2+0x62>
 80017c0:	4286      	cmp	r6, r0
 80017c2:	d00f      	beq.n	80017e4 <__eqdf2+0x54>
 80017c4:	2001      	movs	r0, #1
 80017c6:	42b1      	cmp	r1, r6
 80017c8:	d10d      	bne.n	80017e6 <__eqdf2+0x56>
 80017ca:	45bc      	cmp	ip, r7
 80017cc:	d10b      	bne.n	80017e6 <__eqdf2+0x56>
 80017ce:	4294      	cmp	r4, r2
 80017d0:	d109      	bne.n	80017e6 <__eqdf2+0x56>
 80017d2:	45d3      	cmp	fp, sl
 80017d4:	d01c      	beq.n	8001810 <__eqdf2+0x80>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d105      	bne.n	80017e6 <__eqdf2+0x56>
 80017da:	4660      	mov	r0, ip
 80017dc:	4320      	orrs	r0, r4
 80017de:	1e43      	subs	r3, r0, #1
 80017e0:	4198      	sbcs	r0, r3
 80017e2:	e000      	b.n	80017e6 <__eqdf2+0x56>
 80017e4:	2001      	movs	r0, #1
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	2001      	movs	r0, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d1f6      	bne.n	80017e6 <__eqdf2+0x56>
 80017f8:	4661      	mov	r1, ip
 80017fa:	4339      	orrs	r1, r7
 80017fc:	000f      	movs	r7, r1
 80017fe:	4317      	orrs	r7, r2
 8001800:	4327      	orrs	r7, r4
 8001802:	d1f0      	bne.n	80017e6 <__eqdf2+0x56>
 8001804:	465b      	mov	r3, fp
 8001806:	4652      	mov	r2, sl
 8001808:	1a98      	subs	r0, r3, r2
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e7ea      	b.n	80017e6 <__eqdf2+0x56>
 8001810:	2000      	movs	r0, #0
 8001812:	e7e8      	b.n	80017e6 <__eqdf2+0x56>
 8001814:	000007ff 	.word	0x000007ff

08001818 <__gedf2>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	000d      	movs	r5, r1
 8001826:	030e      	lsls	r6, r1, #12
 8001828:	0049      	lsls	r1, r1, #1
 800182a:	0d49      	lsrs	r1, r1, #21
 800182c:	468a      	mov	sl, r1
 800182e:	0fdf      	lsrs	r7, r3, #31
 8001830:	0fe9      	lsrs	r1, r5, #31
 8001832:	46bc      	mov	ip, r7
 8001834:	b083      	sub	sp, #12
 8001836:	4f2f      	ldr	r7, [pc, #188]	@ (80018f4 <__gedf2+0xdc>)
 8001838:	0004      	movs	r4, r0
 800183a:	4680      	mov	r8, r0
 800183c:	9101      	str	r1, [sp, #4]
 800183e:	0058      	lsls	r0, r3, #1
 8001840:	0319      	lsls	r1, r3, #12
 8001842:	4691      	mov	r9, r2
 8001844:	0b36      	lsrs	r6, r6, #12
 8001846:	0b09      	lsrs	r1, r1, #12
 8001848:	0d40      	lsrs	r0, r0, #21
 800184a:	45ba      	cmp	sl, r7
 800184c:	d01d      	beq.n	800188a <__gedf2+0x72>
 800184e:	42b8      	cmp	r0, r7
 8001850:	d00d      	beq.n	800186e <__gedf2+0x56>
 8001852:	4657      	mov	r7, sl
 8001854:	2f00      	cmp	r7, #0
 8001856:	d12a      	bne.n	80018ae <__gedf2+0x96>
 8001858:	4334      	orrs	r4, r6
 800185a:	2800      	cmp	r0, #0
 800185c:	d124      	bne.n	80018a8 <__gedf2+0x90>
 800185e:	430a      	orrs	r2, r1
 8001860:	d036      	beq.n	80018d0 <__gedf2+0xb8>
 8001862:	2c00      	cmp	r4, #0
 8001864:	d141      	bne.n	80018ea <__gedf2+0xd2>
 8001866:	4663      	mov	r3, ip
 8001868:	0058      	lsls	r0, r3, #1
 800186a:	3801      	subs	r0, #1
 800186c:	e015      	b.n	800189a <__gedf2+0x82>
 800186e:	4311      	orrs	r1, r2
 8001870:	d138      	bne.n	80018e4 <__gedf2+0xcc>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <__gedf2+0x64>
 8001878:	4326      	orrs	r6, r4
 800187a:	d0f4      	beq.n	8001866 <__gedf2+0x4e>
 800187c:	9b01      	ldr	r3, [sp, #4]
 800187e:	4563      	cmp	r3, ip
 8001880:	d107      	bne.n	8001892 <__gedf2+0x7a>
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	0058      	lsls	r0, r3, #1
 8001886:	3801      	subs	r0, #1
 8001888:	e007      	b.n	800189a <__gedf2+0x82>
 800188a:	4326      	orrs	r6, r4
 800188c:	d12a      	bne.n	80018e4 <__gedf2+0xcc>
 800188e:	4550      	cmp	r0, sl
 8001890:	d021      	beq.n	80018d6 <__gedf2+0xbe>
 8001892:	2001      	movs	r0, #1
 8001894:	9b01      	ldr	r3, [sp, #4]
 8001896:	425f      	negs	r7, r3
 8001898:	4338      	orrs	r0, r7
 800189a:	b003      	add	sp, #12
 800189c:	bcf0      	pop	{r4, r5, r6, r7}
 800189e:	46bb      	mov	fp, r7
 80018a0:	46b2      	mov	sl, r6
 80018a2:	46a9      	mov	r9, r5
 80018a4:	46a0      	mov	r8, r4
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a8:	2c00      	cmp	r4, #0
 80018aa:	d0dc      	beq.n	8001866 <__gedf2+0x4e>
 80018ac:	e7e6      	b.n	800187c <__gedf2+0x64>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d0ef      	beq.n	8001892 <__gedf2+0x7a>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	4563      	cmp	r3, ip
 80018b6:	d1ec      	bne.n	8001892 <__gedf2+0x7a>
 80018b8:	4582      	cmp	sl, r0
 80018ba:	dcea      	bgt.n	8001892 <__gedf2+0x7a>
 80018bc:	dbe1      	blt.n	8001882 <__gedf2+0x6a>
 80018be:	428e      	cmp	r6, r1
 80018c0:	d8e7      	bhi.n	8001892 <__gedf2+0x7a>
 80018c2:	d1de      	bne.n	8001882 <__gedf2+0x6a>
 80018c4:	45c8      	cmp	r8, r9
 80018c6:	d8e4      	bhi.n	8001892 <__gedf2+0x7a>
 80018c8:	2000      	movs	r0, #0
 80018ca:	45c8      	cmp	r8, r9
 80018cc:	d2e5      	bcs.n	800189a <__gedf2+0x82>
 80018ce:	e7d8      	b.n	8001882 <__gedf2+0x6a>
 80018d0:	2c00      	cmp	r4, #0
 80018d2:	d0e2      	beq.n	800189a <__gedf2+0x82>
 80018d4:	e7dd      	b.n	8001892 <__gedf2+0x7a>
 80018d6:	4311      	orrs	r1, r2
 80018d8:	d104      	bne.n	80018e4 <__gedf2+0xcc>
 80018da:	9b01      	ldr	r3, [sp, #4]
 80018dc:	4563      	cmp	r3, ip
 80018de:	d1d8      	bne.n	8001892 <__gedf2+0x7a>
 80018e0:	2000      	movs	r0, #0
 80018e2:	e7da      	b.n	800189a <__gedf2+0x82>
 80018e4:	2002      	movs	r0, #2
 80018e6:	4240      	negs	r0, r0
 80018e8:	e7d7      	b.n	800189a <__gedf2+0x82>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	4563      	cmp	r3, ip
 80018ee:	d0e6      	beq.n	80018be <__gedf2+0xa6>
 80018f0:	e7cf      	b.n	8001892 <__gedf2+0x7a>
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__ledf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4657      	mov	r7, sl
 80018fc:	464e      	mov	r6, r9
 80018fe:	4645      	mov	r5, r8
 8001900:	46de      	mov	lr, fp
 8001902:	b5e0      	push	{r5, r6, r7, lr}
 8001904:	000d      	movs	r5, r1
 8001906:	030e      	lsls	r6, r1, #12
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	0d49      	lsrs	r1, r1, #21
 800190c:	468a      	mov	sl, r1
 800190e:	0fdf      	lsrs	r7, r3, #31
 8001910:	0fe9      	lsrs	r1, r5, #31
 8001912:	46bc      	mov	ip, r7
 8001914:	b083      	sub	sp, #12
 8001916:	4f2e      	ldr	r7, [pc, #184]	@ (80019d0 <__ledf2+0xd8>)
 8001918:	0004      	movs	r4, r0
 800191a:	4680      	mov	r8, r0
 800191c:	9101      	str	r1, [sp, #4]
 800191e:	0058      	lsls	r0, r3, #1
 8001920:	0319      	lsls	r1, r3, #12
 8001922:	4691      	mov	r9, r2
 8001924:	0b36      	lsrs	r6, r6, #12
 8001926:	0b09      	lsrs	r1, r1, #12
 8001928:	0d40      	lsrs	r0, r0, #21
 800192a:	45ba      	cmp	sl, r7
 800192c:	d01e      	beq.n	800196c <__ledf2+0x74>
 800192e:	42b8      	cmp	r0, r7
 8001930:	d00d      	beq.n	800194e <__ledf2+0x56>
 8001932:	4657      	mov	r7, sl
 8001934:	2f00      	cmp	r7, #0
 8001936:	d127      	bne.n	8001988 <__ledf2+0x90>
 8001938:	4334      	orrs	r4, r6
 800193a:	2800      	cmp	r0, #0
 800193c:	d133      	bne.n	80019a6 <__ledf2+0xae>
 800193e:	430a      	orrs	r2, r1
 8001940:	d034      	beq.n	80019ac <__ledf2+0xb4>
 8001942:	2c00      	cmp	r4, #0
 8001944:	d140      	bne.n	80019c8 <__ledf2+0xd0>
 8001946:	4663      	mov	r3, ip
 8001948:	0058      	lsls	r0, r3, #1
 800194a:	3801      	subs	r0, #1
 800194c:	e015      	b.n	800197a <__ledf2+0x82>
 800194e:	4311      	orrs	r1, r2
 8001950:	d112      	bne.n	8001978 <__ledf2+0x80>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <__ledf2+0x64>
 8001958:	4326      	orrs	r6, r4
 800195a:	d0f4      	beq.n	8001946 <__ledf2+0x4e>
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	4563      	cmp	r3, ip
 8001960:	d01d      	beq.n	800199e <__ledf2+0xa6>
 8001962:	2001      	movs	r0, #1
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	425f      	negs	r7, r3
 8001968:	4338      	orrs	r0, r7
 800196a:	e006      	b.n	800197a <__ledf2+0x82>
 800196c:	4326      	orrs	r6, r4
 800196e:	d103      	bne.n	8001978 <__ledf2+0x80>
 8001970:	4550      	cmp	r0, sl
 8001972:	d1f6      	bne.n	8001962 <__ledf2+0x6a>
 8001974:	4311      	orrs	r1, r2
 8001976:	d01c      	beq.n	80019b2 <__ledf2+0xba>
 8001978:	2002      	movs	r0, #2
 800197a:	b003      	add	sp, #12
 800197c:	bcf0      	pop	{r4, r5, r6, r7}
 800197e:	46bb      	mov	fp, r7
 8001980:	46b2      	mov	sl, r6
 8001982:	46a9      	mov	r9, r5
 8001984:	46a0      	mov	r8, r4
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	2800      	cmp	r0, #0
 800198a:	d0ea      	beq.n	8001962 <__ledf2+0x6a>
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	4563      	cmp	r3, ip
 8001990:	d1e7      	bne.n	8001962 <__ledf2+0x6a>
 8001992:	4582      	cmp	sl, r0
 8001994:	dce5      	bgt.n	8001962 <__ledf2+0x6a>
 8001996:	db02      	blt.n	800199e <__ledf2+0xa6>
 8001998:	428e      	cmp	r6, r1
 800199a:	d8e2      	bhi.n	8001962 <__ledf2+0x6a>
 800199c:	d00e      	beq.n	80019bc <__ledf2+0xc4>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	0058      	lsls	r0, r3, #1
 80019a2:	3801      	subs	r0, #1
 80019a4:	e7e9      	b.n	800197a <__ledf2+0x82>
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	d0cd      	beq.n	8001946 <__ledf2+0x4e>
 80019aa:	e7d7      	b.n	800195c <__ledf2+0x64>
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d0e4      	beq.n	800197a <__ledf2+0x82>
 80019b0:	e7d7      	b.n	8001962 <__ledf2+0x6a>
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	2000      	movs	r0, #0
 80019b6:	4563      	cmp	r3, ip
 80019b8:	d0df      	beq.n	800197a <__ledf2+0x82>
 80019ba:	e7d2      	b.n	8001962 <__ledf2+0x6a>
 80019bc:	45c8      	cmp	r8, r9
 80019be:	d8d0      	bhi.n	8001962 <__ledf2+0x6a>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c8      	cmp	r8, r9
 80019c4:	d2d9      	bcs.n	800197a <__ledf2+0x82>
 80019c6:	e7ea      	b.n	800199e <__ledf2+0xa6>
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	4563      	cmp	r3, ip
 80019cc:	d0e4      	beq.n	8001998 <__ledf2+0xa0>
 80019ce:	e7c8      	b.n	8001962 <__ledf2+0x6a>
 80019d0:	000007ff 	.word	0x000007ff

080019d4 <__aeabi_dmul>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	46de      	mov	lr, fp
 80019dc:	4645      	mov	r5, r8
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	001f      	movs	r7, r3
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0b1b      	lsrs	r3, r3, #12
 80019e6:	0016      	movs	r6, r2
 80019e8:	469a      	mov	sl, r3
 80019ea:	0fca      	lsrs	r2, r1, #31
 80019ec:	004b      	lsls	r3, r1, #1
 80019ee:	0004      	movs	r4, r0
 80019f0:	4691      	mov	r9, r2
 80019f2:	b085      	sub	sp, #20
 80019f4:	0d5b      	lsrs	r3, r3, #21
 80019f6:	d100      	bne.n	80019fa <__aeabi_dmul+0x26>
 80019f8:	e1cf      	b.n	8001d9a <__aeabi_dmul+0x3c6>
 80019fa:	4acd      	ldr	r2, [pc, #820]	@ (8001d30 <__aeabi_dmul+0x35c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d055      	beq.n	8001aac <__aeabi_dmul+0xd8>
 8001a00:	4651      	mov	r1, sl
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	430a      	orrs	r2, r1
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	00c2      	lsls	r2, r0, #3
 8001a10:	4690      	mov	r8, r2
 8001a12:	4ac8      	ldr	r2, [pc, #800]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a14:	468a      	mov	sl, r1
 8001a16:	4693      	mov	fp, r2
 8001a18:	449b      	add	fp, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	033c      	lsls	r4, r7, #12
 8001a22:	007b      	lsls	r3, r7, #1
 8001a24:	0ffa      	lsrs	r2, r7, #31
 8001a26:	9601      	str	r6, [sp, #4]
 8001a28:	0b24      	lsrs	r4, r4, #12
 8001a2a:	0d5b      	lsrs	r3, r3, #21
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dmul+0x5e>
 8001a30:	e188      	b.n	8001d44 <__aeabi_dmul+0x370>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x66>
 8001a38:	e092      	b.n	8001b60 <__aeabi_dmul+0x18c>
 8001a3a:	4abe      	ldr	r2, [pc, #760]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a3c:	4694      	mov	ip, r2
 8001a3e:	4463      	add	r3, ip
 8001a40:	449b      	add	fp, r3
 8001a42:	2d0a      	cmp	r5, #10
 8001a44:	dc42      	bgt.n	8001acc <__aeabi_dmul+0xf8>
 8001a46:	00e4      	lsls	r4, r4, #3
 8001a48:	0f73      	lsrs	r3, r6, #29
 8001a4a:	4323      	orrs	r3, r4
 8001a4c:	2480      	movs	r4, #128	@ 0x80
 8001a4e:	4649      	mov	r1, r9
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	431c      	orrs	r4, r3
 8001a54:	00f3      	lsls	r3, r6, #3
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4059      	eors	r1, r3
 8001a5e:	b2cb      	uxtb	r3, r1
 8001a60:	9303      	str	r3, [sp, #12]
 8001a62:	2d02      	cmp	r5, #2
 8001a64:	dc00      	bgt.n	8001a68 <__aeabi_dmul+0x94>
 8001a66:	e094      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	40ab      	lsls	r3, r5
 8001a6c:	001d      	movs	r5, r3
 8001a6e:	23a6      	movs	r3, #166	@ 0xa6
 8001a70:	002a      	movs	r2, r5
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	401a      	ands	r2, r3
 8001a76:	421d      	tst	r5, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0xa8>
 8001a7a:	e229      	b.n	8001ed0 <__aeabi_dmul+0x4fc>
 8001a7c:	2390      	movs	r3, #144	@ 0x90
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	421d      	tst	r5, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xb2>
 8001a84:	e24d      	b.n	8001f22 <__aeabi_dmul+0x54e>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2480      	movs	r4, #128	@ 0x80
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a90:	0010      	movs	r0, r2
 8001a92:	464a      	mov	r2, r9
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	b005      	add	sp, #20
 8001aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa2:	46bb      	mov	fp, r7
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	46a9      	mov	r9, r5
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	4652      	mov	r2, sl
 8001aae:	4302      	orrs	r2, r0
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dmul+0xe2>
 8001ab4:	e1ac      	b.n	8001e10 <__aeabi_dmul+0x43c>
 8001ab6:	469b      	mov	fp, r3
 8001ab8:	2302      	movs	r3, #2
 8001aba:	4692      	mov	sl, r2
 8001abc:	2508      	movs	r5, #8
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e7ae      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	46a2      	mov	sl, r4
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	4698      	mov	r8, r3
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dmul+0x100>
 8001ad2:	e1ca      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x106>
 8001ad8:	e192      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d110      	bne.n	8001b00 <__aeabi_dmul+0x12c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	e7d4      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	403a      	ands	r2, r7
 8001aec:	4313      	orrs	r3, r2
 8001aee:	4652      	mov	r2, sl
 8001af0:	07d2      	lsls	r2, r2, #31
 8001af2:	4313      	orrs	r3, r2
 8001af4:	4698      	mov	r8, r3
 8001af6:	4653      	mov	r3, sl
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	469a      	mov	sl, r3
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	4699      	mov	r9, r3
 8001b00:	465b      	mov	r3, fp
 8001b02:	1c58      	adds	r0, r3, #1
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	445b      	add	r3, fp
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dmul+0x13c>
 8001b0e:	e1b1      	b.n	8001e74 <__aeabi_dmul+0x4a0>
 8001b10:	4642      	mov	r2, r8
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	d00b      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b16:	220f      	movs	r2, #15
 8001b18:	4641      	mov	r1, r8
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	2a04      	cmp	r2, #4
 8001b1e:	d006      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b20:	4642      	mov	r2, r8
 8001b22:	1d11      	adds	r1, r2, #4
 8001b24:	4541      	cmp	r1, r8
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	4688      	mov	r8, r1
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	4492      	add	sl, r2
 8001b2e:	4652      	mov	r2, sl
 8001b30:	01d2      	lsls	r2, r2, #7
 8001b32:	d506      	bpl.n	8001b42 <__aeabi_dmul+0x16e>
 8001b34:	4652      	mov	r2, sl
 8001b36:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <__aeabi_dmul+0x364>)
 8001b38:	401a      	ands	r2, r3
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	4692      	mov	sl, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	18c3      	adds	r3, r0, r3
 8001b42:	4a7e      	ldr	r2, [pc, #504]	@ (8001d3c <__aeabi_dmul+0x368>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dmul+0x176>
 8001b48:	e18f      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	08d1      	lsrs	r1, r2, #3
 8001b4e:	4652      	mov	r2, sl
 8001b50:	0752      	lsls	r2, r2, #29
 8001b52:	430a      	orrs	r2, r1
 8001b54:	4651      	mov	r1, sl
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	024c      	lsls	r4, r1, #9
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	0d5b      	lsrs	r3, r3, #21
 8001b5e:	e797      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001b60:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001b62:	4326      	orrs	r6, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	44e3      	add	fp, ip
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0x19a>
 8001b6c:	e16f      	b.n	8001e4e <__aeabi_dmul+0x47a>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	4649      	mov	r1, r9
 8001b72:	431d      	orrs	r5, r3
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	4059      	eors	r1, r3
 8001b78:	b2cb      	uxtb	r3, r1
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	2d0a      	cmp	r5, #10
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dmul+0x1ae>
 8001b80:	e133      	b.n	8001dea <__aeabi_dmul+0x416>
 8001b82:	2301      	movs	r3, #1
 8001b84:	40ab      	lsls	r3, r5
 8001b86:	001d      	movs	r5, r3
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2288      	movs	r2, #136	@ 0x88
 8001b8e:	422a      	tst	r2, r5
 8001b90:	d197      	bne.n	8001ac2 <__aeabi_dmul+0xee>
 8001b92:	4642      	mov	r2, r8
 8001b94:	4643      	mov	r3, r8
 8001b96:	0412      	lsls	r2, r2, #16
 8001b98:	0c12      	lsrs	r2, r2, #16
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	9801      	ldr	r0, [sp, #4]
 8001b9e:	0c1d      	lsrs	r5, r3, #16
 8001ba0:	0c03      	lsrs	r3, r0, #16
 8001ba2:	0400      	lsls	r0, r0, #16
 8001ba4:	0c00      	lsrs	r0, r0, #16
 8001ba6:	4346      	muls	r6, r0
 8001ba8:	46b4      	mov	ip, r6
 8001baa:	001e      	movs	r6, r3
 8001bac:	436e      	muls	r6, r5
 8001bae:	9600      	str	r6, [sp, #0]
 8001bb0:	0016      	movs	r6, r2
 8001bb2:	0007      	movs	r7, r0
 8001bb4:	435e      	muls	r6, r3
 8001bb6:	4661      	mov	r1, ip
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	436f      	muls	r7, r5
 8001bbc:	0c0e      	lsrs	r6, r1, #16
 8001bbe:	44b8      	add	r8, r7
 8001bc0:	4446      	add	r6, r8
 8001bc2:	42b7      	cmp	r7, r6
 8001bc4:	d905      	bls.n	8001bd2 <__aeabi_dmul+0x1fe>
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	4688      	mov	r8, r1
 8001bcc:	9f00      	ldr	r7, [sp, #0]
 8001bce:	4447      	add	r7, r8
 8001bd0:	9700      	str	r7, [sp, #0]
 8001bd2:	4661      	mov	r1, ip
 8001bd4:	0409      	lsls	r1, r1, #16
 8001bd6:	0c09      	lsrs	r1, r1, #16
 8001bd8:	0c37      	lsrs	r7, r6, #16
 8001bda:	0436      	lsls	r6, r6, #16
 8001bdc:	468c      	mov	ip, r1
 8001bde:	0031      	movs	r1, r6
 8001be0:	4461      	add	r1, ip
 8001be2:	9101      	str	r1, [sp, #4]
 8001be4:	0011      	movs	r1, r2
 8001be6:	0c26      	lsrs	r6, r4, #16
 8001be8:	0424      	lsls	r4, r4, #16
 8001bea:	0c24      	lsrs	r4, r4, #16
 8001bec:	4361      	muls	r1, r4
 8001bee:	468c      	mov	ip, r1
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	4369      	muls	r1, r5
 8001bf4:	4689      	mov	r9, r1
 8001bf6:	4661      	mov	r1, ip
 8001bf8:	0c09      	lsrs	r1, r1, #16
 8001bfa:	4688      	mov	r8, r1
 8001bfc:	4372      	muls	r2, r6
 8001bfe:	444a      	add	r2, r9
 8001c00:	4442      	add	r2, r8
 8001c02:	4375      	muls	r5, r6
 8001c04:	4591      	cmp	r9, r2
 8001c06:	d903      	bls.n	8001c10 <__aeabi_dmul+0x23c>
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0249      	lsls	r1, r1, #9
 8001c0c:	4688      	mov	r8, r1
 8001c0e:	4445      	add	r5, r8
 8001c10:	0c11      	lsrs	r1, r2, #16
 8001c12:	4688      	mov	r8, r1
 8001c14:	4661      	mov	r1, ip
 8001c16:	0409      	lsls	r1, r1, #16
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	468c      	mov	ip, r1
 8001c1c:	0412      	lsls	r2, r2, #16
 8001c1e:	4462      	add	r2, ip
 8001c20:	18b9      	adds	r1, r7, r2
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	4651      	mov	r1, sl
 8001c26:	0c09      	lsrs	r1, r1, #16
 8001c28:	468c      	mov	ip, r1
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	040f      	lsls	r7, r1, #16
 8001c2e:	0c3f      	lsrs	r7, r7, #16
 8001c30:	0039      	movs	r1, r7
 8001c32:	4341      	muls	r1, r0
 8001c34:	4445      	add	r5, r8
 8001c36:	4688      	mov	r8, r1
 8001c38:	4661      	mov	r1, ip
 8001c3a:	4341      	muls	r1, r0
 8001c3c:	468a      	mov	sl, r1
 8001c3e:	4641      	mov	r1, r8
 8001c40:	4660      	mov	r0, ip
 8001c42:	0c09      	lsrs	r1, r1, #16
 8001c44:	4689      	mov	r9, r1
 8001c46:	4358      	muls	r0, r3
 8001c48:	437b      	muls	r3, r7
 8001c4a:	4453      	add	r3, sl
 8001c4c:	444b      	add	r3, r9
 8001c4e:	459a      	cmp	sl, r3
 8001c50:	d903      	bls.n	8001c5a <__aeabi_dmul+0x286>
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	4689      	mov	r9, r1
 8001c58:	4448      	add	r0, r9
 8001c5a:	0c19      	lsrs	r1, r3, #16
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	4641      	mov	r1, r8
 8001c60:	0409      	lsls	r1, r1, #16
 8001c62:	0c09      	lsrs	r1, r1, #16
 8001c64:	4688      	mov	r8, r1
 8001c66:	0039      	movs	r1, r7
 8001c68:	4361      	muls	r1, r4
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	4443      	add	r3, r8
 8001c6e:	4688      	mov	r8, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	434c      	muls	r4, r1
 8001c74:	4371      	muls	r1, r6
 8001c76:	468c      	mov	ip, r1
 8001c78:	4641      	mov	r1, r8
 8001c7a:	4377      	muls	r7, r6
 8001c7c:	0c0e      	lsrs	r6, r1, #16
 8001c7e:	193f      	adds	r7, r7, r4
 8001c80:	19f6      	adds	r6, r6, r7
 8001c82:	4448      	add	r0, r9
 8001c84:	42b4      	cmp	r4, r6
 8001c86:	d903      	bls.n	8001c90 <__aeabi_dmul+0x2bc>
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	44cc      	add	ip, r9
 8001c90:	9902      	ldr	r1, [sp, #8]
 8001c92:	9f00      	ldr	r7, [sp, #0]
 8001c94:	4689      	mov	r9, r1
 8001c96:	0431      	lsls	r1, r6, #16
 8001c98:	444f      	add	r7, r9
 8001c9a:	4689      	mov	r9, r1
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	4297      	cmp	r7, r2
 8001ca0:	4192      	sbcs	r2, r2
 8001ca2:	040c      	lsls	r4, r1, #16
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	444c      	add	r4, r9
 8001ca8:	18ff      	adds	r7, r7, r3
 8001caa:	4252      	negs	r2, r2
 8001cac:	1964      	adds	r4, r4, r5
 8001cae:	18a1      	adds	r1, r4, r2
 8001cb0:	429f      	cmp	r7, r3
 8001cb2:	419b      	sbcs	r3, r3
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	425b      	negs	r3, r3
 8001cba:	4699      	mov	r9, r3
 8001cbc:	4590      	cmp	r8, r2
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	42ac      	cmp	r4, r5
 8001cc2:	41a4      	sbcs	r4, r4
 8001cc4:	44c2      	add	sl, r8
 8001cc6:	44d1      	add	r9, sl
 8001cc8:	4252      	negs	r2, r2
 8001cca:	4264      	negs	r4, r4
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	4599      	cmp	r9, r3
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	4582      	cmp	sl, r0
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	4252      	negs	r2, r2
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	464a      	mov	r2, r9
 8001cde:	0c36      	lsrs	r6, r6, #16
 8001ce0:	19a4      	adds	r4, r4, r6
 8001ce2:	18e3      	adds	r3, r4, r3
 8001ce4:	4463      	add	r3, ip
 8001ce6:	025b      	lsls	r3, r3, #9
 8001ce8:	0dd2      	lsrs	r2, r2, #23
 8001cea:	431a      	orrs	r2, r3
 8001cec:	9901      	ldr	r1, [sp, #4]
 8001cee:	4692      	mov	sl, r2
 8001cf0:	027a      	lsls	r2, r7, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	1e50      	subs	r0, r2, #1
 8001cf6:	4182      	sbcs	r2, r0
 8001cf8:	0dff      	lsrs	r7, r7, #23
 8001cfa:	4317      	orrs	r7, r2
 8001cfc:	464a      	mov	r2, r9
 8001cfe:	0252      	lsls	r2, r2, #9
 8001d00:	4317      	orrs	r7, r2
 8001d02:	46b8      	mov	r8, r7
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	d500      	bpl.n	8001d0a <__aeabi_dmul+0x336>
 8001d08:	e6ed      	b.n	8001ae6 <__aeabi_dmul+0x112>
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <__aeabi_dmul+0x36c>)
 8001d0c:	9a03      	ldr	r2, [sp, #12]
 8001d0e:	445b      	add	r3, fp
 8001d10:	4691      	mov	r9, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dc00      	bgt.n	8001d18 <__aeabi_dmul+0x344>
 8001d16:	e0ac      	b.n	8001e72 <__aeabi_dmul+0x49e>
 8001d18:	003a      	movs	r2, r7
 8001d1a:	0752      	lsls	r2, r2, #29
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dmul+0x34c>
 8001d1e:	e710      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d20:	220f      	movs	r2, #15
 8001d22:	4658      	mov	r0, fp
 8001d24:	403a      	ands	r2, r7
 8001d26:	2a04      	cmp	r2, #4
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dmul+0x358>
 8001d2a:	e6f9      	b.n	8001b20 <__aeabi_dmul+0x14c>
 8001d2c:	e709      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	fffffc01 	.word	0xfffffc01
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	000003ff 	.word	0x000003ff
 8001d44:	0022      	movs	r2, r4
 8001d46:	4332      	orrs	r2, r6
 8001d48:	d06f      	beq.n	8001e2a <__aeabi_dmul+0x456>
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dmul+0x37c>
 8001d4e:	e0c2      	b.n	8001ed6 <__aeabi_dmul+0x502>
 8001d50:	0020      	movs	r0, r4
 8001d52:	f000 fea9 	bl	8002aa8 <__clzsi2>
 8001d56:	0002      	movs	r2, r0
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3a0b      	subs	r2, #11
 8001d5c:	201d      	movs	r0, #29
 8001d5e:	1a82      	subs	r2, r0, r2
 8001d60:	0030      	movs	r0, r6
 8001d62:	0019      	movs	r1, r3
 8001d64:	40d0      	lsrs	r0, r2
 8001d66:	3908      	subs	r1, #8
 8001d68:	408c      	lsls	r4, r1
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	0034      	movs	r4, r6
 8001d70:	408c      	lsls	r4, r1
 8001d72:	4659      	mov	r1, fp
 8001d74:	1acb      	subs	r3, r1, r3
 8001d76:	4986      	ldr	r1, [pc, #536]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001d78:	468b      	mov	fp, r1
 8001d7a:	449b      	add	fp, r3
 8001d7c:	2d0a      	cmp	r5, #10
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x3ae>
 8001d80:	e6a4      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001d82:	4649      	mov	r1, r9
 8001d84:	9b00      	ldr	r3, [sp, #0]
 8001d86:	9401      	str	r4, [sp, #4]
 8001d88:	4059      	eors	r1, r3
 8001d8a:	b2cb      	uxtb	r3, r1
 8001d8c:	0014      	movs	r4, r2
 8001d8e:	2000      	movs	r0, #0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2d02      	cmp	r5, #2
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3c4>
 8001d96:	e667      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001d98:	e6fb      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	d03c      	beq.n	8001e1c <__aeabi_dmul+0x448>
 8001da2:	4653      	mov	r3, sl
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x3d6>
 8001da8:	e0a3      	b.n	8001ef2 <__aeabi_dmul+0x51e>
 8001daa:	4650      	mov	r0, sl
 8001dac:	f000 fe7c 	bl	8002aa8 <__clzsi2>
 8001db0:	230b      	movs	r3, #11
 8001db2:	425b      	negs	r3, r3
 8001db4:	469c      	mov	ip, r3
 8001db6:	0002      	movs	r2, r0
 8001db8:	4484      	add	ip, r0
 8001dba:	0011      	movs	r1, r2
 8001dbc:	4650      	mov	r0, sl
 8001dbe:	3908      	subs	r1, #8
 8001dc0:	4088      	lsls	r0, r1
 8001dc2:	231d      	movs	r3, #29
 8001dc4:	4680      	mov	r8, r0
 8001dc6:	4660      	mov	r0, ip
 8001dc8:	1a1b      	subs	r3, r3, r0
 8001dca:	0020      	movs	r0, r4
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	0003      	movs	r3, r0
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	408b      	lsls	r3, r1
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001dde:	2500      	movs	r5, #0
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	e61a      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001dea:	2d0f      	cmp	r5, #15
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dmul+0x41c>
 8001dee:	e0c9      	b.n	8001f84 <__aeabi_dmul+0x5b0>
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	4652      	mov	r2, sl
 8001df4:	031b      	lsls	r3, r3, #12
 8001df6:	421a      	tst	r2, r3
 8001df8:	d002      	beq.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfa:	421c      	tst	r4, r3
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfe:	e092      	b.n	8001f26 <__aeabi_dmul+0x552>
 8001e00:	2480      	movs	r4, #128	@ 0x80
 8001e02:	4653      	mov	r3, sl
 8001e04:	0324      	lsls	r4, r4, #12
 8001e06:	431c      	orrs	r4, r3
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	4642      	mov	r2, r8
 8001e0c:	0b24      	lsrs	r4, r4, #12
 8001e0e:	e63e      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001e10:	469b      	mov	fp, r3
 8001e12:	2303      	movs	r3, #3
 8001e14:	4680      	mov	r8, r0
 8001e16:	250c      	movs	r5, #12
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	e601      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	469a      	mov	sl, r3
 8001e20:	469b      	mov	fp, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	2504      	movs	r5, #4
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	e5fa      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430d      	orrs	r5, r1
 8001e2e:	2d0a      	cmp	r5, #10
 8001e30:	dd00      	ble.n	8001e34 <__aeabi_dmul+0x460>
 8001e32:	e64b      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e34:	4649      	mov	r1, r9
 8001e36:	9800      	ldr	r0, [sp, #0]
 8001e38:	4041      	eors	r1, r0
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	9103      	str	r1, [sp, #12]
 8001e3e:	2d02      	cmp	r5, #2
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x470>
 8001e42:	e096      	b.n	8001f72 <__aeabi_dmul+0x59e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2400      	movs	r4, #0
 8001e48:	2001      	movs	r0, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	e60c      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001e4e:	4649      	mov	r1, r9
 8001e50:	2302      	movs	r3, #2
 8001e52:	9a00      	ldr	r2, [sp, #0]
 8001e54:	432b      	orrs	r3, r5
 8001e56:	4051      	eors	r1, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	9203      	str	r2, [sp, #12]
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dmul+0x48e>
 8001e60:	e634      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d157      	bne.n	8001f16 <__aeabi_dmul+0x542>
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	4699      	mov	r9, r3
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <__aeabi_dmul+0x5c0>)
 8001e70:	e60e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001e72:	4658      	mov	r0, fp
 8001e74:	2101      	movs	r1, #1
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	2938      	cmp	r1, #56	@ 0x38
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dmul+0x4aa>
 8001e7c:	e62f      	b.n	8001ade <__aeabi_dmul+0x10a>
 8001e7e:	291f      	cmp	r1, #31
 8001e80:	dd56      	ble.n	8001f30 <__aeabi_dmul+0x55c>
 8001e82:	221f      	movs	r2, #31
 8001e84:	4654      	mov	r4, sl
 8001e86:	4252      	negs	r2, r2
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	40dc      	lsrs	r4, r3
 8001e8c:	2920      	cmp	r1, #32
 8001e8e:	d007      	beq.n	8001ea0 <__aeabi_dmul+0x4cc>
 8001e90:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <__aeabi_dmul+0x5c4>)
 8001e92:	4642      	mov	r2, r8
 8001e94:	469c      	mov	ip, r3
 8001e96:	4653      	mov	r3, sl
 8001e98:	4460      	add	r0, ip
 8001e9a:	4083      	lsls	r3, r0
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	2107      	movs	r1, #7
 8001ea4:	1e53      	subs	r3, r2, #1
 8001ea6:	419a      	sbcs	r2, r3
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4013      	ands	r3, r2
 8001eae:	2400      	movs	r4, #0
 8001eb0:	4211      	tst	r1, r2
 8001eb2:	d009      	beq.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d05d      	beq.n	8001f78 <__aeabi_dmul+0x5a4>
 8001ebc:	1d11      	adds	r1, r2, #4
 8001ebe:	4291      	cmp	r1, r2
 8001ec0:	419b      	sbcs	r3, r3
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	075b      	lsls	r3, r3, #29
 8001ec8:	08d2      	lsrs	r2, r2, #3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e5df      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	e5fa      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001ed6:	9801      	ldr	r0, [sp, #4]
 8001ed8:	f000 fde6 	bl	8002aa8 <__clzsi2>
 8001edc:	0002      	movs	r2, r0
 8001ede:	0003      	movs	r3, r0
 8001ee0:	3215      	adds	r2, #21
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2a1c      	cmp	r2, #28
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dmul+0x516>
 8001ee8:	e738      	b.n	8001d5c <__aeabi_dmul+0x388>
 8001eea:	9a01      	ldr	r2, [sp, #4]
 8001eec:	3808      	subs	r0, #8
 8001eee:	4082      	lsls	r2, r0
 8001ef0:	e73f      	b.n	8001d72 <__aeabi_dmul+0x39e>
 8001ef2:	f000 fdd9 	bl	8002aa8 <__clzsi2>
 8001ef6:	2315      	movs	r3, #21
 8001ef8:	469c      	mov	ip, r3
 8001efa:	4484      	add	ip, r0
 8001efc:	0002      	movs	r2, r0
 8001efe:	4663      	mov	r3, ip
 8001f00:	3220      	adds	r2, #32
 8001f02:	2b1c      	cmp	r3, #28
 8001f04:	dc00      	bgt.n	8001f08 <__aeabi_dmul+0x534>
 8001f06:	e758      	b.n	8001dba <__aeabi_dmul+0x3e6>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	0023      	movs	r3, r4
 8001f0e:	3808      	subs	r0, #8
 8001f10:	4083      	lsls	r3, r0
 8001f12:	469a      	mov	sl, r3
 8001f14:	e762      	b.n	8001ddc <__aeabi_dmul+0x408>
 8001f16:	001d      	movs	r5, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	e5a2      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001f22:	9002      	str	r0, [sp, #8]
 8001f24:	e632      	b.n	8001b8c <__aeabi_dmul+0x1b8>
 8001f26:	431c      	orrs	r4, r3
 8001f28:	9b00      	ldr	r3, [sp, #0]
 8001f2a:	9a01      	ldr	r2, [sp, #4]
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	e5ae      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <__aeabi_dmul+0x5c8>)
 8001f32:	4652      	mov	r2, sl
 8001f34:	18c3      	adds	r3, r0, r3
 8001f36:	4640      	mov	r0, r8
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	40c8      	lsrs	r0, r1
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4098      	lsls	r0, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	4183      	sbcs	r3, r0
 8001f48:	4654      	mov	r4, sl
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	40cc      	lsrs	r4, r1
 8001f4e:	0753      	lsls	r3, r2, #29
 8001f50:	d009      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f52:	230f      	movs	r3, #15
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d005      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f5a:	1d13      	adds	r3, r2, #4
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	4192      	sbcs	r2, r2
 8001f60:	4252      	negs	r2, r2
 8001f62:	18a4      	adds	r4, r4, r2
 8001f64:	001a      	movs	r2, r3
 8001f66:	0223      	lsls	r3, r4, #8
 8001f68:	d508      	bpl.n	8001f7c <__aeabi_dmul+0x5a8>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	e58e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f72:	4689      	mov	r9, r1
 8001f74:	2400      	movs	r4, #0
 8001f76:	e58b      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e7a5      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f7c:	0763      	lsls	r3, r4, #29
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e7a1      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f84:	9b00      	ldr	r3, [sp, #0]
 8001f86:	46a2      	mov	sl, r4
 8001f88:	4699      	mov	r9, r3
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	e737      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001f90:	fffffc0d 	.word	0xfffffc0d
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000043e 	.word	0x0000043e
 8001f9c:	0000041e 	.word	0x0000041e

08001fa0 <__aeabi_dsub>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	464e      	mov	r6, r9
 8001fa6:	4645      	mov	r5, r8
 8001fa8:	46de      	mov	lr, fp
 8001faa:	b5e0      	push	{r5, r6, r7, lr}
 8001fac:	b083      	sub	sp, #12
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	9101      	str	r1, [sp, #4]
 8001fb2:	030c      	lsls	r4, r1, #12
 8001fb4:	004d      	lsls	r5, r1, #1
 8001fb6:	0fce      	lsrs	r6, r1, #31
 8001fb8:	0a61      	lsrs	r1, r4, #9
 8001fba:	9c00      	ldr	r4, [sp, #0]
 8001fbc:	005f      	lsls	r7, r3, #1
 8001fbe:	0f64      	lsrs	r4, r4, #29
 8001fc0:	430c      	orrs	r4, r1
 8001fc2:	9900      	ldr	r1, [sp, #0]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	00c8      	lsls	r0, r1, #3
 8001fca:	0319      	lsls	r1, r3, #12
 8001fcc:	0d7b      	lsrs	r3, r7, #21
 8001fce:	4699      	mov	r9, r3
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	4fcc      	ldr	r7, [pc, #816]	@ (8002304 <__aeabi_dsub+0x364>)
 8001fd4:	0fdb      	lsrs	r3, r3, #31
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	0a4b      	lsrs	r3, r1, #9
 8001fda:	9900      	ldr	r1, [sp, #0]
 8001fdc:	4680      	mov	r8, r0
 8001fde:	0f49      	lsrs	r1, r1, #29
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	9b00      	ldr	r3, [sp, #0]
 8001fe4:	468b      	mov	fp, r1
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	4692      	mov	sl, r2
 8001fea:	0d6d      	lsrs	r5, r5, #21
 8001fec:	45b9      	cmp	r9, r7
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x52>
 8001ff0:	e0bf      	b.n	8002172 <__aeabi_dsub+0x1d2>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4661      	mov	r1, ip
 8001ff6:	4059      	eors	r1, r3
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	1aeb      	subs	r3, r5, r3
 8001ffe:	428e      	cmp	r6, r1
 8002000:	d075      	beq.n	80020ee <__aeabi_dsub+0x14e>
 8002002:	2b00      	cmp	r3, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x68>
 8002006:	e2a3      	b.n	8002550 <__aeabi_dsub+0x5b0>
 8002008:	4649      	mov	r1, r9
 800200a:	2900      	cmp	r1, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x70>
 800200e:	e0ce      	b.n	80021ae <__aeabi_dsub+0x20e>
 8002010:	42bd      	cmp	r5, r7
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x76>
 8002014:	e200      	b.n	8002418 <__aeabi_dsub+0x478>
 8002016:	2701      	movs	r7, #1
 8002018:	2b38      	cmp	r3, #56	@ 0x38
 800201a:	dc19      	bgt.n	8002050 <__aeabi_dsub+0xb0>
 800201c:	2780      	movs	r7, #128	@ 0x80
 800201e:	4659      	mov	r1, fp
 8002020:	043f      	lsls	r7, r7, #16
 8002022:	4339      	orrs	r1, r7
 8002024:	468b      	mov	fp, r1
 8002026:	2b1f      	cmp	r3, #31
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x8c>
 800202a:	e1fa      	b.n	8002422 <__aeabi_dsub+0x482>
 800202c:	2720      	movs	r7, #32
 800202e:	1af9      	subs	r1, r7, r3
 8002030:	468c      	mov	ip, r1
 8002032:	4659      	mov	r1, fp
 8002034:	4667      	mov	r7, ip
 8002036:	40b9      	lsls	r1, r7
 8002038:	000f      	movs	r7, r1
 800203a:	0011      	movs	r1, r2
 800203c:	40d9      	lsrs	r1, r3
 800203e:	430f      	orrs	r7, r1
 8002040:	4661      	mov	r1, ip
 8002042:	408a      	lsls	r2, r1
 8002044:	1e51      	subs	r1, r2, #1
 8002046:	418a      	sbcs	r2, r1
 8002048:	4659      	mov	r1, fp
 800204a:	40d9      	lsrs	r1, r3
 800204c:	4317      	orrs	r7, r2
 800204e:	1a64      	subs	r4, r4, r1
 8002050:	1bc7      	subs	r7, r0, r7
 8002052:	42b8      	cmp	r0, r7
 8002054:	4180      	sbcs	r0, r0
 8002056:	4240      	negs	r0, r0
 8002058:	1a24      	subs	r4, r4, r0
 800205a:	0223      	lsls	r3, r4, #8
 800205c:	d400      	bmi.n	8002060 <__aeabi_dsub+0xc0>
 800205e:	e140      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002060:	0264      	lsls	r4, r4, #9
 8002062:	0a64      	lsrs	r4, r4, #9
 8002064:	2c00      	cmp	r4, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0xca>
 8002068:	e154      	b.n	8002314 <__aeabi_dsub+0x374>
 800206a:	0020      	movs	r0, r4
 800206c:	f000 fd1c 	bl	8002aa8 <__clzsi2>
 8002070:	0003      	movs	r3, r0
 8002072:	3b08      	subs	r3, #8
 8002074:	2120      	movs	r1, #32
 8002076:	0038      	movs	r0, r7
 8002078:	1aca      	subs	r2, r1, r3
 800207a:	40d0      	lsrs	r0, r2
 800207c:	409c      	lsls	r4, r3
 800207e:	0002      	movs	r2, r0
 8002080:	409f      	lsls	r7, r3
 8002082:	4322      	orrs	r2, r4
 8002084:	429d      	cmp	r5, r3
 8002086:	dd00      	ble.n	800208a <__aeabi_dsub+0xea>
 8002088:	e1a6      	b.n	80023d8 <__aeabi_dsub+0x438>
 800208a:	1b58      	subs	r0, r3, r5
 800208c:	3001      	adds	r0, #1
 800208e:	1a09      	subs	r1, r1, r0
 8002090:	003c      	movs	r4, r7
 8002092:	408f      	lsls	r7, r1
 8002094:	40c4      	lsrs	r4, r0
 8002096:	1e7b      	subs	r3, r7, #1
 8002098:	419f      	sbcs	r7, r3
 800209a:	0013      	movs	r3, r2
 800209c:	408b      	lsls	r3, r1
 800209e:	4327      	orrs	r7, r4
 80020a0:	431f      	orrs	r7, r3
 80020a2:	40c2      	lsrs	r2, r0
 80020a4:	003b      	movs	r3, r7
 80020a6:	0014      	movs	r4, r2
 80020a8:	2500      	movs	r5, #0
 80020aa:	4313      	orrs	r3, r2
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x110>
 80020ae:	e1f7      	b.n	80024a0 <__aeabi_dsub+0x500>
 80020b0:	077b      	lsls	r3, r7, #29
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x116>
 80020b4:	e377      	b.n	80027a6 <__aeabi_dsub+0x806>
 80020b6:	230f      	movs	r3, #15
 80020b8:	0038      	movs	r0, r7
 80020ba:	403b      	ands	r3, r7
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d004      	beq.n	80020ca <__aeabi_dsub+0x12a>
 80020c0:	1d38      	adds	r0, r7, #4
 80020c2:	42b8      	cmp	r0, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	427f      	negs	r7, r7
 80020c8:	19e4      	adds	r4, r4, r7
 80020ca:	0223      	lsls	r3, r4, #8
 80020cc:	d400      	bmi.n	80020d0 <__aeabi_dsub+0x130>
 80020ce:	e368      	b.n	80027a2 <__aeabi_dsub+0x802>
 80020d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002304 <__aeabi_dsub+0x364>)
 80020d2:	3501      	adds	r5, #1
 80020d4:	429d      	cmp	r5, r3
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x13a>
 80020d8:	e0f4      	b.n	80022c4 <__aeabi_dsub+0x324>
 80020da:	4b8b      	ldr	r3, [pc, #556]	@ (8002308 <__aeabi_dsub+0x368>)
 80020dc:	056d      	lsls	r5, r5, #21
 80020de:	401c      	ands	r4, r3
 80020e0:	0d6d      	lsrs	r5, r5, #21
 80020e2:	0767      	lsls	r7, r4, #29
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	0264      	lsls	r4, r4, #9
 80020e8:	4307      	orrs	r7, r0
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	e0ec      	b.n	80022c8 <__aeabi_dsub+0x328>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dc00      	bgt.n	80020f4 <__aeabi_dsub+0x154>
 80020f2:	e329      	b.n	8002748 <__aeabi_dsub+0x7a8>
 80020f4:	4649      	mov	r1, r9
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d000      	beq.n	80020fc <__aeabi_dsub+0x15c>
 80020fa:	e0d6      	b.n	80022aa <__aeabi_dsub+0x30a>
 80020fc:	4659      	mov	r1, fp
 80020fe:	4311      	orrs	r1, r2
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x164>
 8002102:	e12e      	b.n	8002362 <__aeabi_dsub+0x3c2>
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x16c>
 800210a:	e1e6      	b.n	80024da <__aeabi_dsub+0x53a>
 800210c:	42bb      	cmp	r3, r7
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x172>
 8002110:	e182      	b.n	8002418 <__aeabi_dsub+0x478>
 8002112:	2701      	movs	r7, #1
 8002114:	000b      	movs	r3, r1
 8002116:	2938      	cmp	r1, #56	@ 0x38
 8002118:	dc14      	bgt.n	8002144 <__aeabi_dsub+0x1a4>
 800211a:	2b1f      	cmp	r3, #31
 800211c:	dd00      	ble.n	8002120 <__aeabi_dsub+0x180>
 800211e:	e23c      	b.n	800259a <__aeabi_dsub+0x5fa>
 8002120:	2720      	movs	r7, #32
 8002122:	1af9      	subs	r1, r7, r3
 8002124:	468c      	mov	ip, r1
 8002126:	4659      	mov	r1, fp
 8002128:	4667      	mov	r7, ip
 800212a:	40b9      	lsls	r1, r7
 800212c:	000f      	movs	r7, r1
 800212e:	0011      	movs	r1, r2
 8002130:	40d9      	lsrs	r1, r3
 8002132:	430f      	orrs	r7, r1
 8002134:	4661      	mov	r1, ip
 8002136:	408a      	lsls	r2, r1
 8002138:	1e51      	subs	r1, r2, #1
 800213a:	418a      	sbcs	r2, r1
 800213c:	4659      	mov	r1, fp
 800213e:	40d9      	lsrs	r1, r3
 8002140:	4317      	orrs	r7, r2
 8002142:	1864      	adds	r4, r4, r1
 8002144:	183f      	adds	r7, r7, r0
 8002146:	4287      	cmp	r7, r0
 8002148:	4180      	sbcs	r0, r0
 800214a:	4240      	negs	r0, r0
 800214c:	1824      	adds	r4, r4, r0
 800214e:	0223      	lsls	r3, r4, #8
 8002150:	d400      	bmi.n	8002154 <__aeabi_dsub+0x1b4>
 8002152:	e0c6      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <__aeabi_dsub+0x364>)
 8002156:	3501      	adds	r5, #1
 8002158:	429d      	cmp	r5, r3
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x1be>
 800215c:	e0b2      	b.n	80022c4 <__aeabi_dsub+0x324>
 800215e:	2101      	movs	r1, #1
 8002160:	4b69      	ldr	r3, [pc, #420]	@ (8002308 <__aeabi_dsub+0x368>)
 8002162:	087a      	lsrs	r2, r7, #1
 8002164:	401c      	ands	r4, r3
 8002166:	4039      	ands	r1, r7
 8002168:	430a      	orrs	r2, r1
 800216a:	07e7      	lsls	r7, r4, #31
 800216c:	4317      	orrs	r7, r2
 800216e:	0864      	lsrs	r4, r4, #1
 8002170:	e79e      	b.n	80020b0 <__aeabi_dsub+0x110>
 8002172:	4b66      	ldr	r3, [pc, #408]	@ (800230c <__aeabi_dsub+0x36c>)
 8002174:	4311      	orrs	r1, r2
 8002176:	468a      	mov	sl, r1
 8002178:	18eb      	adds	r3, r5, r3
 800217a:	2900      	cmp	r1, #0
 800217c:	d028      	beq.n	80021d0 <__aeabi_dsub+0x230>
 800217e:	4566      	cmp	r6, ip
 8002180:	d02c      	beq.n	80021dc <__aeabi_dsub+0x23c>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d05b      	beq.n	800223e <__aeabi_dsub+0x29e>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x1ec>
 800218a:	e12c      	b.n	80023e6 <__aeabi_dsub+0x446>
 800218c:	465b      	mov	r3, fp
 800218e:	4666      	mov	r6, ip
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	003b      	movs	r3, r7
 800219a:	432b      	orrs	r3, r5
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x200>
 800219e:	e0e2      	b.n	8002366 <__aeabi_dsub+0x3c6>
 80021a0:	2480      	movs	r4, #128	@ 0x80
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	432c      	orrs	r4, r5
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	4d56      	ldr	r5, [pc, #344]	@ (8002304 <__aeabi_dsub+0x364>)
 80021aa:	0b24      	lsrs	r4, r4, #12
 80021ac:	e08c      	b.n	80022c8 <__aeabi_dsub+0x328>
 80021ae:	4659      	mov	r1, fp
 80021b0:	4311      	orrs	r1, r2
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x216>
 80021b4:	e0d5      	b.n	8002362 <__aeabi_dsub+0x3c2>
 80021b6:	1e59      	subs	r1, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x21e>
 80021bc:	e1b9      	b.n	8002532 <__aeabi_dsub+0x592>
 80021be:	42bb      	cmp	r3, r7
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x224>
 80021c2:	e1b1      	b.n	8002528 <__aeabi_dsub+0x588>
 80021c4:	2701      	movs	r7, #1
 80021c6:	000b      	movs	r3, r1
 80021c8:	2938      	cmp	r1, #56	@ 0x38
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x22e>
 80021cc:	e740      	b.n	8002050 <__aeabi_dsub+0xb0>
 80021ce:	e72a      	b.n	8002026 <__aeabi_dsub+0x86>
 80021d0:	4661      	mov	r1, ip
 80021d2:	2701      	movs	r7, #1
 80021d4:	4079      	eors	r1, r7
 80021d6:	468c      	mov	ip, r1
 80021d8:	4566      	cmp	r6, ip
 80021da:	d1d2      	bne.n	8002182 <__aeabi_dsub+0x1e2>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x242>
 80021e0:	e0c5      	b.n	800236e <__aeabi_dsub+0x3ce>
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x248>
 80021e6:	e155      	b.n	8002494 <__aeabi_dsub+0x4f4>
 80021e8:	464b      	mov	r3, r9
 80021ea:	0025      	movs	r5, r4
 80021ec:	4305      	orrs	r5, r0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x252>
 80021f0:	e212      	b.n	8002618 <__aeabi_dsub+0x678>
 80021f2:	1e59      	subs	r1, r3, #1
 80021f4:	468c      	mov	ip, r1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x25c>
 80021fa:	e249      	b.n	8002690 <__aeabi_dsub+0x6f0>
 80021fc:	4d41      	ldr	r5, [pc, #260]	@ (8002304 <__aeabi_dsub+0x364>)
 80021fe:	42ab      	cmp	r3, r5
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x264>
 8002202:	e28f      	b.n	8002724 <__aeabi_dsub+0x784>
 8002204:	2701      	movs	r7, #1
 8002206:	2938      	cmp	r1, #56	@ 0x38
 8002208:	dc11      	bgt.n	800222e <__aeabi_dsub+0x28e>
 800220a:	4663      	mov	r3, ip
 800220c:	2b1f      	cmp	r3, #31
 800220e:	dd00      	ble.n	8002212 <__aeabi_dsub+0x272>
 8002210:	e25b      	b.n	80026ca <__aeabi_dsub+0x72a>
 8002212:	4661      	mov	r1, ip
 8002214:	2320      	movs	r3, #32
 8002216:	0027      	movs	r7, r4
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	0005      	movs	r5, r0
 800221c:	4098      	lsls	r0, r3
 800221e:	409f      	lsls	r7, r3
 8002220:	40cd      	lsrs	r5, r1
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	4198      	sbcs	r0, r3
 8002226:	40cc      	lsrs	r4, r1
 8002228:	432f      	orrs	r7, r5
 800222a:	4307      	orrs	r7, r0
 800222c:	44a3      	add	fp, r4
 800222e:	18bf      	adds	r7, r7, r2
 8002230:	4297      	cmp	r7, r2
 8002232:	4192      	sbcs	r2, r2
 8002234:	4252      	negs	r2, r2
 8002236:	445a      	add	r2, fp
 8002238:	0014      	movs	r4, r2
 800223a:	464d      	mov	r5, r9
 800223c:	e787      	b.n	800214e <__aeabi_dsub+0x1ae>
 800223e:	4f34      	ldr	r7, [pc, #208]	@ (8002310 <__aeabi_dsub+0x370>)
 8002240:	1c6b      	adds	r3, r5, #1
 8002242:	423b      	tst	r3, r7
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x2a8>
 8002246:	e0b6      	b.n	80023b6 <__aeabi_dsub+0x416>
 8002248:	4659      	mov	r1, fp
 800224a:	0023      	movs	r3, r4
 800224c:	4311      	orrs	r1, r2
 800224e:	000f      	movs	r7, r1
 8002250:	4303      	orrs	r3, r0
 8002252:	2d00      	cmp	r5, #0
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x2b8>
 8002256:	e126      	b.n	80024a6 <__aeabi_dsub+0x506>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x2be>
 800225c:	e1c0      	b.n	80025e0 <__aeabi_dsub+0x640>
 800225e:	2900      	cmp	r1, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x2c4>
 8002262:	e0a1      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002264:	1a83      	subs	r3, r0, r2
 8002266:	4698      	mov	r8, r3
 8002268:	465b      	mov	r3, fp
 800226a:	4540      	cmp	r0, r8
 800226c:	41ad      	sbcs	r5, r5
 800226e:	1ae3      	subs	r3, r4, r3
 8002270:	426d      	negs	r5, r5
 8002272:	1b5b      	subs	r3, r3, r5
 8002274:	2580      	movs	r5, #128	@ 0x80
 8002276:	042d      	lsls	r5, r5, #16
 8002278:	422b      	tst	r3, r5
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x2de>
 800227c:	e14b      	b.n	8002516 <__aeabi_dsub+0x576>
 800227e:	465b      	mov	r3, fp
 8002280:	1a10      	subs	r0, r2, r0
 8002282:	4282      	cmp	r2, r0
 8002284:	4192      	sbcs	r2, r2
 8002286:	1b1c      	subs	r4, r3, r4
 8002288:	0007      	movs	r7, r0
 800228a:	2601      	movs	r6, #1
 800228c:	4663      	mov	r3, ip
 800228e:	4252      	negs	r2, r2
 8002290:	1aa4      	subs	r4, r4, r2
 8002292:	4327      	orrs	r7, r4
 8002294:	401e      	ands	r6, r3
 8002296:	2f00      	cmp	r7, #0
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x2fc>
 800229a:	e142      	b.n	8002522 <__aeabi_dsub+0x582>
 800229c:	422c      	tst	r4, r5
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x302>
 80022a0:	e26d      	b.n	800277e <__aeabi_dsub+0x7de>
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <__aeabi_dsub+0x368>)
 80022a4:	2501      	movs	r5, #1
 80022a6:	401c      	ands	r4, r3
 80022a8:	e71b      	b.n	80020e2 <__aeabi_dsub+0x142>
 80022aa:	42bd      	cmp	r5, r7
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x310>
 80022ae:	e13b      	b.n	8002528 <__aeabi_dsub+0x588>
 80022b0:	2701      	movs	r7, #1
 80022b2:	2b38      	cmp	r3, #56	@ 0x38
 80022b4:	dd00      	ble.n	80022b8 <__aeabi_dsub+0x318>
 80022b6:	e745      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80022b8:	2780      	movs	r7, #128	@ 0x80
 80022ba:	4659      	mov	r1, fp
 80022bc:	043f      	lsls	r7, r7, #16
 80022be:	4339      	orrs	r1, r7
 80022c0:	468b      	mov	fp, r1
 80022c2:	e72a      	b.n	800211a <__aeabi_dsub+0x17a>
 80022c4:	2400      	movs	r4, #0
 80022c6:	2700      	movs	r7, #0
 80022c8:	052d      	lsls	r5, r5, #20
 80022ca:	4325      	orrs	r5, r4
 80022cc:	07f6      	lsls	r6, r6, #31
 80022ce:	4335      	orrs	r5, r6
 80022d0:	0038      	movs	r0, r7
 80022d2:	0029      	movs	r1, r5
 80022d4:	b003      	add	sp, #12
 80022d6:	bcf0      	pop	{r4, r5, r6, r7}
 80022d8:	46bb      	mov	fp, r7
 80022da:	46b2      	mov	sl, r6
 80022dc:	46a9      	mov	r9, r5
 80022de:	46a0      	mov	r8, r4
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	077b      	lsls	r3, r7, #29
 80022e4:	d004      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022e6:	230f      	movs	r3, #15
 80022e8:	403b      	ands	r3, r7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d000      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022ee:	e6e7      	b.n	80020c0 <__aeabi_dsub+0x120>
 80022f0:	002b      	movs	r3, r5
 80022f2:	08f8      	lsrs	r0, r7, #3
 80022f4:	4a03      	ldr	r2, [pc, #12]	@ (8002304 <__aeabi_dsub+0x364>)
 80022f6:	0767      	lsls	r7, r4, #29
 80022f8:	4307      	orrs	r7, r0
 80022fa:	08e5      	lsrs	r5, r4, #3
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x362>
 8002300:	e74a      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002302:	e0a5      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002304:	000007ff 	.word	0x000007ff
 8002308:	ff7fffff 	.word	0xff7fffff
 800230c:	fffff801 	.word	0xfffff801
 8002310:	000007fe 	.word	0x000007fe
 8002314:	0038      	movs	r0, r7
 8002316:	f000 fbc7 	bl	8002aa8 <__clzsi2>
 800231a:	0003      	movs	r3, r0
 800231c:	3318      	adds	r3, #24
 800231e:	2b1f      	cmp	r3, #31
 8002320:	dc00      	bgt.n	8002324 <__aeabi_dsub+0x384>
 8002322:	e6a7      	b.n	8002074 <__aeabi_dsub+0xd4>
 8002324:	003a      	movs	r2, r7
 8002326:	3808      	subs	r0, #8
 8002328:	4082      	lsls	r2, r0
 800232a:	429d      	cmp	r5, r3
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x390>
 800232e:	e08a      	b.n	8002446 <__aeabi_dsub+0x4a6>
 8002330:	1b5b      	subs	r3, r3, r5
 8002332:	1c58      	adds	r0, r3, #1
 8002334:	281f      	cmp	r0, #31
 8002336:	dc00      	bgt.n	800233a <__aeabi_dsub+0x39a>
 8002338:	e1d8      	b.n	80026ec <__aeabi_dsub+0x74c>
 800233a:	0017      	movs	r7, r2
 800233c:	3b1f      	subs	r3, #31
 800233e:	40df      	lsrs	r7, r3
 8002340:	2820      	cmp	r0, #32
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x3b0>
 8002344:	2340      	movs	r3, #64	@ 0x40
 8002346:	1a1b      	subs	r3, r3, r0
 8002348:	409a      	lsls	r2, r3
 800234a:	1e53      	subs	r3, r2, #1
 800234c:	419a      	sbcs	r2, r3
 800234e:	4317      	orrs	r7, r2
 8002350:	2500      	movs	r5, #0
 8002352:	2f00      	cmp	r7, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x3b8>
 8002356:	e0e5      	b.n	8002524 <__aeabi_dsub+0x584>
 8002358:	077b      	lsls	r3, r7, #29
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x3be>
 800235c:	e6ab      	b.n	80020b6 <__aeabi_dsub+0x116>
 800235e:	002c      	movs	r4, r5
 8002360:	e7c6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002362:	08c0      	lsrs	r0, r0, #3
 8002364:	e7c6      	b.n	80022f4 <__aeabi_dsub+0x354>
 8002366:	2700      	movs	r7, #0
 8002368:	2400      	movs	r4, #0
 800236a:	4dd1      	ldr	r5, [pc, #836]	@ (80026b0 <__aeabi_dsub+0x710>)
 800236c:	e7ac      	b.n	80022c8 <__aeabi_dsub+0x328>
 800236e:	4fd1      	ldr	r7, [pc, #836]	@ (80026b4 <__aeabi_dsub+0x714>)
 8002370:	1c6b      	adds	r3, r5, #1
 8002372:	423b      	tst	r3, r7
 8002374:	d171      	bne.n	800245a <__aeabi_dsub+0x4ba>
 8002376:	0023      	movs	r3, r4
 8002378:	4303      	orrs	r3, r0
 800237a:	2d00      	cmp	r5, #0
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x3e0>
 800237e:	e14e      	b.n	800261e <__aeabi_dsub+0x67e>
 8002380:	4657      	mov	r7, sl
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x3e8>
 8002386:	e1b5      	b.n	80026f4 <__aeabi_dsub+0x754>
 8002388:	2f00      	cmp	r7, #0
 800238a:	d00d      	beq.n	80023a8 <__aeabi_dsub+0x408>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4283      	cmp	r3, r0
 8002390:	4180      	sbcs	r0, r0
 8002392:	445c      	add	r4, fp
 8002394:	4240      	negs	r0, r0
 8002396:	1824      	adds	r4, r4, r0
 8002398:	0222      	lsls	r2, r4, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x3fe>
 800239c:	e1c8      	b.n	8002730 <__aeabi_dsub+0x790>
 800239e:	001f      	movs	r7, r3
 80023a0:	4698      	mov	r8, r3
 80023a2:	4327      	orrs	r7, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x408>
 80023a6:	e0bc      	b.n	8002522 <__aeabi_dsub+0x582>
 80023a8:	4643      	mov	r3, r8
 80023aa:	0767      	lsls	r7, r4, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	431f      	orrs	r7, r3
 80023b0:	08e5      	lsrs	r5, r4, #3
 80023b2:	2300      	movs	r3, #0
 80023b4:	e04c      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80023b6:	1a83      	subs	r3, r0, r2
 80023b8:	4698      	mov	r8, r3
 80023ba:	465b      	mov	r3, fp
 80023bc:	4540      	cmp	r0, r8
 80023be:	41bf      	sbcs	r7, r7
 80023c0:	1ae3      	subs	r3, r4, r3
 80023c2:	427f      	negs	r7, r7
 80023c4:	1bdb      	subs	r3, r3, r7
 80023c6:	021f      	lsls	r7, r3, #8
 80023c8:	d47c      	bmi.n	80024c4 <__aeabi_dsub+0x524>
 80023ca:	4647      	mov	r7, r8
 80023cc:	431f      	orrs	r7, r3
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x432>
 80023d0:	e0a6      	b.n	8002520 <__aeabi_dsub+0x580>
 80023d2:	001c      	movs	r4, r3
 80023d4:	4647      	mov	r7, r8
 80023d6:	e645      	b.n	8002064 <__aeabi_dsub+0xc4>
 80023d8:	4cb7      	ldr	r4, [pc, #732]	@ (80026b8 <__aeabi_dsub+0x718>)
 80023da:	1aed      	subs	r5, r5, r3
 80023dc:	4014      	ands	r4, r2
 80023de:	077b      	lsls	r3, r7, #29
 80023e0:	d000      	beq.n	80023e4 <__aeabi_dsub+0x444>
 80023e2:	e780      	b.n	80022e6 <__aeabi_dsub+0x346>
 80023e4:	e784      	b.n	80022f0 <__aeabi_dsub+0x350>
 80023e6:	464b      	mov	r3, r9
 80023e8:	0025      	movs	r5, r4
 80023ea:	4305      	orrs	r5, r0
 80023ec:	d066      	beq.n	80024bc <__aeabi_dsub+0x51c>
 80023ee:	1e5f      	subs	r7, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x456>
 80023f4:	e0fc      	b.n	80025f0 <__aeabi_dsub+0x650>
 80023f6:	4dae      	ldr	r5, [pc, #696]	@ (80026b0 <__aeabi_dsub+0x710>)
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x45e>
 80023fc:	e15e      	b.n	80026bc <__aeabi_dsub+0x71c>
 80023fe:	4666      	mov	r6, ip
 8002400:	2f38      	cmp	r7, #56	@ 0x38
 8002402:	dc00      	bgt.n	8002406 <__aeabi_dsub+0x466>
 8002404:	e0b4      	b.n	8002570 <__aeabi_dsub+0x5d0>
 8002406:	2001      	movs	r0, #1
 8002408:	1a17      	subs	r7, r2, r0
 800240a:	42ba      	cmp	r2, r7
 800240c:	4192      	sbcs	r2, r2
 800240e:	465b      	mov	r3, fp
 8002410:	4252      	negs	r2, r2
 8002412:	464d      	mov	r5, r9
 8002414:	1a9c      	subs	r4, r3, r2
 8002416:	e620      	b.n	800205a <__aeabi_dsub+0xba>
 8002418:	0767      	lsls	r7, r4, #29
 800241a:	08c0      	lsrs	r0, r0, #3
 800241c:	4307      	orrs	r7, r0
 800241e:	08e5      	lsrs	r5, r4, #3
 8002420:	e6ba      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002422:	001f      	movs	r7, r3
 8002424:	4659      	mov	r1, fp
 8002426:	3f20      	subs	r7, #32
 8002428:	40f9      	lsrs	r1, r7
 800242a:	000f      	movs	r7, r1
 800242c:	2b20      	cmp	r3, #32
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0x49c>
 8002430:	2140      	movs	r1, #64	@ 0x40
 8002432:	1acb      	subs	r3, r1, r3
 8002434:	4659      	mov	r1, fp
 8002436:	4099      	lsls	r1, r3
 8002438:	430a      	orrs	r2, r1
 800243a:	4692      	mov	sl, r2
 800243c:	4653      	mov	r3, sl
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	4193      	sbcs	r3, r2
 8002442:	431f      	orrs	r7, r3
 8002444:	e604      	b.n	8002050 <__aeabi_dsub+0xb0>
 8002446:	1aeb      	subs	r3, r5, r3
 8002448:	4d9b      	ldr	r5, [pc, #620]	@ (80026b8 <__aeabi_dsub+0x718>)
 800244a:	4015      	ands	r5, r2
 800244c:	076f      	lsls	r7, r5, #29
 800244e:	08ed      	lsrs	r5, r5, #3
 8002450:	032c      	lsls	r4, r5, #12
 8002452:	055d      	lsls	r5, r3, #21
 8002454:	0b24      	lsrs	r4, r4, #12
 8002456:	0d6d      	lsrs	r5, r5, #21
 8002458:	e736      	b.n	80022c8 <__aeabi_dsub+0x328>
 800245a:	4d95      	ldr	r5, [pc, #596]	@ (80026b0 <__aeabi_dsub+0x710>)
 800245c:	42ab      	cmp	r3, r5
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x4c2>
 8002460:	e0d6      	b.n	8002610 <__aeabi_dsub+0x670>
 8002462:	1882      	adds	r2, r0, r2
 8002464:	0021      	movs	r1, r4
 8002466:	4282      	cmp	r2, r0
 8002468:	4180      	sbcs	r0, r0
 800246a:	4459      	add	r1, fp
 800246c:	4240      	negs	r0, r0
 800246e:	1808      	adds	r0, r1, r0
 8002470:	07c7      	lsls	r7, r0, #31
 8002472:	0852      	lsrs	r2, r2, #1
 8002474:	4317      	orrs	r7, r2
 8002476:	0844      	lsrs	r4, r0, #1
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	d400      	bmi.n	800247e <__aeabi_dsub+0x4de>
 800247c:	e185      	b.n	800278a <__aeabi_dsub+0x7ea>
 800247e:	220f      	movs	r2, #15
 8002480:	001d      	movs	r5, r3
 8002482:	403a      	ands	r2, r7
 8002484:	2a04      	cmp	r2, #4
 8002486:	d000      	beq.n	800248a <__aeabi_dsub+0x4ea>
 8002488:	e61a      	b.n	80020c0 <__aeabi_dsub+0x120>
 800248a:	08ff      	lsrs	r7, r7, #3
 800248c:	0764      	lsls	r4, r4, #29
 800248e:	4327      	orrs	r7, r4
 8002490:	0905      	lsrs	r5, r0, #4
 8002492:	e7dd      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002494:	465b      	mov	r3, fp
 8002496:	08d2      	lsrs	r2, r2, #3
 8002498:	075f      	lsls	r7, r3, #29
 800249a:	4317      	orrs	r7, r2
 800249c:	08dd      	lsrs	r5, r3, #3
 800249e:	e67b      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80024a0:	2700      	movs	r7, #0
 80024a2:	2400      	movs	r4, #0
 80024a4:	e710      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d000      	beq.n	80024ac <__aeabi_dsub+0x50c>
 80024aa:	e0d6      	b.n	800265a <__aeabi_dsub+0x6ba>
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d000      	beq.n	80024b2 <__aeabi_dsub+0x512>
 80024b0:	e12f      	b.n	8002712 <__aeabi_dsub+0x772>
 80024b2:	2480      	movs	r4, #128	@ 0x80
 80024b4:	2600      	movs	r6, #0
 80024b6:	4d7e      	ldr	r5, [pc, #504]	@ (80026b0 <__aeabi_dsub+0x710>)
 80024b8:	0324      	lsls	r4, r4, #12
 80024ba:	e705      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024bc:	4666      	mov	r6, ip
 80024be:	465c      	mov	r4, fp
 80024c0:	08d0      	lsrs	r0, r2, #3
 80024c2:	e717      	b.n	80022f4 <__aeabi_dsub+0x354>
 80024c4:	465b      	mov	r3, fp
 80024c6:	1a17      	subs	r7, r2, r0
 80024c8:	42ba      	cmp	r2, r7
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	1b1c      	subs	r4, r3, r4
 80024ce:	2601      	movs	r6, #1
 80024d0:	4663      	mov	r3, ip
 80024d2:	4252      	negs	r2, r2
 80024d4:	1aa4      	subs	r4, r4, r2
 80024d6:	401e      	ands	r6, r3
 80024d8:	e5c4      	b.n	8002064 <__aeabi_dsub+0xc4>
 80024da:	1883      	adds	r3, r0, r2
 80024dc:	4283      	cmp	r3, r0
 80024de:	4180      	sbcs	r0, r0
 80024e0:	445c      	add	r4, fp
 80024e2:	4240      	negs	r0, r0
 80024e4:	1825      	adds	r5, r4, r0
 80024e6:	022a      	lsls	r2, r5, #8
 80024e8:	d400      	bmi.n	80024ec <__aeabi_dsub+0x54c>
 80024ea:	e0da      	b.n	80026a2 <__aeabi_dsub+0x702>
 80024ec:	4a72      	ldr	r2, [pc, #456]	@ (80026b8 <__aeabi_dsub+0x718>)
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	4015      	ands	r5, r2
 80024f2:	07ea      	lsls	r2, r5, #31
 80024f4:	431a      	orrs	r2, r3
 80024f6:	0869      	lsrs	r1, r5, #1
 80024f8:	075b      	lsls	r3, r3, #29
 80024fa:	d400      	bmi.n	80024fe <__aeabi_dsub+0x55e>
 80024fc:	e14a      	b.n	8002794 <__aeabi_dsub+0x7f4>
 80024fe:	230f      	movs	r3, #15
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x568>
 8002506:	e0fc      	b.n	8002702 <__aeabi_dsub+0x762>
 8002508:	1d17      	adds	r7, r2, #4
 800250a:	4297      	cmp	r7, r2
 800250c:	41a4      	sbcs	r4, r4
 800250e:	4264      	negs	r4, r4
 8002510:	2502      	movs	r5, #2
 8002512:	1864      	adds	r4, r4, r1
 8002514:	e6ec      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002516:	4647      	mov	r7, r8
 8002518:	001c      	movs	r4, r3
 800251a:	431f      	orrs	r7, r3
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x580>
 800251e:	e743      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002520:	2600      	movs	r6, #0
 8002522:	2500      	movs	r5, #0
 8002524:	2400      	movs	r4, #0
 8002526:	e6cf      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	0767      	lsls	r7, r4, #29
 800252c:	4307      	orrs	r7, r0
 800252e:	08e5      	lsrs	r5, r4, #3
 8002530:	e632      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002532:	1a87      	subs	r7, r0, r2
 8002534:	465b      	mov	r3, fp
 8002536:	42b8      	cmp	r0, r7
 8002538:	4180      	sbcs	r0, r0
 800253a:	1ae4      	subs	r4, r4, r3
 800253c:	4240      	negs	r0, r0
 800253e:	1a24      	subs	r4, r4, r0
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d428      	bmi.n	8002596 <__aeabi_dsub+0x5f6>
 8002544:	0763      	lsls	r3, r4, #29
 8002546:	08ff      	lsrs	r7, r7, #3
 8002548:	431f      	orrs	r7, r3
 800254a:	08e5      	lsrs	r5, r4, #3
 800254c:	2301      	movs	r3, #1
 800254e:	e77f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x5b6>
 8002554:	e673      	b.n	800223e <__aeabi_dsub+0x29e>
 8002556:	464b      	mov	r3, r9
 8002558:	1b5f      	subs	r7, r3, r5
 800255a:	003b      	movs	r3, r7
 800255c:	2d00      	cmp	r5, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x5c2>
 8002560:	e742      	b.n	80023e8 <__aeabi_dsub+0x448>
 8002562:	2f38      	cmp	r7, #56	@ 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_dsub+0x5c8>
 8002566:	e0ec      	b.n	8002742 <__aeabi_dsub+0x7a2>
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	000e      	movs	r6, r1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431c      	orrs	r4, r3
 8002570:	2f1f      	cmp	r7, #31
 8002572:	dc25      	bgt.n	80025c0 <__aeabi_dsub+0x620>
 8002574:	2520      	movs	r5, #32
 8002576:	0023      	movs	r3, r4
 8002578:	1bed      	subs	r5, r5, r7
 800257a:	0001      	movs	r1, r0
 800257c:	40a8      	lsls	r0, r5
 800257e:	40ab      	lsls	r3, r5
 8002580:	40f9      	lsrs	r1, r7
 8002582:	1e45      	subs	r5, r0, #1
 8002584:	41a8      	sbcs	r0, r5
 8002586:	430b      	orrs	r3, r1
 8002588:	40fc      	lsrs	r4, r7
 800258a:	4318      	orrs	r0, r3
 800258c:	465b      	mov	r3, fp
 800258e:	1b1b      	subs	r3, r3, r4
 8002590:	469b      	mov	fp, r3
 8002592:	e739      	b.n	8002408 <__aeabi_dsub+0x468>
 8002594:	4666      	mov	r6, ip
 8002596:	2501      	movs	r5, #1
 8002598:	e562      	b.n	8002060 <__aeabi_dsub+0xc0>
 800259a:	001f      	movs	r7, r3
 800259c:	4659      	mov	r1, fp
 800259e:	3f20      	subs	r7, #32
 80025a0:	40f9      	lsrs	r1, r7
 80025a2:	468c      	mov	ip, r1
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d005      	beq.n	80025b4 <__aeabi_dsub+0x614>
 80025a8:	2740      	movs	r7, #64	@ 0x40
 80025aa:	4659      	mov	r1, fp
 80025ac:	1afb      	subs	r3, r7, r3
 80025ae:	4099      	lsls	r1, r3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4692      	mov	sl, r2
 80025b4:	4657      	mov	r7, sl
 80025b6:	1e7b      	subs	r3, r7, #1
 80025b8:	419f      	sbcs	r7, r3
 80025ba:	4663      	mov	r3, ip
 80025bc:	431f      	orrs	r7, r3
 80025be:	e5c1      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80025c0:	003b      	movs	r3, r7
 80025c2:	0025      	movs	r5, r4
 80025c4:	3b20      	subs	r3, #32
 80025c6:	40dd      	lsrs	r5, r3
 80025c8:	2f20      	cmp	r7, #32
 80025ca:	d004      	beq.n	80025d6 <__aeabi_dsub+0x636>
 80025cc:	2340      	movs	r3, #64	@ 0x40
 80025ce:	1bdb      	subs	r3, r3, r7
 80025d0:	409c      	lsls	r4, r3
 80025d2:	4320      	orrs	r0, r4
 80025d4:	4680      	mov	r8, r0
 80025d6:	4640      	mov	r0, r8
 80025d8:	1e43      	subs	r3, r0, #1
 80025da:	4198      	sbcs	r0, r3
 80025dc:	4328      	orrs	r0, r5
 80025de:	e713      	b.n	8002408 <__aeabi_dsub+0x468>
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d09d      	beq.n	8002520 <__aeabi_dsub+0x580>
 80025e4:	2601      	movs	r6, #1
 80025e6:	4663      	mov	r3, ip
 80025e8:	465c      	mov	r4, fp
 80025ea:	4690      	mov	r8, r2
 80025ec:	401e      	ands	r6, r3
 80025ee:	e6db      	b.n	80023a8 <__aeabi_dsub+0x408>
 80025f0:	1a17      	subs	r7, r2, r0
 80025f2:	465b      	mov	r3, fp
 80025f4:	42ba      	cmp	r2, r7
 80025f6:	4192      	sbcs	r2, r2
 80025f8:	1b1c      	subs	r4, r3, r4
 80025fa:	4252      	negs	r2, r2
 80025fc:	1aa4      	subs	r4, r4, r2
 80025fe:	0223      	lsls	r3, r4, #8
 8002600:	d4c8      	bmi.n	8002594 <__aeabi_dsub+0x5f4>
 8002602:	0763      	lsls	r3, r4, #29
 8002604:	08ff      	lsrs	r7, r7, #3
 8002606:	431f      	orrs	r7, r3
 8002608:	4666      	mov	r6, ip
 800260a:	2301      	movs	r3, #1
 800260c:	08e5      	lsrs	r5, r4, #3
 800260e:	e71f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002610:	001d      	movs	r5, r3
 8002612:	2400      	movs	r4, #0
 8002614:	2700      	movs	r7, #0
 8002616:	e657      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002618:	465c      	mov	r4, fp
 800261a:	08d0      	lsrs	r0, r2, #3
 800261c:	e66a      	b.n	80022f4 <__aeabi_dsub+0x354>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x684>
 8002622:	e737      	b.n	8002494 <__aeabi_dsub+0x4f4>
 8002624:	4653      	mov	r3, sl
 8002626:	08c0      	lsrs	r0, r0, #3
 8002628:	0767      	lsls	r7, r4, #29
 800262a:	4307      	orrs	r7, r0
 800262c:	08e5      	lsrs	r5, r4, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x694>
 8002632:	e5b1      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	421d      	tst	r5, r3
 800263a:	d008      	beq.n	800264e <__aeabi_dsub+0x6ae>
 800263c:	4659      	mov	r1, fp
 800263e:	08c8      	lsrs	r0, r1, #3
 8002640:	4218      	tst	r0, r3
 8002642:	d104      	bne.n	800264e <__aeabi_dsub+0x6ae>
 8002644:	08d2      	lsrs	r2, r2, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430a      	orrs	r2, r1
 800264a:	0017      	movs	r7, r2
 800264c:	0005      	movs	r5, r0
 800264e:	0f7b      	lsrs	r3, r7, #29
 8002650:	00ff      	lsls	r7, r7, #3
 8002652:	08ff      	lsrs	r7, r7, #3
 8002654:	075b      	lsls	r3, r3, #29
 8002656:	431f      	orrs	r7, r3
 8002658:	e59e      	b.n	8002198 <__aeabi_dsub+0x1f8>
 800265a:	08c0      	lsrs	r0, r0, #3
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	4318      	orrs	r0, r3
 8002660:	08e5      	lsrs	r5, r4, #3
 8002662:	2900      	cmp	r1, #0
 8002664:	d053      	beq.n	800270e <__aeabi_dsub+0x76e>
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	421d      	tst	r5, r3
 800266c:	d00a      	beq.n	8002684 <__aeabi_dsub+0x6e4>
 800266e:	4659      	mov	r1, fp
 8002670:	08cc      	lsrs	r4, r1, #3
 8002672:	421c      	tst	r4, r3
 8002674:	d106      	bne.n	8002684 <__aeabi_dsub+0x6e4>
 8002676:	2601      	movs	r6, #1
 8002678:	4663      	mov	r3, ip
 800267a:	0025      	movs	r5, r4
 800267c:	08d0      	lsrs	r0, r2, #3
 800267e:	0749      	lsls	r1, r1, #29
 8002680:	4308      	orrs	r0, r1
 8002682:	401e      	ands	r6, r3
 8002684:	0f47      	lsrs	r7, r0, #29
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	08c0      	lsrs	r0, r0, #3
 800268a:	077f      	lsls	r7, r7, #29
 800268c:	4307      	orrs	r7, r0
 800268e:	e583      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002690:	1883      	adds	r3, r0, r2
 8002692:	4293      	cmp	r3, r2
 8002694:	4192      	sbcs	r2, r2
 8002696:	445c      	add	r4, fp
 8002698:	4252      	negs	r2, r2
 800269a:	18a5      	adds	r5, r4, r2
 800269c:	022a      	lsls	r2, r5, #8
 800269e:	d500      	bpl.n	80026a2 <__aeabi_dsub+0x702>
 80026a0:	e724      	b.n	80024ec <__aeabi_dsub+0x54c>
 80026a2:	076f      	lsls	r7, r5, #29
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	431f      	orrs	r7, r3
 80026a8:	08ed      	lsrs	r5, r5, #3
 80026aa:	2301      	movs	r3, #1
 80026ac:	e6d0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	000007ff 	.word	0x000007ff
 80026b4:	000007fe 	.word	0x000007fe
 80026b8:	ff7fffff 	.word	0xff7fffff
 80026bc:	465b      	mov	r3, fp
 80026be:	08d2      	lsrs	r2, r2, #3
 80026c0:	075f      	lsls	r7, r3, #29
 80026c2:	4666      	mov	r6, ip
 80026c4:	4317      	orrs	r7, r2
 80026c6:	08dd      	lsrs	r5, r3, #3
 80026c8:	e566      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80026ca:	0025      	movs	r5, r4
 80026cc:	3b20      	subs	r3, #32
 80026ce:	40dd      	lsrs	r5, r3
 80026d0:	4663      	mov	r3, ip
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d005      	beq.n	80026e2 <__aeabi_dsub+0x742>
 80026d6:	2340      	movs	r3, #64	@ 0x40
 80026d8:	4661      	mov	r1, ip
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	409c      	lsls	r4, r3
 80026de:	4320      	orrs	r0, r4
 80026e0:	4680      	mov	r8, r0
 80026e2:	4647      	mov	r7, r8
 80026e4:	1e7b      	subs	r3, r7, #1
 80026e6:	419f      	sbcs	r7, r3
 80026e8:	432f      	orrs	r7, r5
 80026ea:	e5a0      	b.n	800222e <__aeabi_dsub+0x28e>
 80026ec:	2120      	movs	r1, #32
 80026ee:	2700      	movs	r7, #0
 80026f0:	1a09      	subs	r1, r1, r0
 80026f2:	e4d2      	b.n	800209a <__aeabi_dsub+0xfa>
 80026f4:	2f00      	cmp	r7, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x75a>
 80026f8:	e713      	b.n	8002522 <__aeabi_dsub+0x582>
 80026fa:	465c      	mov	r4, fp
 80026fc:	0017      	movs	r7, r2
 80026fe:	2500      	movs	r5, #0
 8002700:	e5f6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002702:	08d7      	lsrs	r7, r2, #3
 8002704:	0749      	lsls	r1, r1, #29
 8002706:	2302      	movs	r3, #2
 8002708:	430f      	orrs	r7, r1
 800270a:	092d      	lsrs	r5, r5, #4
 800270c:	e6a0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800270e:	0007      	movs	r7, r0
 8002710:	e542      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002712:	465b      	mov	r3, fp
 8002714:	2601      	movs	r6, #1
 8002716:	075f      	lsls	r7, r3, #29
 8002718:	08dd      	lsrs	r5, r3, #3
 800271a:	4663      	mov	r3, ip
 800271c:	08d2      	lsrs	r2, r2, #3
 800271e:	4317      	orrs	r7, r2
 8002720:	401e      	ands	r6, r3
 8002722:	e539      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002724:	465b      	mov	r3, fp
 8002726:	08d2      	lsrs	r2, r2, #3
 8002728:	075f      	lsls	r7, r3, #29
 800272a:	4317      	orrs	r7, r2
 800272c:	08dd      	lsrs	r5, r3, #3
 800272e:	e533      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002730:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <__aeabi_dsub+0x80c>)
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	4022      	ands	r2, r4
 8002736:	0757      	lsls	r7, r2, #29
 8002738:	0252      	lsls	r2, r2, #9
 800273a:	2501      	movs	r5, #1
 800273c:	431f      	orrs	r7, r3
 800273e:	0b14      	lsrs	r4, r2, #12
 8002740:	e5c2      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002742:	000e      	movs	r6, r1
 8002744:	2001      	movs	r0, #1
 8002746:	e65f      	b.n	8002408 <__aeabi_dsub+0x468>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <__aeabi_dsub+0x7c8>
 800274c:	464b      	mov	r3, r9
 800274e:	1b5b      	subs	r3, r3, r5
 8002750:	469c      	mov	ip, r3
 8002752:	2d00      	cmp	r5, #0
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x7b8>
 8002756:	e548      	b.n	80021ea <__aeabi_dsub+0x24a>
 8002758:	2701      	movs	r7, #1
 800275a:	2b38      	cmp	r3, #56	@ 0x38
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0x7c0>
 800275e:	e566      	b.n	800222e <__aeabi_dsub+0x28e>
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431c      	orrs	r4, r3
 8002766:	e550      	b.n	800220a <__aeabi_dsub+0x26a>
 8002768:	1c6b      	adds	r3, r5, #1
 800276a:	4d11      	ldr	r5, [pc, #68]	@ (80027b0 <__aeabi_dsub+0x810>)
 800276c:	422b      	tst	r3, r5
 800276e:	d000      	beq.n	8002772 <__aeabi_dsub+0x7d2>
 8002770:	e673      	b.n	800245a <__aeabi_dsub+0x4ba>
 8002772:	4659      	mov	r1, fp
 8002774:	0023      	movs	r3, r4
 8002776:	4311      	orrs	r1, r2
 8002778:	468a      	mov	sl, r1
 800277a:	4303      	orrs	r3, r0
 800277c:	e600      	b.n	8002380 <__aeabi_dsub+0x3e0>
 800277e:	0767      	lsls	r7, r4, #29
 8002780:	08c0      	lsrs	r0, r0, #3
 8002782:	2300      	movs	r3, #0
 8002784:	4307      	orrs	r7, r0
 8002786:	08e5      	lsrs	r5, r4, #3
 8002788:	e662      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800278a:	0764      	lsls	r4, r4, #29
 800278c:	08ff      	lsrs	r7, r7, #3
 800278e:	4327      	orrs	r7, r4
 8002790:	0905      	lsrs	r5, r0, #4
 8002792:	e65d      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	0749      	lsls	r1, r1, #29
 8002798:	4311      	orrs	r1, r2
 800279a:	000f      	movs	r7, r1
 800279c:	2302      	movs	r3, #2
 800279e:	092d      	lsrs	r5, r5, #4
 80027a0:	e656      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80027a2:	0007      	movs	r7, r0
 80027a4:	e5a4      	b.n	80022f0 <__aeabi_dsub+0x350>
 80027a6:	0038      	movs	r0, r7
 80027a8:	e48f      	b.n	80020ca <__aeabi_dsub+0x12a>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	ff7fffff 	.word	0xff7fffff
 80027b0:	000007fe 	.word	0x000007fe

080027b4 <__aeabi_dcmpun>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	46c6      	mov	lr, r8
 80027b8:	031e      	lsls	r6, r3, #12
 80027ba:	0b36      	lsrs	r6, r6, #12
 80027bc:	46b0      	mov	r8, r6
 80027be:	4e0d      	ldr	r6, [pc, #52]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027c0:	030c      	lsls	r4, r1, #12
 80027c2:	004d      	lsls	r5, r1, #1
 80027c4:	005f      	lsls	r7, r3, #1
 80027c6:	b500      	push	{lr}
 80027c8:	0b24      	lsrs	r4, r4, #12
 80027ca:	0d6d      	lsrs	r5, r5, #21
 80027cc:	0d7f      	lsrs	r7, r7, #21
 80027ce:	42b5      	cmp	r5, r6
 80027d0:	d00b      	beq.n	80027ea <__aeabi_dcmpun+0x36>
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	428f      	cmp	r7, r1
 80027d8:	d104      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027da:	4646      	mov	r6, r8
 80027dc:	4316      	orrs	r6, r2
 80027de:	0030      	movs	r0, r6
 80027e0:	1e43      	subs	r3, r0, #1
 80027e2:	4198      	sbcs	r0, r3
 80027e4:	bc80      	pop	{r7}
 80027e6:	46b8      	mov	r8, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	4304      	orrs	r4, r0
 80027ec:	2001      	movs	r0, #1
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d1f8      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027f2:	e7ee      	b.n	80027d2 <__aeabi_dcmpun+0x1e>
 80027f4:	000007ff 	.word	0x000007ff

080027f8 <__aeabi_d2iz>:
 80027f8:	000b      	movs	r3, r1
 80027fa:	0002      	movs	r2, r0
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4d16      	ldr	r5, [pc, #88]	@ (8002858 <__aeabi_d2iz+0x60>)
 8002800:	030c      	lsls	r4, r1, #12
 8002802:	b082      	sub	sp, #8
 8002804:	0049      	lsls	r1, r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	0b24      	lsrs	r4, r4, #12
 800280e:	0d49      	lsrs	r1, r1, #21
 8002810:	0fde      	lsrs	r6, r3, #31
 8002812:	42a9      	cmp	r1, r5
 8002814:	dd04      	ble.n	8002820 <__aeabi_d2iz+0x28>
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <__aeabi_d2iz+0x64>)
 8002818:	4281      	cmp	r1, r0
 800281a:	dd03      	ble.n	8002824 <__aeabi_d2iz+0x2c>
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <__aeabi_d2iz+0x68>)
 800281e:	18f0      	adds	r0, r6, r3
 8002820:	b002      	add	sp, #8
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	2080      	movs	r0, #128	@ 0x80
 8002826:	0340      	lsls	r0, r0, #13
 8002828:	4320      	orrs	r0, r4
 800282a:	4c0e      	ldr	r4, [pc, #56]	@ (8002864 <__aeabi_d2iz+0x6c>)
 800282c:	1a64      	subs	r4, r4, r1
 800282e:	2c1f      	cmp	r4, #31
 8002830:	dd08      	ble.n	8002844 <__aeabi_d2iz+0x4c>
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <__aeabi_d2iz+0x70>)
 8002834:	1a5b      	subs	r3, r3, r1
 8002836:	40d8      	lsrs	r0, r3
 8002838:	0003      	movs	r3, r0
 800283a:	4258      	negs	r0, r3
 800283c:	2e00      	cmp	r6, #0
 800283e:	d1ef      	bne.n	8002820 <__aeabi_d2iz+0x28>
 8002840:	0018      	movs	r0, r3
 8002842:	e7ed      	b.n	8002820 <__aeabi_d2iz+0x28>
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <__aeabi_d2iz+0x74>)
 8002846:	9a00      	ldr	r2, [sp, #0]
 8002848:	469c      	mov	ip, r3
 800284a:	0003      	movs	r3, r0
 800284c:	4461      	add	r1, ip
 800284e:	408b      	lsls	r3, r1
 8002850:	40e2      	lsrs	r2, r4
 8002852:	4313      	orrs	r3, r2
 8002854:	e7f1      	b.n	800283a <__aeabi_d2iz+0x42>
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	000003fe 	.word	0x000003fe
 800285c:	0000041d 	.word	0x0000041d
 8002860:	7fffffff 	.word	0x7fffffff
 8002864:	00000433 	.word	0x00000433
 8002868:	00000413 	.word	0x00000413
 800286c:	fffffbed 	.word	0xfffffbed

08002870 <__aeabi_i2d>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	2800      	cmp	r0, #0
 8002874:	d016      	beq.n	80028a4 <__aeabi_i2d+0x34>
 8002876:	17c3      	asrs	r3, r0, #31
 8002878:	18c5      	adds	r5, r0, r3
 800287a:	405d      	eors	r5, r3
 800287c:	0fc4      	lsrs	r4, r0, #31
 800287e:	0028      	movs	r0, r5
 8002880:	f000 f912 	bl	8002aa8 <__clzsi2>
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <__aeabi_i2d+0x58>)
 8002886:	1a1b      	subs	r3, r3, r0
 8002888:	055b      	lsls	r3, r3, #21
 800288a:	0d5b      	lsrs	r3, r3, #21
 800288c:	280a      	cmp	r0, #10
 800288e:	dc14      	bgt.n	80028ba <__aeabi_i2d+0x4a>
 8002890:	0002      	movs	r2, r0
 8002892:	002e      	movs	r6, r5
 8002894:	3215      	adds	r2, #21
 8002896:	4096      	lsls	r6, r2
 8002898:	220b      	movs	r2, #11
 800289a:	1a12      	subs	r2, r2, r0
 800289c:	40d5      	lsrs	r5, r2
 800289e:	032d      	lsls	r5, r5, #12
 80028a0:	0b2d      	lsrs	r5, r5, #12
 80028a2:	e003      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028a4:	2400      	movs	r4, #0
 80028a6:	2300      	movs	r3, #0
 80028a8:	2500      	movs	r5, #0
 80028aa:	2600      	movs	r6, #0
 80028ac:	051b      	lsls	r3, r3, #20
 80028ae:	432b      	orrs	r3, r5
 80028b0:	07e4      	lsls	r4, r4, #31
 80028b2:	4323      	orrs	r3, r4
 80028b4:	0030      	movs	r0, r6
 80028b6:	0019      	movs	r1, r3
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	380b      	subs	r0, #11
 80028bc:	4085      	lsls	r5, r0
 80028be:	032d      	lsls	r5, r5, #12
 80028c0:	2600      	movs	r6, #0
 80028c2:	0b2d      	lsrs	r5, r5, #12
 80028c4:	e7f2      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	0000041e 	.word	0x0000041e

080028cc <__aeabi_ui2d>:
 80028cc:	b510      	push	{r4, lr}
 80028ce:	1e04      	subs	r4, r0, #0
 80028d0:	d010      	beq.n	80028f4 <__aeabi_ui2d+0x28>
 80028d2:	f000 f8e9 	bl	8002aa8 <__clzsi2>
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <__aeabi_ui2d+0x44>)
 80028d8:	1a1b      	subs	r3, r3, r0
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	0d5b      	lsrs	r3, r3, #21
 80028de:	280a      	cmp	r0, #10
 80028e0:	dc0f      	bgt.n	8002902 <__aeabi_ui2d+0x36>
 80028e2:	220b      	movs	r2, #11
 80028e4:	0021      	movs	r1, r4
 80028e6:	1a12      	subs	r2, r2, r0
 80028e8:	40d1      	lsrs	r1, r2
 80028ea:	3015      	adds	r0, #21
 80028ec:	030a      	lsls	r2, r1, #12
 80028ee:	4084      	lsls	r4, r0
 80028f0:	0b12      	lsrs	r2, r2, #12
 80028f2:	e001      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2200      	movs	r2, #0
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	4313      	orrs	r3, r2
 80028fc:	0020      	movs	r0, r4
 80028fe:	0019      	movs	r1, r3
 8002900:	bd10      	pop	{r4, pc}
 8002902:	0022      	movs	r2, r4
 8002904:	380b      	subs	r0, #11
 8002906:	4082      	lsls	r2, r0
 8002908:	0312      	lsls	r2, r2, #12
 800290a:	2400      	movs	r4, #0
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	e7f3      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 8002910:	0000041e 	.word	0x0000041e

08002914 <__aeabi_f2d>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	0242      	lsls	r2, r0, #9
 8002918:	0043      	lsls	r3, r0, #1
 800291a:	0fc4      	lsrs	r4, r0, #31
 800291c:	20fe      	movs	r0, #254	@ 0xfe
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	0a55      	lsrs	r5, r2, #9
 8002924:	4208      	tst	r0, r1
 8002926:	d00c      	beq.n	8002942 <__aeabi_f2d+0x2e>
 8002928:	21e0      	movs	r1, #224	@ 0xe0
 800292a:	0089      	lsls	r1, r1, #2
 800292c:	468c      	mov	ip, r1
 800292e:	076d      	lsls	r5, r5, #29
 8002930:	0b12      	lsrs	r2, r2, #12
 8002932:	4463      	add	r3, ip
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	4313      	orrs	r3, r2
 8002938:	07e4      	lsls	r4, r4, #31
 800293a:	4323      	orrs	r3, r4
 800293c:	0028      	movs	r0, r5
 800293e:	0019      	movs	r1, r3
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	2b00      	cmp	r3, #0
 8002944:	d114      	bne.n	8002970 <__aeabi_f2d+0x5c>
 8002946:	2d00      	cmp	r5, #0
 8002948:	d01b      	beq.n	8002982 <__aeabi_f2d+0x6e>
 800294a:	0028      	movs	r0, r5
 800294c:	f000 f8ac 	bl	8002aa8 <__clzsi2>
 8002950:	280a      	cmp	r0, #10
 8002952:	dc1c      	bgt.n	800298e <__aeabi_f2d+0x7a>
 8002954:	230b      	movs	r3, #11
 8002956:	002a      	movs	r2, r5
 8002958:	1a1b      	subs	r3, r3, r0
 800295a:	40da      	lsrs	r2, r3
 800295c:	0003      	movs	r3, r0
 800295e:	3315      	adds	r3, #21
 8002960:	409d      	lsls	r5, r3
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <__aeabi_f2d+0x88>)
 8002964:	0312      	lsls	r2, r2, #12
 8002966:	1a1b      	subs	r3, r3, r0
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e7e1      	b.n	8002934 <__aeabi_f2d+0x20>
 8002970:	2d00      	cmp	r5, #0
 8002972:	d009      	beq.n	8002988 <__aeabi_f2d+0x74>
 8002974:	0b13      	lsrs	r3, r2, #12
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	0312      	lsls	r2, r2, #12
 800297a:	431a      	orrs	r2, r3
 800297c:	076d      	lsls	r5, r5, #29
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <__aeabi_f2d+0x8c>)
 8002980:	e7d8      	b.n	8002934 <__aeabi_f2d+0x20>
 8002982:	2300      	movs	r3, #0
 8002984:	2200      	movs	r2, #0
 8002986:	e7d5      	b.n	8002934 <__aeabi_f2d+0x20>
 8002988:	2200      	movs	r2, #0
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <__aeabi_f2d+0x8c>)
 800298c:	e7d2      	b.n	8002934 <__aeabi_f2d+0x20>
 800298e:	0003      	movs	r3, r0
 8002990:	002a      	movs	r2, r5
 8002992:	3b0b      	subs	r3, #11
 8002994:	409a      	lsls	r2, r3
 8002996:	2500      	movs	r5, #0
 8002998:	e7e3      	b.n	8002962 <__aeabi_f2d+0x4e>
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	00000389 	.word	0x00000389
 80029a0:	000007ff 	.word	0x000007ff

080029a4 <__aeabi_d2f>:
 80029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a6:	004b      	lsls	r3, r1, #1
 80029a8:	030f      	lsls	r7, r1, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	4c3a      	ldr	r4, [pc, #232]	@ (8002a98 <__aeabi_d2f+0xf4>)
 80029ae:	0f45      	lsrs	r5, r0, #29
 80029b0:	b083      	sub	sp, #12
 80029b2:	0a7f      	lsrs	r7, r7, #9
 80029b4:	1c5e      	adds	r6, r3, #1
 80029b6:	432f      	orrs	r7, r5
 80029b8:	9000      	str	r0, [sp, #0]
 80029ba:	9101      	str	r1, [sp, #4]
 80029bc:	0fca      	lsrs	r2, r1, #31
 80029be:	00c5      	lsls	r5, r0, #3
 80029c0:	4226      	tst	r6, r4
 80029c2:	d00b      	beq.n	80029dc <__aeabi_d2f+0x38>
 80029c4:	4935      	ldr	r1, [pc, #212]	@ (8002a9c <__aeabi_d2f+0xf8>)
 80029c6:	185c      	adds	r4, r3, r1
 80029c8:	2cfe      	cmp	r4, #254	@ 0xfe
 80029ca:	dd13      	ble.n	80029f4 <__aeabi_d2f+0x50>
 80029cc:	20ff      	movs	r0, #255	@ 0xff
 80029ce:	2300      	movs	r3, #0
 80029d0:	05c0      	lsls	r0, r0, #23
 80029d2:	4318      	orrs	r0, r3
 80029d4:	07d2      	lsls	r2, r2, #31
 80029d6:	4310      	orrs	r0, r2
 80029d8:	b003      	add	sp, #12
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029dc:	433d      	orrs	r5, r7
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <__aeabi_d2f+0x42>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e7f4      	b.n	80029d0 <__aeabi_d2f+0x2c>
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	d0f0      	beq.n	80029cc <__aeabi_d2f+0x28>
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	03db      	lsls	r3, r3, #15
 80029ee:	20ff      	movs	r0, #255	@ 0xff
 80029f0:	433b      	orrs	r3, r7
 80029f2:	e7ed      	b.n	80029d0 <__aeabi_d2f+0x2c>
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	dd0c      	ble.n	8002a12 <__aeabi_d2f+0x6e>
 80029f8:	9b00      	ldr	r3, [sp, #0]
 80029fa:	00ff      	lsls	r7, r7, #3
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	4183      	sbcs	r3, r0
 8002a02:	0f69      	lsrs	r1, r5, #29
 8002a04:	433b      	orrs	r3, r7
 8002a06:	430b      	orrs	r3, r1
 8002a08:	0759      	lsls	r1, r3, #29
 8002a0a:	d127      	bne.n	8002a5c <__aeabi_d2f+0xb8>
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	b2e0      	uxtb	r0, r4
 8002a10:	e7de      	b.n	80029d0 <__aeabi_d2f+0x2c>
 8002a12:	0021      	movs	r1, r4
 8002a14:	3117      	adds	r1, #23
 8002a16:	db31      	blt.n	8002a7c <__aeabi_d2f+0xd8>
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	201e      	movs	r0, #30
 8002a1c:	0409      	lsls	r1, r1, #16
 8002a1e:	4339      	orrs	r1, r7
 8002a20:	1b00      	subs	r0, r0, r4
 8002a22:	281f      	cmp	r0, #31
 8002a24:	dd2d      	ble.n	8002a82 <__aeabi_d2f+0xde>
 8002a26:	2602      	movs	r6, #2
 8002a28:	4276      	negs	r6, r6
 8002a2a:	1b34      	subs	r4, r6, r4
 8002a2c:	000e      	movs	r6, r1
 8002a2e:	40e6      	lsrs	r6, r4
 8002a30:	0034      	movs	r4, r6
 8002a32:	2820      	cmp	r0, #32
 8002a34:	d004      	beq.n	8002a40 <__aeabi_d2f+0x9c>
 8002a36:	481a      	ldr	r0, [pc, #104]	@ (8002aa0 <__aeabi_d2f+0xfc>)
 8002a38:	4684      	mov	ip, r0
 8002a3a:	4463      	add	r3, ip
 8002a3c:	4099      	lsls	r1, r3
 8002a3e:	430d      	orrs	r5, r1
 8002a40:	002b      	movs	r3, r5
 8002a42:	1e59      	subs	r1, r3, #1
 8002a44:	418b      	sbcs	r3, r1
 8002a46:	4323      	orrs	r3, r4
 8002a48:	0759      	lsls	r1, r3, #29
 8002a4a:	d003      	beq.n	8002a54 <__aeabi_d2f+0xb0>
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	4019      	ands	r1, r3
 8002a50:	2904      	cmp	r1, #4
 8002a52:	d10b      	bne.n	8002a6c <__aeabi_d2f+0xc8>
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	2000      	movs	r0, #0
 8002a58:	0a5b      	lsrs	r3, r3, #9
 8002a5a:	e7b9      	b.n	80029d0 <__aeabi_d2f+0x2c>
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	4019      	ands	r1, r3
 8002a60:	2904      	cmp	r1, #4
 8002a62:	d104      	bne.n	8002a6e <__aeabi_d2f+0xca>
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	0a5b      	lsrs	r3, r3, #9
 8002a68:	b2e0      	uxtb	r0, r4
 8002a6a:	e7b1      	b.n	80029d0 <__aeabi_d2f+0x2c>
 8002a6c:	2400      	movs	r4, #0
 8002a6e:	3304      	adds	r3, #4
 8002a70:	0159      	lsls	r1, r3, #5
 8002a72:	d5f7      	bpl.n	8002a64 <__aeabi_d2f+0xc0>
 8002a74:	3401      	adds	r4, #1
 8002a76:	2300      	movs	r3, #0
 8002a78:	b2e0      	uxtb	r0, r4
 8002a7a:	e7a9      	b.n	80029d0 <__aeabi_d2f+0x2c>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e7a6      	b.n	80029d0 <__aeabi_d2f+0x2c>
 8002a82:	4c08      	ldr	r4, [pc, #32]	@ (8002aa4 <__aeabi_d2f+0x100>)
 8002a84:	191c      	adds	r4, r3, r4
 8002a86:	002b      	movs	r3, r5
 8002a88:	40a5      	lsls	r5, r4
 8002a8a:	40c3      	lsrs	r3, r0
 8002a8c:	40a1      	lsls	r1, r4
 8002a8e:	1e68      	subs	r0, r5, #1
 8002a90:	4185      	sbcs	r5, r0
 8002a92:	4329      	orrs	r1, r5
 8002a94:	430b      	orrs	r3, r1
 8002a96:	e7d7      	b.n	8002a48 <__aeabi_d2f+0xa4>
 8002a98:	000007fe 	.word	0x000007fe
 8002a9c:	fffffc80 	.word	0xfffffc80
 8002aa0:	fffffca2 	.word	0xfffffca2
 8002aa4:	fffffc82 	.word	0xfffffc82

08002aa8 <__clzsi2>:
 8002aa8:	211c      	movs	r1, #28
 8002aaa:	2301      	movs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	4298      	cmp	r0, r3
 8002ab0:	d301      	bcc.n	8002ab6 <__clzsi2+0xe>
 8002ab2:	0c00      	lsrs	r0, r0, #16
 8002ab4:	3910      	subs	r1, #16
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	d301      	bcc.n	8002ac0 <__clzsi2+0x18>
 8002abc:	0a00      	lsrs	r0, r0, #8
 8002abe:	3908      	subs	r1, #8
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	4298      	cmp	r0, r3
 8002ac4:	d301      	bcc.n	8002aca <__clzsi2+0x22>
 8002ac6:	0900      	lsrs	r0, r0, #4
 8002ac8:	3904      	subs	r1, #4
 8002aca:	a202      	add	r2, pc, #8	@ (adr r2, 8002ad4 <__clzsi2+0x2c>)
 8002acc:	5c10      	ldrb	r0, [r2, r0]
 8002ace:	1840      	adds	r0, r0, r1
 8002ad0:	4770      	bx	lr
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	02020304 	.word	0x02020304
 8002ad8:	01010101 	.word	0x01010101
	...

08002ae4 <__clzdi2>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	d103      	bne.n	8002af2 <__clzdi2+0xe>
 8002aea:	f7ff ffdd 	bl	8002aa8 <__clzsi2>
 8002aee:	3020      	adds	r0, #32
 8002af0:	e002      	b.n	8002af8 <__clzdi2+0x14>
 8002af2:	0008      	movs	r0, r1
 8002af4:	f7ff ffd8 	bl	8002aa8 <__clzsi2>
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	46c0      	nop			@ (mov r8, r8)

08002afc <MP2760_ReadRegister>:
{
    HAL_I2C_Mem_Write(&hi2c1, MP2760_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
}

uint8_t MP2760_ReadRegister(uint8_t reg)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	0002      	movs	r2, r0
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 8002b08:	210f      	movs	r1, #15
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MP2760_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4809      	ldr	r0, [pc, #36]	@ (8002b3c <MP2760_ReadRegister+0x40>)
 8002b18:	2301      	movs	r3, #1
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	000c      	movs	r4, r1
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	21d2      	movs	r1, #210	@ 0xd2
 8002b2c:	f001 fa3e 	bl	8003fac <HAL_I2C_Mem_Read>
    return value;
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	781b      	ldrb	r3, [r3, #0]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b005      	add	sp, #20
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	200001f0 	.word	0x200001f0

08002b40 <MP2760_ReadVoltage>:

float MP2760_ReadVoltage(uint8_t msb_reg)
{
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	0002      	movs	r2, r0
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	701a      	strb	r2, [r3, #0]
    uint8_t msb = MP2760_ReadRegister(msb_reg);
 8002b4c:	250f      	movs	r5, #15
 8002b4e:	197c      	adds	r4, r7, r5
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7ff ffd1 	bl	8002afc <MP2760_ReadRegister>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	7023      	strb	r3, [r4, #0]
    uint8_t lsb = MP2760_ReadRegister(msb_reg + 1);
 8002b5e:	1dfb      	adds	r3, r7, #7
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	260e      	movs	r6, #14
 8002b68:	19bc      	adds	r4, r7, r6
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff ffc6 	bl	8002afc <MP2760_ReadRegister>
 8002b70:	0003      	movs	r3, r0
 8002b72:	7023      	strb	r3, [r4, #0]
    uint16_t raw = (msb << 4) | (lsb >> 4);
 8002b74:	197b      	adds	r3, r7, r5
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	19bb      	adds	r3, r7, r6
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	210c      	movs	r1, #12
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	801a      	strh	r2, [r3, #0]
    return raw * 0.00488f; // Each LSB = 4.88mV
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fd fecc 	bl	8000934 <__aeabi_i2f>
 8002b9c:	1c03      	adds	r3, r0, #0
 8002b9e:	4904      	ldr	r1, [pc, #16]	@ (8002bb0 <MP2760_ReadVoltage+0x70>)
 8002ba0:	1c18      	adds	r0, r3, #0
 8002ba2:	f7fd fd6d 	bl	8000680 <__aeabi_fmul>
 8002ba6:	1c03      	adds	r3, r0, #0
}
 8002ba8:	1c18      	adds	r0, r3, #0
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b005      	add	sp, #20
 8002bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb0:	3b9fe868 	.word	0x3b9fe868

08002bb4 <MP2760_PrintStatus>:
void MP2760_PrintStatus(void)
{
 8002bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb6:	b0a7      	sub	sp, #156	@ 0x9c
 8002bb8:	af04      	add	r7, sp, #16
    uint8_t input_status = MP2760_ReadRegister(0x0A);
 8002bba:	2587      	movs	r5, #135	@ 0x87
 8002bbc:	197c      	adds	r4, r7, r5
 8002bbe:	200a      	movs	r0, #10
 8002bc0:	f7ff ff9c 	bl	8002afc <MP2760_ReadRegister>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	7023      	strb	r3, [r4, #0]
    uint8_t charger_status = MP2760_ReadRegister(0x0B);
 8002bc8:	2486      	movs	r4, #134	@ 0x86
 8002bca:	193c      	adds	r4, r7, r4
 8002bcc:	200b      	movs	r0, #11
 8002bce:	f7ff ff95 	bl	8002afc <MP2760_ReadRegister>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	7023      	strb	r3, [r4, #0]

    char msg[128];
    snprintf(msg, sizeof(msg),
 8002bd6:	0029      	movs	r1, r5
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	09db      	lsrs	r3, r3, #7
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	001a      	movs	r2, r3
 8002be2:	2301      	movs	r3, #1
 8002be4:	401a      	ands	r2, r3
 8002be6:	0016      	movs	r6, r2
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	187a      	adds	r2, r7, r1
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	08d2      	lsrs	r2, r2, #3
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	0011      	movs	r1, r2
 8002c00:	2201      	movs	r2, #1
 8002c02:	400a      	ands	r2, r1
 8002c04:	2486      	movs	r4, #134	@ 0x86
 8002c06:	1939      	adds	r1, r7, r4
 8002c08:	7809      	ldrb	r1, [r1, #0]
 8002c0a:	09c9      	lsrs	r1, r1, #7
 8002c0c:	b2c9      	uxtb	r1, r1
 8002c0e:	0008      	movs	r0, r1
 8002c10:	2101      	movs	r1, #1
 8002c12:	4001      	ands	r1, r0
 8002c14:	1938      	adds	r0, r7, r4
 8002c16:	7800      	ldrb	r0, [r0, #0]
 8002c18:	247f      	movs	r4, #127	@ 0x7f
 8002c1a:	4020      	ands	r0, r4
 8002c1c:	4d0d      	ldr	r5, [pc, #52]	@ (8002c54 <MP2760_PrintStatus+0xa0>)
 8002c1e:	1d3c      	adds	r4, r7, #4
 8002c20:	9003      	str	r0, [sp, #12]
 8002c22:	9102      	str	r1, [sp, #8]
 8002c24:	9201      	str	r2, [sp, #4]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	0033      	movs	r3, r6
 8002c2a:	002a      	movs	r2, r5
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0020      	movs	r0, r4
 8002c30:	f004 fdc8 	bl	80077c4 <sniprintf>
             (input_status >> 5) & 0x01,
             (input_status >> 3) & 0x01,
             (charger_status >> 7) & 0x01,
             charger_status & 0x7F);

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fd fa66 	bl	8000108 <strlen>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	425b      	negs	r3, r3
 8002c44:	1d39      	adds	r1, r7, #4
 8002c46:	4804      	ldr	r0, [pc, #16]	@ (8002c58 <MP2760_PrintStatus+0xa4>)
 8002c48:	f003 fb7e 	bl	8006348 <HAL_UART_Transmit>
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b023      	add	sp, #140	@ 0x8c
 8002c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c54:	08009b98 	.word	0x08009b98
 8002c58:	20000244 	.word	0x20000244

08002c5c <MP2760_PrintVoltages>:

void MP2760_PrintVoltages(void)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b0ad      	sub	sp, #180	@ 0xb4
 8002c60:	af06      	add	r7, sp, #24
    float vin = MP2760_ReadVoltage(0x1C);
 8002c62:	201c      	movs	r0, #28
 8002c64:	f7ff ff6c 	bl	8002b40 <MP2760_ReadVoltage>
 8002c68:	1c03      	adds	r3, r0, #0
 8002c6a:	248c      	movs	r4, #140	@ 0x8c
 8002c6c:	2508      	movs	r5, #8
 8002c6e:	1962      	adds	r2, r4, r5
 8002c70:	19d2      	adds	r2, r2, r7
 8002c72:	6013      	str	r3, [r2, #0]
    float vbat = MP2760_ReadVoltage(0x1E);
 8002c74:	201e      	movs	r0, #30
 8002c76:	f7ff ff63 	bl	8002b40 <MP2760_ReadVoltage>
 8002c7a:	1c03      	adds	r3, r0, #0
 8002c7c:	2688      	movs	r6, #136	@ 0x88
 8002c7e:	1972      	adds	r2, r6, r5
 8002c80:	19d2      	adds	r2, r2, r7
 8002c82:	6013      	str	r3, [r2, #0]
    float vsys = MP2760_ReadVoltage(0x20);
 8002c84:	2020      	movs	r0, #32
 8002c86:	f7ff ff5b 	bl	8002b40 <MP2760_ReadVoltage>
 8002c8a:	1c03      	adds	r3, r0, #0
 8002c8c:	2284      	movs	r2, #132	@ 0x84
 8002c8e:	0028      	movs	r0, r5
 8002c90:	1812      	adds	r2, r2, r0
 8002c92:	19d1      	adds	r1, r2, r7
 8002c94:	600b      	str	r3, [r1, #0]

    char msg[128];
    snprintf(msg, sizeof(msg),
 8002c96:	1823      	adds	r3, r4, r0
 8002c98:	19d9      	adds	r1, r3, r7
 8002c9a:	6808      	ldr	r0, [r1, #0]
 8002c9c:	f7ff fe3a 	bl	8002914 <__aeabi_f2d>
 8002ca0:	0004      	movs	r4, r0
 8002ca2:	000d      	movs	r5, r1
 8002ca4:	2008      	movs	r0, #8
 8002ca6:	1833      	adds	r3, r6, r0
 8002ca8:	19d9      	adds	r1, r3, r7
 8002caa:	6808      	ldr	r0, [r1, #0]
 8002cac:	f7ff fe32 	bl	8002914 <__aeabi_f2d>
 8002cb0:	6038      	str	r0, [r7, #0]
 8002cb2:	6079      	str	r1, [r7, #4]
 8002cb4:	2384      	movs	r3, #132	@ 0x84
 8002cb6:	2008      	movs	r0, #8
 8002cb8:	181b      	adds	r3, r3, r0
 8002cba:	19db      	adds	r3, r3, r7
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	f7ff fe29 	bl	8002914 <__aeabi_f2d>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	4910      	ldr	r1, [pc, #64]	@ (8002d08 <MP2760_PrintVoltages+0xac>)
 8002cc8:	260c      	movs	r6, #12
 8002cca:	19b8      	adds	r0, r7, r6
 8002ccc:	9204      	str	r2, [sp, #16]
 8002cce:	9305      	str	r3, [sp, #20]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	9202      	str	r2, [sp, #8]
 8002cd6:	9303      	str	r3, [sp, #12]
 8002cd8:	9400      	str	r4, [sp, #0]
 8002cda:	9501      	str	r5, [sp, #4]
 8002cdc:	000a      	movs	r2, r1
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	f004 fd70 	bl	80077c4 <sniprintf>
             "Voltages: VIN:%.2fV VBAT:%.2fV VSYS:%.2fV\r\n",
             vin, vbat, vsys);

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002ce4:	0034      	movs	r4, r6
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fa0d 	bl	8000108 <strlen>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	425b      	negs	r3, r3
 8002cf6:	1939      	adds	r1, r7, r4
 8002cf8:	4804      	ldr	r0, [pc, #16]	@ (8002d0c <MP2760_PrintVoltages+0xb0>)
 8002cfa:	f003 fb25 	bl	8006348 <HAL_UART_Transmit>
}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b027      	add	sp, #156	@ 0x9c
 8002d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	08009c10 	.word	0x08009c10
 8002d0c:	20000244 	.word	0x20000244

08002d10 <MP2760_PrintThresholds>:

void MP2760_PrintThresholds(void)
{
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	46c6      	mov	lr, r8
 8002d14:	b500      	push	{lr}
 8002d16:	b0aa      	sub	sp, #168	@ 0xa8
 8002d18:	af06      	add	r7, sp, #24
    uint8_t vin_ovp = MP2760_ReadRegister(0x11) >> 6; // Bits 7:6
 8002d1a:	2011      	movs	r0, #17
 8002d1c:	f7ff feee 	bl	8002afc <MP2760_ReadRegister>
 8002d20:	0003      	movs	r3, r0
 8002d22:	001a      	movs	r2, r3
 8002d24:	258f      	movs	r5, #143	@ 0x8f
 8002d26:	197b      	adds	r3, r7, r5
 8002d28:	0992      	lsrs	r2, r2, #6
 8002d2a:	701a      	strb	r2, [r3, #0]
    uint8_t vin_uvlo = (MP2760_ReadRegister(0x11) >> 4) & 0x03; // Bits 5:4
 8002d2c:	2011      	movs	r0, #17
 8002d2e:	f7ff fee5 	bl	8002afc <MP2760_ReadRegister>
 8002d32:	0003      	movs	r3, r0
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	268e      	movs	r6, #142	@ 0x8e
 8002d3a:	19bb      	adds	r3, r7, r6
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	400a      	ands	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
    uint8_t sys_reg_raw = MP2760_ReadRegister(0x15);
 8002d42:	238d      	movs	r3, #141	@ 0x8d
 8002d44:	18fc      	adds	r4, r7, r3
 8002d46:	2015      	movs	r0, #21
 8002d48:	f7ff fed8 	bl	8002afc <MP2760_ReadRegister>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	7023      	strb	r3, [r4, #0]
    uint8_t vbat_reg_raw = MP2760_ReadRegister(0x14);
 8002d50:	228c      	movs	r2, #140	@ 0x8c
 8002d52:	18bc      	adds	r4, r7, r2
 8002d54:	2014      	movs	r0, #20
 8002d56:	f7ff fed1 	bl	8002afc <MP2760_ReadRegister>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	7023      	strb	r3, [r4, #0]

    float sys_reg = 3.84 + (sys_reg_raw * 0.032);
 8002d5e:	238d      	movs	r3, #141	@ 0x8d
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff fd83 	bl	8002870 <__aeabi_i2d>
 8002d6a:	4a31      	ldr	r2, [pc, #196]	@ (8002e30 <MP2760_PrintThresholds+0x120>)
 8002d6c:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <MP2760_PrintThresholds+0x124>)
 8002d6e:	f7fe fe31 	bl	80019d4 <__aeabi_dmul>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <MP2760_PrintThresholds+0x128>)
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e3c <MP2760_PrintThresholds+0x12c>)
 8002d7e:	f7fd fe29 	bl	80009d4 <__aeabi_dadd>
 8002d82:	0002      	movs	r2, r0
 8002d84:	000b      	movs	r3, r1
 8002d86:	0010      	movs	r0, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	f7ff fe0b 	bl	80029a4 <__aeabi_d2f>
 8002d8e:	1c03      	adds	r3, r0, #0
 8002d90:	2488      	movs	r4, #136	@ 0x88
 8002d92:	1939      	adds	r1, r7, r4
 8002d94:	600b      	str	r3, [r1, #0]
    float vbat_reg = 3.84 + (vbat_reg_raw * 0.032);
 8002d96:	228c      	movs	r2, #140	@ 0x8c
 8002d98:	18bb      	adds	r3, r7, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff fd67 	bl	8002870 <__aeabi_i2d>
 8002da2:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <MP2760_PrintThresholds+0x120>)
 8002da4:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <MP2760_PrintThresholds+0x124>)
 8002da6:	f7fe fe15 	bl	80019d4 <__aeabi_dmul>
 8002daa:	0002      	movs	r2, r0
 8002dac:	000b      	movs	r3, r1
 8002dae:	0010      	movs	r0, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <MP2760_PrintThresholds+0x128>)
 8002db4:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <MP2760_PrintThresholds+0x12c>)
 8002db6:	f7fd fe0d 	bl	80009d4 <__aeabi_dadd>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	f7ff fdef 	bl	80029a4 <__aeabi_d2f>
 8002dc6:	1c03      	adds	r3, r0, #0
 8002dc8:	2284      	movs	r2, #132	@ 0x84
 8002dca:	18b9      	adds	r1, r7, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    char msg[128];
    snprintf(msg, sizeof(msg),
 8002dce:	197b      	adds	r3, r7, r5
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4698      	mov	r8, r3
 8002dd4:	19bb      	adds	r3, r7, r6
 8002dd6:	781e      	ldrb	r6, [r3, #0]
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f7ff fd9a 	bl	8002914 <__aeabi_f2d>
 8002de0:	0004      	movs	r4, r0
 8002de2:	000d      	movs	r5, r1
 8002de4:	2284      	movs	r2, #132	@ 0x84
 8002de6:	18bb      	adds	r3, r7, r2
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f7ff fd93 	bl	8002914 <__aeabi_f2d>
 8002dee:	0002      	movs	r2, r0
 8002df0:	000b      	movs	r3, r1
 8002df2:	4913      	ldr	r1, [pc, #76]	@ (8002e40 <MP2760_PrintThresholds+0x130>)
 8002df4:	1d38      	adds	r0, r7, #4
 8002df6:	9204      	str	r2, [sp, #16]
 8002df8:	9305      	str	r3, [sp, #20]
 8002dfa:	9402      	str	r4, [sp, #8]
 8002dfc:	9503      	str	r5, [sp, #12]
 8002dfe:	9600      	str	r6, [sp, #0]
 8002e00:	4643      	mov	r3, r8
 8002e02:	000a      	movs	r2, r1
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	f004 fcdd 	bl	80077c4 <sniprintf>
             "Thresholds:\r\nVIN_OVP Setting: %d (code)\r\nVIN_UVLO Setting: %d (code)\r\nSYS_REG: %.2fV\r\nVBAT_REG: %.2fV\r\n",
             vin_ovp, vin_uvlo, sys_reg, vbat_reg);

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fd f97b 	bl	8000108 <strlen>
 8002e12:	0003      	movs	r3, r0
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	425b      	negs	r3, r3
 8002e1a:	1d39      	adds	r1, r7, #4
 8002e1c:	4809      	ldr	r0, [pc, #36]	@ (8002e44 <MP2760_PrintThresholds+0x134>)
 8002e1e:	f003 fa93 	bl	8006348 <HAL_UART_Transmit>
}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b024      	add	sp, #144	@ 0x90
 8002e28:	bc80      	pop	{r7}
 8002e2a:	46b8      	mov	r8, r7
 8002e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e34:	3fa0624d 	.word	0x3fa0624d
 8002e38:	eb851eb8 	.word	0xeb851eb8
 8002e3c:	400eb851 	.word	0x400eb851
 8002e40:	08009c3c 	.word	0x08009c3c
 8002e44:	20000244 	.word	0x20000244

08002e48 <MP2760_PrintFaults>:

void MP2760_PrintFaults(void)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b0c2      	sub	sp, #264	@ 0x108
 8002e4c:	af00      	add	r7, sp, #0
    uint8_t fault_status = MP2760_ReadRegister(0x0C);
 8002e4e:	2508      	movs	r5, #8
 8002e50:	35ff      	adds	r5, #255	@ 0xff
 8002e52:	197c      	adds	r4, r7, r5
 8002e54:	200c      	movs	r0, #12
 8002e56:	f7ff fe51 	bl	8002afc <MP2760_ReadRegister>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	7023      	strb	r3, [r4, #0]
    char msg[256];

    snprintf(msg, sizeof(msg), "Faults: 0x%02X\r\n", fault_status);
 8002e5e:	002c      	movs	r4, r5
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4a39      	ldr	r2, [pc, #228]	@ (8002f4c <MP2760_PrintFaults+0x104>)
 8002e66:	2180      	movs	r1, #128	@ 0x80
 8002e68:	0049      	lsls	r1, r1, #1
 8002e6a:	1d38      	adds	r0, r7, #4
 8002e6c:	f004 fcaa 	bl	80077c4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd f948 	bl	8000108 <strlen>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	425b      	negs	r3, r3
 8002e80:	1d39      	adds	r1, r7, #4
 8002e82:	4833      	ldr	r0, [pc, #204]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002e84:	f003 fa60 	bl	8006348 <HAL_UART_Transmit>

    if (fault_status == 0) {
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d113      	bne.n	8002eb8 <MP2760_PrintFaults+0x70>
        snprintf(msg, sizeof(msg), "No faults detected.\r\n");
 8002e90:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <MP2760_PrintFaults+0x10c>)
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	0059      	lsls	r1, r3, #1
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f004 fc93 	bl	80077c4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fd f931 	bl	8000108 <strlen>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	425b      	negs	r3, r3
 8002eae:	1d39      	adds	r1, r7, #4
 8002eb0:	4827      	ldr	r0, [pc, #156]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002eb2:	f003 fa49 	bl	8006348 <HAL_UART_Transmit>
 8002eb6:	e045      	b.n	8002f44 <MP2760_PrintFaults+0xfc>
        return;
    }

    if (fault_status & 0x10) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: Input UVLO detected!\r\n", 29, HAL_MAX_DELAY);
 8002eb8:	2308      	movs	r3, #8
 8002eba:	33ff      	adds	r3, #255	@ 0xff
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d006      	beq.n	8002ed4 <MP2760_PrintFaults+0x8c>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	425b      	negs	r3, r3
 8002eca:	4923      	ldr	r1, [pc, #140]	@ (8002f58 <MP2760_PrintFaults+0x110>)
 8002ecc:	4820      	ldr	r0, [pc, #128]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002ece:	221d      	movs	r2, #29
 8002ed0:	f003 fa3a 	bl	8006348 <HAL_UART_Transmit>
    if (fault_status & 0x08) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: Battery OVP!\r\n", 21, HAL_MAX_DELAY);
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	33ff      	adds	r3, #255	@ 0xff
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d006      	beq.n	8002ef0 <MP2760_PrintFaults+0xa8>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	491d      	ldr	r1, [pc, #116]	@ (8002f5c <MP2760_PrintFaults+0x114>)
 8002ee8:	4819      	ldr	r0, [pc, #100]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002eea:	2215      	movs	r2, #21
 8002eec:	f003 fa2c 	bl	8006348 <HAL_UART_Transmit>
    if (fault_status & 0x04) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: Battery Short!\r\n", 23, HAL_MAX_DELAY);
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	33ff      	adds	r3, #255	@ 0xff
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	4013      	ands	r3, r2
 8002efc:	d006      	beq.n	8002f0c <MP2760_PrintFaults+0xc4>
 8002efe:	2301      	movs	r3, #1
 8002f00:	425b      	negs	r3, r3
 8002f02:	4917      	ldr	r1, [pc, #92]	@ (8002f60 <MP2760_PrintFaults+0x118>)
 8002f04:	4812      	ldr	r0, [pc, #72]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002f06:	2217      	movs	r2, #23
 8002f08:	f003 fa1e 	bl	8006348 <HAL_UART_Transmit>
    if (fault_status & 0x02) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: Battery NTC Fault!\r\n", 26, HAL_MAX_DELAY);
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	33ff      	adds	r3, #255	@ 0xff
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d006      	beq.n	8002f28 <MP2760_PrintFaults+0xe0>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <MP2760_PrintFaults+0x11c>)
 8002f20:	480b      	ldr	r0, [pc, #44]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002f22:	221a      	movs	r2, #26
 8002f24:	f003 fa10 	bl	8006348 <HAL_UART_Transmit>
    if (fault_status & 0x40) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: Thermal Shutdown!\r\n", 26, HAL_MAX_DELAY);
 8002f28:	2308      	movs	r3, #8
 8002f2a:	33ff      	adds	r3, #255	@ 0xff
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2240      	movs	r2, #64	@ 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	d006      	beq.n	8002f44 <MP2760_PrintFaults+0xfc>
 8002f36:	2301      	movs	r3, #1
 8002f38:	425b      	negs	r3, r3
 8002f3a:	490b      	ldr	r1, [pc, #44]	@ (8002f68 <MP2760_PrintFaults+0x120>)
 8002f3c:	4804      	ldr	r0, [pc, #16]	@ (8002f50 <MP2760_PrintFaults+0x108>)
 8002f3e:	221a      	movs	r2, #26
 8002f40:	f003 fa02 	bl	8006348 <HAL_UART_Transmit>
}
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b042      	add	sp, #264	@ 0x108
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	08009ca4 	.word	0x08009ca4
 8002f50:	20000244 	.word	0x20000244
 8002f54:	08009cb8 	.word	0x08009cb8
 8002f58:	08009cd0 	.word	0x08009cd0
 8002f5c:	08009cf0 	.word	0x08009cf0
 8002f60:	08009d08 	.word	0x08009d08
 8002f64:	08009d20 	.word	0x08009d20
 8002f68:	08009d3c 	.word	0x08009d3c

08002f6c <MP2760_PrintAdvancedPathStatus>:

void MP2760_PrintAdvancedPathStatus(void)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b0c2      	sub	sp, #264	@ 0x108
 8002f70:	af00      	add	r7, sp, #0
    uint8_t msb = MP2760_ReadRegister(0x17);
 8002f72:	2508      	movs	r5, #8
 8002f74:	35ff      	adds	r5, #255	@ 0xff
 8002f76:	197c      	adds	r4, r7, r5
 8002f78:	2017      	movs	r0, #23
 8002f7a:	f7ff fdbf 	bl	8002afc <MP2760_ReadRegister>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	7023      	strb	r3, [r4, #0]
    uint8_t lsb = MP2760_ReadRegister(0x18);
 8002f82:	1dfc      	adds	r4, r7, #7
 8002f84:	34ff      	adds	r4, #255	@ 0xff
 8002f86:	2018      	movs	r0, #24
 8002f88:	f7ff fdb8 	bl	8002afc <MP2760_ReadRegister>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	7023      	strb	r3, [r4, #0]
    uint16_t reg17 = (msb << 8) | lsb;
 8002f90:	197b      	adds	r3, r7, r5
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b21b      	sxth	r3, r3
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	33ff      	adds	r3, #255	@ 0xff
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b21a      	sxth	r2, r3
 8002fa6:	1d7b      	adds	r3, r7, #5
 8002fa8:	33ff      	adds	r3, #255	@ 0xff
 8002faa:	801a      	strh	r2, [r3, #0]

    char msg[256];
    snprintf(msg, sizeof(msg), "Advanced Path Status REG17h: 0x%04X\r\n", reg17);
 8002fac:	1d7b      	adds	r3, r7, #5
 8002fae:	33ff      	adds	r3, #255	@ 0xff
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003068 <MP2760_PrintAdvancedPathStatus+0xfc>)
 8002fb4:	2180      	movs	r1, #128	@ 0x80
 8002fb6:	0049      	lsls	r1, r1, #1
 8002fb8:	1d38      	adds	r0, r7, #4
 8002fba:	f004 fc03 	bl	80077c4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fd f8a1 	bl	8000108 <strlen>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	2301      	movs	r3, #1
 8002fcc:	425b      	negs	r3, r3
 8002fce:	1d39      	adds	r1, r7, #4
 8002fd0:	4826      	ldr	r0, [pc, #152]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 8002fd2:	f003 f9b9 	bl	8006348 <HAL_UART_Transmit>

    if (reg17 & (1 << 13)) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: ACFET Failure Detected!\r\n", 32, HAL_MAX_DELAY);
 8002fd6:	1d7b      	adds	r3, r7, #5
 8002fd8:	33ff      	adds	r3, #255	@ 0xff
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d006      	beq.n	8002ff2 <MP2760_PrintAdvancedPathStatus+0x86>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	4921      	ldr	r1, [pc, #132]	@ (8003070 <MP2760_PrintAdvancedPathStatus+0x104>)
 8002fea:	4820      	ldr	r0, [pc, #128]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 8002fec:	2220      	movs	r2, #32
 8002fee:	f003 f9ab 	bl	8006348 <HAL_UART_Transmit>
    if (reg17 & (1 << 12)) HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: BATFET Failure Detected!\r\n", 33, HAL_MAX_DELAY);
 8002ff2:	1d7b      	adds	r3, r7, #5
 8002ff4:	33ff      	adds	r3, #255	@ 0xff
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d006      	beq.n	800300e <MP2760_PrintAdvancedPathStatus+0xa2>
 8003000:	2301      	movs	r3, #1
 8003002:	425b      	negs	r3, r3
 8003004:	491b      	ldr	r1, [pc, #108]	@ (8003074 <MP2760_PrintAdvancedPathStatus+0x108>)
 8003006:	4819      	ldr	r0, [pc, #100]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 8003008:	2221      	movs	r2, #33	@ 0x21
 800300a:	f003 f99d 	bl	8006348 <HAL_UART_Transmit>
    if (reg17 & (1 << 9))  HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: SYS LDO Failure!\r\n", 25, HAL_MAX_DELAY);
 800300e:	1d7b      	adds	r3, r7, #5
 8003010:	33ff      	adds	r3, #255	@ 0xff
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4013      	ands	r3, r2
 800301a:	d006      	beq.n	800302a <MP2760_PrintAdvancedPathStatus+0xbe>
 800301c:	2301      	movs	r3, #1
 800301e:	425b      	negs	r3, r3
 8003020:	4915      	ldr	r1, [pc, #84]	@ (8003078 <MP2760_PrintAdvancedPathStatus+0x10c>)
 8003022:	4812      	ldr	r0, [pc, #72]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 8003024:	2219      	movs	r2, #25
 8003026:	f003 f98f 	bl	8006348 <HAL_UART_Transmit>
    if (reg17 & (1 << 8))  HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: VBAT Short Detected!\r\n", 28, HAL_MAX_DELAY);
 800302a:	1d7b      	adds	r3, r7, #5
 800302c:	33ff      	adds	r3, #255	@ 0xff
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d006      	beq.n	8003046 <MP2760_PrintAdvancedPathStatus+0xda>
 8003038:	2301      	movs	r3, #1
 800303a:	425b      	negs	r3, r3
 800303c:	490f      	ldr	r1, [pc, #60]	@ (800307c <MP2760_PrintAdvancedPathStatus+0x110>)
 800303e:	480b      	ldr	r0, [pc, #44]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 8003040:	221c      	movs	r2, #28
 8003042:	f003 f981 	bl	8006348 <HAL_UART_Transmit>
    if (reg17 & (1 << 5))  HAL_UART_Transmit(&huart2, (uint8_t*)"Fault: NTC Failure!\r\n", 22, HAL_MAX_DELAY);
 8003046:	1d7b      	adds	r3, r7, #5
 8003048:	33ff      	adds	r3, #255	@ 0xff
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2220      	movs	r2, #32
 800304e:	4013      	ands	r3, r2
 8003050:	d006      	beq.n	8003060 <MP2760_PrintAdvancedPathStatus+0xf4>
 8003052:	2301      	movs	r3, #1
 8003054:	425b      	negs	r3, r3
 8003056:	490a      	ldr	r1, [pc, #40]	@ (8003080 <MP2760_PrintAdvancedPathStatus+0x114>)
 8003058:	4804      	ldr	r0, [pc, #16]	@ (800306c <MP2760_PrintAdvancedPathStatus+0x100>)
 800305a:	2216      	movs	r2, #22
 800305c:	f003 f974 	bl	8006348 <HAL_UART_Transmit>
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b042      	add	sp, #264	@ 0x108
 8003066:	bdb0      	pop	{r4, r5, r7, pc}
 8003068:	08009d58 	.word	0x08009d58
 800306c:	20000244 	.word	0x20000244
 8003070:	08009d80 	.word	0x08009d80
 8003074:	08009da4 	.word	0x08009da4
 8003078:	08009dc8 	.word	0x08009dc8
 800307c:	08009de4 	.word	0x08009de4
 8003080:	08009e04 	.word	0x08009e04

08003084 <MP2760_Dashboard>:

void MP2760_Dashboard(void)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b09f      	sub	sp, #124	@ 0x7c
 8003088:	af00      	add	r7, sp, #0
	const char* clear_screen = "\033[2J\033[H";  // ANSI: clear + move cursor to home
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <MP2760_Dashboard+0x90>)
 800308c:	677b      	str	r3, [r7, #116]	@ 0x74
	    HAL_UART_Transmit(&huart2, (uint8_t*)clear_screen, strlen(clear_screen), HAL_MAX_DELAY);
 800308e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd f839 	bl	8000108 <strlen>
 8003096:	0003      	movs	r3, r0
 8003098:	b29a      	uxth	r2, r3
 800309a:	2301      	movs	r3, #1
 800309c:	425b      	negs	r3, r3
 800309e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80030a0:	481d      	ldr	r0, [pc, #116]	@ (8003118 <MP2760_Dashboard+0x94>)
 80030a2:	f003 f951 	bl	8006348 <HAL_UART_Transmit>

    char header[] = "\r\n================ MP2760 DASHBOARD ==================\r\n";
 80030a6:	2438      	movs	r4, #56	@ 0x38
 80030a8:	193a      	adds	r2, r7, r4
 80030aa:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <MP2760_Dashboard+0x98>)
 80030ac:	0010      	movs	r0, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	2339      	movs	r3, #57	@ 0x39
 80030b2:	001a      	movs	r2, r3
 80030b4:	f004 fc9a 	bl	80079ec <memcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)header, strlen(header), HAL_MAX_DELAY);
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f824 	bl	8000108 <strlen>
 80030c0:	0003      	movs	r3, r0
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	425b      	negs	r3, r3
 80030c8:	1939      	adds	r1, r7, r4
 80030ca:	4813      	ldr	r0, [pc, #76]	@ (8003118 <MP2760_Dashboard+0x94>)
 80030cc:	f003 f93c 	bl	8006348 <HAL_UART_Transmit>

    MP2760_PrintStatus();
 80030d0:	f7ff fd70 	bl	8002bb4 <MP2760_PrintStatus>
    MP2760_PrintVoltages();
 80030d4:	f7ff fdc2 	bl	8002c5c <MP2760_PrintVoltages>
    MP2760_PrintThresholds();
 80030d8:	f7ff fe1a 	bl	8002d10 <MP2760_PrintThresholds>
    MP2760_PrintFaults();
 80030dc:	f7ff feb4 	bl	8002e48 <MP2760_PrintFaults>
    MP2760_PrintAdvancedPathStatus();
 80030e0:	f7ff ff44 	bl	8002f6c <MP2760_PrintAdvancedPathStatus>
    char footer[] = "====================================================\r\n";
 80030e4:	003a      	movs	r2, r7
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <MP2760_Dashboard+0x9c>)
 80030e8:	0010      	movs	r0, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	2337      	movs	r3, #55	@ 0x37
 80030ee:	001a      	movs	r2, r3
 80030f0:	f004 fc7c 	bl	80079ec <memcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)footer, strlen(footer), HAL_MAX_DELAY);
 80030f4:	003b      	movs	r3, r7
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7fd f806 	bl	8000108 <strlen>
 80030fc:	0003      	movs	r3, r0
 80030fe:	b29a      	uxth	r2, r3
 8003100:	2301      	movs	r3, #1
 8003102:	425b      	negs	r3, r3
 8003104:	0039      	movs	r1, r7
 8003106:	4804      	ldr	r0, [pc, #16]	@ (8003118 <MP2760_Dashboard+0x94>)
 8003108:	f003 f91e 	bl	8006348 <HAL_UART_Transmit>
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b01f      	add	sp, #124	@ 0x7c
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	08009e1c 	.word	0x08009e1c
 8003118:	20000244 	.word	0x20000244
 800311c:	08009e24 	.word	0x08009e24
 8003120:	08009e60 	.word	0x08009e60

08003124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b08b      	sub	sp, #44	@ 0x2c
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800312a:	f000 fb2f 	bl	800378c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800312e:	f000 f829 	bl	8003184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003132:	f000 f905 	bl	8003340 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003136:	f000 f893 	bl	8003260 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800313a:	f000 f8d1 	bl	80032e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char hello[] = "Starting MP2760 Live Monitor...\r\n";
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	4a0e      	ldr	r2, [pc, #56]	@ (800317c <main+0x58>)
 8003142:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003144:	c313      	stmia	r3!, {r0, r1, r4}
 8003146:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003148:	c313      	stmia	r3!, {r0, r1, r4}
 800314a:	ca03      	ldmia	r2!, {r0, r1}
 800314c:	c303      	stmia	r3!, {r0, r1}
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), HAL_MAX_DELAY);
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	0018      	movs	r0, r3
 8003156:	f7fc ffd7 	bl	8000108 <strlen>
 800315a:	0003      	movs	r3, r0
 800315c:	b29a      	uxth	r2, r3
 800315e:	2301      	movs	r3, #1
 8003160:	425b      	negs	r3, r3
 8003162:	1d39      	adds	r1, r7, #4
 8003164:	4806      	ldr	r0, [pc, #24]	@ (8003180 <main+0x5c>)
 8003166:	f003 f8ef 	bl	8006348 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    MP2760_Dashboard();
 800316a:	f7ff ff8b 	bl	8003084 <MP2760_Dashboard>
	    HAL_Delay(1000); // Every 1 second
 800316e:	23fa      	movs	r3, #250	@ 0xfa
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	0018      	movs	r0, r3
 8003174:	f000 fb7a 	bl	800386c <HAL_Delay>
	    MP2760_Dashboard();
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	e7f6      	b.n	800316a <main+0x46>
 800317c:	08009e98 	.word	0x08009e98
 8003180:	20000244 	.word	0x20000244

08003184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b099      	sub	sp, #100	@ 0x64
 8003188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800318a:	242c      	movs	r4, #44	@ 0x2c
 800318c:	193b      	adds	r3, r7, r4
 800318e:	0018      	movs	r0, r3
 8003190:	2334      	movs	r3, #52	@ 0x34
 8003192:	001a      	movs	r2, r3
 8003194:	2100      	movs	r1, #0
 8003196:	f004 fb97 	bl	80078c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800319a:	2318      	movs	r3, #24
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	0018      	movs	r0, r3
 80031a0:	2314      	movs	r3, #20
 80031a2:	001a      	movs	r2, r3
 80031a4:	2100      	movs	r1, #0
 80031a6:	f004 fb8f 	bl	80078c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031aa:	003b      	movs	r3, r7
 80031ac:	0018      	movs	r0, r3
 80031ae:	2318      	movs	r3, #24
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f004 fb88 	bl	80078c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b8:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <SystemClock_Config+0xd4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a27      	ldr	r2, [pc, #156]	@ (800325c <SystemClock_Config+0xd8>)
 80031be:	401a      	ands	r2, r3
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <SystemClock_Config+0xd4>)
 80031c2:	2180      	movs	r1, #128	@ 0x80
 80031c4:	0109      	lsls	r1, r1, #4
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80031ca:	0021      	movs	r1, r4
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	2210      	movs	r2, #16
 80031d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2201      	movs	r2, #1
 80031d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	22a0      	movs	r2, #160	@ 0xa0
 80031e2:	0212      	lsls	r2, r2, #8
 80031e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	2200      	movs	r2, #0
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	0018      	movs	r0, r3
 80031f0:	f002 f9aa 	bl	8005548 <HAL_RCC_OscConfig>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80031f8:	f000 f8d8 	bl	80033ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031fc:	2118      	movs	r1, #24
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	220f      	movs	r2, #15
 8003202:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2100      	movs	r1, #0
 8003220:	0018      	movs	r0, r3
 8003222:	f002 fd0d 	bl	8005c40 <HAL_RCC_ClockConfig>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800322a:	f000 f8bf 	bl	80033ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800322e:	003b      	movs	r3, r7
 8003230:	220a      	movs	r2, #10
 8003232:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003234:	003b      	movs	r3, r7
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800323a:	003b      	movs	r3, r7
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003240:	003b      	movs	r3, r7
 8003242:	0018      	movs	r0, r3
 8003244:	f002 ff00 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800324c:	f000 f8ae 	bl	80033ac <Error_Handler>
  }
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b019      	add	sp, #100	@ 0x64
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	40007000 	.word	0x40007000
 800325c:	ffffe7ff 	.word	0xffffe7ff

08003260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003264:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <MX_I2C1_Init+0x7c>)
 8003268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <MX_I2C1_Init+0x78>)
 800326c:	22c1      	movs	r2, #193	@ 0xc1
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <MX_I2C1_Init+0x78>)
 800327a:	2201      	movs	r2, #1
 800327c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003284:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <MX_I2C1_Init+0x78>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003290:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <MX_I2C1_Init+0x78>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800329c:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <MX_I2C1_Init+0x78>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 fdde 	bl	8003e60 <HAL_I2C_Init>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032a8:	f000 f880 	bl	80033ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ac:	4b0a      	ldr	r3, [pc, #40]	@ (80032d8 <MX_I2C1_Init+0x78>)
 80032ae:	2100      	movs	r1, #0
 80032b0:	0018      	movs	r0, r3
 80032b2:	f002 f8b1 	bl	8005418 <HAL_I2CEx_ConfigAnalogFilter>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d001      	beq.n	80032be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80032ba:	f000 f877 	bl	80033ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <MX_I2C1_Init+0x78>)
 80032c0:	2100      	movs	r1, #0
 80032c2:	0018      	movs	r0, r3
 80032c4:	f002 f8f4 	bl	80054b0 <HAL_I2CEx_ConfigDigitalFilter>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d001      	beq.n	80032d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80032cc:	f000 f86e 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	200001f0 	.word	0x200001f0
 80032dc:	40005400 	.word	0x40005400

080032e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 80032e6:	4a15      	ldr	r2, [pc, #84]	@ (800333c <MX_USART2_UART_Init+0x5c>)
 80032e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 80032ec:	22e1      	movs	r2, #225	@ 0xe1
 80032ee:	0252      	lsls	r2, r2, #9
 80032f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 8003306:	220c      	movs	r2, #12
 8003308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 8003312:	2200      	movs	r2, #0
 8003314:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <MX_USART2_UART_Init+0x58>)
 8003324:	0018      	movs	r0, r3
 8003326:	f002 ffbb 	bl	80062a0 <HAL_UART_Init>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800332e:	f000 f83d 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000244 	.word	0x20000244
 800333c:	40004400 	.word	0x40004400

08003340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	0018      	movs	r0, r3
 800334a:	2314      	movs	r3, #20
 800334c:	001a      	movs	r2, r3
 800334e:	2100      	movs	r1, #0
 8003350:	f004 faba 	bl	80078c8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <MX_GPIO_Init+0x68>)
 8003356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003358:	4b13      	ldr	r3, [pc, #76]	@ (80033a8 <MX_GPIO_Init+0x68>)
 800335a:	2101      	movs	r1, #1
 800335c:	430a      	orrs	r2, r1
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003360:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <MX_GPIO_Init+0x68>)
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	22c0      	movs	r2, #192	@ 0xc0
 8003370:	0152      	lsls	r2, r2, #5
 8003372:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	2284      	movs	r2, #132	@ 0x84
 8003378:	0392      	lsls	r2, r2, #14
 800337a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	1d3a      	adds	r2, r7, #4
 8003384:	23a0      	movs	r3, #160	@ 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fbc4 	bl	8003b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	2100      	movs	r1, #0
 8003394:	2007      	movs	r0, #7
 8003396:	f000 fb39 	bl	8003a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800339a:	2007      	movs	r0, #7
 800339c:	f000 fb4b 	bl	8003a36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b006      	add	sp, #24
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	e7fd      	b.n	80033b4 <Error_Handler+0x8>

080033b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033bc:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_MspInit+0x24>)
 80033be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_MspInit+0x24>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <HAL_MspInit+0x24>)
 80033ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_MspInit+0x24>)
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	0549      	lsls	r1, r1, #21
 80033d2:	430a      	orrs	r2, r1
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	240c      	movs	r4, #12
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	0018      	movs	r0, r3
 80033ee:	2314      	movs	r3, #20
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f004 fa68 	bl	80078c8 <memset>
  if(hi2c->Instance==I2C1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <HAL_I2C_MspInit+0x90>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d132      	bne.n	8003468 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	4b1c      	ldr	r3, [pc, #112]	@ (8003474 <HAL_I2C_MspInit+0x94>)
 8003404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003406:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_I2C_MspInit+0x94>)
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800340e:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_I2C_MspInit+0x94>)
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800341a:	193b      	adds	r3, r7, r4
 800341c:	22c0      	movs	r2, #192	@ 0xc0
 800341e:	00d2      	lsls	r2, r2, #3
 8003420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003422:	0021      	movs	r1, r4
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2212      	movs	r2, #18
 8003428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2203      	movs	r2, #3
 8003434:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2206      	movs	r2, #6
 800343a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	187a      	adds	r2, r7, r1
 800343e:	23a0      	movs	r3, #160	@ 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f000 fb67 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344a:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <HAL_I2C_MspInit+0x94>)
 800344c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344e:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_I2C_MspInit+0x94>)
 8003450:	2180      	movs	r1, #128	@ 0x80
 8003452:	0389      	lsls	r1, r1, #14
 8003454:	430a      	orrs	r2, r1
 8003456:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	2017      	movs	r0, #23
 800345e:	f000 fad5 	bl	8003a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003462:	2017      	movs	r0, #23
 8003464:	f000 fae7 	bl	8003a36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003468:	46c0      	nop			@ (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b009      	add	sp, #36	@ 0x24
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40005400 	.word	0x40005400
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b089      	sub	sp, #36	@ 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	240c      	movs	r4, #12
 8003482:	193b      	adds	r3, r7, r4
 8003484:	0018      	movs	r0, r3
 8003486:	2314      	movs	r3, #20
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f004 fa1c 	bl	80078c8 <memset>
  if(huart->Instance==USART2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_UART_MspInit+0x80>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d129      	bne.n	80034ee <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800349a:	4b18      	ldr	r3, [pc, #96]	@ (80034fc <HAL_UART_MspInit+0x84>)
 800349c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_UART_MspInit+0x84>)
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	0289      	lsls	r1, r1, #10
 80034a4:	430a      	orrs	r2, r1
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_UART_MspInit+0x84>)
 80034aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ac:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <HAL_UART_MspInit+0x84>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	430a      	orrs	r2, r1
 80034b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_UART_MspInit+0x84>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	2201      	movs	r2, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034c0:	0021      	movs	r1, r4
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	220c      	movs	r2, #12
 80034c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2202      	movs	r2, #2
 80034cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2203      	movs	r2, #3
 80034d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	2204      	movs	r2, #4
 80034de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	187a      	adds	r2, r7, r1
 80034e2:	23a0      	movs	r3, #160	@ 0xa0
 80034e4:	05db      	lsls	r3, r3, #23
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 fb15 	bl	8003b18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b009      	add	sp, #36	@ 0x24
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	40004400 	.word	0x40004400
 80034fc:	40021000 	.word	0x40021000

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	e7fd      	b.n	8003504 <NMI_Handler+0x4>

08003508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	e7fd      	b.n	800350c <HardFault_Handler+0x4>

08003510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003528:	f000 f984 	bl	8003834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352c:	46c0      	nop			@ (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fc6a 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	015b      	lsls	r3, r3, #5
 8003544:	0018      	movs	r0, r3
 8003546:	f000 fc65 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003554:	4b09      	ldr	r3, [pc, #36]	@ (800357c <I2C1_IRQHandler+0x2c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	23e0      	movs	r3, #224	@ 0xe0
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4013      	ands	r3, r2
 8003560:	d004      	beq.n	800356c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <I2C1_IRQHandler+0x2c>)
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fe6f 	bl	8004248 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800356a:	e003      	b.n	8003574 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <I2C1_IRQHandler+0x2c>)
 800356e:	0018      	movs	r0, r3
 8003570:	f000 fe50 	bl	8004214 <HAL_I2C_EV_IRQHandler>
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	200001f0 	.word	0x200001f0

08003580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  return 1;
 8003584:	2301      	movs	r3, #1
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_kill>:

int _kill(int pid, int sig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003596:	f004 f9f1 	bl	800797c <__errno>
 800359a:	0003      	movs	r3, r0
 800359c:	2216      	movs	r2, #22
 800359e:	601a      	str	r2, [r3, #0]
  return -1;
 80035a0:	2301      	movs	r3, #1
 80035a2:	425b      	negs	r3, r3
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_exit>:

void _exit (int status)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035b4:	2301      	movs	r3, #1
 80035b6:	425a      	negs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff ffe5 	bl	800358c <_kill>
  while (1) {}    /* Make sure we hang here */
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	e7fd      	b.n	80035c2 <_exit+0x16>

080035c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e00a      	b.n	80035ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035d8:	e000      	b.n	80035dc <_read+0x16>
 80035da:	bf00      	nop
 80035dc:	0001      	movs	r1, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	60ba      	str	r2, [r7, #8]
 80035e4:	b2ca      	uxtb	r2, r1
 80035e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3301      	adds	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	dbf0      	blt.n	80035d8 <_read+0x12>
  }

  return len;
 80035f6:	687b      	ldr	r3, [r7, #4]
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b006      	add	sp, #24
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e009      	b.n	8003626 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	60ba      	str	r2, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	0018      	movs	r0, r3
 800361c:	e000      	b.n	8003620 <_write+0x20>
 800361e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3301      	adds	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	dbf1      	blt.n	8003612 <_write+0x12>
  }
  return len;
 800362e:	687b      	ldr	r3, [r7, #4]
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b006      	add	sp, #24
 8003636:	bd80      	pop	{r7, pc}

08003638 <_close>:

int _close(int file)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003640:	2301      	movs	r3, #1
 8003642:	425b      	negs	r3, r3
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2280      	movs	r2, #128	@ 0x80
 800365a:	0192      	lsls	r2, r2, #6
 800365c:	605a      	str	r2, [r3, #4]
  return 0;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <_isatty>:

int _isatty(int file)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003670:	2301      	movs	r3, #1
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}

0800367a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}

08003690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003698:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <_sbrk+0x5c>)
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <_sbrk+0x60>)
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a4:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <_sbrk+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <_sbrk+0x64>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <_sbrk+0x68>)
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c0:	f004 f95c 	bl	800797c <__errno>
 80036c4:	0003      	movs	r3, r0
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	425b      	negs	r3, r3
 80036ce:	e009      	b.n	80036e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <_sbrk+0x64>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036d6:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	18d2      	adds	r2, r2, r3
 80036de:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <_sbrk+0x64>)
 80036e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b006      	add	sp, #24
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20005000 	.word	0x20005000
 80036f0:	00000400 	.word	0x00000400
 80036f4:	200002cc 	.word	0x200002cc
 80036f8:	20000420 	.word	0x20000420

080036fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003708:	4813      	ldr	r0, [pc, #76]	@ (8003758 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800370a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800370c:	f7ff fff6 	bl	80036fc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003710:	4812      	ldr	r0, [pc, #72]	@ (800375c <LoopForever+0x6>)
    LDR R1, [R0]
 8003712:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003714:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003716:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <LoopForever+0xa>)
    CMP R1, R2
 8003718:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800371a:	d105      	bne.n	8003728 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800371c:	4811      	ldr	r0, [pc, #68]	@ (8003764 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800371e:	4912      	ldr	r1, [pc, #72]	@ (8003768 <LoopForever+0x12>)
    STR R1, [R0]
 8003720:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003722:	4812      	ldr	r0, [pc, #72]	@ (800376c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003724:	4912      	ldr	r1, [pc, #72]	@ (8003770 <LoopForever+0x1a>)
    STR R1, [R0]
 8003726:	6001      	str	r1, [r0, #0]

08003728 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003728:	4812      	ldr	r0, [pc, #72]	@ (8003774 <LoopForever+0x1e>)
  ldr r1, =_edata
 800372a:	4913      	ldr	r1, [pc, #76]	@ (8003778 <LoopForever+0x22>)
  ldr r2, =_sidata
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <LoopForever+0x26>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003740:	4c10      	ldr	r4, [pc, #64]	@ (8003784 <LoopForever+0x2e>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800374e:	f004 f91b 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003752:	f7ff fce7 	bl	8003124 <main>

08003756 <LoopForever>:

LoopForever:
    b LoopForever
 8003756:	e7fe      	b.n	8003756 <LoopForever>
   ldr   r0, =_estack
 8003758:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800375c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003760:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003764:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003768:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800376c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003770:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003778:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800377c:	0800a2ec 	.word	0x0800a2ec
  ldr r2, =_sbss
 8003780:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003784:	20000420 	.word	0x20000420

08003788 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003788:	e7fe      	b.n	8003788 <ADC1_IRQHandler>
	...

0800378c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_Init+0x3c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_Init+0x3c>)
 800379e:	2140      	movs	r1, #64	@ 0x40
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 f811 	bl	80037cc <HAL_InitTick>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e001      	b.n	80037ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037b6:	f7ff fdff 	bl	80033b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	40022000 	.word	0x40022000

080037cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d4:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <HAL_InitTick+0x5c>)
 80037d6:	681c      	ldr	r4, [r3, #0]
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_InitTick+0x60>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	0019      	movs	r1, r3
 80037de:	23fa      	movs	r3, #250	@ 0xfa
 80037e0:	0098      	lsls	r0, r3, #2
 80037e2:	f7fc fcad 	bl	8000140 <__udivsi3>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0019      	movs	r1, r3
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7fc fca8 	bl	8000140 <__udivsi3>
 80037f0:	0003      	movs	r3, r0
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f92f 	bl	8003a56 <HAL_SYSTICK_Config>
 80037f8:	1e03      	subs	r3, r0, #0
 80037fa:	d001      	beq.n	8003800 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00f      	b.n	8003820 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d80b      	bhi.n	800381e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	2301      	movs	r3, #1
 800380a:	425b      	negs	r3, r3
 800380c:	2200      	movs	r2, #0
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f8fc 	bl	8003a0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_InitTick+0x64>)
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b003      	add	sp, #12
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	20000000 	.word	0x20000000
 800382c:	20000008 	.word	0x20000008
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_IncTick+0x1c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	001a      	movs	r2, r3
 800383e:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_IncTick+0x20>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	18d2      	adds	r2, r2, r3
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_IncTick+0x20>)
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	20000008 	.word	0x20000008
 8003854:	200002d0 	.word	0x200002d0

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b02      	ldr	r3, [pc, #8]	@ (8003868 <HAL_GetTick+0x10>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	200002d0 	.word	0x200002d0

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff fff0 	bl	8003858 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3301      	adds	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	001a      	movs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	189b      	adds	r3, r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	f7ff ffe0 	bl	8003858 <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	20000008 	.word	0x20000008

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dfb      	adds	r3, r7, #7
 80038be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80038c6:	d809      	bhi.n	80038dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	001a      	movs	r2, r3
 80038ce:	231f      	movs	r3, #31
 80038d0:	401a      	ands	r2, r3
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <__NVIC_EnableIRQ+0x30>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	4091      	lsls	r1, r2
 80038d8:	000a      	movs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
  }
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	0002      	movs	r2, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80038fc:	d828      	bhi.n	8003950 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038fe:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <__NVIC_SetPriority+0xd4>)
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b25b      	sxtb	r3, r3
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	33c0      	adds	r3, #192	@ 0xc0
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	589b      	ldr	r3, [r3, r2]
 800390e:	1dfa      	adds	r2, r7, #7
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	0011      	movs	r1, r2
 8003914:	2203      	movs	r2, #3
 8003916:	400a      	ands	r2, r1
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	21ff      	movs	r1, #255	@ 0xff
 800391c:	4091      	lsls	r1, r2
 800391e:	000a      	movs	r2, r1
 8003920:	43d2      	mvns	r2, r2
 8003922:	401a      	ands	r2, r3
 8003924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	401a      	ands	r2, r3
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	2303      	movs	r3, #3
 8003936:	4003      	ands	r3, r0
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393c:	481f      	ldr	r0, [pc, #124]	@ (80039bc <__NVIC_SetPriority+0xd4>)
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b25b      	sxtb	r3, r3
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	430a      	orrs	r2, r1
 8003948:	33c0      	adds	r3, #192	@ 0xc0
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800394e:	e031      	b.n	80039b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003950:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <__NVIC_SetPriority+0xd8>)
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0019      	movs	r1, r3
 8003958:	230f      	movs	r3, #15
 800395a:	400b      	ands	r3, r1
 800395c:	3b08      	subs	r3, #8
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3306      	adds	r3, #6
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	3304      	adds	r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1dfa      	adds	r2, r7, #7
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	0011      	movs	r1, r2
 8003970:	2203      	movs	r2, #3
 8003972:	400a      	ands	r2, r1
 8003974:	00d2      	lsls	r2, r2, #3
 8003976:	21ff      	movs	r1, #255	@ 0xff
 8003978:	4091      	lsls	r1, r2
 800397a:	000a      	movs	r2, r1
 800397c:	43d2      	mvns	r2, r2
 800397e:	401a      	ands	r2, r3
 8003980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	22ff      	movs	r2, #255	@ 0xff
 8003988:	401a      	ands	r2, r3
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	0018      	movs	r0, r3
 8003990:	2303      	movs	r3, #3
 8003992:	4003      	ands	r3, r0
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003998:	4809      	ldr	r0, [pc, #36]	@ (80039c0 <__NVIC_SetPriority+0xd8>)
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	001c      	movs	r4, r3
 80039a0:	230f      	movs	r3, #15
 80039a2:	4023      	ands	r3, r4
 80039a4:	3b08      	subs	r3, #8
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	430a      	orrs	r2, r1
 80039aa:	3306      	adds	r3, #6
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	18c3      	adds	r3, r0, r3
 80039b0:	3304      	adds	r3, #4
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b003      	add	sp, #12
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	2380      	movs	r3, #128	@ 0x80
 80039d2:	045b      	lsls	r3, r3, #17
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d301      	bcc.n	80039dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d8:	2301      	movs	r3, #1
 80039da:	e010      	b.n	80039fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <SysTick_Config+0x44>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	3a01      	subs	r2, #1
 80039e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e4:	2301      	movs	r3, #1
 80039e6:	425b      	negs	r3, r3
 80039e8:	2103      	movs	r1, #3
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff7c 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <SysTick_Config+0x44>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <SysTick_Config+0x44>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	210f      	movs	r1, #15
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	1c02      	adds	r2, r0, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	1dfb      	adds	r3, r7, #7
 8003a40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff ff33 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff ffaf 	bl	80039c4 <SysTick_Config>
 8003a66:	0003      	movs	r3, r0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	210f      	movs	r1, #15
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2225      	movs	r2, #37	@ 0x25
 8003a84:	5c9b      	ldrb	r3, [r3, r2]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d006      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e02a      	b.n	8003af0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	210e      	movs	r1, #14
 8003aa6:	438a      	bics	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	221c      	movs	r2, #28
 8003ac0:	401a      	ands	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4091      	lsls	r1, r2
 8003aca:	000a      	movs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2225      	movs	r2, #37	@ 0x25
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2224      	movs	r2, #36	@ 0x24
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	0010      	movs	r0, r2
 8003aee:	4798      	blx	r3
    }
  }
  return status;
 8003af0:	230f      	movs	r3, #15
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b004      	add	sp, #16
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2225      	movs	r2, #37	@ 0x25
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	b2db      	uxtb	r3, r3
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b2e:	e155      	b.n	8003ddc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x30>
 8003b46:	e146      	b.n	8003dd6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d005      	beq.n	8003b60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d130      	bne.n	8003bc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	2201      	movs	r2, #1
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d017      	beq.n	8003bfe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d123      	bne.n	8003c52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	58d3      	ldr	r3, [r2, r3]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2107      	movs	r1, #7
 8003c36:	400b      	ands	r3, r1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	43da      	mvns	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	401a      	ands	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	23c0      	movs	r3, #192	@ 0xc0
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_GPIO_Init+0x17c>
 8003c92:	e0a0      	b.n	8003dd6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c94:	4b57      	ldr	r3, [pc, #348]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c98:	4b56      	ldr	r3, [pc, #344]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca0:	4a55      	ldr	r2, [pc, #340]	@ (8003df8 <HAL_GPIO_Init+0x2e0>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	589b      	ldr	r3, [r3, r2]
 8003cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	0013      	movs	r3, r2
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	23a0      	movs	r3, #160	@ 0xa0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d01f      	beq.n	8003d0e <HAL_GPIO_Init+0x1f6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x1f2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	@ (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a48      	ldr	r2, [pc, #288]	@ (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x1ea>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a47      	ldr	r2, [pc, #284]	@ (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x1e6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a46      	ldr	r2, [pc, #280]	@ (8003e0c <HAL_GPIO_Init+0x2f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x1e2>
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	e00a      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003cfa:	2306      	movs	r3, #6
 8003cfc:	e008      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e006      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d02:	2303      	movs	r3, #3
 8003d04:	e004      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	2103      	movs	r1, #3
 8003d14:	400a      	ands	r2, r1
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d20:	4935      	ldr	r1, [pc, #212]	@ (8003df8 <HAL_GPIO_Init+0x2e0>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	3302      	adds	r3, #2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d2e:	4b38      	ldr	r3, [pc, #224]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43da      	mvns	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	2380      	movs	r3, #128	@ 0x80
 8003d44:	035b      	lsls	r3, r3, #13
 8003d46:	4013      	ands	r3, r2
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d52:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d58:	4b2d      	ldr	r3, [pc, #180]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	43da      	mvns	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	2380      	movs	r3, #128	@ 0x80
 8003d6e:	039b      	lsls	r3, r3, #14
 8003d70:	4013      	ands	r3, r2
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d7c:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003d82:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dac:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	40da      	lsrs	r2, r3
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	d000      	beq.n	8003dea <HAL_GPIO_Init+0x2d2>
 8003de8:	e6a2      	b.n	8003b30 <HAL_GPIO_Init+0x18>
  }
}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b006      	add	sp, #24
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	50000400 	.word	0x50000400
 8003e00:	50000800 	.word	0x50000800
 8003e04:	50000c00 	.word	0x50000c00
 8003e08:	50001000 	.word	0x50001000
 8003e0c:	50001c00 	.word	0x50001c00
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	1dba      	adds	r2, r7, #6
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d008      	beq.n	8003e3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003e2e:	1dba      	adds	r2, r7, #6
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f807 	bl	8003e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	40010400 	.word	0x40010400

08003e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	0002      	movs	r2, r0
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e08f      	b.n	8003f92 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2241      	movs	r2, #65	@ 0x41
 8003e76:	5c9b      	ldrb	r3, [r3, r2]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff faa9 	bl	80033e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2241      	movs	r2, #65	@ 0x41
 8003e92:	2124      	movs	r1, #36	@ 0x24
 8003e94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	493b      	ldr	r1, [pc, #236]	@ (8003f9c <HAL_I2C_Init+0x13c>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4938      	ldr	r1, [pc, #224]	@ (8003fa0 <HAL_I2C_Init+0x140>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d108      	bne.n	8003ede <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0209      	lsls	r1, r1, #8
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	e007      	b.n	8003eee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2184      	movs	r1, #132	@ 0x84
 8003ee8:	0209      	lsls	r1, r1, #8
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d109      	bne.n	8003f0a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	0109      	lsls	r1, r1, #4
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	e007      	b.n	8003f1a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4923      	ldr	r1, [pc, #140]	@ (8003fa4 <HAL_I2C_Init+0x144>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4920      	ldr	r1, [pc, #128]	@ (8003fa8 <HAL_I2C_Init+0x148>)
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	491a      	ldr	r1, [pc, #104]	@ (8003fa0 <HAL_I2C_Init+0x140>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2241      	movs	r2, #65	@ 0x41
 8003f7e:	2120      	movs	r1, #32
 8003f80:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2242      	movs	r2, #66	@ 0x42
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	f0ffffff 	.word	0xf0ffffff
 8003fa0:	ffff7fff 	.word	0xffff7fff
 8003fa4:	fffff7ff 	.word	0xfffff7ff
 8003fa8:	02008000 	.word	0x02008000

08003fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b089      	sub	sp, #36	@ 0x24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	000c      	movs	r4, r1
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	230a      	movs	r3, #10
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	1c22      	adds	r2, r4, #0
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	1c02      	adds	r2, r0, #0
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	1dbb      	adds	r3, r7, #6
 8003fcc:	1c0a      	adds	r2, r1, #0
 8003fce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2241      	movs	r2, #65	@ 0x41
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d000      	beq.n	8003fde <HAL_I2C_Mem_Read+0x32>
 8003fdc:	e110      	b.n	8004200 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_I2C_Mem_Read+0x42>
 8003fe4:	232c      	movs	r3, #44	@ 0x2c
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e103      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2240      	movs	r2, #64	@ 0x40
 8003ffe:	5c9b      	ldrb	r3, [r3, r2]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2C_Mem_Read+0x5c>
 8004004:	2302      	movs	r3, #2
 8004006:	e0fc      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2240      	movs	r2, #64	@ 0x40
 800400c:	2101      	movs	r1, #1
 800400e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004010:	f7ff fc22 	bl	8003858 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	0219      	lsls	r1, r3, #8
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2319      	movs	r3, #25
 8004024:	2201      	movs	r2, #1
 8004026:	f000 ff7f 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0e7      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2241      	movs	r2, #65	@ 0x41
 8004036:	2122      	movs	r1, #34	@ 0x22
 8004038:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2242      	movs	r2, #66	@ 0x42
 800403e:	2140      	movs	r1, #64	@ 0x40
 8004040:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	222c      	movs	r2, #44	@ 0x2c
 8004052:	18ba      	adds	r2, r7, r2
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881c      	ldrh	r4, [r3, #0]
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	230a      	movs	r3, #10
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	8819      	ldrh	r1, [r3, #0]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0023      	movs	r3, r4
 800407a:	f000 fa93 	bl	80045a4 <I2C_RequestMemoryRead>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d005      	beq.n	800408e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2240      	movs	r2, #64	@ 0x40
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0b9      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2bff      	cmp	r3, #255	@ 0xff
 8004096:	d911      	bls.n	80040bc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	2380      	movs	r3, #128	@ 0x80
 80040a6:	045c      	lsls	r4, r3, #17
 80040a8:	230a      	movs	r3, #10
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	8819      	ldrh	r1, [r3, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	4b56      	ldr	r3, [pc, #344]	@ (800420c <HAL_I2C_Mem_Read+0x260>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	0023      	movs	r3, r4
 80040b6:	f001 f911 	bl	80052dc <I2C_TransferConfig>
 80040ba:	e012      	b.n	80040e2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	049c      	lsls	r4, r3, #18
 80040d0:	230a      	movs	r3, #10
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	8819      	ldrh	r1, [r3, #0]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	4b4c      	ldr	r3, [pc, #304]	@ (800420c <HAL_I2C_Mem_Read+0x260>)
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	0023      	movs	r3, r4
 80040de:	f001 f8fd 	bl	80052dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	0013      	movs	r3, r2
 80040ec:	2200      	movs	r2, #0
 80040ee:	2104      	movs	r1, #4
 80040f0:	f000 ff1a 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e082      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03a      	beq.n	80041ae <HAL_I2C_Mem_Read+0x202>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d136      	bne.n	80041ae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	0013      	movs	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	f000 feeb 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e053      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	@ 0xff
 8004162:	d911      	bls.n	8004188 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	045c      	lsls	r4, r3, #17
 8004174:	230a      	movs	r3, #10
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	8819      	ldrh	r1, [r3, #0]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0023      	movs	r3, r4
 8004182:	f001 f8ab 	bl	80052dc <I2C_TransferConfig>
 8004186:	e012      	b.n	80041ae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	049c      	lsls	r4, r3, #18
 800419c:	230a      	movs	r3, #10
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	8819      	ldrh	r1, [r3, #0]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	2300      	movs	r3, #0
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	0023      	movs	r3, r4
 80041aa:	f001 f897 	bl	80052dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d194      	bne.n	80040e2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 ff50 	bl	8005064 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2220      	movs	r2, #32
 80041d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	490c      	ldr	r1, [pc, #48]	@ (8004210 <HAL_I2C_Mem_Read+0x264>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2241      	movs	r2, #65	@ 0x41
 80041e8:	2120      	movs	r1, #32
 80041ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2242      	movs	r2, #66	@ 0x42
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b007      	add	sp, #28
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	80002400 	.word	0x80002400
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
  }
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b004      	add	sp, #16
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	001a      	movs	r2, r3
 8004266:	2301      	movs	r3, #1
 8004268:	4013      	ands	r3, r2
 800426a:	d010      	beq.n	800428e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	09db      	lsrs	r3, r3, #7
 8004270:	001a      	movs	r2, r3
 8004272:	2301      	movs	r3, #1
 8004274:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004276:	d00a      	beq.n	800428e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	2201      	movs	r2, #1
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2280      	movs	r2, #128	@ 0x80
 800428a:	0052      	lsls	r2, r2, #1
 800428c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	0a9b      	lsrs	r3, r3, #10
 8004292:	001a      	movs	r2, r3
 8004294:	2301      	movs	r3, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d010      	beq.n	80042bc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	09db      	lsrs	r3, r3, #7
 800429e:	001a      	movs	r2, r3
 80042a0:	2301      	movs	r3, #1
 80042a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042a4:	d00a      	beq.n	80042bc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	2208      	movs	r2, #8
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2280      	movs	r2, #128	@ 0x80
 80042b8:	00d2      	lsls	r2, r2, #3
 80042ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	0a5b      	lsrs	r3, r3, #9
 80042c0:	001a      	movs	r2, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	4013      	ands	r3, r2
 80042c6:	d010      	beq.n	80042ea <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	09db      	lsrs	r3, r3, #7
 80042cc:	001a      	movs	r2, r3
 80042ce:	2301      	movs	r3, #1
 80042d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042d2:	d00a      	beq.n	80042ea <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	2202      	movs	r2, #2
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	220b      	movs	r2, #11
 80042f4:	4013      	ands	r3, r2
 80042f6:	d005      	beq.n	8004304 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fca6 	bl	8004c50 <I2C_ITError>
  }
}
 8004304:	46c0      	nop			@ (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b006      	add	sp, #24
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004324:	46c0      	nop			@ (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	0008      	movs	r0, r1
 8004336:	0011      	movs	r1, r2
 8004338:	1cfb      	adds	r3, r7, #3
 800433a:	1c02      	adds	r2, r0, #0
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	003b      	movs	r3, r7
 8004340:	1c0a      	adds	r2, r1, #0
 8004342:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004344:	46c0      	nop			@ (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2240      	movs	r2, #64	@ 0x40
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <I2C_Slave_ISR_IT+0x24>
 800439c:	2302      	movs	r3, #2
 800439e:	e0fb      	b.n	8004598 <I2C_Slave_ISR_IT+0x21c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2240      	movs	r2, #64	@ 0x40
 80043a4:	2101      	movs	r1, #1
 80043a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	001a      	movs	r2, r3
 80043ae:	2301      	movs	r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d00c      	beq.n	80043ce <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	001a      	movs	r2, r3
 80043ba:	2301      	movs	r3, #1
 80043bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043be:	d006      	beq.n	80043ce <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	0011      	movs	r1, r2
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 fa58 	bl	800487c <I2C_ITSlaveCplt>
 80043cc:	e0df      	b.n	800458e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	001a      	movs	r2, r3
 80043d4:	2301      	movs	r3, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	d054      	beq.n	8004484 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	001a      	movs	r2, r3
 80043e0:	2301      	movs	r3, #1
 80043e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043e4:	d04e      	beq.n	8004484 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d12d      	bne.n	800444c <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2241      	movs	r2, #65	@ 0x41
 80043f4:	5c9b      	ldrb	r3, [r3, r2]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b28      	cmp	r3, #40	@ 0x28
 80043fa:	d10b      	bne.n	8004414 <I2C_Slave_ISR_IT+0x98>
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	049b      	lsls	r3, r3, #18
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f000 fbc5 	bl	8004b9c <I2C_ITListenCplt>
 8004412:	e036      	b.n	8004482 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2241      	movs	r2, #65	@ 0x41
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b29      	cmp	r3, #41	@ 0x29
 800441e:	d110      	bne.n	8004442 <I2C_Slave_ISR_IT+0xc6>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4a5f      	ldr	r2, [pc, #380]	@ (80045a0 <I2C_Slave_ISR_IT+0x224>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00c      	beq.n	8004442 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 fd37 	bl	8004ea6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 f9b8 	bl	80047b0 <I2C_ITSlaveSeqCplt>
 8004440:	e01f      	b.n	8004482 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2210      	movs	r2, #16
 8004448:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800444a:	e09d      	b.n	8004588 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	2204      	movs	r2, #4
 800445a:	431a      	orrs	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <I2C_Slave_ISR_IT+0xf6>
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	045b      	lsls	r3, r3, #17
 800446c:	429a      	cmp	r2, r3
 800446e:	d000      	beq.n	8004472 <I2C_Slave_ISR_IT+0xf6>
 8004470:	e08a      	b.n	8004588 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	0011      	movs	r1, r2
 800447a:	0018      	movs	r0, r3
 800447c:	f000 fbe8 	bl	8004c50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004480:	e082      	b.n	8004588 <I2C_Slave_ISR_IT+0x20c>
 8004482:	e081      	b.n	8004588 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	001a      	movs	r2, r3
 800448a:	2301      	movs	r3, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d031      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	001a      	movs	r2, r3
 8004496:	2301      	movs	r3, #1
 8004498:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800449a:	d02b      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d154      	bne.n	800458c <I2C_Slave_ISR_IT+0x210>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <I2C_Slave_ISR_IT+0x224>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d050      	beq.n	800458c <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f95f 	bl	80047b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80044f2:	e04b      	b.n	800458c <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	08db      	lsrs	r3, r3, #3
 80044f8:	001a      	movs	r2, r3
 80044fa:	2301      	movs	r3, #1
 80044fc:	4013      	ands	r3, r2
 80044fe:	d00c      	beq.n	800451a <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	08db      	lsrs	r3, r3, #3
 8004504:	001a      	movs	r2, r3
 8004506:	2301      	movs	r3, #1
 8004508:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800450a:	d006      	beq.n	800451a <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0011      	movs	r1, r2
 8004512:	0018      	movs	r0, r3
 8004514:	f000 f8a8 	bl	8004668 <I2C_ITAddrCplt>
 8004518:	e039      	b.n	800458e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	001a      	movs	r2, r3
 8004520:	2301      	movs	r3, #1
 8004522:	4013      	ands	r3, r2
 8004524:	d033      	beq.n	800458e <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	001a      	movs	r2, r3
 800452c:	2301      	movs	r3, #1
 800452e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004530:	d02d      	beq.n	800458e <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d018      	beq.n	800456e <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800456c:	e00f      	b.n	800458e <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	045b      	lsls	r3, r3, #17
 8004574:	429a      	cmp	r2, r3
 8004576:	d002      	beq.n	800457e <I2C_Slave_ISR_IT+0x202>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f915 	bl	80047b0 <I2C_ITSlaveSeqCplt>
 8004586:	e002      	b.n	800458e <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8004588:	46c0      	nop			@ (mov r8, r8)
 800458a:	e000      	b.n	800458e <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 800458c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2240      	movs	r2, #64	@ 0x40
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b006      	add	sp, #24
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	ffff0000 	.word	0xffff0000

080045a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	000c      	movs	r4, r1
 80045ae:	0010      	movs	r0, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	250a      	movs	r5, #10
 80045b4:	197b      	adds	r3, r7, r5
 80045b6:	1c22      	adds	r2, r4, #0
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	2308      	movs	r3, #8
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	1dbb      	adds	r3, r7, #6
 80045c4:	1c0a      	adds	r2, r1, #0
 80045c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	197b      	adds	r3, r7, r5
 80045d0:	8819      	ldrh	r1, [r3, #0]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	4b23      	ldr	r3, [pc, #140]	@ (8004664 <I2C_RequestMemoryRead+0xc0>)
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	f000 fe7f 	bl	80052dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 fcf7 	bl	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e033      	b.n	800465a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fa:	2308      	movs	r3, #8
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	629a      	str	r2, [r3, #40]	@ 0x28
 8004608:	e019      	b.n	800463e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800460a:	2308      	movs	r3, #8
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b29b      	uxth	r3, r3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461e:	6a39      	ldr	r1, [r7, #32]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 fcd8 	bl	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d001      	beq.n	8004630 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e014      	b.n	800465a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004630:	2308      	movs	r3, #8
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	0013      	movs	r3, r2
 8004648:	2200      	movs	r2, #0
 800464a:	2140      	movs	r1, #64	@ 0x40
 800464c:	f000 fc6c 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b004      	add	sp, #16
 8004660:	bdb0      	pop	{r4, r5, r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	80002000 	.word	0x80002000

08004668 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2241      	movs	r2, #65	@ 0x41
 8004676:	5c9b      	ldrb	r3, [r3, r2]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	001a      	movs	r2, r3
 800467c:	2328      	movs	r3, #40	@ 0x28
 800467e:	4013      	ands	r3, r2
 8004680:	2b28      	cmp	r3, #40	@ 0x28
 8004682:	d000      	beq.n	8004686 <I2C_ITAddrCplt+0x1e>
 8004684:	e088      	b.n	8004798 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	b2da      	uxtb	r2, r3
 8004690:	250f      	movs	r5, #15
 8004692:	197b      	adds	r3, r7, r5
 8004694:	2101      	movs	r1, #1
 8004696:	400a      	ands	r2, r1
 8004698:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	200c      	movs	r0, #12
 80046a6:	183b      	adds	r3, r7, r0
 80046a8:	21fe      	movs	r1, #254	@ 0xfe
 80046aa:	400a      	ands	r2, r1
 80046ac:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	240a      	movs	r4, #10
 80046b8:	193b      	adds	r3, r7, r4
 80046ba:	0592      	lsls	r2, r2, #22
 80046bc:	0d92      	lsrs	r2, r2, #22
 80046be:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	2308      	movs	r3, #8
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	21fe      	movs	r1, #254	@ 0xfe
 80046ce:	400a      	ands	r2, r1
 80046d0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d148      	bne.n	800476c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80046da:	0021      	movs	r1, r4
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	09db      	lsrs	r3, r3, #7
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	4053      	eors	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	001a      	movs	r2, r3
 80046ee:	2306      	movs	r3, #6
 80046f0:	4013      	ands	r3, r2
 80046f2:	d120      	bne.n	8004736 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80046f4:	183b      	adds	r3, r7, r0
 80046f6:	187a      	adds	r2, r7, r1
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470a:	2b02      	cmp	r3, #2
 800470c:	d14c      	bne.n	80047a8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2240      	movs	r2, #64	@ 0x40
 8004720:	2100      	movs	r1, #0
 8004722:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004724:	183b      	adds	r3, r7, r0
 8004726:	881a      	ldrh	r2, [r3, #0]
 8004728:	197b      	adds	r3, r7, r5
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff fdfc 	bl	800432c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004734:	e038      	b.n	80047a8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004736:	240c      	movs	r4, #12
 8004738:	193b      	adds	r3, r7, r4
 800473a:	2208      	movs	r2, #8
 800473c:	18ba      	adds	r2, r7, r2
 800473e:	8812      	ldrh	r2, [r2, #0]
 8004740:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fe00 	bl	8005350 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2240      	movs	r2, #64	@ 0x40
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004758:	193b      	adds	r3, r7, r4
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	230f      	movs	r3, #15
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	7819      	ldrb	r1, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff fde1 	bl	800432c <HAL_I2C_AddrCallback>
}
 800476a:	e01d      	b.n	80047a8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f000 fdeb 	bl	8005350 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2240      	movs	r2, #64	@ 0x40
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004782:	230c      	movs	r3, #12
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	230f      	movs	r3, #15
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	7819      	ldrb	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f7ff fdcb 	bl	800432c <HAL_I2C_AddrCallback>
}
 8004796:	e007      	b.n	80047a8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2208      	movs	r2, #8
 800479e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	@ 0x40
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]
}
 80047a8:	46c0      	nop			@ (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bdb0      	pop	{r4, r5, r7, pc}

080047b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2242      	movs	r2, #66	@ 0x42
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	0b9b      	lsrs	r3, r3, #14
 80047cc:	001a      	movs	r2, r3
 80047ce:	2301      	movs	r3, #1
 80047d0:	4013      	ands	r3, r2
 80047d2:	d008      	beq.n	80047e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4925      	ldr	r1, [pc, #148]	@ (8004874 <I2C_ITSlaveSeqCplt+0xc4>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e00d      	b.n	8004802 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	0bdb      	lsrs	r3, r3, #15
 80047ea:	001a      	movs	r2, r3
 80047ec:	2301      	movs	r3, #1
 80047ee:	4013      	ands	r3, r2
 80047f0:	d007      	beq.n	8004802 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	491e      	ldr	r1, [pc, #120]	@ (8004878 <I2C_ITSlaveSeqCplt+0xc8>)
 80047fe:	400a      	ands	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2241      	movs	r2, #65	@ 0x41
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b29      	cmp	r3, #41	@ 0x29
 800480c:	d114      	bne.n	8004838 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2241      	movs	r2, #65	@ 0x41
 8004812:	2128      	movs	r1, #40	@ 0x28
 8004814:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2221      	movs	r2, #33	@ 0x21
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2101      	movs	r1, #1
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fd95 	bl	8005350 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2240      	movs	r2, #64	@ 0x40
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff fd6b 	bl	800430c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004836:	e019      	b.n	800486c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2241      	movs	r2, #65	@ 0x41
 800483c:	5c9b      	ldrb	r3, [r3, r2]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b2a      	cmp	r3, #42	@ 0x2a
 8004842:	d113      	bne.n	800486c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2241      	movs	r2, #65	@ 0x41
 8004848:	2128      	movs	r1, #40	@ 0x28
 800484a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2222      	movs	r2, #34	@ 0x22
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2102      	movs	r1, #2
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fd7a 	bl	8005350 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2240      	movs	r2, #64	@ 0x40
 8004860:	2100      	movs	r1, #0
 8004862:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff fd58 	bl	800431c <HAL_I2C_SlaveRxCpltCallback>
}
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b004      	add	sp, #16
 8004872:	bd80      	pop	{r7, pc}
 8004874:	ffffbfff 	.word	0xffffbfff
 8004878:	ffff7fff 	.word	0xffff7fff

0800487c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004898:	200b      	movs	r0, #11
 800489a:	183b      	adds	r3, r7, r0
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	2141      	movs	r1, #65	@ 0x41
 80048a0:	5c52      	ldrb	r2, [r2, r1]
 80048a2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2220      	movs	r2, #32
 80048aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048ac:	183b      	adds	r3, r7, r0
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b21      	cmp	r3, #33	@ 0x21
 80048b2:	d003      	beq.n	80048bc <I2C_ITSlaveCplt+0x40>
 80048b4:	183b      	adds	r3, r7, r0
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b29      	cmp	r3, #41	@ 0x29
 80048ba:	d109      	bne.n	80048d0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80048bc:	4ab0      	ldr	r2, [pc, #704]	@ (8004b80 <I2C_ITSlaveCplt+0x304>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0011      	movs	r1, r2
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fd44 	bl	8005350 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2221      	movs	r2, #33	@ 0x21
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80048ce:	e020      	b.n	8004912 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048d0:	220b      	movs	r2, #11
 80048d2:	18bb      	adds	r3, r7, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b22      	cmp	r3, #34	@ 0x22
 80048d8:	d003      	beq.n	80048e2 <I2C_ITSlaveCplt+0x66>
 80048da:	18bb      	adds	r3, r7, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e0:	d109      	bne.n	80048f6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80048e2:	4aa8      	ldr	r2, [pc, #672]	@ (8004b84 <I2C_ITSlaveCplt+0x308>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0011      	movs	r1, r2
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 fd31 	bl	8005350 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2222      	movs	r2, #34	@ 0x22
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048f4:	e00d      	b.n	8004912 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80048f6:	230b      	movs	r3, #11
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b28      	cmp	r3, #40	@ 0x28
 80048fe:	d108      	bne.n	8004912 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004900:	4aa1      	ldr	r2, [pc, #644]	@ (8004b88 <I2C_ITSlaveCplt+0x30c>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fd22 	bl	8005350 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2180      	movs	r1, #128	@ 0x80
 800491e:	0209      	lsls	r1, r1, #8
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4997      	ldr	r1, [pc, #604]	@ (8004b8c <I2C_ITSlaveCplt+0x310>)
 8004930:	400a      	ands	r2, r1
 8004932:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 fab5 	bl	8004ea6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	0b9b      	lsrs	r3, r3, #14
 8004940:	001a      	movs	r2, r3
 8004942:	2301      	movs	r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d013      	beq.n	8004970 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	498f      	ldr	r1, [pc, #572]	@ (8004b90 <I2C_ITSlaveCplt+0x314>)
 8004954:	400a      	ands	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800496e:	e018      	b.n	80049a2 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	0bdb      	lsrs	r3, r3, #15
 8004974:	001a      	movs	r2, r3
 8004976:	2301      	movs	r3, #1
 8004978:	4013      	ands	r3, r2
 800497a:	d012      	beq.n	80049a2 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4983      	ldr	r1, [pc, #524]	@ (8004b94 <I2C_ITSlaveCplt+0x318>)
 8004988:	400a      	ands	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	001a      	movs	r2, r3
 80049a8:	2301      	movs	r3, #1
 80049aa:	4013      	ands	r3, r2
 80049ac:	d020      	beq.n	80049f0 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2204      	movs	r2, #4
 80049b2:	4393      	bics	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	2204      	movs	r2, #4
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d051      	beq.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	001a      	movs	r2, r3
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a1c:	d04b      	beq.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d12d      	bne.n	8004a84 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2241      	movs	r2, #65	@ 0x41
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b28      	cmp	r3, #40	@ 0x28
 8004a32:	d10b      	bne.n	8004a4c <I2C_ITSlaveCplt+0x1d0>
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d106      	bne.n	8004a4c <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0011      	movs	r1, r2
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 f8a9 	bl	8004b9c <I2C_ITListenCplt>
 8004a4a:	e034      	b.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2241      	movs	r2, #65	@ 0x41
 8004a50:	5c9b      	ldrb	r3, [r3, r2]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b29      	cmp	r3, #41	@ 0x29
 8004a56:	d110      	bne.n	8004a7a <I2C_ITSlaveCplt+0x1fe>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a4f      	ldr	r2, [pc, #316]	@ (8004b98 <I2C_ITSlaveCplt+0x31c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00c      	beq.n	8004a7a <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2210      	movs	r2, #16
 8004a66:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fa1b 	bl	8004ea6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7ff fe9c 	bl	80047b0 <I2C_ITSlaveSeqCplt>
 8004a78:	e01d      	b.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	61da      	str	r2, [r3, #28]
 8004a82:	e018      	b.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a90:	2204      	movs	r2, #4
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <I2C_ITSlaveCplt+0x22c>
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	045b      	lsls	r3, r3, #17
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d106      	bne.n	8004ab6 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	0011      	movs	r1, r2
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f8cd 	bl	8004c50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2242      	movs	r2, #66	@ 0x42
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 f8bb 	bl	8004c50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2241      	movs	r2, #65	@ 0x41
 8004ade:	5c9b      	ldrb	r3, [r3, r2]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b28      	cmp	r3, #40	@ 0x28
 8004ae4:	d147      	bne.n	8004b76 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0011      	movs	r1, r2
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 f855 	bl	8004b9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af2:	e040      	b.n	8004b76 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <I2C_ITSlaveCplt+0x31c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d016      	beq.n	8004b2c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fe55 	bl	80047b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a23      	ldr	r2, [pc, #140]	@ (8004b98 <I2C_ITSlaveCplt+0x31c>)
 8004b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2241      	movs	r2, #65	@ 0x41
 8004b10:	2120      	movs	r1, #32
 8004b12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2240      	movs	r2, #64	@ 0x40
 8004b1e:	2100      	movs	r1, #0
 8004b20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff fc11 	bl	800434c <HAL_I2C_ListenCpltCallback>
}
 8004b2a:	e024      	b.n	8004b76 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2241      	movs	r2, #65	@ 0x41
 8004b30:	5c9b      	ldrb	r3, [r3, r2]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b22      	cmp	r3, #34	@ 0x22
 8004b36:	d10f      	bne.n	8004b58 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2241      	movs	r2, #65	@ 0x41
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7ff fbe3 	bl	800431c <HAL_I2C_SlaveRxCpltCallback>
}
 8004b56:	e00e      	b.n	8004b76 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2241      	movs	r2, #65	@ 0x41
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	@ 0x40
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff fbcb 	bl	800430c <HAL_I2C_SlaveTxCpltCallback>
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b006      	add	sp, #24
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	00008001 	.word	0x00008001
 8004b84:	00008002 	.word	0x00008002
 8004b88:	00008003 	.word	0x00008003
 8004b8c:	fe00e800 	.word	0xfe00e800
 8004b90:	ffffbfff 	.word	0xffffbfff
 8004b94:	ffff7fff 	.word	0xffff7fff
 8004b98:	ffff0000 	.word	0xffff0000

08004b9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a27      	ldr	r2, [pc, #156]	@ (8004c48 <I2C_ITListenCplt+0xac>)
 8004baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2241      	movs	r2, #65	@ 0x41
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2242      	movs	r2, #66	@ 0x42
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	001a      	movs	r2, r3
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d012      	beq.n	8004c1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	2204      	movs	r2, #4
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c4c <I2C_ITListenCplt+0xb0>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0011      	movs	r1, r2
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 fb95 	bl	8005350 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fb87 	bl	800434c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	ffff0000 	.word	0xffff0000
 8004c4c:	00008003 	.word	0x00008003

08004c50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c5a:	200f      	movs	r0, #15
 8004c5c:	183b      	adds	r3, r7, r0
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	2141      	movs	r1, #65	@ 0x41
 8004c62:	5c52      	ldrb	r2, [r2, r1]
 8004c64:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2242      	movs	r2, #66	@ 0x42
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a72      	ldr	r2, [pc, #456]	@ (8004e3c <I2C_ITError+0x1ec>)
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c86:	183b      	adds	r3, r7, r0
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b28      	cmp	r3, #40	@ 0x28
 8004c8c:	d007      	beq.n	8004c9e <I2C_ITError+0x4e>
 8004c8e:	183b      	adds	r3, r7, r0
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b29      	cmp	r3, #41	@ 0x29
 8004c94:	d003      	beq.n	8004c9e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c96:	183b      	adds	r3, r7, r0
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9c:	d10c      	bne.n	8004cb8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 fb54 	bl	8005350 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2241      	movs	r2, #65	@ 0x41
 8004cac:	2128      	movs	r1, #40	@ 0x28
 8004cae:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a63      	ldr	r2, [pc, #396]	@ (8004e40 <I2C_ITError+0x1f0>)
 8004cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cb6:	e032      	b.n	8004d1e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cb8:	4a62      	ldr	r2, [pc, #392]	@ (8004e44 <I2C_ITError+0x1f4>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0011      	movs	r1, r2
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 fb46 	bl	8005350 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f8ed 	bl	8004ea6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2241      	movs	r2, #65	@ 0x41
 8004cd0:	5c9b      	ldrb	r3, [r3, r2]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b60      	cmp	r3, #96	@ 0x60
 8004cd6:	d01f      	beq.n	8004d18 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2241      	movs	r2, #65	@ 0x41
 8004cdc:	2120      	movs	r1, #32
 8004cde:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d114      	bne.n	8004d18 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d109      	bne.n	8004d10 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	2204      	movs	r2, #4
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2220      	movs	r2, #32
 8004d16:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03b      	beq.n	8004da4 <I2C_ITError+0x154>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b11      	cmp	r3, #17
 8004d30:	d002      	beq.n	8004d38 <I2C_ITError+0xe8>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b21      	cmp	r3, #33	@ 0x21
 8004d36:	d135      	bne.n	8004da4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	01db      	lsls	r3, r3, #7
 8004d42:	401a      	ands	r2, r3
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	01db      	lsls	r3, r3, #7
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d107      	bne.n	8004d5c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	493c      	ldr	r1, [pc, #240]	@ (8004e48 <I2C_ITError+0x1f8>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fe fecc 	bl	8003afe <HAL_DMA_GetState>
 8004d66:	0003      	movs	r3, r0
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d016      	beq.n	8004d9a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	4a36      	ldr	r2, [pc, #216]	@ (8004e4c <I2C_ITError+0x1fc>)
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2240      	movs	r2, #64	@ 0x40
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7fe fe75 	bl	8003a70 <HAL_DMA_Abort_IT>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d051      	beq.n	8004e2e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	0018      	movs	r0, r3
 8004d96:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d98:	e049      	b.n	8004e2e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 f859 	bl	8004e54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004da2:	e044      	b.n	8004e2e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03b      	beq.n	8004e24 <I2C_ITError+0x1d4>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b12      	cmp	r3, #18
 8004db0:	d002      	beq.n	8004db8 <I2C_ITError+0x168>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b22      	cmp	r3, #34	@ 0x22
 8004db6:	d135      	bne.n	8004e24 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d107      	bne.n	8004ddc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	491e      	ldr	r1, [pc, #120]	@ (8004e50 <I2C_ITError+0x200>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7fe fe8c 	bl	8003afe <HAL_DMA_GetState>
 8004de6:	0003      	movs	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d016      	beq.n	8004e1a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <I2C_ITError+0x1fc>)
 8004df2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	@ 0x40
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7fe fe35 	bl	8003a70 <HAL_DMA_Abort_IT>
 8004e06:	1e03      	subs	r3, r0, #0
 8004e08:	d013      	beq.n	8004e32 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e14:	0018      	movs	r0, r3
 8004e16:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e18:	e00b      	b.n	8004e32 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f819 	bl	8004e54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e22:	e006      	b.n	8004e32 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 f814 	bl	8004e54 <I2C_TreatErrorCallback>
  }
}
 8004e2c:	e002      	b.n	8004e34 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	e000      	b.n	8004e34 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e32:	46c0      	nop			@ (mov r8, r8)
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	ffff0000 	.word	0xffff0000
 8004e40:	0800437d 	.word	0x0800437d
 8004e44:	00008003 	.word	0x00008003
 8004e48:	ffffbfff 	.word	0xffffbfff
 8004e4c:	08004eeb 	.word	0x08004eeb
 8004e50:	ffff7fff 	.word	0xffff7fff

08004e54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2241      	movs	r2, #65	@ 0x41
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b60      	cmp	r3, #96	@ 0x60
 8004e66:	d10f      	bne.n	8004e88 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2241      	movs	r2, #65	@ 0x41
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2240      	movs	r2, #64	@ 0x40
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7ff fa73 	bl	800436c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e86:	e00a      	b.n	8004e9e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2240      	movs	r2, #64	@ 0x40
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7ff fa5f 	bl	800435c <HAL_I2C_ErrorCallback>
}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b002      	add	sp, #8
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d103      	bne.n	8004ec4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d007      	beq.n	8004ee2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699a      	ldr	r2, [r3, #24]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2101      	movs	r1, #1
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	619a      	str	r2, [r3, #24]
  }
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b002      	add	sp, #8
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	2200      	movs	r2, #0
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f14:	2200      	movs	r2, #0
 8004f16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7ff ff9a 	bl	8004e54 <I2C_TreatErrorCallback>
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f38:	e03a      	b.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f000 f8d3 	bl	80050ec <I2C_IsErrorOccurred>
 8004f46:	1e03      	subs	r3, r0, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e040      	b.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	d02d      	beq.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fc80 	bl	8003858 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d122      	bne.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	425a      	negs	r2, r3
 8004f7a:	4153      	adcs	r3, r2
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	001a      	movs	r2, r3
 8004f80:	1dfb      	adds	r3, r7, #7
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d113      	bne.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2241      	movs	r2, #65	@ 0x41
 8004f98:	2120      	movs	r1, #32
 8004f9a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2242      	movs	r2, #66	@ 0x42
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2240      	movs	r2, #64	@ 0x40
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00f      	b.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	425a      	negs	r2, r3
 8004fc0:	4153      	adcs	r3, r2
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d0b5      	beq.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b004      	add	sp, #16
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fe4:	e032      	b.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f000 f87d 	bl	80050ec <I2C_IsErrorOccurred>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e030      	b.n	800505c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	d025      	beq.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005000:	f7fe fc2a 	bl	8003858 <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11a      	bne.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2202      	movs	r2, #2
 800501e:	4013      	ands	r3, r2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d013      	beq.n	800504c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	2220      	movs	r2, #32
 800502a:	431a      	orrs	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2241      	movs	r2, #65	@ 0x41
 8005034:	2120      	movs	r1, #32
 8005036:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2242      	movs	r2, #66	@ 0x42
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2240      	movs	r2, #64	@ 0x40
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e007      	b.n	800505c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2202      	movs	r2, #2
 8005054:	4013      	ands	r3, r2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d1c5      	bne.n	8004fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005070:	e02f      	b.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 f837 	bl	80050ec <I2C_IsErrorOccurred>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e02d      	b.n	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fe fbe7 	bl	8003858 <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11a      	bne.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2220      	movs	r2, #32
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d013      	beq.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	2220      	movs	r2, #32
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2241      	movs	r2, #65	@ 0x41
 80050ba:	2120      	movs	r1, #32
 80050bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2242      	movs	r2, #66	@ 0x42
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e007      	b.n	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2220      	movs	r2, #32
 80050da:	4013      	ands	r3, r2
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d1c8      	bne.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	@ 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2327      	movs	r3, #39	@ 0x27
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2210      	movs	r2, #16
 8005114:	4013      	ands	r3, r2
 8005116:	d100      	bne.n	800511a <I2C_IsErrorOccurred+0x2e>
 8005118:	e079      	b.n	800520e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2210      	movs	r2, #16
 8005120:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005122:	e057      	b.n	80051d4 <I2C_IsErrorOccurred+0xe8>
 8005124:	2227      	movs	r2, #39	@ 0x27
 8005126:	18bb      	adds	r3, r7, r2
 8005128:	18ba      	adds	r2, r7, r2
 800512a:	7812      	ldrb	r2, [r2, #0]
 800512c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3301      	adds	r3, #1
 8005132:	d04f      	beq.n	80051d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005134:	f7fe fb90 	bl	8003858 <HAL_GetTick>
 8005138:	0002      	movs	r2, r0
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <I2C_IsErrorOccurred+0x5e>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d144      	bne.n	80051d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	01db      	lsls	r3, r3, #7
 8005154:	4013      	ands	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005158:	2013      	movs	r0, #19
 800515a:	183b      	adds	r3, r7, r0
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	2142      	movs	r1, #66	@ 0x42
 8005160:	5c52      	ldrb	r2, [r2, r1]
 8005162:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	401a      	ands	r2, r3
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	429a      	cmp	r2, r3
 8005176:	d126      	bne.n	80051c6 <I2C_IsErrorOccurred+0xda>
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	01db      	lsls	r3, r3, #7
 800517e:	429a      	cmp	r2, r3
 8005180:	d021      	beq.n	80051c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005182:	183b      	adds	r3, r7, r0
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b20      	cmp	r3, #32
 8005188:	d01d      	beq.n	80051c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2180      	movs	r1, #128	@ 0x80
 8005196:	01c9      	lsls	r1, r1, #7
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800519c:	f7fe fb5c 	bl	8003858 <HAL_GetTick>
 80051a0:	0003      	movs	r3, r0
 80051a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a4:	e00f      	b.n	80051c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051a6:	f7fe fb57 	bl	8003858 <HAL_GetTick>
 80051aa:	0002      	movs	r2, r0
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b19      	cmp	r3, #25
 80051b2:	d908      	bls.n	80051c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2220      	movs	r2, #32
 80051b8:	4313      	orrs	r3, r2
 80051ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051bc:	2327      	movs	r3, #39	@ 0x27
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]

              break;
 80051c4:	e006      	b.n	80051d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2220      	movs	r2, #32
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d1e8      	bne.n	80051a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2220      	movs	r2, #32
 80051dc:	4013      	ands	r3, r2
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d004      	beq.n	80051ec <I2C_IsErrorOccurred+0x100>
 80051e2:	2327      	movs	r3, #39	@ 0x27
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d09b      	beq.n	8005124 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051ec:	2327      	movs	r3, #39	@ 0x27
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2204      	movs	r2, #4
 8005202:	4313      	orrs	r3, r2
 8005204:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005206:	2327      	movs	r3, #39	@ 0x27
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4013      	ands	r3, r2
 800521e:	d00c      	beq.n	800523a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2201      	movs	r2, #1
 8005224:	4313      	orrs	r3, r2
 8005226:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2280      	movs	r2, #128	@ 0x80
 800522e:	0052      	lsls	r2, r2, #1
 8005230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005232:	2327      	movs	r3, #39	@ 0x27
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4013      	ands	r3, r2
 8005242:	d00c      	beq.n	800525e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2208      	movs	r2, #8
 8005248:	4313      	orrs	r3, r2
 800524a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2280      	movs	r2, #128	@ 0x80
 8005252:	00d2      	lsls	r2, r2, #3
 8005254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005256:	2327      	movs	r3, #39	@ 0x27
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d00c      	beq.n	8005282 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2202      	movs	r2, #2
 800526c:	4313      	orrs	r3, r2
 800526e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2280      	movs	r2, #128	@ 0x80
 8005276:	0092      	lsls	r2, r2, #2
 8005278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800527a:	2327      	movs	r3, #39	@ 0x27
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005282:	2327      	movs	r3, #39	@ 0x27
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01d      	beq.n	80052c8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff fe09 	bl	8004ea6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	490e      	ldr	r1, [pc, #56]	@ (80052d8 <I2C_IsErrorOccurred+0x1ec>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2241      	movs	r2, #65	@ 0x41
 80052b4:	2120      	movs	r1, #32
 80052b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2242      	movs	r2, #66	@ 0x42
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	@ 0x40
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80052c8:	2327      	movs	r3, #39	@ 0x27
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	781b      	ldrb	r3, [r3, #0]
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b00a      	add	sp, #40	@ 0x28
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	fe00e800 	.word	0xfe00e800

080052dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	0008      	movs	r0, r1
 80052e6:	0011      	movs	r1, r2
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	240a      	movs	r4, #10
 80052ec:	193b      	adds	r3, r7, r4
 80052ee:	1c02      	adds	r2, r0, #0
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	2009      	movs	r0, #9
 80052f4:	183b      	adds	r3, r7, r0
 80052f6:	1c0a      	adds	r2, r1, #0
 80052f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	059b      	lsls	r3, r3, #22
 8005300:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005302:	183b      	adds	r3, r7, r0
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	0419      	lsls	r1, r3, #16
 8005308:	23ff      	movs	r3, #255	@ 0xff
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800530e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	4313      	orrs	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005326:	0d51      	lsrs	r1, r2, #21
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	00d2      	lsls	r2, r2, #3
 800532c:	400a      	ands	r2, r1
 800532e:	4907      	ldr	r1, [pc, #28]	@ (800534c <I2C_TransferConfig+0x70>)
 8005330:	430a      	orrs	r2, r1
 8005332:	43d2      	mvns	r2, r2
 8005334:	401a      	ands	r2, r3
 8005336:	0011      	movs	r1, r2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b007      	add	sp, #28
 8005348:	bd90      	pop	{r4, r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	03ff63ff 	.word	0x03ff63ff

08005350 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	000a      	movs	r2, r1
 800535a:	1cbb      	adds	r3, r7, #2
 800535c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005362:	1cbb      	adds	r3, r7, #2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	4013      	ands	r3, r2
 800536a:	d010      	beq.n	800538e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2242      	movs	r2, #66	@ 0x42
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2241      	movs	r2, #65	@ 0x41
 8005378:	5c9b      	ldrb	r3, [r3, r2]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	001a      	movs	r2, r3
 800537e:	2328      	movs	r3, #40	@ 0x28
 8005380:	4013      	ands	r3, r2
 8005382:	2b28      	cmp	r3, #40	@ 0x28
 8005384:	d003      	beq.n	800538e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	22b0      	movs	r2, #176	@ 0xb0
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800538e:	1cbb      	adds	r3, r7, #2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	4013      	ands	r3, r2
 8005396:	d010      	beq.n	80053ba <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2244      	movs	r2, #68	@ 0x44
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2241      	movs	r2, #65	@ 0x41
 80053a4:	5c9b      	ldrb	r3, [r3, r2]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	001a      	movs	r2, r3
 80053aa:	2328      	movs	r3, #40	@ 0x28
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b28      	cmp	r3, #40	@ 0x28
 80053b0:	d003      	beq.n	80053ba <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22b0      	movs	r2, #176	@ 0xb0
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053ba:	1cbb      	adds	r3, r7, #2
 80053bc:	2200      	movs	r2, #0
 80053be:	5e9b      	ldrsh	r3, [r3, r2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da03      	bge.n	80053cc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	22b8      	movs	r2, #184	@ 0xb8
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053cc:	1cbb      	adds	r3, r7, #2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d103      	bne.n	80053dc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2290      	movs	r2, #144	@ 0x90
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053dc:	1cbb      	adds	r3, r7, #2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d103      	bne.n	80053ec <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053ec:	1cbb      	adds	r3, r7, #2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d103      	bne.n	80053fc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2240      	movs	r2, #64	@ 0x40
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	43d9      	mvns	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	400a      	ands	r2, r1
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2241      	movs	r2, #65	@ 0x41
 8005426:	5c9b      	ldrb	r3, [r3, r2]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	d138      	bne.n	80054a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2240      	movs	r2, #64	@ 0x40
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005438:	2302      	movs	r3, #2
 800543a:	e032      	b.n	80054a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	2101      	movs	r1, #1
 8005442:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2241      	movs	r2, #65	@ 0x41
 8005448:	2124      	movs	r1, #36	@ 0x24
 800544a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2101      	movs	r1, #1
 8005458:	438a      	bics	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4911      	ldr	r1, [pc, #68]	@ (80054ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005468:	400a      	ands	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2101      	movs	r1, #1
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2241      	movs	r2, #65	@ 0x41
 8005490:	2120      	movs	r1, #32
 8005492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2240      	movs	r2, #64	@ 0x40
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	ffffefff 	.word	0xffffefff

080054b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2241      	movs	r2, #65	@ 0x41
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d139      	bne.n	800553a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2240      	movs	r2, #64	@ 0x40
 80054ca:	5c9b      	ldrb	r3, [r3, r2]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e033      	b.n	800553c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2240      	movs	r2, #64	@ 0x40
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2241      	movs	r2, #65	@ 0x41
 80054e0:	2124      	movs	r1, #36	@ 0x24
 80054e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	438a      	bics	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a11      	ldr	r2, [pc, #68]	@ (8005544 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2101      	movs	r1, #1
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2241      	movs	r2, #65	@ 0x41
 800552a:	2120      	movs	r1, #32
 800552c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e000      	b.n	800553c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b004      	add	sp, #16
 8005542:	bd80      	pop	{r7, pc}
 8005544:	fffff0ff 	.word	0xfffff0ff

08005548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b5b0      	push	{r4, r5, r7, lr}
 800554a:	b08a      	sub	sp, #40	@ 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f000 fb6c 	bl	8005c34 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555c:	4bc8      	ldr	r3, [pc, #800]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	220c      	movs	r2, #12
 8005562:	4013      	ands	r3, r2
 8005564:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005566:	4bc6      	ldr	r3, [pc, #792]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2201      	movs	r2, #1
 8005578:	4013      	ands	r3, r2
 800557a:	d100      	bne.n	800557e <HAL_RCC_OscConfig+0x36>
 800557c:	e07d      	b.n	800567a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d007      	beq.n	8005594 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d112      	bne.n	80055b0 <HAL_RCC_OscConfig+0x68>
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	429a      	cmp	r2, r3
 8005592:	d10d      	bne.n	80055b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	4bba      	ldr	r3, [pc, #744]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	4013      	ands	r3, r2
 800559e:	d100      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5a>
 80055a0:	e06a      	b.n	8005678 <HAL_RCC_OscConfig+0x130>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d166      	bne.n	8005678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f000 fb42 	bl	8005c34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	025b      	lsls	r3, r3, #9
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_OscConfig+0x84>
 80055bc:	4bb0      	ldr	r3, [pc, #704]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4baf      	ldr	r3, [pc, #700]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055c2:	2180      	movs	r1, #128	@ 0x80
 80055c4:	0249      	lsls	r1, r1, #9
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e027      	b.n	800561c <HAL_RCC_OscConfig+0xd4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	23a0      	movs	r3, #160	@ 0xa0
 80055d2:	02db      	lsls	r3, r3, #11
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d10e      	bne.n	80055f6 <HAL_RCC_OscConfig+0xae>
 80055d8:	4ba9      	ldr	r3, [pc, #676]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4ba8      	ldr	r3, [pc, #672]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	02c9      	lsls	r1, r1, #11
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	4ba6      	ldr	r3, [pc, #664]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4ba5      	ldr	r3, [pc, #660]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	0249      	lsls	r1, r1, #9
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e012      	b.n	800561c <HAL_RCC_OscConfig+0xd4>
 80055f6:	4ba2      	ldr	r3, [pc, #648]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4ba1      	ldr	r3, [pc, #644]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80055fc:	49a1      	ldr	r1, [pc, #644]	@ (8005884 <HAL_RCC_OscConfig+0x33c>)
 80055fe:	400a      	ands	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	4b9f      	ldr	r3, [pc, #636]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	025b      	lsls	r3, r3, #9
 800560a:	4013      	ands	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4b9b      	ldr	r3, [pc, #620]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b9a      	ldr	r3, [pc, #616]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005616:	499c      	ldr	r1, [pc, #624]	@ (8005888 <HAL_RCC_OscConfig+0x340>)
 8005618:	400a      	ands	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d014      	beq.n	800564e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fe f918 	bl	8003858 <HAL_GetTick>
 8005628:	0003      	movs	r3, r0
 800562a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800562e:	f7fe f913 	bl	8003858 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b64      	cmp	r3, #100	@ 0x64
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e2f9      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005640:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	4013      	ands	r3, r2
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0xe6>
 800564c:	e015      	b.n	800567a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fe f903 	bl	8003858 <HAL_GetTick>
 8005652:	0003      	movs	r3, r0
 8005654:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005658:	f7fe f8fe 	bl	8003858 <HAL_GetTick>
 800565c:	0002      	movs	r2, r0
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b64      	cmp	r3, #100	@ 0x64
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e2e4      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800566a:	4b85      	ldr	r3, [pc, #532]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	@ 0x80
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	4013      	ands	r3, r2
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x110>
 8005676:	e000      	b.n	800567a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005678:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2202      	movs	r2, #2
 8005680:	4013      	ands	r3, r2
 8005682:	d100      	bne.n	8005686 <HAL_RCC_OscConfig+0x13e>
 8005684:	e099      	b.n	80057ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	2220      	movs	r2, #32
 8005690:	4013      	ands	r3, r2
 8005692:	d009      	beq.n	80056a8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005694:	4b7a      	ldr	r3, [pc, #488]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b79      	ldr	r3, [pc, #484]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800569a:	2120      	movs	r1, #32
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	2220      	movs	r2, #32
 80056a4:	4393      	bics	r3, r2
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d005      	beq.n	80056ba <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b0c      	cmp	r3, #12
 80056b2:	d13e      	bne.n	8005732 <HAL_RCC_OscConfig+0x1ea>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d13b      	bne.n	8005732 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80056ba:	4b71      	ldr	r3, [pc, #452]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2204      	movs	r2, #4
 80056c0:	4013      	ands	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_RCC_OscConfig+0x186>
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e2b2      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4a6e      	ldr	r2, [pc, #440]	@ (800588c <HAL_RCC_OscConfig+0x344>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	0019      	movs	r1, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	021a      	lsls	r2, r3, #8
 80056de:	4b68      	ldr	r3, [pc, #416]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80056e4:	4b66      	ldr	r3, [pc, #408]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2209      	movs	r2, #9
 80056ea:	4393      	bics	r3, r2
 80056ec:	0019      	movs	r1, r3
 80056ee:	4b64      	ldr	r3, [pc, #400]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056f6:	f000 fbeb 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 80056fa:	0001      	movs	r1, r0
 80056fc:	4b60      	ldr	r3, [pc, #384]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	220f      	movs	r2, #15
 8005704:	4013      	ands	r3, r2
 8005706:	4a62      	ldr	r2, [pc, #392]	@ (8005890 <HAL_RCC_OscConfig+0x348>)
 8005708:	5cd3      	ldrb	r3, [r2, r3]
 800570a:	000a      	movs	r2, r1
 800570c:	40da      	lsrs	r2, r3
 800570e:	4b61      	ldr	r3, [pc, #388]	@ (8005894 <HAL_RCC_OscConfig+0x34c>)
 8005710:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005712:	4b61      	ldr	r3, [pc, #388]	@ (8005898 <HAL_RCC_OscConfig+0x350>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2513      	movs	r5, #19
 8005718:	197c      	adds	r4, r7, r5
 800571a:	0018      	movs	r0, r3
 800571c:	f7fe f856 	bl	80037cc <HAL_InitTick>
 8005720:	0003      	movs	r3, r0
 8005722:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005724:	197b      	adds	r3, r7, r5
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d046      	beq.n	80057ba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800572c:	197b      	adds	r3, r7, r5
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	e280      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d027      	beq.n	8005788 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005738:	4b51      	ldr	r3, [pc, #324]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2209      	movs	r2, #9
 800573e:	4393      	bics	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	4b4f      	ldr	r3, [pc, #316]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fe f885 	bl	8003858 <HAL_GetTick>
 800574e:	0003      	movs	r3, r0
 8005750:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005754:	f7fe f880 	bl	8003858 <HAL_GetTick>
 8005758:	0002      	movs	r2, r0
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e266      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005766:	4b46      	ldr	r3, [pc, #280]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2204      	movs	r2, #4
 800576c:	4013      	ands	r3, r2
 800576e:	d0f1      	beq.n	8005754 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005770:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4a45      	ldr	r2, [pc, #276]	@ (800588c <HAL_RCC_OscConfig+0x344>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	4b3f      	ldr	r3, [pc, #252]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e018      	b.n	80057ba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005788:	4b3d      	ldr	r3, [pc, #244]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b3c      	ldr	r3, [pc, #240]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800578e:	2101      	movs	r1, #1
 8005790:	438a      	bics	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fe f860 	bl	8003858 <HAL_GetTick>
 8005798:	0003      	movs	r3, r0
 800579a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579e:	f7fe f85b 	bl	8003858 <HAL_GetTick>
 80057a2:	0002      	movs	r2, r0
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e241      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057b0:	4b33      	ldr	r3, [pc, #204]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2204      	movs	r2, #4
 80057b6:	4013      	ands	r3, r2
 80057b8:	d1f1      	bne.n	800579e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2210      	movs	r2, #16
 80057c0:	4013      	ands	r3, r2
 80057c2:	d100      	bne.n	80057c6 <HAL_RCC_OscConfig+0x27e>
 80057c4:	e0a1      	b.n	800590a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d140      	bne.n	800584e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_OscConfig+0x29c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e227      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e4:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a2c      	ldr	r2, [pc, #176]	@ (800589c <HAL_RCC_OscConfig+0x354>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	0019      	movs	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	0a19      	lsrs	r1, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	061a      	lsls	r2, r3, #24
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	0b5b      	lsrs	r3, r3, #13
 8005812:	3301      	adds	r3, #1
 8005814:	2280      	movs	r2, #128	@ 0x80
 8005816:	0212      	lsls	r2, r2, #8
 8005818:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800581a:	4b19      	ldr	r3, [pc, #100]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	210f      	movs	r1, #15
 8005822:	400b      	ands	r3, r1
 8005824:	491a      	ldr	r1, [pc, #104]	@ (8005890 <HAL_RCC_OscConfig+0x348>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800582a:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <HAL_RCC_OscConfig+0x34c>)
 800582c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800582e:	4b1a      	ldr	r3, [pc, #104]	@ (8005898 <HAL_RCC_OscConfig+0x350>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2513      	movs	r5, #19
 8005834:	197c      	adds	r4, r7, r5
 8005836:	0018      	movs	r0, r3
 8005838:	f7fd ffc8 	bl	80037cc <HAL_InitTick>
 800583c:	0003      	movs	r3, r0
 800583e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005840:	197b      	adds	r3, r7, r5
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d060      	beq.n	800590a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8005848:	197b      	adds	r3, r7, r5
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	e1f2      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d03f      	beq.n	80058d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_OscConfig+0x338>)
 800585c:	2180      	movs	r1, #128	@ 0x80
 800585e:	0049      	lsls	r1, r1, #1
 8005860:	430a      	orrs	r2, r1
 8005862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fd fff8 	bl	8003858 <HAL_GetTick>
 8005868:	0003      	movs	r3, r0
 800586a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800586c:	e018      	b.n	80058a0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800586e:	f7fd fff3 	bl	8003858 <HAL_GetTick>
 8005872:	0002      	movs	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d911      	bls.n	80058a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e1d9      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
 8005880:	40021000 	.word	0x40021000
 8005884:	fffeffff 	.word	0xfffeffff
 8005888:	fffbffff 	.word	0xfffbffff
 800588c:	ffffe0ff 	.word	0xffffe0ff
 8005890:	08009efc 	.word	0x08009efc
 8005894:	20000000 	.word	0x20000000
 8005898:	20000004 	.word	0x20000004
 800589c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058a0:	4bc9      	ldr	r3, [pc, #804]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	2380      	movs	r3, #128	@ 0x80
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4013      	ands	r3, r2
 80058aa:	d0e0      	beq.n	800586e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058ac:	4bc6      	ldr	r3, [pc, #792]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4ac6      	ldr	r2, [pc, #792]	@ (8005bcc <HAL_RCC_OscConfig+0x684>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	4bc3      	ldr	r3, [pc, #780]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c0:	4bc1      	ldr	r3, [pc, #772]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	0a19      	lsrs	r1, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	061a      	lsls	r2, r3, #24
 80058ce:	4bbe      	ldr	r3, [pc, #760]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	e019      	b.n	800590a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058d6:	4bbc      	ldr	r3, [pc, #752]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4bbb      	ldr	r3, [pc, #748]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80058dc:	49bc      	ldr	r1, [pc, #752]	@ (8005bd0 <HAL_RCC_OscConfig+0x688>)
 80058de:	400a      	ands	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e2:	f7fd ffb9 	bl	8003858 <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ec:	f7fd ffb4 	bl	8003858 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e19a      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80058fe:	4bb2      	ldr	r3, [pc, #712]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4013      	ands	r3, r2
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2208      	movs	r2, #8
 8005910:	4013      	ands	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d019      	beq.n	8005950 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591c:	4baa      	ldr	r3, [pc, #680]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 800591e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005920:	4ba9      	ldr	r3, [pc, #676]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005922:	2101      	movs	r1, #1
 8005924:	430a      	orrs	r2, r1
 8005926:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005928:	f7fd ff96 	bl	8003858 <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005932:	f7fd ff91 	bl	8003858 <HAL_GetTick>
 8005936:	0002      	movs	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e177      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005944:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	2202      	movs	r2, #2
 800594a:	4013      	ands	r3, r2
 800594c:	d0f1      	beq.n	8005932 <HAL_RCC_OscConfig+0x3ea>
 800594e:	e018      	b.n	8005982 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005950:	4b9d      	ldr	r3, [pc, #628]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005954:	4b9c      	ldr	r3, [pc, #624]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005956:	2101      	movs	r1, #1
 8005958:	438a      	bics	r2, r1
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595c:	f7fd ff7c 	bl	8003858 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005966:	f7fd ff77 	bl	8003858 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e15d      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005978:	4b93      	ldr	r3, [pc, #588]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597c:	2202      	movs	r2, #2
 800597e:	4013      	ands	r3, r2
 8005980:	d1f1      	bne.n	8005966 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2204      	movs	r2, #4
 8005988:	4013      	ands	r3, r2
 800598a:	d100      	bne.n	800598e <HAL_RCC_OscConfig+0x446>
 800598c:	e0ae      	b.n	8005aec <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598e:	2023      	movs	r0, #35	@ 0x23
 8005990:	183b      	adds	r3, r7, r0
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005996:	4b8c      	ldr	r3, [pc, #560]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	055b      	lsls	r3, r3, #21
 800599e:	4013      	ands	r3, r2
 80059a0:	d109      	bne.n	80059b6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	4b89      	ldr	r3, [pc, #548]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80059a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a6:	4b88      	ldr	r3, [pc, #544]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 80059a8:	2180      	movs	r1, #128	@ 0x80
 80059aa:	0549      	lsls	r1, r1, #21
 80059ac:	430a      	orrs	r2, r1
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80059b0:	183b      	adds	r3, r7, r0
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b6:	4b87      	ldr	r3, [pc, #540]	@ (8005bd4 <HAL_RCC_OscConfig+0x68c>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	2380      	movs	r3, #128	@ 0x80
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	d11a      	bne.n	80059f8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c2:	4b84      	ldr	r3, [pc, #528]	@ (8005bd4 <HAL_RCC_OscConfig+0x68c>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b83      	ldr	r3, [pc, #524]	@ (8005bd4 <HAL_RCC_OscConfig+0x68c>)
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	0049      	lsls	r1, r1, #1
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d0:	f7fd ff42 	bl	8003858 <HAL_GetTick>
 80059d4:	0003      	movs	r3, r0
 80059d6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7fd ff3d 	bl	8003858 <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b64      	cmp	r3, #100	@ 0x64
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e123      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	4b79      	ldr	r3, [pc, #484]	@ (8005bd4 <HAL_RCC_OscConfig+0x68c>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4013      	ands	r3, r2
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_OscConfig+0x4cc>
 8005a04:	4b70      	ldr	r3, [pc, #448]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a08:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	0049      	lsls	r1, r1, #1
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a12:	e031      	b.n	8005a78 <HAL_RCC_OscConfig+0x530>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCC_OscConfig+0x4ee>
 8005a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a20:	4b69      	ldr	r3, [pc, #420]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a22:	496b      	ldr	r1, [pc, #428]	@ (8005bd0 <HAL_RCC_OscConfig+0x688>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a28:	4b67      	ldr	r3, [pc, #412]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a2c:	4b66      	ldr	r3, [pc, #408]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a2e:	496a      	ldr	r1, [pc, #424]	@ (8005bd8 <HAL_RCC_OscConfig+0x690>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a34:	e020      	b.n	8005a78 <HAL_RCC_OscConfig+0x530>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	23a0      	movs	r3, #160	@ 0xa0
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d10e      	bne.n	8005a60 <HAL_RCC_OscConfig+0x518>
 8005a42:	4b61      	ldr	r3, [pc, #388]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a46:	4b60      	ldr	r3, [pc, #384]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a48:	2180      	movs	r1, #128	@ 0x80
 8005a4a:	00c9      	lsls	r1, r1, #3
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a50:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a54:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a56:	2180      	movs	r1, #128	@ 0x80
 8005a58:	0049      	lsls	r1, r1, #1
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a5e:	e00b      	b.n	8005a78 <HAL_RCC_OscConfig+0x530>
 8005a60:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a64:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a66:	495a      	ldr	r1, [pc, #360]	@ (8005bd0 <HAL_RCC_OscConfig+0x688>)
 8005a68:	400a      	ands	r2, r1
 8005a6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a6c:	4b56      	ldr	r3, [pc, #344]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a70:	4b55      	ldr	r3, [pc, #340]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005a72:	4959      	ldr	r1, [pc, #356]	@ (8005bd8 <HAL_RCC_OscConfig+0x690>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a80:	f7fd feea 	bl	8003858 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a88:	e009      	b.n	8005a9e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8a:	f7fd fee5 	bl	8003858 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	4a51      	ldr	r2, [pc, #324]	@ (8005bdc <HAL_RCC_OscConfig+0x694>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0ca      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d0ef      	beq.n	8005a8a <HAL_RCC_OscConfig+0x542>
 8005aaa:	e014      	b.n	8005ad6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aac:	f7fd fed4 	bl	8003858 <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ab4:	e009      	b.n	8005aca <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab6:	f7fd fecf 	bl	8003858 <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	4a46      	ldr	r2, [pc, #280]	@ (8005bdc <HAL_RCC_OscConfig+0x694>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0b4      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005aca:	4b3f      	ldr	r3, [pc, #252]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ace:	2380      	movs	r3, #128	@ 0x80
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d1ef      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ad6:	2323      	movs	r3, #35	@ 0x23
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae0:	4b39      	ldr	r3, [pc, #228]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae4:	4b38      	ldr	r3, [pc, #224]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005ae6:	493e      	ldr	r1, [pc, #248]	@ (8005be0 <HAL_RCC_OscConfig+0x698>)
 8005ae8:	400a      	ands	r2, r1
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d100      	bne.n	8005af6 <HAL_RCC_OscConfig+0x5ae>
 8005af4:	e09d      	b.n	8005c32 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d100      	bne.n	8005afe <HAL_RCC_OscConfig+0x5b6>
 8005afc:	e076      	b.n	8005bec <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d145      	bne.n	8005b92 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	4b30      	ldr	r3, [pc, #192]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b0c:	4935      	ldr	r1, [pc, #212]	@ (8005be4 <HAL_RCC_OscConfig+0x69c>)
 8005b0e:	400a      	ands	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fd fea1 	bl	8003858 <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fd fe9c 	bl	8003858 <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e082      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b2e:	4b26      	ldr	r3, [pc, #152]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	049b      	lsls	r3, r3, #18
 8005b36:	4013      	ands	r3, r2
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3a:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005be8 <HAL_RCC_OscConfig+0x6a0>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	0019      	movs	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	431a      	orrs	r2, r3
 8005b54:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b56:	430a      	orrs	r2, r1
 8005b58:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b60:	2180      	movs	r1, #128	@ 0x80
 8005b62:	0449      	lsls	r1, r1, #17
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b68:	f7fd fe76 	bl	8003858 <HAL_GetTick>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fd fe71 	bl	8003858 <HAL_GetTick>
 8005b76:	0002      	movs	r2, r0
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e057      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005b84:	4b10      	ldr	r3, [pc, #64]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	049b      	lsls	r3, r3, #18
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x62a>
 8005b90:	e04f      	b.n	8005c32 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005b98:	4912      	ldr	r1, [pc, #72]	@ (8005be4 <HAL_RCC_OscConfig+0x69c>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fd fe5b 	bl	8003858 <HAL_GetTick>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fd fe56 	bl	8003858 <HAL_GetTick>
 8005bac:	0002      	movs	r2, r0
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e03c      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bba:	4b03      	ldr	r3, [pc, #12]	@ (8005bc8 <HAL_RCC_OscConfig+0x680>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	049b      	lsls	r3, r3, #18
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x660>
 8005bc6:	e034      	b.n	8005c32 <HAL_RCC_OscConfig+0x6ea>
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	ffff1fff 	.word	0xffff1fff
 8005bd0:	fffffeff 	.word	0xfffffeff
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	fffffbff 	.word	0xfffffbff
 8005bdc:	00001388 	.word	0x00001388
 8005be0:	efffffff 	.word	0xefffffff
 8005be4:	feffffff 	.word	0xfeffffff
 8005be8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e01d      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bf8:	4b10      	ldr	r3, [pc, #64]	@ (8005c3c <HAL_RCC_OscConfig+0x6f4>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	025b      	lsls	r3, r3, #9
 8005c04:	401a      	ands	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10f      	bne.n	8005c2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	23f0      	movs	r3, #240	@ 0xf0
 8005c12:	039b      	lsls	r3, r3, #14
 8005c14:	401a      	ands	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	23c0      	movs	r3, #192	@ 0xc0
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	401a      	ands	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b00a      	add	sp, #40	@ 0x28
 8005c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3c:	40021000 	.word	0x40021000

08005c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c40:	b5b0      	push	{r4, r5, r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e128      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c54:	4b96      	ldr	r3, [pc, #600]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d91e      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b93      	ldr	r3, [pc, #588]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	4393      	bics	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	4b90      	ldr	r3, [pc, #576]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c74:	f7fd fdf0 	bl	8003858 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7c:	e009      	b.n	8005c92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7e:	f7fd fdeb 	bl	8003858 <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	4a8a      	ldr	r2, [pc, #552]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e109      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b87      	ldr	r3, [pc, #540]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4013      	ands	r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1ee      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005caa:	4b83      	ldr	r3, [pc, #524]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	22f0      	movs	r2, #240	@ 0xf0
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d100      	bne.n	8005cca <HAL_RCC_ClockConfig+0x8a>
 8005cc8:	e089      	b.n	8005dde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd2:	4b79      	ldr	r3, [pc, #484]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	2380      	movs	r3, #128	@ 0x80
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d120      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0e1      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cea:	4b73      	ldr	r3, [pc, #460]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	2380      	movs	r3, #128	@ 0x80
 8005cf0:	049b      	lsls	r3, r3, #18
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d114      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0d5      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d106      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d02:	4b6d      	ldr	r3, [pc, #436]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2204      	movs	r2, #4
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0ca      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d10:	4b69      	ldr	r3, [pc, #420]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0c2      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d20:	4b65      	ldr	r3, [pc, #404]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2203      	movs	r2, #3
 8005d26:	4393      	bics	r3, r2
 8005d28:	0019      	movs	r1, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4b62      	ldr	r3, [pc, #392]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d30:	430a      	orrs	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d34:	f7fd fd90 	bl	8003858 <HAL_GetTick>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d111      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d44:	e009      	b.n	8005d5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d46:	f7fd fd87 	bl	8003858 <HAL_GetTick>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	4a58      	ldr	r2, [pc, #352]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0a5      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d5a:	4b57      	ldr	r3, [pc, #348]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	220c      	movs	r2, #12
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d1ef      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x106>
 8005d66:	e03a      	b.n	8005dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d111      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d70:	e009      	b.n	8005d86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d72:	f7fd fd71 	bl	8003858 <HAL_GetTick>
 8005d76:	0002      	movs	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e08f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d86:	4b4c      	ldr	r3, [pc, #304]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	220c      	movs	r2, #12
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d1ef      	bne.n	8005d72 <HAL_RCC_ClockConfig+0x132>
 8005d92:	e024      	b.n	8005dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d11b      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d9c:	e009      	b.n	8005db2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d9e:	f7fd fd5b 	bl	8003858 <HAL_GetTick>
 8005da2:	0002      	movs	r2, r0
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	4a42      	ldr	r2, [pc, #264]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e079      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005db2:	4b41      	ldr	r3, [pc, #260]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	220c      	movs	r2, #12
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d1ef      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x15e>
 8005dbe:	e00e      	b.n	8005dde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fd fd4a 	bl	8003858 <HAL_GetTick>
 8005dc4:	0002      	movs	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	4a3a      	ldr	r2, [pc, #232]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e068      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dd4:	4b38      	ldr	r3, [pc, #224]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	220c      	movs	r2, #12
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	4013      	ands	r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d21e      	bcs.n	8005e2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dec:	4b30      	ldr	r3, [pc, #192]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	4393      	bics	r3, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dfe:	f7fd fd2b 	bl	8003858 <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	e009      	b.n	8005e1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e08:	f7fd fd26 	bl	8003858 <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a28      	ldr	r2, [pc, #160]	@ (8005eb4 <HAL_RCC_ClockConfig+0x274>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e044      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <HAL_RCC_ClockConfig+0x270>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	4013      	ands	r3, r2
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d1ee      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	4013      	ands	r3, r2
 8005e32:	d009      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e34:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a20      	ldr	r2, [pc, #128]	@ (8005ebc <HAL_RCC_ClockConfig+0x27c>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005e44:	430a      	orrs	r2, r1
 8005e46:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d00a      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e52:	4b19      	ldr	r3, [pc, #100]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec0 <HAL_RCC_ClockConfig+0x280>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	0019      	movs	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	00da      	lsls	r2, r3, #3
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005e64:	430a      	orrs	r2, r1
 8005e66:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e68:	f000 f832 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005e6c:	0001      	movs	r1, r0
 8005e6e:	4b12      	ldr	r3, [pc, #72]	@ (8005eb8 <HAL_RCC_ClockConfig+0x278>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	220f      	movs	r2, #15
 8005e76:	4013      	ands	r3, r2
 8005e78:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <HAL_RCC_ClockConfig+0x284>)
 8005e7a:	5cd3      	ldrb	r3, [r2, r3]
 8005e7c:	000a      	movs	r2, r1
 8005e7e:	40da      	lsrs	r2, r3
 8005e80:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <HAL_RCC_ClockConfig+0x288>)
 8005e82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e84:	4b11      	ldr	r3, [pc, #68]	@ (8005ecc <HAL_RCC_ClockConfig+0x28c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	250b      	movs	r5, #11
 8005e8a:	197c      	adds	r4, r7, r5
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fd fc9d 	bl	80037cc <HAL_InitTick>
 8005e92:	0003      	movs	r3, r0
 8005e94:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005e96:	197b      	adds	r3, r7, r5
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005e9e:	197b      	adds	r3, r7, r5
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bdb0      	pop	{r4, r5, r7, pc}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	40022000 	.word	0x40022000
 8005eb4:	00001388 	.word	0x00001388
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	fffff8ff 	.word	0xfffff8ff
 8005ec0:	ffffc7ff 	.word	0xffffc7ff
 8005ec4:	08009efc 	.word	0x08009efc
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	20000004 	.word	0x20000004

08005ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	220c      	movs	r2, #12
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d013      	beq.n	8005f0e <HAL_RCC_GetSysClockFreq+0x3e>
 8005ee6:	d85c      	bhi.n	8005fa2 <HAL_RCC_GetSysClockFreq+0xd2>
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d002      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x22>
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d00b      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x38>
 8005ef0:	e057      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ef2:	4b35      	ldr	r3, [pc, #212]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d002      	beq.n	8005f02 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005efc:	4b33      	ldr	r3, [pc, #204]	@ (8005fcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005efe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005f00:	e05d      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8005f02:	4b33      	ldr	r3, [pc, #204]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005f04:	613b      	str	r3, [r7, #16]
      break;
 8005f06:	e05a      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f08:	4b32      	ldr	r3, [pc, #200]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f0a:	613b      	str	r3, [r7, #16]
      break;
 8005f0c:	e057      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	0c9b      	lsrs	r3, r3, #18
 8005f12:	220f      	movs	r2, #15
 8005f14:	4013      	ands	r3, r2
 8005f16:	4a30      	ldr	r2, [pc, #192]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f18:	5cd3      	ldrb	r3, [r2, r3]
 8005f1a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	0d9b      	lsrs	r3, r3, #22
 8005f20:	2203      	movs	r2, #3
 8005f22:	4013      	ands	r3, r2
 8005f24:	3301      	adds	r3, #1
 8005f26:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f28:	4b27      	ldr	r3, [pc, #156]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	025b      	lsls	r3, r3, #9
 8005f30:	4013      	ands	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	000a      	movs	r2, r1
 8005f38:	0152      	lsls	r2, r2, #5
 8005f3a:	1a52      	subs	r2, r2, r1
 8005f3c:	0193      	lsls	r3, r2, #6
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	185b      	adds	r3, r3, r1
 8005f44:	025b      	lsls	r3, r3, #9
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7fa f8f9 	bl	8000140 <__udivsi3>
 8005f4e:	0003      	movs	r3, r0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e023      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f54:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2210      	movs	r2, #16
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	000a      	movs	r2, r1
 8005f62:	0152      	lsls	r2, r2, #5
 8005f64:	1a52      	subs	r2, r2, r1
 8005f66:	0193      	lsls	r3, r2, #6
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	185b      	adds	r3, r3, r1
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7fa f8e4 	bl	8000140 <__udivsi3>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e00e      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	000a      	movs	r2, r1
 8005f82:	0152      	lsls	r2, r2, #5
 8005f84:	1a52      	subs	r2, r2, r1
 8005f86:	0193      	lsls	r3, r2, #6
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	185b      	adds	r3, r3, r1
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7fa f8d4 	bl	8000140 <__udivsi3>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	613b      	str	r3, [r7, #16]
      break;
 8005fa0:	e00d      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005fa2:	4b09      	ldr	r3, [pc, #36]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	0b5b      	lsrs	r3, r3, #13
 8005fa8:	2207      	movs	r2, #7
 8005faa:	4013      	ands	r3, r2
 8005fac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	2280      	movs	r2, #128	@ 0x80
 8005fb4:	0212      	lsls	r2, r2, #8
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	0013      	movs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
      break;
 8005fbc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005fbe:	693b      	ldr	r3, [r7, #16]
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b006      	add	sp, #24
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	003d0900 	.word	0x003d0900
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	007a1200 	.word	0x007a1200
 8005fd8:	08009f14 	.word	0x08009f14

08005fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe0:	4b02      	ldr	r3, [pc, #8]	@ (8005fec <HAL_RCC_GetHCLKFreq+0x10>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
}
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	20000000 	.word	0x20000000

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ff4:	f7ff fff2 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8005ff8:	0001      	movs	r1, r0
 8005ffa:	4b06      	ldr	r3, [pc, #24]	@ (8006014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	2207      	movs	r2, #7
 8006002:	4013      	ands	r3, r2
 8006004:	4a04      	ldr	r2, [pc, #16]	@ (8006018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	40d9      	lsrs	r1, r3
 800600a:	000b      	movs	r3, r1
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	40021000 	.word	0x40021000
 8006018:	08009f0c 	.word	0x08009f0c

0800601c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006020:	f7ff ffdc 	bl	8005fdc <HAL_RCC_GetHCLKFreq>
 8006024:	0001      	movs	r1, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	0adb      	lsrs	r3, r3, #11
 800602c:	2207      	movs	r2, #7
 800602e:	4013      	ands	r3, r2
 8006030:	4a04      	ldr	r2, [pc, #16]	@ (8006044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	40d9      	lsrs	r1, r3
 8006036:	000b      	movs	r3, r1
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	40021000 	.word	0x40021000
 8006044:	08009f0c 	.word	0x08009f0c

08006048 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006050:	2017      	movs	r0, #23
 8006052:	183b      	adds	r3, r7, r0
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2220      	movs	r2, #32
 800605e:	4013      	ands	r3, r2
 8006060:	d100      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006062:	e0c7      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006064:	4b84      	ldr	r3, [pc, #528]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	055b      	lsls	r3, r3, #21
 800606c:	4013      	ands	r3, r2
 800606e:	d109      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006070:	4b81      	ldr	r3, [pc, #516]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006074:	4b80      	ldr	r3, [pc, #512]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006076:	2180      	movs	r1, #128	@ 0x80
 8006078:	0549      	lsls	r1, r1, #21
 800607a:	430a      	orrs	r2, r1
 800607c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800607e:	183b      	adds	r3, r7, r0
 8006080:	2201      	movs	r2, #1
 8006082:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006084:	4b7d      	ldr	r3, [pc, #500]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4013      	ands	r3, r2
 800608e:	d11a      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006090:	4b7a      	ldr	r3, [pc, #488]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b79      	ldr	r3, [pc, #484]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006096:	2180      	movs	r1, #128	@ 0x80
 8006098:	0049      	lsls	r1, r1, #1
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800609e:	f7fd fbdb 	bl	8003858 <HAL_GetTick>
 80060a2:	0003      	movs	r3, r0
 80060a4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a8:	f7fd fbd6 	bl	8003858 <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	@ 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e0d9      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b70      	ldr	r3, [pc, #448]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	2380      	movs	r3, #128	@ 0x80
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	4013      	ands	r3, r2
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80060c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	23c0      	movs	r3, #192	@ 0xc0
 80060cc:	039b      	lsls	r3, r3, #14
 80060ce:	4013      	ands	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	23c0      	movs	r3, #192	@ 0xc0
 80060d8:	039b      	lsls	r3, r3, #14
 80060da:	4013      	ands	r3, r2
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d013      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	23c0      	movs	r3, #192	@ 0xc0
 80060e8:	029b      	lsls	r3, r3, #10
 80060ea:	401a      	ands	r2, r3
 80060ec:	23c0      	movs	r3, #192	@ 0xc0
 80060ee:	029b      	lsls	r3, r3, #10
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060f4:	4b60      	ldr	r3, [pc, #384]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	2380      	movs	r3, #128	@ 0x80
 80060fa:	029b      	lsls	r3, r3, #10
 80060fc:	401a      	ands	r2, r3
 80060fe:	2380      	movs	r3, #128	@ 0x80
 8006100:	029b      	lsls	r3, r3, #10
 8006102:	429a      	cmp	r2, r3
 8006104:	d101      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0b1      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800610a:	4b5b      	ldr	r3, [pc, #364]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800610c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800610e:	23c0      	movs	r3, #192	@ 0xc0
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	4013      	ands	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d03b      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	23c0      	movs	r3, #192	@ 0xc0
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	4013      	ands	r3, r2
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d033      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2220      	movs	r2, #32
 8006132:	4013      	ands	r3, r2
 8006134:	d02e      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006136:	4b50      	ldr	r3, [pc, #320]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	4a51      	ldr	r2, [pc, #324]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006140:	4b4d      	ldr	r3, [pc, #308]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006144:	4b4c      	ldr	r3, [pc, #304]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006146:	2180      	movs	r1, #128	@ 0x80
 8006148:	0309      	lsls	r1, r1, #12
 800614a:	430a      	orrs	r2, r1
 800614c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800614e:	4b4a      	ldr	r3, [pc, #296]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006152:	4b49      	ldr	r3, [pc, #292]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006154:	494b      	ldr	r1, [pc, #300]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006156:	400a      	ands	r2, r1
 8006158:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800615a:	4b47      	ldr	r3, [pc, #284]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	2380      	movs	r3, #128	@ 0x80
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	4013      	ands	r3, r2
 8006168:	d014      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616a:	f7fd fb75 	bl	8003858 <HAL_GetTick>
 800616e:	0003      	movs	r3, r0
 8006170:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006172:	e009      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006174:	f7fd fb70 	bl	8003858 <HAL_GetTick>
 8006178:	0002      	movs	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	4a42      	ldr	r2, [pc, #264]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d901      	bls.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e072      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006188:	4b3b      	ldr	r3, [pc, #236]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800618a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4013      	ands	r3, r2
 8006192:	d0ef      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2220      	movs	r2, #32
 800619a:	4013      	ands	r3, r2
 800619c:	d01f      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	23c0      	movs	r3, #192	@ 0xc0
 80061a4:	029b      	lsls	r3, r3, #10
 80061a6:	401a      	ands	r2, r3
 80061a8:	23c0      	movs	r3, #192	@ 0xc0
 80061aa:	029b      	lsls	r3, r3, #10
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d10c      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x182>
 80061b0:	4b31      	ldr	r3, [pc, #196]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a35      	ldr	r2, [pc, #212]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	0019      	movs	r1, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	23c0      	movs	r3, #192	@ 0xc0
 80061c0:	039b      	lsls	r3, r3, #14
 80061c2:	401a      	ands	r2, r3
 80061c4:	4b2c      	ldr	r3, [pc, #176]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	23c0      	movs	r3, #192	@ 0xc0
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	401a      	ands	r2, r3
 80061d8:	4b27      	ldr	r3, [pc, #156]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061da:	430a      	orrs	r2, r1
 80061dc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061de:	2317      	movs	r3, #23
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d105      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e8:	4b23      	ldr	r3, [pc, #140]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ec:	4b22      	ldr	r3, [pc, #136]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80061ee:	4928      	ldr	r1, [pc, #160]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061f0:	400a      	ands	r2, r1
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2202      	movs	r2, #2
 80061fa:	4013      	ands	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006202:	220c      	movs	r2, #12
 8006204:	4393      	bics	r3, r2
 8006206:	0019      	movs	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800620e:	430a      	orrs	r2, r1
 8006210:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2204      	movs	r2, #4
 8006218:	4013      	ands	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800621c:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800621e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006220:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006222:	4013      	ands	r3, r2
 8006224:	0019      	movs	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800622c:	430a      	orrs	r2, r1
 800622e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	4013      	ands	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006240:	4013      	ands	r3, r2
 8006242:	0019      	movs	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800624a:	430a      	orrs	r2, r1
 800624c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2280      	movs	r2, #128	@ 0x80
 8006254:	4013      	ands	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006258:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800625a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800625c:	4a0f      	ldr	r2, [pc, #60]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800625e:	4013      	ands	r3, r2
 8006260:	0019      	movs	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	4b04      	ldr	r3, [pc, #16]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006268:	430a      	orrs	r2, r1
 800626a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b006      	add	sp, #24
 8006274:	bd80      	pop	{r7, pc}
 8006276:	46c0      	nop			@ (mov r8, r8)
 8006278:	40021000 	.word	0x40021000
 800627c:	40007000 	.word	0x40007000
 8006280:	fffcffff 	.word	0xfffcffff
 8006284:	fff7ffff 	.word	0xfff7ffff
 8006288:	00001388 	.word	0x00001388
 800628c:	ffcfffff 	.word	0xffcfffff
 8006290:	efffffff 	.word	0xefffffff
 8006294:	fffff3ff 	.word	0xfffff3ff
 8006298:	ffffcfff 	.word	0xffffcfff
 800629c:	fff3ffff 	.word	0xfff3ffff

080062a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e044      	b.n	800633c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2278      	movs	r2, #120	@ 0x78
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7fd f8d7 	bl	8003478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2224      	movs	r2, #36	@ 0x24
 80062ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	438a      	bics	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 fb16 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 f8c8 	bl	8006488 <UART_SetConfig>
 80062f8:	0003      	movs	r3, r0
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e01c      	b.n	800633c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	490d      	ldr	r1, [pc, #52]	@ (8006344 <HAL_UART_Init+0xa4>)
 800630e:	400a      	ands	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	212a      	movs	r1, #42	@ 0x2a
 800631e:	438a      	bics	r2, r1
 8006320:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2101      	movs	r1, #1
 800632e:	430a      	orrs	r2, r1
 8006330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0018      	movs	r0, r3
 8006336:	f000 fba5 	bl	8006a84 <UART_CheckIdleState>
 800633a:	0003      	movs	r3, r0
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}
 8006344:	ffffb7ff 	.word	0xffffb7ff

08006348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	1dbb      	adds	r3, r7, #6
 8006356:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800635c:	2b20      	cmp	r3, #32
 800635e:	d000      	beq.n	8006362 <HAL_UART_Transmit+0x1a>
 8006360:	e08c      	b.n	800647c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_UART_Transmit+0x28>
 8006368:	1dbb      	adds	r3, r7, #6
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e084      	b.n	800647e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	2380      	movs	r3, #128	@ 0x80
 800637a:	015b      	lsls	r3, r3, #5
 800637c:	429a      	cmp	r2, r3
 800637e:	d109      	bne.n	8006394 <HAL_UART_Transmit+0x4c>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2201      	movs	r2, #1
 800638c:	4013      	ands	r3, r2
 800638e:	d001      	beq.n	8006394 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e074      	b.n	800647e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2284      	movs	r2, #132	@ 0x84
 8006398:	2100      	movs	r1, #0
 800639a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2221      	movs	r2, #33	@ 0x21
 80063a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063a2:	f7fd fa59 	bl	8003858 <HAL_GetTick>
 80063a6:	0003      	movs	r3, r0
 80063a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1dba      	adds	r2, r7, #6
 80063ae:	2150      	movs	r1, #80	@ 0x50
 80063b0:	8812      	ldrh	r2, [r2, #0]
 80063b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1dba      	adds	r2, r7, #6
 80063b8:	2152      	movs	r1, #82	@ 0x52
 80063ba:	8812      	ldrh	r2, [r2, #0]
 80063bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	015b      	lsls	r3, r3, #5
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d108      	bne.n	80063dc <HAL_UART_Transmit+0x94>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e003      	b.n	80063e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063e4:	e02f      	b.n	8006446 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	0013      	movs	r3, r2
 80063f0:	2200      	movs	r2, #0
 80063f2:	2180      	movs	r1, #128	@ 0x80
 80063f4:	f000 fbee 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 80063f8:	1e03      	subs	r3, r0, #0
 80063fa:	d004      	beq.n	8006406 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e03b      	b.n	800647e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	001a      	movs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	05d2      	lsls	r2, r2, #23
 8006418:	0dd2      	lsrs	r2, r2, #23
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	3302      	adds	r3, #2
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e007      	b.n	8006434 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2252      	movs	r2, #82	@ 0x52
 8006438:	5a9b      	ldrh	r3, [r3, r2]
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b299      	uxth	r1, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2252      	movs	r2, #82	@ 0x52
 8006444:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2252      	movs	r2, #82	@ 0x52
 800644a:	5a9b      	ldrh	r3, [r3, r2]
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1c9      	bne.n	80063e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	0013      	movs	r3, r2
 800645c:	2200      	movs	r2, #0
 800645e:	2140      	movs	r1, #64	@ 0x40
 8006460:	f000 fbb8 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006464:	1e03      	subs	r3, r0, #0
 8006466:	d004      	beq.n	8006472 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e005      	b.n	800647e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	0018      	movs	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	b008      	add	sp, #32
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	b5b0      	push	{r4, r5, r7, lr}
 800648a:	b08e      	sub	sp, #56	@ 0x38
 800648c:	af00      	add	r7, sp, #0
 800648e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006490:	231a      	movs	r3, #26
 8006492:	2218      	movs	r2, #24
 8006494:	189b      	adds	r3, r3, r2
 8006496:	19db      	adds	r3, r3, r7
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4ab4      	ldr	r2, [pc, #720]	@ (800678c <UART_SetConfig+0x304>)
 80064bc:	4013      	ands	r3, r2
 80064be:	0019      	movs	r1, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4aaf      	ldr	r2, [pc, #700]	@ (8006790 <UART_SetConfig+0x308>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4aa9      	ldr	r2, [pc, #676]	@ (8006794 <UART_SetConfig+0x30c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064f8:	4313      	orrs	r3, r2
 80064fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4aa5      	ldr	r2, [pc, #660]	@ (8006798 <UART_SetConfig+0x310>)
 8006504:	4013      	ands	r3, r2
 8006506:	0019      	movs	r1, r3
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4aa1      	ldr	r2, [pc, #644]	@ (800679c <UART_SetConfig+0x314>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d131      	bne.n	8006580 <UART_SetConfig+0xf8>
 800651c:	4ba0      	ldr	r3, [pc, #640]	@ (80067a0 <UART_SetConfig+0x318>)
 800651e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006520:	220c      	movs	r2, #12
 8006522:	4013      	ands	r3, r2
 8006524:	2b0c      	cmp	r3, #12
 8006526:	d01d      	beq.n	8006564 <UART_SetConfig+0xdc>
 8006528:	d823      	bhi.n	8006572 <UART_SetConfig+0xea>
 800652a:	2b08      	cmp	r3, #8
 800652c:	d00c      	beq.n	8006548 <UART_SetConfig+0xc0>
 800652e:	d820      	bhi.n	8006572 <UART_SetConfig+0xea>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <UART_SetConfig+0xb2>
 8006534:	2b04      	cmp	r3, #4
 8006536:	d00e      	beq.n	8006556 <UART_SetConfig+0xce>
 8006538:	e01b      	b.n	8006572 <UART_SetConfig+0xea>
 800653a:	231b      	movs	r3, #27
 800653c:	2218      	movs	r2, #24
 800653e:	189b      	adds	r3, r3, r2
 8006540:	19db      	adds	r3, r3, r7
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e065      	b.n	8006614 <UART_SetConfig+0x18c>
 8006548:	231b      	movs	r3, #27
 800654a:	2218      	movs	r2, #24
 800654c:	189b      	adds	r3, r3, r2
 800654e:	19db      	adds	r3, r3, r7
 8006550:	2202      	movs	r2, #2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e05e      	b.n	8006614 <UART_SetConfig+0x18c>
 8006556:	231b      	movs	r3, #27
 8006558:	2218      	movs	r2, #24
 800655a:	189b      	adds	r3, r3, r2
 800655c:	19db      	adds	r3, r3, r7
 800655e:	2204      	movs	r2, #4
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e057      	b.n	8006614 <UART_SetConfig+0x18c>
 8006564:	231b      	movs	r3, #27
 8006566:	2218      	movs	r2, #24
 8006568:	189b      	adds	r3, r3, r2
 800656a:	19db      	adds	r3, r3, r7
 800656c:	2208      	movs	r2, #8
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e050      	b.n	8006614 <UART_SetConfig+0x18c>
 8006572:	231b      	movs	r3, #27
 8006574:	2218      	movs	r2, #24
 8006576:	189b      	adds	r3, r3, r2
 8006578:	19db      	adds	r3, r3, r7
 800657a:	2210      	movs	r2, #16
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e049      	b.n	8006614 <UART_SetConfig+0x18c>
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a83      	ldr	r2, [pc, #524]	@ (8006794 <UART_SetConfig+0x30c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d13e      	bne.n	8006608 <UART_SetConfig+0x180>
 800658a:	4b85      	ldr	r3, [pc, #532]	@ (80067a0 <UART_SetConfig+0x318>)
 800658c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800658e:	23c0      	movs	r3, #192	@ 0xc0
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	4013      	ands	r3, r2
 8006594:	22c0      	movs	r2, #192	@ 0xc0
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	4293      	cmp	r3, r2
 800659a:	d027      	beq.n	80065ec <UART_SetConfig+0x164>
 800659c:	22c0      	movs	r2, #192	@ 0xc0
 800659e:	0112      	lsls	r2, r2, #4
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d82a      	bhi.n	80065fa <UART_SetConfig+0x172>
 80065a4:	2280      	movs	r2, #128	@ 0x80
 80065a6:	0112      	lsls	r2, r2, #4
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d011      	beq.n	80065d0 <UART_SetConfig+0x148>
 80065ac:	2280      	movs	r2, #128	@ 0x80
 80065ae:	0112      	lsls	r2, r2, #4
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d822      	bhi.n	80065fa <UART_SetConfig+0x172>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <UART_SetConfig+0x13a>
 80065b8:	2280      	movs	r2, #128	@ 0x80
 80065ba:	00d2      	lsls	r2, r2, #3
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00e      	beq.n	80065de <UART_SetConfig+0x156>
 80065c0:	e01b      	b.n	80065fa <UART_SetConfig+0x172>
 80065c2:	231b      	movs	r3, #27
 80065c4:	2218      	movs	r2, #24
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	19db      	adds	r3, r3, r7
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e021      	b.n	8006614 <UART_SetConfig+0x18c>
 80065d0:	231b      	movs	r3, #27
 80065d2:	2218      	movs	r2, #24
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	2202      	movs	r2, #2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e01a      	b.n	8006614 <UART_SetConfig+0x18c>
 80065de:	231b      	movs	r3, #27
 80065e0:	2218      	movs	r2, #24
 80065e2:	189b      	adds	r3, r3, r2
 80065e4:	19db      	adds	r3, r3, r7
 80065e6:	2204      	movs	r2, #4
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e013      	b.n	8006614 <UART_SetConfig+0x18c>
 80065ec:	231b      	movs	r3, #27
 80065ee:	2218      	movs	r2, #24
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	2208      	movs	r2, #8
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e00c      	b.n	8006614 <UART_SetConfig+0x18c>
 80065fa:	231b      	movs	r3, #27
 80065fc:	2218      	movs	r2, #24
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	19db      	adds	r3, r3, r7
 8006602:	2210      	movs	r2, #16
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e005      	b.n	8006614 <UART_SetConfig+0x18c>
 8006608:	231b      	movs	r3, #27
 800660a:	2218      	movs	r2, #24
 800660c:	189b      	adds	r3, r3, r2
 800660e:	19db      	adds	r3, r3, r7
 8006610:	2210      	movs	r2, #16
 8006612:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a5e      	ldr	r2, [pc, #376]	@ (8006794 <UART_SetConfig+0x30c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d000      	beq.n	8006620 <UART_SetConfig+0x198>
 800661e:	e084      	b.n	800672a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006620:	231b      	movs	r3, #27
 8006622:	2218      	movs	r2, #24
 8006624:	189b      	adds	r3, r3, r2
 8006626:	19db      	adds	r3, r3, r7
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d01d      	beq.n	800666a <UART_SetConfig+0x1e2>
 800662e:	dc20      	bgt.n	8006672 <UART_SetConfig+0x1ea>
 8006630:	2b04      	cmp	r3, #4
 8006632:	d015      	beq.n	8006660 <UART_SetConfig+0x1d8>
 8006634:	dc1d      	bgt.n	8006672 <UART_SetConfig+0x1ea>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <UART_SetConfig+0x1b8>
 800663a:	2b02      	cmp	r3, #2
 800663c:	d005      	beq.n	800664a <UART_SetConfig+0x1c2>
 800663e:	e018      	b.n	8006672 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7ff fcd6 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8006644:	0003      	movs	r3, r0
 8006646:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006648:	e01c      	b.n	8006684 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664a:	4b55      	ldr	r3, [pc, #340]	@ (80067a0 <UART_SetConfig+0x318>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2210      	movs	r2, #16
 8006650:	4013      	ands	r3, r2
 8006652:	d002      	beq.n	800665a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006654:	4b53      	ldr	r3, [pc, #332]	@ (80067a4 <UART_SetConfig+0x31c>)
 8006656:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006658:	e014      	b.n	8006684 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800665a:	4b53      	ldr	r3, [pc, #332]	@ (80067a8 <UART_SetConfig+0x320>)
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800665e:	e011      	b.n	8006684 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006660:	f7ff fc36 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8006664:	0003      	movs	r3, r0
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006668:	e00c      	b.n	8006684 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006670:	e008      	b.n	8006684 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006676:	231a      	movs	r3, #26
 8006678:	2218      	movs	r2, #24
 800667a:	189b      	adds	r3, r3, r2
 800667c:	19db      	adds	r3, r3, r7
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
        break;
 8006682:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d100      	bne.n	800668c <UART_SetConfig+0x204>
 800668a:	e12f      	b.n	80068ec <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	0013      	movs	r3, r2
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	189b      	adds	r3, r3, r2
 8006696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d305      	bcc.n	80066a8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d906      	bls.n	80066b6 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80066a8:	231a      	movs	r3, #26
 80066aa:	2218      	movs	r2, #24
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	2201      	movs	r2, #1
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	e11a      	b.n	80068ec <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	6939      	ldr	r1, [r7, #16]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	000b      	movs	r3, r1
 80066c4:	0e1b      	lsrs	r3, r3, #24
 80066c6:	0010      	movs	r0, r2
 80066c8:	0205      	lsls	r5, r0, #8
 80066ca:	431d      	orrs	r5, r3
 80066cc:	000b      	movs	r3, r1
 80066ce:	021c      	lsls	r4, r3, #8
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68b8      	ldr	r0, [r7, #8]
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	1900      	adds	r0, r0, r4
 80066e2:	4169      	adcs	r1, r5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f7f9 fed9 	bl	80004a8 <__aeabi_uldivmod>
 80066f6:	0002      	movs	r2, r0
 80066f8:	000b      	movs	r3, r1
 80066fa:	0013      	movs	r3, r2
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006700:	23c0      	movs	r3, #192	@ 0xc0
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	429a      	cmp	r2, r3
 8006706:	d309      	bcc.n	800671c <UART_SetConfig+0x294>
 8006708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670a:	2380      	movs	r3, #128	@ 0x80
 800670c:	035b      	lsls	r3, r3, #13
 800670e:	429a      	cmp	r2, r3
 8006710:	d204      	bcs.n	800671c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	e0e7      	b.n	80068ec <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 800671c:	231a      	movs	r3, #26
 800671e:	2218      	movs	r2, #24
 8006720:	189b      	adds	r3, r3, r2
 8006722:	19db      	adds	r3, r3, r7
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	e0e0      	b.n	80068ec <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	69da      	ldr	r2, [r3, #28]
 800672e:	2380      	movs	r3, #128	@ 0x80
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	429a      	cmp	r2, r3
 8006734:	d000      	beq.n	8006738 <UART_SetConfig+0x2b0>
 8006736:	e082      	b.n	800683e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8006738:	231b      	movs	r3, #27
 800673a:	2218      	movs	r2, #24
 800673c:	189b      	adds	r3, r3, r2
 800673e:	19db      	adds	r3, r3, r7
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b08      	cmp	r3, #8
 8006744:	d834      	bhi.n	80067b0 <UART_SetConfig+0x328>
 8006746:	009a      	lsls	r2, r3, #2
 8006748:	4b18      	ldr	r3, [pc, #96]	@ (80067ac <UART_SetConfig+0x324>)
 800674a:	18d3      	adds	r3, r2, r3
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006750:	f7ff fc4e 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8006754:	0003      	movs	r3, r0
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006758:	e033      	b.n	80067c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675a:	f7ff fc5f 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 800675e:	0003      	movs	r3, r0
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006762:	e02e      	b.n	80067c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006764:	4b0e      	ldr	r3, [pc, #56]	@ (80067a0 <UART_SetConfig+0x318>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2210      	movs	r2, #16
 800676a:	4013      	ands	r3, r2
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800676e:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <UART_SetConfig+0x31c>)
 8006770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006772:	e026      	b.n	80067c2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8006774:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <UART_SetConfig+0x320>)
 8006776:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006778:	e023      	b.n	80067c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7ff fba9 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 800677e:	0003      	movs	r3, r0
 8006780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006782:	e01e      	b.n	80067c2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800678a:	e01a      	b.n	80067c2 <UART_SetConfig+0x33a>
 800678c:	efff69f3 	.word	0xefff69f3
 8006790:	ffffcfff 	.word	0xffffcfff
 8006794:	40004800 	.word	0x40004800
 8006798:	fffff4ff 	.word	0xfffff4ff
 800679c:	40004400 	.word	0x40004400
 80067a0:	40021000 	.word	0x40021000
 80067a4:	003d0900 	.word	0x003d0900
 80067a8:	00f42400 	.word	0x00f42400
 80067ac:	08009f20 	.word	0x08009f20
      default:
        pclk = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80067b4:	231a      	movs	r3, #26
 80067b6:	2218      	movs	r2, #24
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
        break;
 80067c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d100      	bne.n	80067ca <UART_SetConfig+0x342>
 80067c8:	e090      	b.n	80068ec <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	005a      	lsls	r2, r3, #1
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	18d2      	adds	r2, r2, r3
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	0019      	movs	r1, r3
 80067dc:	0010      	movs	r0, r2
 80067de:	f7f9 fcaf 	bl	8000140 <__udivsi3>
 80067e2:	0003      	movs	r3, r0
 80067e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	2b0f      	cmp	r3, #15
 80067ea:	d921      	bls.n	8006830 <UART_SetConfig+0x3a8>
 80067ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ee:	2380      	movs	r3, #128	@ 0x80
 80067f0:	025b      	lsls	r3, r3, #9
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d21c      	bcs.n	8006830 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	200e      	movs	r0, #14
 80067fc:	2418      	movs	r4, #24
 80067fe:	1903      	adds	r3, r0, r4
 8006800:	19db      	adds	r3, r3, r7
 8006802:	210f      	movs	r1, #15
 8006804:	438a      	bics	r2, r1
 8006806:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	2207      	movs	r2, #7
 8006810:	4013      	ands	r3, r2
 8006812:	b299      	uxth	r1, r3
 8006814:	1903      	adds	r3, r0, r4
 8006816:	19db      	adds	r3, r3, r7
 8006818:	1902      	adds	r2, r0, r4
 800681a:	19d2      	adds	r2, r2, r7
 800681c:	8812      	ldrh	r2, [r2, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1902      	adds	r2, r0, r4
 8006828:	19d2      	adds	r2, r2, r7
 800682a:	8812      	ldrh	r2, [r2, #0]
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e05d      	b.n	80068ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8006830:	231a      	movs	r3, #26
 8006832:	2218      	movs	r2, #24
 8006834:	189b      	adds	r3, r3, r2
 8006836:	19db      	adds	r3, r3, r7
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e056      	b.n	80068ec <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800683e:	231b      	movs	r3, #27
 8006840:	2218      	movs	r2, #24
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d822      	bhi.n	8006892 <UART_SetConfig+0x40a>
 800684c:	009a      	lsls	r2, r3, #2
 800684e:	4b2f      	ldr	r3, [pc, #188]	@ (800690c <UART_SetConfig+0x484>)
 8006850:	18d3      	adds	r3, r2, r3
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7ff fbcb 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 800685a:	0003      	movs	r3, r0
 800685c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800685e:	e021      	b.n	80068a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7ff fbdc 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 8006864:	0003      	movs	r3, r0
 8006866:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006868:	e01c      	b.n	80068a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686a:	4b29      	ldr	r3, [pc, #164]	@ (8006910 <UART_SetConfig+0x488>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	4013      	ands	r3, r2
 8006872:	d002      	beq.n	800687a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006874:	4b27      	ldr	r3, [pc, #156]	@ (8006914 <UART_SetConfig+0x48c>)
 8006876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006878:	e014      	b.n	80068a4 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800687a:	4b27      	ldr	r3, [pc, #156]	@ (8006918 <UART_SetConfig+0x490>)
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800687e:	e011      	b.n	80068a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006880:	f7ff fb26 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8006884:	0003      	movs	r3, r0
 8006886:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006888:	e00c      	b.n	80068a4 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	2380      	movs	r3, #128	@ 0x80
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006890:	e008      	b.n	80068a4 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006896:	231a      	movs	r3, #26
 8006898:	2218      	movs	r2, #24
 800689a:	189b      	adds	r3, r3, r2
 800689c:	19db      	adds	r3, r3, r7
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
        break;
 80068a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80068a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	085a      	lsrs	r2, r3, #1
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	18d2      	adds	r2, r2, r3
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0019      	movs	r1, r3
 80068ba:	0010      	movs	r0, r2
 80068bc:	f7f9 fc40 	bl	8000140 <__udivsi3>
 80068c0:	0003      	movs	r3, r0
 80068c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d90a      	bls.n	80068e0 <UART_SetConfig+0x458>
 80068ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068cc:	2380      	movs	r3, #128	@ 0x80
 80068ce:	025b      	lsls	r3, r3, #9
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d205      	bcs.n	80068e0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e005      	b.n	80068ec <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80068e0:	231a      	movs	r3, #26
 80068e2:	2218      	movs	r2, #24
 80068e4:	189b      	adds	r3, r3, r2
 80068e6:	19db      	adds	r3, r3, r7
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2200      	movs	r2, #0
 80068f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2200      	movs	r2, #0
 80068f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068f8:	231a      	movs	r3, #26
 80068fa:	2218      	movs	r2, #24
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	19db      	adds	r3, r3, r7
 8006900:	781b      	ldrb	r3, [r3, #0]
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b00e      	add	sp, #56	@ 0x38
 8006908:	bdb0      	pop	{r4, r5, r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	08009f44 	.word	0x08009f44
 8006910:	40021000 	.word	0x40021000
 8006914:	003d0900 	.word	0x003d0900
 8006918:	00f42400 	.word	0x00f42400

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	2208      	movs	r2, #8
 800692a:	4013      	ands	r3, r2
 800692c:	d00b      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4a4a      	ldr	r2, [pc, #296]	@ (8006a60 <UART_AdvFeatureConfig+0x144>)
 8006936:	4013      	ands	r3, r2
 8006938:	0019      	movs	r1, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	2201      	movs	r2, #1
 800694c:	4013      	ands	r3, r2
 800694e:	d00b      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4a43      	ldr	r2, [pc, #268]	@ (8006a64 <UART_AdvFeatureConfig+0x148>)
 8006958:	4013      	ands	r3, r2
 800695a:	0019      	movs	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696c:	2202      	movs	r2, #2
 800696e:	4013      	ands	r3, r2
 8006970:	d00b      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a3b      	ldr	r2, [pc, #236]	@ (8006a68 <UART_AdvFeatureConfig+0x14c>)
 800697a:	4013      	ands	r3, r2
 800697c:	0019      	movs	r1, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	2204      	movs	r2, #4
 8006990:	4013      	ands	r3, r2
 8006992:	d00b      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	4a34      	ldr	r2, [pc, #208]	@ (8006a6c <UART_AdvFeatureConfig+0x150>)
 800699c:	4013      	ands	r3, r2
 800699e:	0019      	movs	r1, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	2210      	movs	r2, #16
 80069b2:	4013      	ands	r3, r2
 80069b4:	d00b      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006a70 <UART_AdvFeatureConfig+0x154>)
 80069be:	4013      	ands	r3, r2
 80069c0:	0019      	movs	r1, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	2220      	movs	r2, #32
 80069d4:	4013      	ands	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	4a25      	ldr	r2, [pc, #148]	@ (8006a74 <UART_AdvFeatureConfig+0x158>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	0019      	movs	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	2240      	movs	r2, #64	@ 0x40
 80069f6:	4013      	ands	r3, r2
 80069f8:	d01d      	beq.n	8006a36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <UART_AdvFeatureConfig+0x15c>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	0019      	movs	r1, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a16:	2380      	movs	r3, #128	@ 0x80
 8006a18:	035b      	lsls	r3, r3, #13
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d10b      	bne.n	8006a36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a15      	ldr	r2, [pc, #84]	@ (8006a7c <UART_AdvFeatureConfig+0x160>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	0019      	movs	r1, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2280      	movs	r2, #128	@ 0x80
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	@ (8006a80 <UART_AdvFeatureConfig+0x164>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }
}
 8006a58:	46c0      	nop			@ (mov r8, r8)
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b002      	add	sp, #8
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	ffff7fff 	.word	0xffff7fff
 8006a64:	fffdffff 	.word	0xfffdffff
 8006a68:	fffeffff 	.word	0xfffeffff
 8006a6c:	fffbffff 	.word	0xfffbffff
 8006a70:	ffffefff 	.word	0xffffefff
 8006a74:	ffffdfff 	.word	0xffffdfff
 8006a78:	ffefffff 	.word	0xffefffff
 8006a7c:	ff9fffff 	.word	0xff9fffff
 8006a80:	fff7ffff 	.word	0xfff7ffff

08006a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b092      	sub	sp, #72	@ 0x48
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2284      	movs	r2, #132	@ 0x84
 8006a90:	2100      	movs	r1, #0
 8006a92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a94:	f7fc fee0 	bl	8003858 <HAL_GetTick>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d12c      	bne.n	8006b04 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	2280      	movs	r2, #128	@ 0x80
 8006aae:	0391      	lsls	r1, r2, #14
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4a46      	ldr	r2, [pc, #280]	@ (8006bcc <UART_CheckIdleState+0x148>)
 8006ab4:	9200      	str	r2, [sp, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f000 f88c 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d021      	beq.n	8006b04 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aca:	2301      	movs	r3, #1
 8006acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			@ (mov r8, r8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2180      	movs	r1, #128	@ 0x80
 8006ae2:	438a      	bics	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	f383 8810 	msr	PRIMASK, r3
}
 8006af0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2278      	movs	r2, #120	@ 0x78
 8006afc:	2100      	movs	r1, #0
 8006afe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e05f      	b.n	8006bc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d146      	bne.n	8006ba0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b14:	2280      	movs	r2, #128	@ 0x80
 8006b16:	03d1      	lsls	r1, r2, #15
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bcc <UART_CheckIdleState+0x148>)
 8006b1c:	9200      	str	r2, [sp, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f000 f858 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006b24:	1e03      	subs	r3, r0, #0
 8006b26:	d03b      	beq.n	8006ba0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b28:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b32:	2301      	movs	r3, #1
 8006b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f383 8810 	msr	PRIMASK, r3
}
 8006b3c:	46c0      	nop			@ (mov r8, r8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4921      	ldr	r1, [pc, #132]	@ (8006bd0 <UART_CheckIdleState+0x14c>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b60:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b64:	2301      	movs	r3, #1
 8006b66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	438a      	bics	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2280      	movs	r2, #128	@ 0x80
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2278      	movs	r2, #120	@ 0x78
 8006b98:	2100      	movs	r1, #0
 8006b9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e011      	b.n	8006bc4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2280      	movs	r2, #128	@ 0x80
 8006baa:	2120      	movs	r1, #32
 8006bac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2278      	movs	r2, #120	@ 0x78
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b010      	add	sp, #64	@ 0x40
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	01ffffff 	.word	0x01ffffff
 8006bd0:	fffffedf 	.word	0xfffffedf

08006bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	1dfb      	adds	r3, r7, #7
 8006be2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be4:	e051      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d04e      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bec:	f7fc fe34 	bl	8003858 <HAL_GetTick>
 8006bf0:	0002      	movs	r2, r0
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e051      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d03b      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b80      	cmp	r3, #128	@ 0x80
 8006c16:	d038      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b40      	cmp	r3, #64	@ 0x40
 8006c1c:	d035      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	2208      	movs	r2, #8
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d111      	bne.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f83c 	bl	8006cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2284      	movs	r2, #132	@ 0x84
 8006c40:	2108      	movs	r1, #8
 8006c42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2278      	movs	r2, #120	@ 0x78
 8006c48:	2100      	movs	r1, #0
 8006c4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e02c      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69da      	ldr	r2, [r3, #28]
 8006c56:	2380      	movs	r3, #128	@ 0x80
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	2380      	movs	r3, #128	@ 0x80
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d112      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2280      	movs	r2, #128	@ 0x80
 8006c6a:	0112      	lsls	r2, r2, #4
 8006c6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 f81f 	bl	8006cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2284      	movs	r2, #132	@ 0x84
 8006c7a:	2120      	movs	r1, #32
 8006c7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2278      	movs	r2, #120	@ 0x78
 8006c82:	2100      	movs	r1, #0
 8006c84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e00f      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4013      	ands	r3, r2
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	425a      	negs	r2, r3
 8006c9a:	4153      	adcs	r3, r2
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	1dfb      	adds	r3, r7, #7
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d09e      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b004      	add	sp, #16
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	@ 0x38
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8006cc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f383 8810 	msr	PRIMASK, r3
}
 8006cd0:	46c0      	nop			@ (mov r8, r8)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4926      	ldr	r1, [pc, #152]	@ (8006d78 <UART_EndRxTransfer+0xc4>)
 8006cde:	400a      	ands	r2, r1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f383 8810 	msr	PRIMASK, r3
}
 8006cec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cee:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf2:	623b      	str	r3, [r7, #32]
  return(result);
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	438a      	bics	r2, r1
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	f383 8810 	msr	PRIMASK, r3
}
 8006d1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d118      	bne.n	8006d5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d28:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d32:	2301      	movs	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f383 8810 	msr	PRIMASK, r3
}
 8006d3c:	46c0      	nop			@ (mov r8, r8)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2110      	movs	r1, #16
 8006d4a:	438a      	bics	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f383 8810 	msr	PRIMASK, r3
}
 8006d58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2280      	movs	r2, #128	@ 0x80
 8006d5e:	2120      	movs	r1, #32
 8006d60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b00e      	add	sp, #56	@ 0x38
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	fffffedf 	.word	0xfffffedf

08006d7c <__cvt>:
 8006d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7e:	001f      	movs	r7, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	0016      	movs	r6, r2
 8006d84:	b08b      	sub	sp, #44	@ 0x2c
 8006d86:	429f      	cmp	r7, r3
 8006d88:	da04      	bge.n	8006d94 <__cvt+0x18>
 8006d8a:	2180      	movs	r1, #128	@ 0x80
 8006d8c:	0609      	lsls	r1, r1, #24
 8006d8e:	187b      	adds	r3, r7, r1
 8006d90:	001f      	movs	r7, r3
 8006d92:	232d      	movs	r3, #45	@ 0x2d
 8006d94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d96:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006d98:	7013      	strb	r3, [r2, #0]
 8006d9a:	2320      	movs	r3, #32
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	439d      	bics	r5, r3
 8006da0:	2d46      	cmp	r5, #70	@ 0x46
 8006da2:	d007      	beq.n	8006db4 <__cvt+0x38>
 8006da4:	002b      	movs	r3, r5
 8006da6:	3b45      	subs	r3, #69	@ 0x45
 8006da8:	4259      	negs	r1, r3
 8006daa:	414b      	adcs	r3, r1
 8006dac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006dae:	3a01      	subs	r2, #1
 8006db0:	18cb      	adds	r3, r1, r3
 8006db2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006db4:	ab09      	add	r3, sp, #36	@ 0x24
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	ab08      	add	r3, sp, #32
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	9302      	str	r3, [sp, #8]
 8006dc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dc4:	0032      	movs	r2, r6
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	003b      	movs	r3, r7
 8006dca:	f000 fe9d 	bl	8007b08 <_dtoa_r>
 8006dce:	0004      	movs	r4, r0
 8006dd0:	2d47      	cmp	r5, #71	@ 0x47
 8006dd2:	d11b      	bne.n	8006e0c <__cvt+0x90>
 8006dd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006dd6:	07db      	lsls	r3, r3, #31
 8006dd8:	d511      	bpl.n	8006dfe <__cvt+0x82>
 8006dda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ddc:	18c3      	adds	r3, r0, r3
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	0030      	movs	r0, r6
 8006de6:	0039      	movs	r1, r7
 8006de8:	f7f9 fb30 	bl	800044c <__aeabi_dcmpeq>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d001      	beq.n	8006df4 <__cvt+0x78>
 8006df0:	9b07      	ldr	r3, [sp, #28]
 8006df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df4:	2230      	movs	r2, #48	@ 0x30
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	9907      	ldr	r1, [sp, #28]
 8006dfa:	428b      	cmp	r3, r1
 8006dfc:	d320      	bcc.n	8006e40 <__cvt+0xc4>
 8006dfe:	0020      	movs	r0, r4
 8006e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e04:	1b1b      	subs	r3, r3, r4
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	b00b      	add	sp, #44	@ 0x2c
 8006e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e0e:	18c3      	adds	r3, r0, r3
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	2d46      	cmp	r5, #70	@ 0x46
 8006e14:	d1e4      	bne.n	8006de0 <__cvt+0x64>
 8006e16:	7803      	ldrb	r3, [r0, #0]
 8006e18:	2b30      	cmp	r3, #48	@ 0x30
 8006e1a:	d10c      	bne.n	8006e36 <__cvt+0xba>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	0030      	movs	r0, r6
 8006e22:	0039      	movs	r1, r7
 8006e24:	f7f9 fb12 	bl	800044c <__aeabi_dcmpeq>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d104      	bne.n	8006e36 <__cvt+0xba>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e38:	9a07      	ldr	r2, [sp, #28]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	e7ce      	b.n	8006dde <__cvt+0x62>
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e7d6      	b.n	8006df6 <__cvt+0x7a>

08006e48 <__exponent>:
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	232b      	movs	r3, #43	@ 0x2b
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	0005      	movs	r5, r0
 8006e50:	1e0c      	subs	r4, r1, #0
 8006e52:	7002      	strb	r2, [r0, #0]
 8006e54:	da01      	bge.n	8006e5a <__exponent+0x12>
 8006e56:	424c      	negs	r4, r1
 8006e58:	3302      	adds	r3, #2
 8006e5a:	706b      	strb	r3, [r5, #1]
 8006e5c:	2c09      	cmp	r4, #9
 8006e5e:	dd2c      	ble.n	8006eba <__exponent+0x72>
 8006e60:	ab02      	add	r3, sp, #8
 8006e62:	1dde      	adds	r6, r3, #7
 8006e64:	0020      	movs	r0, r4
 8006e66:	210a      	movs	r1, #10
 8006e68:	f7f9 fada 	bl	8000420 <__aeabi_idivmod>
 8006e6c:	0037      	movs	r7, r6
 8006e6e:	3130      	adds	r1, #48	@ 0x30
 8006e70:	3e01      	subs	r6, #1
 8006e72:	0020      	movs	r0, r4
 8006e74:	7031      	strb	r1, [r6, #0]
 8006e76:	210a      	movs	r1, #10
 8006e78:	9401      	str	r4, [sp, #4]
 8006e7a:	f7f9 f9eb 	bl	8000254 <__divsi3>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	0004      	movs	r4, r0
 8006e82:	2b63      	cmp	r3, #99	@ 0x63
 8006e84:	dcee      	bgt.n	8006e64 <__exponent+0x1c>
 8006e86:	1eba      	subs	r2, r7, #2
 8006e88:	1ca8      	adds	r0, r5, #2
 8006e8a:	0001      	movs	r1, r0
 8006e8c:	0013      	movs	r3, r2
 8006e8e:	3430      	adds	r4, #48	@ 0x30
 8006e90:	7014      	strb	r4, [r2, #0]
 8006e92:	ac02      	add	r4, sp, #8
 8006e94:	3407      	adds	r4, #7
 8006e96:	429c      	cmp	r4, r3
 8006e98:	d80a      	bhi.n	8006eb0 <__exponent+0x68>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4294      	cmp	r4, r2
 8006e9e:	d303      	bcc.n	8006ea8 <__exponent+0x60>
 8006ea0:	3309      	adds	r3, #9
 8006ea2:	aa02      	add	r2, sp, #8
 8006ea4:	189b      	adds	r3, r3, r2
 8006ea6:	1bdb      	subs	r3, r3, r7
 8006ea8:	18c0      	adds	r0, r0, r3
 8006eaa:	1b40      	subs	r0, r0, r5
 8006eac:	b005      	add	sp, #20
 8006eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb0:	781c      	ldrb	r4, [r3, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	700c      	strb	r4, [r1, #0]
 8006eb6:	3101      	adds	r1, #1
 8006eb8:	e7eb      	b.n	8006e92 <__exponent+0x4a>
 8006eba:	2330      	movs	r3, #48	@ 0x30
 8006ebc:	18e4      	adds	r4, r4, r3
 8006ebe:	70ab      	strb	r3, [r5, #2]
 8006ec0:	1d28      	adds	r0, r5, #4
 8006ec2:	70ec      	strb	r4, [r5, #3]
 8006ec4:	e7f1      	b.n	8006eaa <__exponent+0x62>
	...

08006ec8 <_printf_float>:
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	b097      	sub	sp, #92	@ 0x5c
 8006ecc:	000d      	movs	r5, r1
 8006ece:	920a      	str	r2, [sp, #40]	@ 0x28
 8006ed0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ed6:	f000 fcff 	bl	80078d8 <_localeconv_r>
 8006eda:	6803      	ldr	r3, [r0, #0]
 8006edc:	0018      	movs	r0, r3
 8006ede:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ee0:	f7f9 f912 	bl	8000108 <strlen>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006ee8:	9314      	str	r3, [sp, #80]	@ 0x50
 8006eea:	7e2b      	ldrb	r3, [r5, #24]
 8006eec:	2207      	movs	r2, #7
 8006eee:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ef4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	05c9      	lsls	r1, r1, #23
 8006efa:	d545      	bpl.n	8006f88 <_printf_float+0xc0>
 8006efc:	189b      	adds	r3, r3, r2
 8006efe:	4393      	bics	r3, r2
 8006f00:	001a      	movs	r2, r3
 8006f02:	3208      	adds	r2, #8
 8006f04:	6022      	str	r2, [r4, #0]
 8006f06:	2201      	movs	r2, #1
 8006f08:	681e      	ldr	r6, [r3, #0]
 8006f0a:	685f      	ldr	r7, [r3, #4]
 8006f0c:	007b      	lsls	r3, r7, #1
 8006f0e:	085b      	lsrs	r3, r3, #1
 8006f10:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f12:	9610      	str	r6, [sp, #64]	@ 0x40
 8006f14:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006f16:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006f18:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006f1a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006f1c:	4ba7      	ldr	r3, [pc, #668]	@ (80071bc <_printf_float+0x2f4>)
 8006f1e:	4252      	negs	r2, r2
 8006f20:	f7fb fc48 	bl	80027b4 <__aeabi_dcmpun>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d131      	bne.n	8006f8c <_printf_float+0xc4>
 8006f28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006f2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4ba3      	ldr	r3, [pc, #652]	@ (80071bc <_printf_float+0x2f4>)
 8006f30:	4252      	negs	r2, r2
 8006f32:	f7f9 fa9b 	bl	800046c <__aeabi_dcmple>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d128      	bne.n	8006f8c <_printf_float+0xc4>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	0030      	movs	r0, r6
 8006f40:	0039      	movs	r1, r7
 8006f42:	f7f9 fa89 	bl	8000458 <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d003      	beq.n	8006f52 <_printf_float+0x8a>
 8006f4a:	002b      	movs	r3, r5
 8006f4c:	222d      	movs	r2, #45	@ 0x2d
 8006f4e:	3343      	adds	r3, #67	@ 0x43
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f54:	4f9a      	ldr	r7, [pc, #616]	@ (80071c0 <_printf_float+0x2f8>)
 8006f56:	2b47      	cmp	r3, #71	@ 0x47
 8006f58:	d800      	bhi.n	8006f5c <_printf_float+0x94>
 8006f5a:	4f9a      	ldr	r7, [pc, #616]	@ (80071c4 <_printf_float+0x2fc>)
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	2400      	movs	r4, #0
 8006f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f62:	612b      	str	r3, [r5, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	439a      	bics	r2, r3
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f6c:	0029      	movs	r1, r5
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f74:	aa15      	add	r2, sp, #84	@ 0x54
 8006f76:	f000 f9e5 	bl	8007344 <_printf_common>
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d000      	beq.n	8006f80 <_printf_float+0xb8>
 8006f7e:	e09e      	b.n	80070be <_printf_float+0x1f6>
 8006f80:	2001      	movs	r0, #1
 8006f82:	4240      	negs	r0, r0
 8006f84:	b017      	add	sp, #92	@ 0x5c
 8006f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f88:	3307      	adds	r3, #7
 8006f8a:	e7b8      	b.n	8006efe <_printf_float+0x36>
 8006f8c:	0032      	movs	r2, r6
 8006f8e:	003b      	movs	r3, r7
 8006f90:	0030      	movs	r0, r6
 8006f92:	0039      	movs	r1, r7
 8006f94:	f7fb fc0e 	bl	80027b4 <__aeabi_dcmpun>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d00b      	beq.n	8006fb4 <_printf_float+0xec>
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	da03      	bge.n	8006fa8 <_printf_float+0xe0>
 8006fa0:	002b      	movs	r3, r5
 8006fa2:	222d      	movs	r2, #45	@ 0x2d
 8006fa4:	3343      	adds	r3, #67	@ 0x43
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006faa:	4f87      	ldr	r7, [pc, #540]	@ (80071c8 <_printf_float+0x300>)
 8006fac:	2b47      	cmp	r3, #71	@ 0x47
 8006fae:	d8d5      	bhi.n	8006f5c <_printf_float+0x94>
 8006fb0:	4f86      	ldr	r7, [pc, #536]	@ (80071cc <_printf_float+0x304>)
 8006fb2:	e7d3      	b.n	8006f5c <_printf_float+0x94>
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006fb8:	686b      	ldr	r3, [r5, #4]
 8006fba:	4394      	bics	r4, r2
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	d146      	bne.n	800704e <_printf_float+0x186>
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	606b      	str	r3, [r5, #4]
 8006fc4:	2380      	movs	r3, #128	@ 0x80
 8006fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	2200      	movs	r2, #0
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	9206      	str	r2, [sp, #24]
 8006fd2:	aa14      	add	r2, sp, #80	@ 0x50
 8006fd4:	9205      	str	r2, [sp, #20]
 8006fd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fd8:	a90a      	add	r1, sp, #40	@ 0x28
 8006fda:	9204      	str	r2, [sp, #16]
 8006fdc:	aa13      	add	r2, sp, #76	@ 0x4c
 8006fde:	9203      	str	r2, [sp, #12]
 8006fe0:	2223      	movs	r2, #35	@ 0x23
 8006fe2:	1852      	adds	r2, r2, r1
 8006fe4:	9202      	str	r2, [sp, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	686b      	ldr	r3, [r5, #4]
 8006fea:	0032      	movs	r2, r6
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ff0:	003b      	movs	r3, r7
 8006ff2:	f7ff fec3 	bl	8006d7c <__cvt>
 8006ff6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ff8:	0007      	movs	r7, r0
 8006ffa:	2c47      	cmp	r4, #71	@ 0x47
 8006ffc:	d12d      	bne.n	800705a <_printf_float+0x192>
 8006ffe:	1cd3      	adds	r3, r2, #3
 8007000:	db02      	blt.n	8007008 <_printf_float+0x140>
 8007002:	686b      	ldr	r3, [r5, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	dd47      	ble.n	8007098 <_printf_float+0x1d0>
 8007008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800700a:	3b02      	subs	r3, #2
 800700c:	b2db      	uxtb	r3, r3
 800700e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007010:	0028      	movs	r0, r5
 8007012:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007014:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007016:	3901      	subs	r1, #1
 8007018:	3050      	adds	r0, #80	@ 0x50
 800701a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800701c:	f7ff ff14 	bl	8006e48 <__exponent>
 8007020:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007022:	0004      	movs	r4, r0
 8007024:	1813      	adds	r3, r2, r0
 8007026:	612b      	str	r3, [r5, #16]
 8007028:	2a01      	cmp	r2, #1
 800702a:	dc02      	bgt.n	8007032 <_printf_float+0x16a>
 800702c:	682a      	ldr	r2, [r5, #0]
 800702e:	07d2      	lsls	r2, r2, #31
 8007030:	d501      	bpl.n	8007036 <_printf_float+0x16e>
 8007032:	3301      	adds	r3, #1
 8007034:	612b      	str	r3, [r5, #16]
 8007036:	2323      	movs	r3, #35	@ 0x23
 8007038:	aa0a      	add	r2, sp, #40	@ 0x28
 800703a:	189b      	adds	r3, r3, r2
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d100      	bne.n	8007044 <_printf_float+0x17c>
 8007042:	e792      	b.n	8006f6a <_printf_float+0xa2>
 8007044:	002b      	movs	r3, r5
 8007046:	222d      	movs	r2, #45	@ 0x2d
 8007048:	3343      	adds	r3, #67	@ 0x43
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e78d      	b.n	8006f6a <_printf_float+0xa2>
 800704e:	2c47      	cmp	r4, #71	@ 0x47
 8007050:	d1b8      	bne.n	8006fc4 <_printf_float+0xfc>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1b6      	bne.n	8006fc4 <_printf_float+0xfc>
 8007056:	3301      	adds	r3, #1
 8007058:	e7b3      	b.n	8006fc2 <_printf_float+0xfa>
 800705a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800705c:	2b65      	cmp	r3, #101	@ 0x65
 800705e:	d9d7      	bls.n	8007010 <_printf_float+0x148>
 8007060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007062:	2b66      	cmp	r3, #102	@ 0x66
 8007064:	d11a      	bne.n	800709c <_printf_float+0x1d4>
 8007066:	686b      	ldr	r3, [r5, #4]
 8007068:	2a00      	cmp	r2, #0
 800706a:	dd09      	ble.n	8007080 <_printf_float+0x1b8>
 800706c:	612a      	str	r2, [r5, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <_printf_float+0x1b0>
 8007072:	6829      	ldr	r1, [r5, #0]
 8007074:	07c9      	lsls	r1, r1, #31
 8007076:	d50b      	bpl.n	8007090 <_printf_float+0x1c8>
 8007078:	3301      	adds	r3, #1
 800707a:	189b      	adds	r3, r3, r2
 800707c:	612b      	str	r3, [r5, #16]
 800707e:	e007      	b.n	8007090 <_printf_float+0x1c8>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <_printf_float+0x1c4>
 8007084:	2201      	movs	r2, #1
 8007086:	6829      	ldr	r1, [r5, #0]
 8007088:	4211      	tst	r1, r2
 800708a:	d000      	beq.n	800708e <_printf_float+0x1c6>
 800708c:	1c9a      	adds	r2, r3, #2
 800708e:	612a      	str	r2, [r5, #16]
 8007090:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007092:	2400      	movs	r4, #0
 8007094:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007096:	e7ce      	b.n	8007036 <_printf_float+0x16e>
 8007098:	2367      	movs	r3, #103	@ 0x67
 800709a:	930c      	str	r3, [sp, #48]	@ 0x30
 800709c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800709e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070a0:	4299      	cmp	r1, r3
 80070a2:	db06      	blt.n	80070b2 <_printf_float+0x1ea>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	6129      	str	r1, [r5, #16]
 80070a8:	07db      	lsls	r3, r3, #31
 80070aa:	d5f1      	bpl.n	8007090 <_printf_float+0x1c8>
 80070ac:	3101      	adds	r1, #1
 80070ae:	6129      	str	r1, [r5, #16]
 80070b0:	e7ee      	b.n	8007090 <_printf_float+0x1c8>
 80070b2:	2201      	movs	r2, #1
 80070b4:	2900      	cmp	r1, #0
 80070b6:	dce0      	bgt.n	800707a <_printf_float+0x1b2>
 80070b8:	1892      	adds	r2, r2, r2
 80070ba:	1a52      	subs	r2, r2, r1
 80070bc:	e7dd      	b.n	800707a <_printf_float+0x1b2>
 80070be:	682a      	ldr	r2, [r5, #0]
 80070c0:	0553      	lsls	r3, r2, #21
 80070c2:	d408      	bmi.n	80070d6 <_printf_float+0x20e>
 80070c4:	692b      	ldr	r3, [r5, #16]
 80070c6:	003a      	movs	r2, r7
 80070c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80070ce:	47a0      	blx	r4
 80070d0:	3001      	adds	r0, #1
 80070d2:	d129      	bne.n	8007128 <_printf_float+0x260>
 80070d4:	e754      	b.n	8006f80 <_printf_float+0xb8>
 80070d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070d8:	2b65      	cmp	r3, #101	@ 0x65
 80070da:	d800      	bhi.n	80070de <_printf_float+0x216>
 80070dc:	e0db      	b.n	8007296 <_printf_float+0x3ce>
 80070de:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80070e0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	f7f9 f9b1 	bl	800044c <__aeabi_dcmpeq>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d033      	beq.n	8007156 <_printf_float+0x28e>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4a37      	ldr	r2, [pc, #220]	@ (80071d0 <_printf_float+0x308>)
 80070f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80070f8:	47a0      	blx	r4
 80070fa:	3001      	adds	r0, #1
 80070fc:	d100      	bne.n	8007100 <_printf_float+0x238>
 80070fe:	e73f      	b.n	8006f80 <_printf_float+0xb8>
 8007100:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007102:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007104:	42b3      	cmp	r3, r6
 8007106:	db02      	blt.n	800710e <_printf_float+0x246>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	07db      	lsls	r3, r3, #31
 800710c:	d50c      	bpl.n	8007128 <_printf_float+0x260>
 800710e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007112:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007118:	47a0      	blx	r4
 800711a:	2400      	movs	r4, #0
 800711c:	3001      	adds	r0, #1
 800711e:	d100      	bne.n	8007122 <_printf_float+0x25a>
 8007120:	e72e      	b.n	8006f80 <_printf_float+0xb8>
 8007122:	1e73      	subs	r3, r6, #1
 8007124:	42a3      	cmp	r3, r4
 8007126:	dc0a      	bgt.n	800713e <_printf_float+0x276>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	079b      	lsls	r3, r3, #30
 800712c:	d500      	bpl.n	8007130 <_printf_float+0x268>
 800712e:	e106      	b.n	800733e <_printf_float+0x476>
 8007130:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007132:	68e8      	ldr	r0, [r5, #12]
 8007134:	4298      	cmp	r0, r3
 8007136:	db00      	blt.n	800713a <_printf_float+0x272>
 8007138:	e724      	b.n	8006f84 <_printf_float+0xbc>
 800713a:	0018      	movs	r0, r3
 800713c:	e722      	b.n	8006f84 <_printf_float+0xbc>
 800713e:	002a      	movs	r2, r5
 8007140:	2301      	movs	r3, #1
 8007142:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007144:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007146:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007148:	321a      	adds	r2, #26
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	d100      	bne.n	8007152 <_printf_float+0x28a>
 8007150:	e716      	b.n	8006f80 <_printf_float+0xb8>
 8007152:	3401      	adds	r4, #1
 8007154:	e7e5      	b.n	8007122 <_printf_float+0x25a>
 8007156:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc3b      	bgt.n	80071d4 <_printf_float+0x30c>
 800715c:	2301      	movs	r3, #1
 800715e:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <_printf_float+0x308>)
 8007160:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007164:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007166:	47a0      	blx	r4
 8007168:	3001      	adds	r0, #1
 800716a:	d100      	bne.n	800716e <_printf_float+0x2a6>
 800716c:	e708      	b.n	8006f80 <_printf_float+0xb8>
 800716e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007170:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007172:	4333      	orrs	r3, r6
 8007174:	d102      	bne.n	800717c <_printf_float+0x2b4>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	07db      	lsls	r3, r3, #31
 800717a:	d5d5      	bpl.n	8007128 <_printf_float+0x260>
 800717c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800717e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007180:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007184:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007186:	47a0      	blx	r4
 8007188:	2300      	movs	r3, #0
 800718a:	3001      	adds	r0, #1
 800718c:	d100      	bne.n	8007190 <_printf_float+0x2c8>
 800718e:	e6f7      	b.n	8006f80 <_printf_float+0xb8>
 8007190:	930c      	str	r3, [sp, #48]	@ 0x30
 8007192:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007194:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007196:	425b      	negs	r3, r3
 8007198:	4293      	cmp	r3, r2
 800719a:	dc01      	bgt.n	80071a0 <_printf_float+0x2d8>
 800719c:	0033      	movs	r3, r6
 800719e:	e792      	b.n	80070c6 <_printf_float+0x1fe>
 80071a0:	002a      	movs	r2, r5
 80071a2:	2301      	movs	r3, #1
 80071a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80071aa:	321a      	adds	r2, #26
 80071ac:	47a0      	blx	r4
 80071ae:	3001      	adds	r0, #1
 80071b0:	d100      	bne.n	80071b4 <_printf_float+0x2ec>
 80071b2:	e6e5      	b.n	8006f80 <_printf_float+0xb8>
 80071b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071b6:	3301      	adds	r3, #1
 80071b8:	e7ea      	b.n	8007190 <_printf_float+0x2c8>
 80071ba:	46c0      	nop			@ (mov r8, r8)
 80071bc:	7fefffff 	.word	0x7fefffff
 80071c0:	08009f6c 	.word	0x08009f6c
 80071c4:	08009f68 	.word	0x08009f68
 80071c8:	08009f74 	.word	0x08009f74
 80071cc:	08009f70 	.word	0x08009f70
 80071d0:	08009f78 	.word	0x08009f78
 80071d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80071d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80071da:	429e      	cmp	r6, r3
 80071dc:	dd00      	ble.n	80071e0 <_printf_float+0x318>
 80071de:	001e      	movs	r6, r3
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	dc31      	bgt.n	8007248 <_printf_float+0x380>
 80071e4:	43f3      	mvns	r3, r6
 80071e6:	2400      	movs	r4, #0
 80071e8:	17db      	asrs	r3, r3, #31
 80071ea:	4033      	ands	r3, r6
 80071ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80071ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80071f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f2:	1af3      	subs	r3, r6, r3
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	dc30      	bgt.n	800725a <_printf_float+0x392>
 80071f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071fc:	429a      	cmp	r2, r3
 80071fe:	dc38      	bgt.n	8007272 <_printf_float+0x3aa>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	07db      	lsls	r3, r3, #31
 8007204:	d435      	bmi.n	8007272 <_printf_float+0x3aa>
 8007206:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800720a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800720c:	1b9b      	subs	r3, r3, r6
 800720e:	1b14      	subs	r4, r2, r4
 8007210:	429c      	cmp	r4, r3
 8007212:	dd00      	ble.n	8007216 <_printf_float+0x34e>
 8007214:	001c      	movs	r4, r3
 8007216:	2c00      	cmp	r4, #0
 8007218:	dc34      	bgt.n	8007284 <_printf_float+0x3bc>
 800721a:	43e3      	mvns	r3, r4
 800721c:	2600      	movs	r6, #0
 800721e:	17db      	asrs	r3, r3, #31
 8007220:	401c      	ands	r4, r3
 8007222:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007224:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	1b1b      	subs	r3, r3, r4
 800722a:	42b3      	cmp	r3, r6
 800722c:	dc00      	bgt.n	8007230 <_printf_float+0x368>
 800722e:	e77b      	b.n	8007128 <_printf_float+0x260>
 8007230:	002a      	movs	r2, r5
 8007232:	2301      	movs	r3, #1
 8007234:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007238:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800723a:	321a      	adds	r2, #26
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	d100      	bne.n	8007244 <_printf_float+0x37c>
 8007242:	e69d      	b.n	8006f80 <_printf_float+0xb8>
 8007244:	3601      	adds	r6, #1
 8007246:	e7ec      	b.n	8007222 <_printf_float+0x35a>
 8007248:	0033      	movs	r3, r6
 800724a:	003a      	movs	r2, r7
 800724c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800724e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007250:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007252:	47a0      	blx	r4
 8007254:	3001      	adds	r0, #1
 8007256:	d1c5      	bne.n	80071e4 <_printf_float+0x31c>
 8007258:	e692      	b.n	8006f80 <_printf_float+0xb8>
 800725a:	002a      	movs	r2, r5
 800725c:	2301      	movs	r3, #1
 800725e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007260:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007262:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007264:	321a      	adds	r2, #26
 8007266:	47b0      	blx	r6
 8007268:	3001      	adds	r0, #1
 800726a:	d100      	bne.n	800726e <_printf_float+0x3a6>
 800726c:	e688      	b.n	8006f80 <_printf_float+0xb8>
 800726e:	3401      	adds	r4, #1
 8007270:	e7bd      	b.n	80071ee <_printf_float+0x326>
 8007272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007274:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007276:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007278:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800727a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800727c:	47a0      	blx	r4
 800727e:	3001      	adds	r0, #1
 8007280:	d1c1      	bne.n	8007206 <_printf_float+0x33e>
 8007282:	e67d      	b.n	8006f80 <_printf_float+0xb8>
 8007284:	19ba      	adds	r2, r7, r6
 8007286:	0023      	movs	r3, r4
 8007288:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800728a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800728c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800728e:	47b0      	blx	r6
 8007290:	3001      	adds	r0, #1
 8007292:	d1c2      	bne.n	800721a <_printf_float+0x352>
 8007294:	e674      	b.n	8006f80 <_printf_float+0xb8>
 8007296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007298:	930c      	str	r3, [sp, #48]	@ 0x30
 800729a:	2b01      	cmp	r3, #1
 800729c:	dc02      	bgt.n	80072a4 <_printf_float+0x3dc>
 800729e:	2301      	movs	r3, #1
 80072a0:	421a      	tst	r2, r3
 80072a2:	d039      	beq.n	8007318 <_printf_float+0x450>
 80072a4:	2301      	movs	r3, #1
 80072a6:	003a      	movs	r2, r7
 80072a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80072ae:	47b0      	blx	r6
 80072b0:	3001      	adds	r0, #1
 80072b2:	d100      	bne.n	80072b6 <_printf_float+0x3ee>
 80072b4:	e664      	b.n	8006f80 <_printf_float+0xb8>
 80072b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80072c0:	47b0      	blx	r6
 80072c2:	3001      	adds	r0, #1
 80072c4:	d100      	bne.n	80072c8 <_printf_float+0x400>
 80072c6:	e65b      	b.n	8006f80 <_printf_float+0xb8>
 80072c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80072ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80072cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072ce:	2200      	movs	r2, #0
 80072d0:	3b01      	subs	r3, #1
 80072d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80072d4:	2300      	movs	r3, #0
 80072d6:	f7f9 f8b9 	bl	800044c <__aeabi_dcmpeq>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d11a      	bne.n	8007314 <_printf_float+0x44c>
 80072de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e0:	1c7a      	adds	r2, r7, #1
 80072e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80072e8:	47b0      	blx	r6
 80072ea:	3001      	adds	r0, #1
 80072ec:	d10e      	bne.n	800730c <_printf_float+0x444>
 80072ee:	e647      	b.n	8006f80 <_printf_float+0xb8>
 80072f0:	002a      	movs	r2, r5
 80072f2:	2301      	movs	r3, #1
 80072f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80072fa:	321a      	adds	r2, #26
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	d100      	bne.n	8007304 <_printf_float+0x43c>
 8007302:	e63d      	b.n	8006f80 <_printf_float+0xb8>
 8007304:	3601      	adds	r6, #1
 8007306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007308:	429e      	cmp	r6, r3
 800730a:	dbf1      	blt.n	80072f0 <_printf_float+0x428>
 800730c:	002a      	movs	r2, r5
 800730e:	0023      	movs	r3, r4
 8007310:	3250      	adds	r2, #80	@ 0x50
 8007312:	e6d9      	b.n	80070c8 <_printf_float+0x200>
 8007314:	2600      	movs	r6, #0
 8007316:	e7f6      	b.n	8007306 <_printf_float+0x43e>
 8007318:	003a      	movs	r2, r7
 800731a:	e7e2      	b.n	80072e2 <_printf_float+0x41a>
 800731c:	002a      	movs	r2, r5
 800731e:	2301      	movs	r3, #1
 8007320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007324:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007326:	3219      	adds	r2, #25
 8007328:	47b0      	blx	r6
 800732a:	3001      	adds	r0, #1
 800732c:	d100      	bne.n	8007330 <_printf_float+0x468>
 800732e:	e627      	b.n	8006f80 <_printf_float+0xb8>
 8007330:	3401      	adds	r4, #1
 8007332:	68eb      	ldr	r3, [r5, #12]
 8007334:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42a3      	cmp	r3, r4
 800733a:	dcef      	bgt.n	800731c <_printf_float+0x454>
 800733c:	e6f8      	b.n	8007130 <_printf_float+0x268>
 800733e:	2400      	movs	r4, #0
 8007340:	e7f7      	b.n	8007332 <_printf_float+0x46a>
 8007342:	46c0      	nop			@ (mov r8, r8)

08007344 <_printf_common>:
 8007344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007346:	0016      	movs	r6, r2
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	688a      	ldr	r2, [r1, #8]
 800734c:	690b      	ldr	r3, [r1, #16]
 800734e:	000c      	movs	r4, r1
 8007350:	9000      	str	r0, [sp, #0]
 8007352:	4293      	cmp	r3, r2
 8007354:	da00      	bge.n	8007358 <_printf_common+0x14>
 8007356:	0013      	movs	r3, r2
 8007358:	0022      	movs	r2, r4
 800735a:	6033      	str	r3, [r6, #0]
 800735c:	3243      	adds	r2, #67	@ 0x43
 800735e:	7812      	ldrb	r2, [r2, #0]
 8007360:	2a00      	cmp	r2, #0
 8007362:	d001      	beq.n	8007368 <_printf_common+0x24>
 8007364:	3301      	adds	r3, #1
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	069b      	lsls	r3, r3, #26
 800736c:	d502      	bpl.n	8007374 <_printf_common+0x30>
 800736e:	6833      	ldr	r3, [r6, #0]
 8007370:	3302      	adds	r3, #2
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	6822      	ldr	r2, [r4, #0]
 8007376:	2306      	movs	r3, #6
 8007378:	0015      	movs	r5, r2
 800737a:	401d      	ands	r5, r3
 800737c:	421a      	tst	r2, r3
 800737e:	d027      	beq.n	80073d0 <_printf_common+0x8c>
 8007380:	0023      	movs	r3, r4
 8007382:	3343      	adds	r3, #67	@ 0x43
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	1e5a      	subs	r2, r3, #1
 8007388:	4193      	sbcs	r3, r2
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d430      	bmi.n	80073f2 <_printf_common+0xae>
 8007390:	0022      	movs	r2, r4
 8007392:	9901      	ldr	r1, [sp, #4]
 8007394:	9800      	ldr	r0, [sp, #0]
 8007396:	9d08      	ldr	r5, [sp, #32]
 8007398:	3243      	adds	r2, #67	@ 0x43
 800739a:	47a8      	blx	r5
 800739c:	3001      	adds	r0, #1
 800739e:	d025      	beq.n	80073ec <_printf_common+0xa8>
 80073a0:	2206      	movs	r2, #6
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	2500      	movs	r5, #0
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d105      	bne.n	80073b8 <_printf_common+0x74>
 80073ac:	6833      	ldr	r3, [r6, #0]
 80073ae:	68e5      	ldr	r5, [r4, #12]
 80073b0:	1aed      	subs	r5, r5, r3
 80073b2:	43eb      	mvns	r3, r5
 80073b4:	17db      	asrs	r3, r3, #31
 80073b6:	401d      	ands	r5, r3
 80073b8:	68a3      	ldr	r3, [r4, #8]
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	4293      	cmp	r3, r2
 80073be:	dd01      	ble.n	80073c4 <_printf_common+0x80>
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	18ed      	adds	r5, r5, r3
 80073c4:	2600      	movs	r6, #0
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d120      	bne.n	800740c <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e010      	b.n	80073f0 <_printf_common+0xac>
 80073ce:	3501      	adds	r5, #1
 80073d0:	68e3      	ldr	r3, [r4, #12]
 80073d2:	6832      	ldr	r2, [r6, #0]
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	42ab      	cmp	r3, r5
 80073d8:	ddd2      	ble.n	8007380 <_printf_common+0x3c>
 80073da:	0022      	movs	r2, r4
 80073dc:	2301      	movs	r3, #1
 80073de:	9901      	ldr	r1, [sp, #4]
 80073e0:	9800      	ldr	r0, [sp, #0]
 80073e2:	9f08      	ldr	r7, [sp, #32]
 80073e4:	3219      	adds	r2, #25
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	d1f0      	bne.n	80073ce <_printf_common+0x8a>
 80073ec:	2001      	movs	r0, #1
 80073ee:	4240      	negs	r0, r0
 80073f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073f2:	2030      	movs	r0, #48	@ 0x30
 80073f4:	18e1      	adds	r1, r4, r3
 80073f6:	3143      	adds	r1, #67	@ 0x43
 80073f8:	7008      	strb	r0, [r1, #0]
 80073fa:	0021      	movs	r1, r4
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	3145      	adds	r1, #69	@ 0x45
 8007400:	7809      	ldrb	r1, [r1, #0]
 8007402:	18a2      	adds	r2, r4, r2
 8007404:	3243      	adds	r2, #67	@ 0x43
 8007406:	3302      	adds	r3, #2
 8007408:	7011      	strb	r1, [r2, #0]
 800740a:	e7c1      	b.n	8007390 <_printf_common+0x4c>
 800740c:	0022      	movs	r2, r4
 800740e:	2301      	movs	r3, #1
 8007410:	9901      	ldr	r1, [sp, #4]
 8007412:	9800      	ldr	r0, [sp, #0]
 8007414:	9f08      	ldr	r7, [sp, #32]
 8007416:	321a      	adds	r2, #26
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d0e6      	beq.n	80073ec <_printf_common+0xa8>
 800741e:	3601      	adds	r6, #1
 8007420:	e7d1      	b.n	80073c6 <_printf_common+0x82>
	...

08007424 <_printf_i>:
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	b08b      	sub	sp, #44	@ 0x2c
 8007428:	9206      	str	r2, [sp, #24]
 800742a:	000a      	movs	r2, r1
 800742c:	3243      	adds	r2, #67	@ 0x43
 800742e:	9307      	str	r3, [sp, #28]
 8007430:	9005      	str	r0, [sp, #20]
 8007432:	9203      	str	r2, [sp, #12]
 8007434:	7e0a      	ldrb	r2, [r1, #24]
 8007436:	000c      	movs	r4, r1
 8007438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800743a:	2a78      	cmp	r2, #120	@ 0x78
 800743c:	d809      	bhi.n	8007452 <_printf_i+0x2e>
 800743e:	2a62      	cmp	r2, #98	@ 0x62
 8007440:	d80b      	bhi.n	800745a <_printf_i+0x36>
 8007442:	2a00      	cmp	r2, #0
 8007444:	d100      	bne.n	8007448 <_printf_i+0x24>
 8007446:	e0ba      	b.n	80075be <_printf_i+0x19a>
 8007448:	497a      	ldr	r1, [pc, #488]	@ (8007634 <_printf_i+0x210>)
 800744a:	9104      	str	r1, [sp, #16]
 800744c:	2a58      	cmp	r2, #88	@ 0x58
 800744e:	d100      	bne.n	8007452 <_printf_i+0x2e>
 8007450:	e08e      	b.n	8007570 <_printf_i+0x14c>
 8007452:	0025      	movs	r5, r4
 8007454:	3542      	adds	r5, #66	@ 0x42
 8007456:	702a      	strb	r2, [r5, #0]
 8007458:	e022      	b.n	80074a0 <_printf_i+0x7c>
 800745a:	0010      	movs	r0, r2
 800745c:	3863      	subs	r0, #99	@ 0x63
 800745e:	2815      	cmp	r0, #21
 8007460:	d8f7      	bhi.n	8007452 <_printf_i+0x2e>
 8007462:	f7f8 fe63 	bl	800012c <__gnu_thumb1_case_shi>
 8007466:	0016      	.short	0x0016
 8007468:	fff6001f 	.word	0xfff6001f
 800746c:	fff6fff6 	.word	0xfff6fff6
 8007470:	001ffff6 	.word	0x001ffff6
 8007474:	fff6fff6 	.word	0xfff6fff6
 8007478:	fff6fff6 	.word	0xfff6fff6
 800747c:	0036009f 	.word	0x0036009f
 8007480:	fff6007e 	.word	0xfff6007e
 8007484:	00b0fff6 	.word	0x00b0fff6
 8007488:	0036fff6 	.word	0x0036fff6
 800748c:	fff6fff6 	.word	0xfff6fff6
 8007490:	0082      	.short	0x0082
 8007492:	0025      	movs	r5, r4
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	3542      	adds	r5, #66	@ 0x42
 8007498:	1d11      	adds	r1, r2, #4
 800749a:	6019      	str	r1, [r3, #0]
 800749c:	6813      	ldr	r3, [r2, #0]
 800749e:	702b      	strb	r3, [r5, #0]
 80074a0:	2301      	movs	r3, #1
 80074a2:	e09e      	b.n	80075e2 <_printf_i+0x1be>
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	6809      	ldr	r1, [r1, #0]
 80074a8:	1d02      	adds	r2, r0, #4
 80074aa:	060d      	lsls	r5, r1, #24
 80074ac:	d50b      	bpl.n	80074c6 <_printf_i+0xa2>
 80074ae:	6806      	ldr	r6, [r0, #0]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	da03      	bge.n	80074be <_printf_i+0x9a>
 80074b6:	232d      	movs	r3, #45	@ 0x2d
 80074b8:	9a03      	ldr	r2, [sp, #12]
 80074ba:	4276      	negs	r6, r6
 80074bc:	7013      	strb	r3, [r2, #0]
 80074be:	4b5d      	ldr	r3, [pc, #372]	@ (8007634 <_printf_i+0x210>)
 80074c0:	270a      	movs	r7, #10
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	e018      	b.n	80074f8 <_printf_i+0xd4>
 80074c6:	6806      	ldr	r6, [r0, #0]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	0649      	lsls	r1, r1, #25
 80074cc:	d5f1      	bpl.n	80074b2 <_printf_i+0x8e>
 80074ce:	b236      	sxth	r6, r6
 80074d0:	e7ef      	b.n	80074b2 <_printf_i+0x8e>
 80074d2:	6808      	ldr	r0, [r1, #0]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	c940      	ldmia	r1!, {r6}
 80074d8:	0605      	lsls	r5, r0, #24
 80074da:	d402      	bmi.n	80074e2 <_printf_i+0xbe>
 80074dc:	0640      	lsls	r0, r0, #25
 80074de:	d500      	bpl.n	80074e2 <_printf_i+0xbe>
 80074e0:	b2b6      	uxth	r6, r6
 80074e2:	6019      	str	r1, [r3, #0]
 80074e4:	4b53      	ldr	r3, [pc, #332]	@ (8007634 <_printf_i+0x210>)
 80074e6:	270a      	movs	r7, #10
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80074ec:	d100      	bne.n	80074f0 <_printf_i+0xcc>
 80074ee:	3f02      	subs	r7, #2
 80074f0:	0023      	movs	r3, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	3343      	adds	r3, #67	@ 0x43
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	db06      	blt.n	800750e <_printf_i+0xea>
 8007500:	2104      	movs	r1, #4
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	9d03      	ldr	r5, [sp, #12]
 8007506:	438a      	bics	r2, r1
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	4333      	orrs	r3, r6
 800750c:	d00c      	beq.n	8007528 <_printf_i+0x104>
 800750e:	9d03      	ldr	r5, [sp, #12]
 8007510:	0030      	movs	r0, r6
 8007512:	0039      	movs	r1, r7
 8007514:	f7f8 fe9a 	bl	800024c <__aeabi_uidivmod>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	3d01      	subs	r5, #1
 800751c:	5c5b      	ldrb	r3, [r3, r1]
 800751e:	702b      	strb	r3, [r5, #0]
 8007520:	0033      	movs	r3, r6
 8007522:	0006      	movs	r6, r0
 8007524:	429f      	cmp	r7, r3
 8007526:	d9f3      	bls.n	8007510 <_printf_i+0xec>
 8007528:	2f08      	cmp	r7, #8
 800752a:	d109      	bne.n	8007540 <_printf_i+0x11c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07db      	lsls	r3, r3, #31
 8007530:	d506      	bpl.n	8007540 <_printf_i+0x11c>
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	dc02      	bgt.n	8007540 <_printf_i+0x11c>
 800753a:	2330      	movs	r3, #48	@ 0x30
 800753c:	3d01      	subs	r5, #1
 800753e:	702b      	strb	r3, [r5, #0]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	1b5b      	subs	r3, r3, r5
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	0021      	movs	r1, r4
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	9805      	ldr	r0, [sp, #20]
 800754e:	9b06      	ldr	r3, [sp, #24]
 8007550:	aa09      	add	r2, sp, #36	@ 0x24
 8007552:	f7ff fef7 	bl	8007344 <_printf_common>
 8007556:	3001      	adds	r0, #1
 8007558:	d148      	bne.n	80075ec <_printf_i+0x1c8>
 800755a:	2001      	movs	r0, #1
 800755c:	4240      	negs	r0, r0
 800755e:	b00b      	add	sp, #44	@ 0x2c
 8007560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007562:	2220      	movs	r2, #32
 8007564:	6809      	ldr	r1, [r1, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	6022      	str	r2, [r4, #0]
 800756a:	2278      	movs	r2, #120	@ 0x78
 800756c:	4932      	ldr	r1, [pc, #200]	@ (8007638 <_printf_i+0x214>)
 800756e:	9104      	str	r1, [sp, #16]
 8007570:	0021      	movs	r1, r4
 8007572:	3145      	adds	r1, #69	@ 0x45
 8007574:	700a      	strb	r2, [r1, #0]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	c940      	ldmia	r1!, {r6}
 800757c:	0610      	lsls	r0, r2, #24
 800757e:	d402      	bmi.n	8007586 <_printf_i+0x162>
 8007580:	0650      	lsls	r0, r2, #25
 8007582:	d500      	bpl.n	8007586 <_printf_i+0x162>
 8007584:	b2b6      	uxth	r6, r6
 8007586:	6019      	str	r1, [r3, #0]
 8007588:	07d3      	lsls	r3, r2, #31
 800758a:	d502      	bpl.n	8007592 <_printf_i+0x16e>
 800758c:	2320      	movs	r3, #32
 800758e:	4313      	orrs	r3, r2
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	2e00      	cmp	r6, #0
 8007594:	d001      	beq.n	800759a <_printf_i+0x176>
 8007596:	2710      	movs	r7, #16
 8007598:	e7aa      	b.n	80074f0 <_printf_i+0xcc>
 800759a:	2220      	movs	r2, #32
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	4393      	bics	r3, r2
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	e7f8      	b.n	8007596 <_printf_i+0x172>
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	680d      	ldr	r5, [r1, #0]
 80075a8:	1d10      	adds	r0, r2, #4
 80075aa:	6949      	ldr	r1, [r1, #20]
 80075ac:	6018      	str	r0, [r3, #0]
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	062e      	lsls	r6, r5, #24
 80075b2:	d501      	bpl.n	80075b8 <_printf_i+0x194>
 80075b4:	6019      	str	r1, [r3, #0]
 80075b6:	e002      	b.n	80075be <_printf_i+0x19a>
 80075b8:	066d      	lsls	r5, r5, #25
 80075ba:	d5fb      	bpl.n	80075b4 <_printf_i+0x190>
 80075bc:	8019      	strh	r1, [r3, #0]
 80075be:	2300      	movs	r3, #0
 80075c0:	9d03      	ldr	r5, [sp, #12]
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	e7bf      	b.n	8007546 <_printf_i+0x122>
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	1d11      	adds	r1, r2, #4
 80075ca:	6019      	str	r1, [r3, #0]
 80075cc:	6815      	ldr	r5, [r2, #0]
 80075ce:	2100      	movs	r1, #0
 80075d0:	0028      	movs	r0, r5
 80075d2:	6862      	ldr	r2, [r4, #4]
 80075d4:	f000 f9ff 	bl	80079d6 <memchr>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d001      	beq.n	80075e0 <_printf_i+0x1bc>
 80075dc:	1b40      	subs	r0, r0, r5
 80075de:	6060      	str	r0, [r4, #4]
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	2300      	movs	r3, #0
 80075e6:	9a03      	ldr	r2, [sp, #12]
 80075e8:	7013      	strb	r3, [r2, #0]
 80075ea:	e7ac      	b.n	8007546 <_printf_i+0x122>
 80075ec:	002a      	movs	r2, r5
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	9906      	ldr	r1, [sp, #24]
 80075f2:	9805      	ldr	r0, [sp, #20]
 80075f4:	9d07      	ldr	r5, [sp, #28]
 80075f6:	47a8      	blx	r5
 80075f8:	3001      	adds	r0, #1
 80075fa:	d0ae      	beq.n	800755a <_printf_i+0x136>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	079b      	lsls	r3, r3, #30
 8007600:	d415      	bmi.n	800762e <_printf_i+0x20a>
 8007602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007604:	68e0      	ldr	r0, [r4, #12]
 8007606:	4298      	cmp	r0, r3
 8007608:	daa9      	bge.n	800755e <_printf_i+0x13a>
 800760a:	0018      	movs	r0, r3
 800760c:	e7a7      	b.n	800755e <_printf_i+0x13a>
 800760e:	0022      	movs	r2, r4
 8007610:	2301      	movs	r3, #1
 8007612:	9906      	ldr	r1, [sp, #24]
 8007614:	9805      	ldr	r0, [sp, #20]
 8007616:	9e07      	ldr	r6, [sp, #28]
 8007618:	3219      	adds	r2, #25
 800761a:	47b0      	blx	r6
 800761c:	3001      	adds	r0, #1
 800761e:	d09c      	beq.n	800755a <_printf_i+0x136>
 8007620:	3501      	adds	r5, #1
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	42ab      	cmp	r3, r5
 800762a:	dcf0      	bgt.n	800760e <_printf_i+0x1ea>
 800762c:	e7e9      	b.n	8007602 <_printf_i+0x1de>
 800762e:	2500      	movs	r5, #0
 8007630:	e7f7      	b.n	8007622 <_printf_i+0x1fe>
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	08009f7a 	.word	0x08009f7a
 8007638:	08009f8b 	.word	0x08009f8b

0800763c <std>:
 800763c:	2300      	movs	r3, #0
 800763e:	b510      	push	{r4, lr}
 8007640:	0004      	movs	r4, r0
 8007642:	6003      	str	r3, [r0, #0]
 8007644:	6043      	str	r3, [r0, #4]
 8007646:	6083      	str	r3, [r0, #8]
 8007648:	8181      	strh	r1, [r0, #12]
 800764a:	6643      	str	r3, [r0, #100]	@ 0x64
 800764c:	81c2      	strh	r2, [r0, #14]
 800764e:	6103      	str	r3, [r0, #16]
 8007650:	6143      	str	r3, [r0, #20]
 8007652:	6183      	str	r3, [r0, #24]
 8007654:	0019      	movs	r1, r3
 8007656:	2208      	movs	r2, #8
 8007658:	305c      	adds	r0, #92	@ 0x5c
 800765a:	f000 f935 	bl	80078c8 <memset>
 800765e:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <std+0x50>)
 8007660:	6224      	str	r4, [r4, #32]
 8007662:	6263      	str	r3, [r4, #36]	@ 0x24
 8007664:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <std+0x54>)
 8007666:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <std+0x58>)
 800766a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800766c:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <std+0x5c>)
 800766e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007670:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <std+0x60>)
 8007672:	429c      	cmp	r4, r3
 8007674:	d005      	beq.n	8007682 <std+0x46>
 8007676:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <std+0x64>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d002      	beq.n	8007682 <std+0x46>
 800767c:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <std+0x68>)
 800767e:	429c      	cmp	r4, r3
 8007680:	d103      	bne.n	800768a <std+0x4e>
 8007682:	0020      	movs	r0, r4
 8007684:	3058      	adds	r0, #88	@ 0x58
 8007686:	f000 f9a3 	bl	80079d0 <__retarget_lock_init_recursive>
 800768a:	bd10      	pop	{r4, pc}
 800768c:	08007831 	.word	0x08007831
 8007690:	08007859 	.word	0x08007859
 8007694:	08007891 	.word	0x08007891
 8007698:	080078bd 	.word	0x080078bd
 800769c:	200002d4 	.word	0x200002d4
 80076a0:	2000033c 	.word	0x2000033c
 80076a4:	200003a4 	.word	0x200003a4

080076a8 <stdio_exit_handler>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	4a03      	ldr	r2, [pc, #12]	@ (80076b8 <stdio_exit_handler+0x10>)
 80076ac:	4903      	ldr	r1, [pc, #12]	@ (80076bc <stdio_exit_handler+0x14>)
 80076ae:	4804      	ldr	r0, [pc, #16]	@ (80076c0 <stdio_exit_handler+0x18>)
 80076b0:	f000 f86c 	bl	800778c <_fwalk_sglue>
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	46c0      	nop			@ (mov r8, r8)
 80076b8:	2000000c 	.word	0x2000000c
 80076bc:	080093f5 	.word	0x080093f5
 80076c0:	2000001c 	.word	0x2000001c

080076c4 <cleanup_stdio>:
 80076c4:	6841      	ldr	r1, [r0, #4]
 80076c6:	4b0b      	ldr	r3, [pc, #44]	@ (80076f4 <cleanup_stdio+0x30>)
 80076c8:	b510      	push	{r4, lr}
 80076ca:	0004      	movs	r4, r0
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d001      	beq.n	80076d4 <cleanup_stdio+0x10>
 80076d0:	f001 fe90 	bl	80093f4 <_fflush_r>
 80076d4:	68a1      	ldr	r1, [r4, #8]
 80076d6:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <cleanup_stdio+0x34>)
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <cleanup_stdio+0x1e>
 80076dc:	0020      	movs	r0, r4
 80076de:	f001 fe89 	bl	80093f4 <_fflush_r>
 80076e2:	68e1      	ldr	r1, [r4, #12]
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <cleanup_stdio+0x38>)
 80076e6:	4299      	cmp	r1, r3
 80076e8:	d002      	beq.n	80076f0 <cleanup_stdio+0x2c>
 80076ea:	0020      	movs	r0, r4
 80076ec:	f001 fe82 	bl	80093f4 <_fflush_r>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	200002d4 	.word	0x200002d4
 80076f8:	2000033c 	.word	0x2000033c
 80076fc:	200003a4 	.word	0x200003a4

08007700 <global_stdio_init.part.0>:
 8007700:	b510      	push	{r4, lr}
 8007702:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <global_stdio_init.part.0+0x28>)
 8007704:	4a09      	ldr	r2, [pc, #36]	@ (800772c <global_stdio_init.part.0+0x2c>)
 8007706:	2104      	movs	r1, #4
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	4809      	ldr	r0, [pc, #36]	@ (8007730 <global_stdio_init.part.0+0x30>)
 800770c:	2200      	movs	r2, #0
 800770e:	f7ff ff95 	bl	800763c <std>
 8007712:	2201      	movs	r2, #1
 8007714:	2109      	movs	r1, #9
 8007716:	4807      	ldr	r0, [pc, #28]	@ (8007734 <global_stdio_init.part.0+0x34>)
 8007718:	f7ff ff90 	bl	800763c <std>
 800771c:	2202      	movs	r2, #2
 800771e:	2112      	movs	r1, #18
 8007720:	4805      	ldr	r0, [pc, #20]	@ (8007738 <global_stdio_init.part.0+0x38>)
 8007722:	f7ff ff8b 	bl	800763c <std>
 8007726:	bd10      	pop	{r4, pc}
 8007728:	2000040c 	.word	0x2000040c
 800772c:	080076a9 	.word	0x080076a9
 8007730:	200002d4 	.word	0x200002d4
 8007734:	2000033c 	.word	0x2000033c
 8007738:	200003a4 	.word	0x200003a4

0800773c <__sfp_lock_acquire>:
 800773c:	b510      	push	{r4, lr}
 800773e:	4802      	ldr	r0, [pc, #8]	@ (8007748 <__sfp_lock_acquire+0xc>)
 8007740:	f000 f947 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	20000415 	.word	0x20000415

0800774c <__sfp_lock_release>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4802      	ldr	r0, [pc, #8]	@ (8007758 <__sfp_lock_release+0xc>)
 8007750:	f000 f940 	bl	80079d4 <__retarget_lock_release_recursive>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	20000415 	.word	0x20000415

0800775c <__sinit>:
 800775c:	b510      	push	{r4, lr}
 800775e:	0004      	movs	r4, r0
 8007760:	f7ff ffec 	bl	800773c <__sfp_lock_acquire>
 8007764:	6a23      	ldr	r3, [r4, #32]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <__sinit+0x14>
 800776a:	f7ff ffef 	bl	800774c <__sfp_lock_release>
 800776e:	bd10      	pop	{r4, pc}
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <__sinit+0x28>)
 8007772:	6223      	str	r3, [r4, #32]
 8007774:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <__sinit+0x2c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f6      	bne.n	800776a <__sinit+0xe>
 800777c:	f7ff ffc0 	bl	8007700 <global_stdio_init.part.0>
 8007780:	e7f3      	b.n	800776a <__sinit+0xe>
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	080076c5 	.word	0x080076c5
 8007788:	2000040c 	.word	0x2000040c

0800778c <_fwalk_sglue>:
 800778c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778e:	0014      	movs	r4, r2
 8007790:	2600      	movs	r6, #0
 8007792:	9000      	str	r0, [sp, #0]
 8007794:	9101      	str	r1, [sp, #4]
 8007796:	68a5      	ldr	r5, [r4, #8]
 8007798:	6867      	ldr	r7, [r4, #4]
 800779a:	3f01      	subs	r7, #1
 800779c:	d504      	bpl.n	80077a8 <_fwalk_sglue+0x1c>
 800779e:	6824      	ldr	r4, [r4, #0]
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d1f8      	bne.n	8007796 <_fwalk_sglue+0xa>
 80077a4:	0030      	movs	r0, r6
 80077a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077a8:	89ab      	ldrh	r3, [r5, #12]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d908      	bls.n	80077c0 <_fwalk_sglue+0x34>
 80077ae:	220e      	movs	r2, #14
 80077b0:	5eab      	ldrsh	r3, [r5, r2]
 80077b2:	3301      	adds	r3, #1
 80077b4:	d004      	beq.n	80077c0 <_fwalk_sglue+0x34>
 80077b6:	0029      	movs	r1, r5
 80077b8:	9800      	ldr	r0, [sp, #0]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	4798      	blx	r3
 80077be:	4306      	orrs	r6, r0
 80077c0:	3568      	adds	r5, #104	@ 0x68
 80077c2:	e7ea      	b.n	800779a <_fwalk_sglue+0xe>

080077c4 <sniprintf>:
 80077c4:	b40c      	push	{r2, r3}
 80077c6:	b530      	push	{r4, r5, lr}
 80077c8:	4b18      	ldr	r3, [pc, #96]	@ (800782c <sniprintf+0x68>)
 80077ca:	000c      	movs	r4, r1
 80077cc:	681d      	ldr	r5, [r3, #0]
 80077ce:	b09d      	sub	sp, #116	@ 0x74
 80077d0:	2900      	cmp	r1, #0
 80077d2:	da08      	bge.n	80077e6 <sniprintf+0x22>
 80077d4:	238b      	movs	r3, #139	@ 0x8b
 80077d6:	2001      	movs	r0, #1
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	4240      	negs	r0, r0
 80077dc:	b01d      	add	sp, #116	@ 0x74
 80077de:	bc30      	pop	{r4, r5}
 80077e0:	bc08      	pop	{r3}
 80077e2:	b002      	add	sp, #8
 80077e4:	4718      	bx	r3
 80077e6:	2382      	movs	r3, #130	@ 0x82
 80077e8:	466a      	mov	r2, sp
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	8293      	strh	r3, [r2, #20]
 80077ee:	2300      	movs	r3, #0
 80077f0:	9002      	str	r0, [sp, #8]
 80077f2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80077f4:	9006      	str	r0, [sp, #24]
 80077f6:	4299      	cmp	r1, r3
 80077f8:	d000      	beq.n	80077fc <sniprintf+0x38>
 80077fa:	1e4b      	subs	r3, r1, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	2301      	movs	r3, #1
 8007802:	466a      	mov	r2, sp
 8007804:	425b      	negs	r3, r3
 8007806:	82d3      	strh	r3, [r2, #22]
 8007808:	0028      	movs	r0, r5
 800780a:	ab21      	add	r3, sp, #132	@ 0x84
 800780c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800780e:	a902      	add	r1, sp, #8
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	f001 fc6b 	bl	80090ec <_svfiprintf_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	da01      	bge.n	800781e <sniprintf+0x5a>
 800781a:	238b      	movs	r3, #139	@ 0x8b
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	2c00      	cmp	r4, #0
 8007820:	d0dc      	beq.n	80077dc <sniprintf+0x18>
 8007822:	2200      	movs	r2, #0
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e7d8      	b.n	80077dc <sniprintf+0x18>
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	20000018 	.word	0x20000018

08007830 <__sread>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	000c      	movs	r4, r1
 8007834:	250e      	movs	r5, #14
 8007836:	5f49      	ldrsh	r1, [r1, r5]
 8007838:	f000 f878 	bl	800792c <_read_r>
 800783c:	2800      	cmp	r0, #0
 800783e:	db03      	blt.n	8007848 <__sread+0x18>
 8007840:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007842:	181b      	adds	r3, r3, r0
 8007844:	6563      	str	r3, [r4, #84]	@ 0x54
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	4a02      	ldr	r2, [pc, #8]	@ (8007854 <__sread+0x24>)
 800784c:	4013      	ands	r3, r2
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	e7f9      	b.n	8007846 <__sread+0x16>
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	ffffefff 	.word	0xffffefff

08007858 <__swrite>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	001f      	movs	r7, r3
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	0005      	movs	r5, r0
 8007860:	000c      	movs	r4, r1
 8007862:	0016      	movs	r6, r2
 8007864:	05db      	lsls	r3, r3, #23
 8007866:	d505      	bpl.n	8007874 <__swrite+0x1c>
 8007868:	230e      	movs	r3, #14
 800786a:	5ec9      	ldrsh	r1, [r1, r3]
 800786c:	2200      	movs	r2, #0
 800786e:	2302      	movs	r3, #2
 8007870:	f000 f848 	bl	8007904 <_lseek_r>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	4a05      	ldr	r2, [pc, #20]	@ (800788c <__swrite+0x34>)
 8007878:	0028      	movs	r0, r5
 800787a:	4013      	ands	r3, r2
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	0032      	movs	r2, r6
 8007880:	230e      	movs	r3, #14
 8007882:	5ee1      	ldrsh	r1, [r4, r3]
 8007884:	003b      	movs	r3, r7
 8007886:	f000 f865 	bl	8007954 <_write_r>
 800788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788c:	ffffefff 	.word	0xffffefff

08007890 <__sseek>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	000c      	movs	r4, r1
 8007894:	250e      	movs	r5, #14
 8007896:	5f49      	ldrsh	r1, [r1, r5]
 8007898:	f000 f834 	bl	8007904 <_lseek_r>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	1c42      	adds	r2, r0, #1
 80078a0:	d103      	bne.n	80078aa <__sseek+0x1a>
 80078a2:	4a05      	ldr	r2, [pc, #20]	@ (80078b8 <__sseek+0x28>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	0152      	lsls	r2, r2, #5
 80078ae:	4313      	orrs	r3, r2
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80078b4:	e7f8      	b.n	80078a8 <__sseek+0x18>
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	ffffefff 	.word	0xffffefff

080078bc <__sclose>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	230e      	movs	r3, #14
 80078c0:	5ec9      	ldrsh	r1, [r1, r3]
 80078c2:	f000 f80d 	bl	80078e0 <_close_r>
 80078c6:	bd10      	pop	{r4, pc}

080078c8 <memset>:
 80078c8:	0003      	movs	r3, r0
 80078ca:	1882      	adds	r2, r0, r2
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d100      	bne.n	80078d2 <memset+0xa>
 80078d0:	4770      	bx	lr
 80078d2:	7019      	strb	r1, [r3, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	e7f9      	b.n	80078cc <memset+0x4>

080078d8 <_localeconv_r>:
 80078d8:	4800      	ldr	r0, [pc, #0]	@ (80078dc <_localeconv_r+0x4>)
 80078da:	4770      	bx	lr
 80078dc:	20000158 	.word	0x20000158

080078e0 <_close_r>:
 80078e0:	2300      	movs	r3, #0
 80078e2:	b570      	push	{r4, r5, r6, lr}
 80078e4:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_close_r+0x20>)
 80078e6:	0004      	movs	r4, r0
 80078e8:	0008      	movs	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fb fea4 	bl	8003638 <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d103      	bne.n	80078fc <_close_r+0x1c>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d000      	beq.n	80078fc <_close_r+0x1c>
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	20000410 	.word	0x20000410

08007904 <_lseek_r>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	0004      	movs	r4, r0
 8007908:	0008      	movs	r0, r1
 800790a:	0011      	movs	r1, r2
 800790c:	001a      	movs	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	4d05      	ldr	r5, [pc, #20]	@ (8007928 <_lseek_r+0x24>)
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7fb feb1 	bl	800367a <_lseek>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d103      	bne.n	8007924 <_lseek_r+0x20>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d000      	beq.n	8007924 <_lseek_r+0x20>
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	bd70      	pop	{r4, r5, r6, pc}
 8007926:	46c0      	nop			@ (mov r8, r8)
 8007928:	20000410 	.word	0x20000410

0800792c <_read_r>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	0004      	movs	r4, r0
 8007930:	0008      	movs	r0, r1
 8007932:	0011      	movs	r1, r2
 8007934:	001a      	movs	r2, r3
 8007936:	2300      	movs	r3, #0
 8007938:	4d05      	ldr	r5, [pc, #20]	@ (8007950 <_read_r+0x24>)
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7fb fe43 	bl	80035c6 <_read>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d103      	bne.n	800794c <_read_r+0x20>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d000      	beq.n	800794c <_read_r+0x20>
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	bd70      	pop	{r4, r5, r6, pc}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	20000410 	.word	0x20000410

08007954 <_write_r>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	0004      	movs	r4, r0
 8007958:	0008      	movs	r0, r1
 800795a:	0011      	movs	r1, r2
 800795c:	001a      	movs	r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	4d05      	ldr	r5, [pc, #20]	@ (8007978 <_write_r+0x24>)
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	f7fb fe4c 	bl	8003600 <_write>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d103      	bne.n	8007974 <_write_r+0x20>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d000      	beq.n	8007974 <_write_r+0x20>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd70      	pop	{r4, r5, r6, pc}
 8007976:	46c0      	nop			@ (mov r8, r8)
 8007978:	20000410 	.word	0x20000410

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	@ (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	20000018 	.word	0x20000018

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	2600      	movs	r6, #0
 800798c:	4c0c      	ldr	r4, [pc, #48]	@ (80079c0 <__libc_init_array+0x38>)
 800798e:	4d0d      	ldr	r5, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	2600      	movs	r6, #0
 800799a:	f002 f8f1 	bl	8009b80 <_init>
 800799e:	4c0a      	ldr	r4, [pc, #40]	@ (80079c8 <__libc_init_array+0x40>)
 80079a0:	4d0a      	ldr	r5, [pc, #40]	@ (80079cc <__libc_init_array+0x44>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	00b3      	lsls	r3, r6, #2
 80079ae:	58eb      	ldr	r3, [r5, r3]
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	00b3      	lsls	r3, r6, #2
 80079b8:	58eb      	ldr	r3, [r5, r3]
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	0800a2e4 	.word	0x0800a2e4
 80079c4:	0800a2e4 	.word	0x0800a2e4
 80079c8:	0800a2e8 	.word	0x0800a2e8
 80079cc:	0800a2e4 	.word	0x0800a2e4

080079d0 <__retarget_lock_init_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_acquire_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_release_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <memchr>:
 80079d6:	b2c9      	uxtb	r1, r1
 80079d8:	1882      	adds	r2, r0, r2
 80079da:	4290      	cmp	r0, r2
 80079dc:	d101      	bne.n	80079e2 <memchr+0xc>
 80079de:	2000      	movs	r0, #0
 80079e0:	4770      	bx	lr
 80079e2:	7803      	ldrb	r3, [r0, #0]
 80079e4:	428b      	cmp	r3, r1
 80079e6:	d0fb      	beq.n	80079e0 <memchr+0xa>
 80079e8:	3001      	adds	r0, #1
 80079ea:	e7f6      	b.n	80079da <memchr+0x4>

080079ec <memcpy>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d100      	bne.n	80079f6 <memcpy+0xa>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	5ccc      	ldrb	r4, [r1, r3]
 80079f8:	54c4      	strb	r4, [r0, r3]
 80079fa:	3301      	adds	r3, #1
 80079fc:	e7f8      	b.n	80079f0 <memcpy+0x4>

080079fe <quorem>:
 80079fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a00:	6903      	ldr	r3, [r0, #16]
 8007a02:	690c      	ldr	r4, [r1, #16]
 8007a04:	b089      	sub	sp, #36	@ 0x24
 8007a06:	9003      	str	r0, [sp, #12]
 8007a08:	9106      	str	r1, [sp, #24]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	db63      	blt.n	8007ad8 <quorem+0xda>
 8007a10:	000b      	movs	r3, r1
 8007a12:	3c01      	subs	r4, #1
 8007a14:	3314      	adds	r3, #20
 8007a16:	00a5      	lsls	r5, r4, #2
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	195b      	adds	r3, r3, r5
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	3314      	adds	r3, #20
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	195d      	adds	r5, r3, r5
 8007a26:	9b05      	ldr	r3, [sp, #20]
 8007a28:	682f      	ldr	r7, [r5, #0]
 8007a2a:	681e      	ldr	r6, [r3, #0]
 8007a2c:	0038      	movs	r0, r7
 8007a2e:	3601      	adds	r6, #1
 8007a30:	0031      	movs	r1, r6
 8007a32:	f7f8 fb85 	bl	8000140 <__udivsi3>
 8007a36:	9002      	str	r0, [sp, #8]
 8007a38:	42b7      	cmp	r7, r6
 8007a3a:	d327      	bcc.n	8007a8c <quorem+0x8e>
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	2700      	movs	r7, #0
 8007a40:	469c      	mov	ip, r3
 8007a42:	9e01      	ldr	r6, [sp, #4]
 8007a44:	9707      	str	r7, [sp, #28]
 8007a46:	4662      	mov	r2, ip
 8007a48:	ca08      	ldmia	r2!, {r3}
 8007a4a:	6830      	ldr	r0, [r6, #0]
 8007a4c:	4694      	mov	ip, r2
 8007a4e:	9a02      	ldr	r2, [sp, #8]
 8007a50:	b299      	uxth	r1, r3
 8007a52:	4351      	muls	r1, r2
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	4353      	muls	r3, r2
 8007a58:	19c9      	adds	r1, r1, r7
 8007a5a:	0c0a      	lsrs	r2, r1, #16
 8007a5c:	189b      	adds	r3, r3, r2
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	b282      	uxth	r2, r0
 8007a62:	1a52      	subs	r2, r2, r1
 8007a64:	9907      	ldr	r1, [sp, #28]
 8007a66:	0c1f      	lsrs	r7, r3, #16
 8007a68:	1852      	adds	r2, r2, r1
 8007a6a:	0c00      	lsrs	r0, r0, #16
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	1411      	asrs	r1, r2, #16
 8007a70:	1ac3      	subs	r3, r0, r3
 8007a72:	185b      	adds	r3, r3, r1
 8007a74:	1419      	asrs	r1, r3, #16
 8007a76:	b292      	uxth	r2, r2
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	9b05      	ldr	r3, [sp, #20]
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	c604      	stmia	r6!, {r2}
 8007a82:	4563      	cmp	r3, ip
 8007a84:	d2df      	bcs.n	8007a46 <quorem+0x48>
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02b      	beq.n	8007ae4 <quorem+0xe6>
 8007a8c:	9906      	ldr	r1, [sp, #24]
 8007a8e:	9803      	ldr	r0, [sp, #12]
 8007a90:	f001 f9b6 	bl	8008e00 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	db1e      	blt.n	8007ad6 <quorem+0xd8>
 8007a98:	2600      	movs	r6, #0
 8007a9a:	9d01      	ldr	r5, [sp, #4]
 8007a9c:	9904      	ldr	r1, [sp, #16]
 8007a9e:	c901      	ldmia	r1!, {r0}
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b287      	uxth	r7, r0
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	1bd2      	subs	r2, r2, r7
 8007aa8:	1992      	adds	r2, r2, r6
 8007aaa:	0c00      	lsrs	r0, r0, #16
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	1a1b      	subs	r3, r3, r0
 8007ab0:	1410      	asrs	r0, r2, #16
 8007ab2:	181b      	adds	r3, r3, r0
 8007ab4:	141e      	asrs	r6, r3, #16
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	431a      	orrs	r2, r3
 8007abc:	9b05      	ldr	r3, [sp, #20]
 8007abe:	c504      	stmia	r5!, {r2}
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	d2ec      	bcs.n	8007a9e <quorem+0xa0>
 8007ac4:	9a01      	ldr	r2, [sp, #4]
 8007ac6:	00a3      	lsls	r3, r4, #2
 8007ac8:	18d3      	adds	r3, r2, r3
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	2a00      	cmp	r2, #0
 8007ace:	d014      	beq.n	8007afa <quorem+0xfc>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	9802      	ldr	r0, [sp, #8]
 8007ad8:	b009      	add	sp, #36	@ 0x24
 8007ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <quorem+0xee>
 8007ae2:	3c01      	subs	r4, #1
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	3d04      	subs	r5, #4
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	d3f7      	bcc.n	8007adc <quorem+0xde>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	611c      	str	r4, [r3, #16]
 8007af0:	e7cc      	b.n	8007a8c <quorem+0x8e>
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d104      	bne.n	8007b02 <quorem+0x104>
 8007af8:	3c01      	subs	r4, #1
 8007afa:	9a01      	ldr	r2, [sp, #4]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3f7      	bcc.n	8007af2 <quorem+0xf4>
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	611c      	str	r4, [r3, #16]
 8007b06:	e7e3      	b.n	8007ad0 <quorem+0xd2>

08007b08 <_dtoa_r>:
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	0014      	movs	r4, r2
 8007b0c:	001d      	movs	r5, r3
 8007b0e:	69c6      	ldr	r6, [r0, #28]
 8007b10:	b09d      	sub	sp, #116	@ 0x74
 8007b12:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b14:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007b16:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007b18:	9003      	str	r0, [sp, #12]
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	d10f      	bne.n	8007b3e <_dtoa_r+0x36>
 8007b1e:	2010      	movs	r0, #16
 8007b20:	f000 fe2c 	bl	800877c <malloc>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1e02      	subs	r2, r0, #0
 8007b28:	61d8      	str	r0, [r3, #28]
 8007b2a:	d104      	bne.n	8007b36 <_dtoa_r+0x2e>
 8007b2c:	21ef      	movs	r1, #239	@ 0xef
 8007b2e:	4bc7      	ldr	r3, [pc, #796]	@ (8007e4c <_dtoa_r+0x344>)
 8007b30:	48c7      	ldr	r0, [pc, #796]	@ (8007e50 <_dtoa_r+0x348>)
 8007b32:	f001 fcaf 	bl	8009494 <__assert_func>
 8007b36:	6046      	str	r6, [r0, #4]
 8007b38:	6086      	str	r6, [r0, #8]
 8007b3a:	6006      	str	r6, [r0, #0]
 8007b3c:	60c6      	str	r6, [r0, #12]
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d00b      	beq.n	8007b60 <_dtoa_r+0x58>
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4093      	lsls	r3, r2
 8007b4e:	604a      	str	r2, [r1, #4]
 8007b50:	608b      	str	r3, [r1, #8]
 8007b52:	9803      	ldr	r0, [sp, #12]
 8007b54:	f000 ff12 	bl	800897c <_Bfree>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	da1e      	bge.n	8007ba2 <_dtoa_r+0x9a>
 8007b64:	2301      	movs	r3, #1
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	006b      	lsls	r3, r5, #1
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b70:	4bb8      	ldr	r3, [pc, #736]	@ (8007e54 <_dtoa_r+0x34c>)
 8007b72:	4ab8      	ldr	r2, [pc, #736]	@ (8007e54 <_dtoa_r+0x34c>)
 8007b74:	403b      	ands	r3, r7
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d116      	bne.n	8007ba8 <_dtoa_r+0xa0>
 8007b7a:	4bb7      	ldr	r3, [pc, #732]	@ (8007e58 <_dtoa_r+0x350>)
 8007b7c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	033b      	lsls	r3, r7, #12
 8007b82:	0b1b      	lsrs	r3, r3, #12
 8007b84:	4323      	orrs	r3, r4
 8007b86:	d101      	bne.n	8007b8c <_dtoa_r+0x84>
 8007b88:	f000 fd80 	bl	800868c <_dtoa_r+0xb84>
 8007b8c:	4bb3      	ldr	r3, [pc, #716]	@ (8007e5c <_dtoa_r+0x354>)
 8007b8e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007b90:	9308      	str	r3, [sp, #32]
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d002      	beq.n	8007b9c <_dtoa_r+0x94>
 8007b96:	4bb2      	ldr	r3, [pc, #712]	@ (8007e60 <_dtoa_r+0x358>)
 8007b98:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	9808      	ldr	r0, [sp, #32]
 8007b9e:	b01d      	add	sp, #116	@ 0x74
 8007ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	603b      	str	r3, [r7, #0]
 8007ba6:	e7e2      	b.n	8007b6e <_dtoa_r+0x66>
 8007ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bac:	9212      	str	r2, [sp, #72]	@ 0x48
 8007bae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007bb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f7f8 fc48 	bl	800044c <__aeabi_dcmpeq>
 8007bbc:	1e06      	subs	r6, r0, #0
 8007bbe:	d00b      	beq.n	8007bd8 <_dtoa_r+0xd0>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <_dtoa_r+0xca>
 8007bcc:	4ba5      	ldr	r3, [pc, #660]	@ (8007e64 <_dtoa_r+0x35c>)
 8007bce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	4ba5      	ldr	r3, [pc, #660]	@ (8007e68 <_dtoa_r+0x360>)
 8007bd4:	9308      	str	r3, [sp, #32]
 8007bd6:	e7e1      	b.n	8007b9c <_dtoa_r+0x94>
 8007bd8:	ab1a      	add	r3, sp, #104	@ 0x68
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	9803      	ldr	r0, [sp, #12]
 8007be2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007be6:	f001 f9c1 	bl	8008f6c <__d2b>
 8007bea:	007a      	lsls	r2, r7, #1
 8007bec:	9005      	str	r0, [sp, #20]
 8007bee:	0d52      	lsrs	r2, r2, #21
 8007bf0:	d100      	bne.n	8007bf4 <_dtoa_r+0xec>
 8007bf2:	e07b      	b.n	8007cec <_dtoa_r+0x1e4>
 8007bf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bf6:	9618      	str	r6, [sp, #96]	@ 0x60
 8007bf8:	0319      	lsls	r1, r3, #12
 8007bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8007e6c <_dtoa_r+0x364>)
 8007bfc:	0b09      	lsrs	r1, r1, #12
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	499b      	ldr	r1, [pc, #620]	@ (8007e70 <_dtoa_r+0x368>)
 8007c02:	1857      	adds	r7, r2, r1
 8007c04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c08:	0019      	movs	r1, r3
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4b99      	ldr	r3, [pc, #612]	@ (8007e74 <_dtoa_r+0x36c>)
 8007c0e:	f7fa f9c7 	bl	8001fa0 <__aeabi_dsub>
 8007c12:	4a99      	ldr	r2, [pc, #612]	@ (8007e78 <_dtoa_r+0x370>)
 8007c14:	4b99      	ldr	r3, [pc, #612]	@ (8007e7c <_dtoa_r+0x374>)
 8007c16:	f7f9 fedd 	bl	80019d4 <__aeabi_dmul>
 8007c1a:	4a99      	ldr	r2, [pc, #612]	@ (8007e80 <_dtoa_r+0x378>)
 8007c1c:	4b99      	ldr	r3, [pc, #612]	@ (8007e84 <_dtoa_r+0x37c>)
 8007c1e:	f7f8 fed9 	bl	80009d4 <__aeabi_dadd>
 8007c22:	0004      	movs	r4, r0
 8007c24:	0038      	movs	r0, r7
 8007c26:	000d      	movs	r5, r1
 8007c28:	f7fa fe22 	bl	8002870 <__aeabi_i2d>
 8007c2c:	4a96      	ldr	r2, [pc, #600]	@ (8007e88 <_dtoa_r+0x380>)
 8007c2e:	4b97      	ldr	r3, [pc, #604]	@ (8007e8c <_dtoa_r+0x384>)
 8007c30:	f7f9 fed0 	bl	80019d4 <__aeabi_dmul>
 8007c34:	0002      	movs	r2, r0
 8007c36:	000b      	movs	r3, r1
 8007c38:	0020      	movs	r0, r4
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	f7f8 feca 	bl	80009d4 <__aeabi_dadd>
 8007c40:	0004      	movs	r4, r0
 8007c42:	000d      	movs	r5, r1
 8007c44:	f7fa fdd8 	bl	80027f8 <__aeabi_d2iz>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	9004      	str	r0, [sp, #16]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	0020      	movs	r0, r4
 8007c50:	0029      	movs	r1, r5
 8007c52:	f7f8 fc01 	bl	8000458 <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d00b      	beq.n	8007c72 <_dtoa_r+0x16a>
 8007c5a:	9804      	ldr	r0, [sp, #16]
 8007c5c:	f7fa fe08 	bl	8002870 <__aeabi_i2d>
 8007c60:	002b      	movs	r3, r5
 8007c62:	0022      	movs	r2, r4
 8007c64:	f7f8 fbf2 	bl	800044c <__aeabi_dcmpeq>
 8007c68:	4243      	negs	r3, r0
 8007c6a:	4158      	adcs	r0, r3
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	1a1b      	subs	r3, r3, r0
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	2301      	movs	r3, #1
 8007c74:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	2b16      	cmp	r3, #22
 8007c7a:	d810      	bhi.n	8007c9e <_dtoa_r+0x196>
 8007c7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c80:	9a04      	ldr	r2, [sp, #16]
 8007c82:	4b83      	ldr	r3, [pc, #524]	@ (8007e90 <_dtoa_r+0x388>)
 8007c84:	00d2      	lsls	r2, r2, #3
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f7f8 fbe4 	bl	8000458 <__aeabi_dcmplt>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d047      	beq.n	8007d24 <_dtoa_r+0x21c>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007ca2:	9206      	str	r2, [sp, #24]
 8007ca4:	1bdb      	subs	r3, r3, r7
 8007ca6:	1e5a      	subs	r2, r3, #1
 8007ca8:	d53e      	bpl.n	8007d28 <_dtoa_r+0x220>
 8007caa:	2201      	movs	r2, #1
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	9306      	str	r3, [sp, #24]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	930d      	str	r3, [sp, #52]	@ 0x34
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	db38      	blt.n	8007d2c <_dtoa_r+0x224>
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cbe:	4694      	mov	ip, r2
 8007cc0:	4463      	add	r3, ip
 8007cc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ccc:	2401      	movs	r4, #1
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d862      	bhi.n	8007d98 <_dtoa_r+0x290>
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	dd02      	ble.n	8007cdc <_dtoa_r+0x1d4>
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	9322      	str	r3, [sp, #136]	@ 0x88
 8007cdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007cde:	1e98      	subs	r0, r3, #2
 8007ce0:	2803      	cmp	r0, #3
 8007ce2:	d863      	bhi.n	8007dac <_dtoa_r+0x2a4>
 8007ce4:	f7f8 fa18 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007ce8:	2b385654 	.word	0x2b385654
 8007cec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007cee:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007cf0:	18f6      	adds	r6, r6, r3
 8007cf2:	4b68      	ldr	r3, [pc, #416]	@ (8007e94 <_dtoa_r+0x38c>)
 8007cf4:	18f2      	adds	r2, r6, r3
 8007cf6:	2a20      	cmp	r2, #32
 8007cf8:	dd0f      	ble.n	8007d1a <_dtoa_r+0x212>
 8007cfa:	2340      	movs	r3, #64	@ 0x40
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	409f      	lsls	r7, r3
 8007d00:	4b65      	ldr	r3, [pc, #404]	@ (8007e98 <_dtoa_r+0x390>)
 8007d02:	0038      	movs	r0, r7
 8007d04:	18f3      	adds	r3, r6, r3
 8007d06:	40dc      	lsrs	r4, r3
 8007d08:	4320      	orrs	r0, r4
 8007d0a:	f7fa fddf 	bl	80028cc <__aeabi_ui2d>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4b62      	ldr	r3, [pc, #392]	@ (8007e9c <_dtoa_r+0x394>)
 8007d12:	1e77      	subs	r7, r6, #1
 8007d14:	18cb      	adds	r3, r1, r3
 8007d16:	9218      	str	r2, [sp, #96]	@ 0x60
 8007d18:	e776      	b.n	8007c08 <_dtoa_r+0x100>
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	0020      	movs	r0, r4
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	4098      	lsls	r0, r3
 8007d22:	e7f2      	b.n	8007d0a <_dtoa_r+0x202>
 8007d24:	9015      	str	r0, [sp, #84]	@ 0x54
 8007d26:	e7ba      	b.n	8007c9e <_dtoa_r+0x196>
 8007d28:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d2a:	e7c3      	b.n	8007cb4 <_dtoa_r+0x1ac>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	9a04      	ldr	r2, [sp, #16]
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	9306      	str	r3, [sp, #24]
 8007d34:	4253      	negs	r3, r2
 8007d36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d3c:	e7c5      	b.n	8007cca <_dtoa_r+0x1c2>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d42:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d44:	4694      	mov	ip, r2
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	4463      	add	r3, ip
 8007d4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc08      	bgt.n	8007d66 <_dtoa_r+0x25e>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e006      	b.n	8007d66 <_dtoa_r+0x25e>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dd28      	ble.n	8007db4 <_dtoa_r+0x2ac>
 8007d62:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d66:	9a03      	ldr	r2, [sp, #12]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	69d0      	ldr	r0, [r2, #28]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	0015      	movs	r5, r2
 8007d70:	3514      	adds	r5, #20
 8007d72:	429d      	cmp	r5, r3
 8007d74:	d923      	bls.n	8007dbe <_dtoa_r+0x2b6>
 8007d76:	6041      	str	r1, [r0, #4]
 8007d78:	9803      	ldr	r0, [sp, #12]
 8007d7a:	f000 fdbb 	bl	80088f4 <_Balloc>
 8007d7e:	9008      	str	r0, [sp, #32]
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d11f      	bne.n	8007dc4 <_dtoa_r+0x2bc>
 8007d84:	21b0      	movs	r1, #176	@ 0xb0
 8007d86:	4b46      	ldr	r3, [pc, #280]	@ (8007ea0 <_dtoa_r+0x398>)
 8007d88:	4831      	ldr	r0, [pc, #196]	@ (8007e50 <_dtoa_r+0x348>)
 8007d8a:	9a08      	ldr	r2, [sp, #32]
 8007d8c:	31ff      	adds	r1, #255	@ 0xff
 8007d8e:	e6d0      	b.n	8007b32 <_dtoa_r+0x2a>
 8007d90:	2300      	movs	r3, #0
 8007d92:	e7e2      	b.n	8007d5a <_dtoa_r+0x252>
 8007d94:	2300      	movs	r3, #0
 8007d96:	e7d3      	b.n	8007d40 <_dtoa_r+0x238>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9410      	str	r4, [sp, #64]	@ 0x40
 8007d9c:	9322      	str	r3, [sp, #136]	@ 0x88
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2200      	movs	r2, #0
 8007da2:	930e      	str	r3, [sp, #56]	@ 0x38
 8007da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da6:	3313      	adds	r3, #19
 8007da8:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007daa:	e7dc      	b.n	8007d66 <_dtoa_r+0x25e>
 8007dac:	2301      	movs	r3, #1
 8007dae:	9310      	str	r3, [sp, #64]	@ 0x40
 8007db0:	3b02      	subs	r3, #2
 8007db2:	e7f5      	b.n	8007da0 <_dtoa_r+0x298>
 8007db4:	2301      	movs	r3, #1
 8007db6:	001a      	movs	r2, r3
 8007db8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbc:	e7f4      	b.n	8007da8 <_dtoa_r+0x2a0>
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	0052      	lsls	r2, r2, #1
 8007dc2:	e7d4      	b.n	8007d6e <_dtoa_r+0x266>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	9a08      	ldr	r2, [sp, #32]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	2b0e      	cmp	r3, #14
 8007dd0:	d900      	bls.n	8007dd4 <_dtoa_r+0x2cc>
 8007dd2:	e0d6      	b.n	8007f82 <_dtoa_r+0x47a>
 8007dd4:	2c00      	cmp	r4, #0
 8007dd6:	d100      	bne.n	8007dda <_dtoa_r+0x2d2>
 8007dd8:	e0d3      	b.n	8007f82 <_dtoa_r+0x47a>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dd63      	ble.n	8007ea8 <_dtoa_r+0x3a0>
 8007de0:	210f      	movs	r1, #15
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	4b2a      	ldr	r3, [pc, #168]	@ (8007e90 <_dtoa_r+0x388>)
 8007de6:	400a      	ands	r2, r1
 8007de8:	00d2      	lsls	r2, r2, #3
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	681e      	ldr	r6, [r3, #0]
 8007dee:	685f      	ldr	r7, [r3, #4]
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	2402      	movs	r4, #2
 8007df4:	111d      	asrs	r5, r3, #4
 8007df6:	05db      	lsls	r3, r3, #23
 8007df8:	d50a      	bpl.n	8007e10 <_dtoa_r+0x308>
 8007dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <_dtoa_r+0x39c>)
 8007dfc:	400d      	ands	r5, r1
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e04:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e06:	f7f9 f9ab 	bl	8001160 <__aeabi_ddiv>
 8007e0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e0e:	3401      	adds	r4, #1
 8007e10:	4b24      	ldr	r3, [pc, #144]	@ (8007ea4 <_dtoa_r+0x39c>)
 8007e12:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d108      	bne.n	8007e2a <_dtoa_r+0x322>
 8007e18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e1c:	0032      	movs	r2, r6
 8007e1e:	003b      	movs	r3, r7
 8007e20:	f7f9 f99e 	bl	8001160 <__aeabi_ddiv>
 8007e24:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e26:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e28:	e059      	b.n	8007ede <_dtoa_r+0x3d6>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	421d      	tst	r5, r3
 8007e2e:	d009      	beq.n	8007e44 <_dtoa_r+0x33c>
 8007e30:	18e4      	adds	r4, r4, r3
 8007e32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e34:	0030      	movs	r0, r6
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	0039      	movs	r1, r7
 8007e3c:	f7f9 fdca 	bl	80019d4 <__aeabi_dmul>
 8007e40:	0006      	movs	r6, r0
 8007e42:	000f      	movs	r7, r1
 8007e44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e46:	106d      	asrs	r5, r5, #1
 8007e48:	3308      	adds	r3, #8
 8007e4a:	e7e2      	b.n	8007e12 <_dtoa_r+0x30a>
 8007e4c:	08009fa9 	.word	0x08009fa9
 8007e50:	08009fc0 	.word	0x08009fc0
 8007e54:	7ff00000 	.word	0x7ff00000
 8007e58:	0000270f 	.word	0x0000270f
 8007e5c:	08009fa5 	.word	0x08009fa5
 8007e60:	08009fa8 	.word	0x08009fa8
 8007e64:	08009f79 	.word	0x08009f79
 8007e68:	08009f78 	.word	0x08009f78
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	fffffc01 	.word	0xfffffc01
 8007e74:	3ff80000 	.word	0x3ff80000
 8007e78:	636f4361 	.word	0x636f4361
 8007e7c:	3fd287a7 	.word	0x3fd287a7
 8007e80:	8b60c8b3 	.word	0x8b60c8b3
 8007e84:	3fc68a28 	.word	0x3fc68a28
 8007e88:	509f79fb 	.word	0x509f79fb
 8007e8c:	3fd34413 	.word	0x3fd34413
 8007e90:	0800a110 	.word	0x0800a110
 8007e94:	00000432 	.word	0x00000432
 8007e98:	00000412 	.word	0x00000412
 8007e9c:	fe100000 	.word	0xfe100000
 8007ea0:	0800a018 	.word	0x0800a018
 8007ea4:	0800a0e8 	.word	0x0800a0e8
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	2402      	movs	r4, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d016      	beq.n	8007ede <_dtoa_r+0x3d6>
 8007eb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007eb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007eb4:	220f      	movs	r2, #15
 8007eb6:	425d      	negs	r5, r3
 8007eb8:	402a      	ands	r2, r5
 8007eba:	4bd5      	ldr	r3, [pc, #852]	@ (8008210 <_dtoa_r+0x708>)
 8007ebc:	00d2      	lsls	r2, r2, #3
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f7f9 fd86 	bl	80019d4 <__aeabi_dmul>
 8007ec8:	2701      	movs	r7, #1
 8007eca:	2300      	movs	r3, #0
 8007ecc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ece:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ed0:	4ed0      	ldr	r6, [pc, #832]	@ (8008214 <_dtoa_r+0x70c>)
 8007ed2:	112d      	asrs	r5, r5, #4
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	d000      	beq.n	8007eda <_dtoa_r+0x3d2>
 8007ed8:	e095      	b.n	8008006 <_dtoa_r+0x4fe>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1a2      	bne.n	8007e24 <_dtoa_r+0x31c>
 8007ede:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ee0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007ee2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d100      	bne.n	8007eea <_dtoa_r+0x3e2>
 8007ee8:	e098      	b.n	800801c <_dtoa_r+0x514>
 8007eea:	2200      	movs	r2, #0
 8007eec:	0030      	movs	r0, r6
 8007eee:	0039      	movs	r1, r7
 8007ef0:	4bc9      	ldr	r3, [pc, #804]	@ (8008218 <_dtoa_r+0x710>)
 8007ef2:	f7f8 fab1 	bl	8000458 <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d100      	bne.n	8007efc <_dtoa_r+0x3f4>
 8007efa:	e08f      	b.n	800801c <_dtoa_r+0x514>
 8007efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d100      	bne.n	8007f04 <_dtoa_r+0x3fc>
 8007f02:	e08b      	b.n	800801c <_dtoa_r+0x514>
 8007f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dd37      	ble.n	8007f7a <_dtoa_r+0x472>
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f12:	0030      	movs	r0, r6
 8007f14:	4bc1      	ldr	r3, [pc, #772]	@ (800821c <_dtoa_r+0x714>)
 8007f16:	0039      	movs	r1, r7
 8007f18:	f7f9 fd5c 	bl	80019d4 <__aeabi_dmul>
 8007f1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f22:	3401      	adds	r4, #1
 8007f24:	0020      	movs	r0, r4
 8007f26:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f28:	f7fa fca2 	bl	8002870 <__aeabi_i2d>
 8007f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f30:	f7f9 fd50 	bl	80019d4 <__aeabi_dmul>
 8007f34:	4bba      	ldr	r3, [pc, #744]	@ (8008220 <_dtoa_r+0x718>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	f7f8 fd4c 	bl	80009d4 <__aeabi_dadd>
 8007f3c:	4bb9      	ldr	r3, [pc, #740]	@ (8008224 <_dtoa_r+0x71c>)
 8007f3e:	0006      	movs	r6, r0
 8007f40:	18cf      	adds	r7, r1, r3
 8007f42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d16d      	bne.n	8008024 <_dtoa_r+0x51c>
 8007f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4bb6      	ldr	r3, [pc, #728]	@ (8008228 <_dtoa_r+0x720>)
 8007f50:	f7fa f826 	bl	8001fa0 <__aeabi_dsub>
 8007f54:	0032      	movs	r2, r6
 8007f56:	003b      	movs	r3, r7
 8007f58:	0004      	movs	r4, r0
 8007f5a:	000d      	movs	r5, r1
 8007f5c:	f7f8 fa90 	bl	8000480 <__aeabi_dcmpgt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d000      	beq.n	8007f66 <_dtoa_r+0x45e>
 8007f64:	e2b6      	b.n	80084d4 <_dtoa_r+0x9cc>
 8007f66:	2180      	movs	r1, #128	@ 0x80
 8007f68:	0609      	lsls	r1, r1, #24
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	0032      	movs	r2, r6
 8007f6e:	0020      	movs	r0, r4
 8007f70:	0029      	movs	r1, r5
 8007f72:	f7f8 fa71 	bl	8000458 <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d128      	bne.n	8007fcc <_dtoa_r+0x4c4>
 8007f7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f7c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f82:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da00      	bge.n	8007f8a <_dtoa_r+0x482>
 8007f88:	e174      	b.n	8008274 <_dtoa_r+0x76c>
 8007f8a:	9a04      	ldr	r2, [sp, #16]
 8007f8c:	2a0e      	cmp	r2, #14
 8007f8e:	dd00      	ble.n	8007f92 <_dtoa_r+0x48a>
 8007f90:	e170      	b.n	8008274 <_dtoa_r+0x76c>
 8007f92:	4b9f      	ldr	r3, [pc, #636]	@ (8008210 <_dtoa_r+0x708>)
 8007f94:	00d2      	lsls	r2, r2, #3
 8007f96:	189b      	adds	r3, r3, r2
 8007f98:	685c      	ldr	r4, [r3, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	9306      	str	r3, [sp, #24]
 8007f9e:	9407      	str	r4, [sp, #28]
 8007fa0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	db00      	blt.n	8007fa8 <_dtoa_r+0x4a0>
 8007fa6:	e0e7      	b.n	8008178 <_dtoa_r+0x670>
 8007fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dd00      	ble.n	8007fb0 <_dtoa_r+0x4a8>
 8007fae:	e0e3      	b.n	8008178 <_dtoa_r+0x670>
 8007fb0:	d10c      	bne.n	8007fcc <_dtoa_r+0x4c4>
 8007fb2:	9806      	ldr	r0, [sp, #24]
 8007fb4:	9907      	ldr	r1, [sp, #28]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4b9b      	ldr	r3, [pc, #620]	@ (8008228 <_dtoa_r+0x720>)
 8007fba:	f7f9 fd0b 	bl	80019d4 <__aeabi_dmul>
 8007fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc2:	f7f8 fa67 	bl	8000494 <__aeabi_dcmpge>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d100      	bne.n	8007fcc <_dtoa_r+0x4c4>
 8007fca:	e286      	b.n	80084da <_dtoa_r+0x9d2>
 8007fcc:	2600      	movs	r6, #0
 8007fce:	0037      	movs	r7, r6
 8007fd0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fd2:	9c08      	ldr	r4, [sp, #32]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fd8:	9704      	str	r7, [sp, #16]
 8007fda:	2700      	movs	r7, #0
 8007fdc:	0031      	movs	r1, r6
 8007fde:	9803      	ldr	r0, [sp, #12]
 8007fe0:	f000 fccc 	bl	800897c <_Bfree>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d100      	bne.n	8007fec <_dtoa_r+0x4e4>
 8007fea:	e0bb      	b.n	8008164 <_dtoa_r+0x65c>
 8007fec:	2f00      	cmp	r7, #0
 8007fee:	d005      	beq.n	8007ffc <_dtoa_r+0x4f4>
 8007ff0:	429f      	cmp	r7, r3
 8007ff2:	d003      	beq.n	8007ffc <_dtoa_r+0x4f4>
 8007ff4:	0039      	movs	r1, r7
 8007ff6:	9803      	ldr	r0, [sp, #12]
 8007ff8:	f000 fcc0 	bl	800897c <_Bfree>
 8007ffc:	9904      	ldr	r1, [sp, #16]
 8007ffe:	9803      	ldr	r0, [sp, #12]
 8008000:	f000 fcbc 	bl	800897c <_Bfree>
 8008004:	e0ae      	b.n	8008164 <_dtoa_r+0x65c>
 8008006:	423d      	tst	r5, r7
 8008008:	d005      	beq.n	8008016 <_dtoa_r+0x50e>
 800800a:	6832      	ldr	r2, [r6, #0]
 800800c:	6873      	ldr	r3, [r6, #4]
 800800e:	f7f9 fce1 	bl	80019d4 <__aeabi_dmul>
 8008012:	003b      	movs	r3, r7
 8008014:	3401      	adds	r4, #1
 8008016:	106d      	asrs	r5, r5, #1
 8008018:	3608      	adds	r6, #8
 800801a:	e75b      	b.n	8007ed4 <_dtoa_r+0x3cc>
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	e77f      	b.n	8007f24 <_dtoa_r+0x41c>
 8008024:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008026:	4b7a      	ldr	r3, [pc, #488]	@ (8008210 <_dtoa_r+0x708>)
 8008028:	3a01      	subs	r2, #1
 800802a:	00d2      	lsls	r2, r2, #3
 800802c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800802e:	189b      	adds	r3, r3, r2
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2900      	cmp	r1, #0
 8008036:	d04c      	beq.n	80080d2 <_dtoa_r+0x5ca>
 8008038:	2000      	movs	r0, #0
 800803a:	497c      	ldr	r1, [pc, #496]	@ (800822c <_dtoa_r+0x724>)
 800803c:	f7f9 f890 	bl	8001160 <__aeabi_ddiv>
 8008040:	0032      	movs	r2, r6
 8008042:	003b      	movs	r3, r7
 8008044:	f7f9 ffac 	bl	8001fa0 <__aeabi_dsub>
 8008048:	9a08      	ldr	r2, [sp, #32]
 800804a:	0006      	movs	r6, r0
 800804c:	4694      	mov	ip, r2
 800804e:	000f      	movs	r7, r1
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	9316      	str	r3, [sp, #88]	@ 0x58
 8008054:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008056:	4463      	add	r3, ip
 8008058:	9311      	str	r3, [sp, #68]	@ 0x44
 800805a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800805c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800805e:	f7fa fbcb 	bl	80027f8 <__aeabi_d2iz>
 8008062:	0005      	movs	r5, r0
 8008064:	f7fa fc04 	bl	8002870 <__aeabi_i2d>
 8008068:	0002      	movs	r2, r0
 800806a:	000b      	movs	r3, r1
 800806c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800806e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008070:	f7f9 ff96 	bl	8001fa0 <__aeabi_dsub>
 8008074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008076:	3530      	adds	r5, #48	@ 0x30
 8008078:	1c5c      	adds	r4, r3, #1
 800807a:	701d      	strb	r5, [r3, #0]
 800807c:	0032      	movs	r2, r6
 800807e:	003b      	movs	r3, r7
 8008080:	900a      	str	r0, [sp, #40]	@ 0x28
 8008082:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008084:	f7f8 f9e8 	bl	8000458 <__aeabi_dcmplt>
 8008088:	2800      	cmp	r0, #0
 800808a:	d16b      	bne.n	8008164 <_dtoa_r+0x65c>
 800808c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800808e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008090:	2000      	movs	r0, #0
 8008092:	4961      	ldr	r1, [pc, #388]	@ (8008218 <_dtoa_r+0x710>)
 8008094:	f7f9 ff84 	bl	8001fa0 <__aeabi_dsub>
 8008098:	0032      	movs	r2, r6
 800809a:	003b      	movs	r3, r7
 800809c:	f7f8 f9dc 	bl	8000458 <__aeabi_dcmplt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d000      	beq.n	80080a6 <_dtoa_r+0x59e>
 80080a4:	e0c6      	b.n	8008234 <_dtoa_r+0x72c>
 80080a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d100      	bne.n	80080ae <_dtoa_r+0x5a6>
 80080ac:	e765      	b.n	8007f7a <_dtoa_r+0x472>
 80080ae:	2200      	movs	r2, #0
 80080b0:	0030      	movs	r0, r6
 80080b2:	0039      	movs	r1, r7
 80080b4:	4b59      	ldr	r3, [pc, #356]	@ (800821c <_dtoa_r+0x714>)
 80080b6:	f7f9 fc8d 	bl	80019d4 <__aeabi_dmul>
 80080ba:	2200      	movs	r2, #0
 80080bc:	0006      	movs	r6, r0
 80080be:	000f      	movs	r7, r1
 80080c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080c4:	4b55      	ldr	r3, [pc, #340]	@ (800821c <_dtoa_r+0x714>)
 80080c6:	f7f9 fc85 	bl	80019d4 <__aeabi_dmul>
 80080ca:	9416      	str	r4, [sp, #88]	@ 0x58
 80080cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80080ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080d0:	e7c3      	b.n	800805a <_dtoa_r+0x552>
 80080d2:	0030      	movs	r0, r6
 80080d4:	0039      	movs	r1, r7
 80080d6:	f7f9 fc7d 	bl	80019d4 <__aeabi_dmul>
 80080da:	9d08      	ldr	r5, [sp, #32]
 80080dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080de:	002b      	movs	r3, r5
 80080e0:	4694      	mov	ip, r2
 80080e2:	9016      	str	r0, [sp, #88]	@ 0x58
 80080e4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80080e6:	4463      	add	r3, ip
 80080e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80080ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080ee:	f7fa fb83 	bl	80027f8 <__aeabi_d2iz>
 80080f2:	0004      	movs	r4, r0
 80080f4:	f7fa fbbc 	bl	8002870 <__aeabi_i2d>
 80080f8:	000b      	movs	r3, r1
 80080fa:	0002      	movs	r2, r0
 80080fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008100:	f7f9 ff4e 	bl	8001fa0 <__aeabi_dsub>
 8008104:	3430      	adds	r4, #48	@ 0x30
 8008106:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008108:	702c      	strb	r4, [r5, #0]
 800810a:	3501      	adds	r5, #1
 800810c:	0006      	movs	r6, r0
 800810e:	000f      	movs	r7, r1
 8008110:	42ab      	cmp	r3, r5
 8008112:	d12a      	bne.n	800816a <_dtoa_r+0x662>
 8008114:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008116:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008118:	9b08      	ldr	r3, [sp, #32]
 800811a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800811c:	469c      	mov	ip, r3
 800811e:	2200      	movs	r2, #0
 8008120:	4b42      	ldr	r3, [pc, #264]	@ (800822c <_dtoa_r+0x724>)
 8008122:	4464      	add	r4, ip
 8008124:	f7f8 fc56 	bl	80009d4 <__aeabi_dadd>
 8008128:	0002      	movs	r2, r0
 800812a:	000b      	movs	r3, r1
 800812c:	0030      	movs	r0, r6
 800812e:	0039      	movs	r1, r7
 8008130:	f7f8 f9a6 	bl	8000480 <__aeabi_dcmpgt>
 8008134:	2800      	cmp	r0, #0
 8008136:	d000      	beq.n	800813a <_dtoa_r+0x632>
 8008138:	e07c      	b.n	8008234 <_dtoa_r+0x72c>
 800813a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800813c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800813e:	2000      	movs	r0, #0
 8008140:	493a      	ldr	r1, [pc, #232]	@ (800822c <_dtoa_r+0x724>)
 8008142:	f7f9 ff2d 	bl	8001fa0 <__aeabi_dsub>
 8008146:	0002      	movs	r2, r0
 8008148:	000b      	movs	r3, r1
 800814a:	0030      	movs	r0, r6
 800814c:	0039      	movs	r1, r7
 800814e:	f7f8 f983 	bl	8000458 <__aeabi_dcmplt>
 8008152:	2800      	cmp	r0, #0
 8008154:	d100      	bne.n	8008158 <_dtoa_r+0x650>
 8008156:	e710      	b.n	8007f7a <_dtoa_r+0x472>
 8008158:	0023      	movs	r3, r4
 800815a:	3c01      	subs	r4, #1
 800815c:	7822      	ldrb	r2, [r4, #0]
 800815e:	2a30      	cmp	r2, #48	@ 0x30
 8008160:	d0fa      	beq.n	8008158 <_dtoa_r+0x650>
 8008162:	001c      	movs	r4, r3
 8008164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	e042      	b.n	80081f0 <_dtoa_r+0x6e8>
 800816a:	2200      	movs	r2, #0
 800816c:	4b2b      	ldr	r3, [pc, #172]	@ (800821c <_dtoa_r+0x714>)
 800816e:	f7f9 fc31 	bl	80019d4 <__aeabi_dmul>
 8008172:	900a      	str	r0, [sp, #40]	@ 0x28
 8008174:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008176:	e7b8      	b.n	80080ea <_dtoa_r+0x5e2>
 8008178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817a:	9d08      	ldr	r5, [sp, #32]
 800817c:	3b01      	subs	r3, #1
 800817e:	195b      	adds	r3, r3, r5
 8008180:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008182:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008184:	930a      	str	r3, [sp, #40]	@ 0x28
 8008186:	9a06      	ldr	r2, [sp, #24]
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	0030      	movs	r0, r6
 800818c:	0039      	movs	r1, r7
 800818e:	f7f8 ffe7 	bl	8001160 <__aeabi_ddiv>
 8008192:	f7fa fb31 	bl	80027f8 <__aeabi_d2iz>
 8008196:	9009      	str	r0, [sp, #36]	@ 0x24
 8008198:	f7fa fb6a 	bl	8002870 <__aeabi_i2d>
 800819c:	9a06      	ldr	r2, [sp, #24]
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	f7f9 fc18 	bl	80019d4 <__aeabi_dmul>
 80081a4:	0002      	movs	r2, r0
 80081a6:	000b      	movs	r3, r1
 80081a8:	0030      	movs	r0, r6
 80081aa:	0039      	movs	r1, r7
 80081ac:	f7f9 fef8 	bl	8001fa0 <__aeabi_dsub>
 80081b0:	002b      	movs	r3, r5
 80081b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b4:	3501      	adds	r5, #1
 80081b6:	3230      	adds	r2, #48	@ 0x30
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081bc:	002c      	movs	r4, r5
 80081be:	429a      	cmp	r2, r3
 80081c0:	d14b      	bne.n	800825a <_dtoa_r+0x752>
 80081c2:	0002      	movs	r2, r0
 80081c4:	000b      	movs	r3, r1
 80081c6:	f7f8 fc05 	bl	80009d4 <__aeabi_dadd>
 80081ca:	9a06      	ldr	r2, [sp, #24]
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	0006      	movs	r6, r0
 80081d0:	000f      	movs	r7, r1
 80081d2:	f7f8 f955 	bl	8000480 <__aeabi_dcmpgt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d12a      	bne.n	8008230 <_dtoa_r+0x728>
 80081da:	9a06      	ldr	r2, [sp, #24]
 80081dc:	9b07      	ldr	r3, [sp, #28]
 80081de:	0030      	movs	r0, r6
 80081e0:	0039      	movs	r1, r7
 80081e2:	f7f8 f933 	bl	800044c <__aeabi_dcmpeq>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d002      	beq.n	80081f0 <_dtoa_r+0x6e8>
 80081ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ec:	07dd      	lsls	r5, r3, #31
 80081ee:	d41f      	bmi.n	8008230 <_dtoa_r+0x728>
 80081f0:	9905      	ldr	r1, [sp, #20]
 80081f2:	9803      	ldr	r0, [sp, #12]
 80081f4:	f000 fbc2 	bl	800897c <_Bfree>
 80081f8:	2300      	movs	r3, #0
 80081fa:	7023      	strb	r3, [r4, #0]
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008200:	3301      	adds	r3, #1
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008206:	2b00      	cmp	r3, #0
 8008208:	d100      	bne.n	800820c <_dtoa_r+0x704>
 800820a:	e4c7      	b.n	8007b9c <_dtoa_r+0x94>
 800820c:	601c      	str	r4, [r3, #0]
 800820e:	e4c5      	b.n	8007b9c <_dtoa_r+0x94>
 8008210:	0800a110 	.word	0x0800a110
 8008214:	0800a0e8 	.word	0x0800a0e8
 8008218:	3ff00000 	.word	0x3ff00000
 800821c:	40240000 	.word	0x40240000
 8008220:	401c0000 	.word	0x401c0000
 8008224:	fcc00000 	.word	0xfcc00000
 8008228:	40140000 	.word	0x40140000
 800822c:	3fe00000 	.word	0x3fe00000
 8008230:	9b04      	ldr	r3, [sp, #16]
 8008232:	930c      	str	r3, [sp, #48]	@ 0x30
 8008234:	0023      	movs	r3, r4
 8008236:	001c      	movs	r4, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	781a      	ldrb	r2, [r3, #0]
 800823c:	2a39      	cmp	r2, #57	@ 0x39
 800823e:	d108      	bne.n	8008252 <_dtoa_r+0x74a>
 8008240:	9a08      	ldr	r2, [sp, #32]
 8008242:	429a      	cmp	r2, r3
 8008244:	d1f7      	bne.n	8008236 <_dtoa_r+0x72e>
 8008246:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008248:	9908      	ldr	r1, [sp, #32]
 800824a:	3201      	adds	r2, #1
 800824c:	920c      	str	r2, [sp, #48]	@ 0x30
 800824e:	2230      	movs	r2, #48	@ 0x30
 8008250:	700a      	strb	r2, [r1, #0]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	3201      	adds	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e784      	b.n	8008164 <_dtoa_r+0x65c>
 800825a:	2200      	movs	r2, #0
 800825c:	4bc6      	ldr	r3, [pc, #792]	@ (8008578 <_dtoa_r+0xa70>)
 800825e:	f7f9 fbb9 	bl	80019d4 <__aeabi_dmul>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	0006      	movs	r6, r0
 8008268:	000f      	movs	r7, r1
 800826a:	f7f8 f8ef 	bl	800044c <__aeabi_dcmpeq>
 800826e:	2800      	cmp	r0, #0
 8008270:	d089      	beq.n	8008186 <_dtoa_r+0x67e>
 8008272:	e7bd      	b.n	80081f0 <_dtoa_r+0x6e8>
 8008274:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008276:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008278:	9c06      	ldr	r4, [sp, #24]
 800827a:	2f00      	cmp	r7, #0
 800827c:	d014      	beq.n	80082a8 <_dtoa_r+0x7a0>
 800827e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008280:	2a01      	cmp	r2, #1
 8008282:	dd00      	ble.n	8008286 <_dtoa_r+0x77e>
 8008284:	e0e4      	b.n	8008450 <_dtoa_r+0x948>
 8008286:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008288:	2a00      	cmp	r2, #0
 800828a:	d100      	bne.n	800828e <_dtoa_r+0x786>
 800828c:	e0da      	b.n	8008444 <_dtoa_r+0x93c>
 800828e:	4abb      	ldr	r2, [pc, #748]	@ (800857c <_dtoa_r+0xa74>)
 8008290:	189b      	adds	r3, r3, r2
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	2101      	movs	r1, #1
 8008296:	18d2      	adds	r2, r2, r3
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800829c:	9803      	ldr	r0, [sp, #12]
 800829e:	18d3      	adds	r3, r2, r3
 80082a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80082a2:	f000 fc23 	bl	8008aec <__i2b>
 80082a6:	0007      	movs	r7, r0
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	d00e      	beq.n	80082ca <_dtoa_r+0x7c2>
 80082ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd0b      	ble.n	80082ca <_dtoa_r+0x7c2>
 80082b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082b4:	0023      	movs	r3, r4
 80082b6:	4294      	cmp	r4, r2
 80082b8:	dd00      	ble.n	80082bc <_dtoa_r+0x7b4>
 80082ba:	0013      	movs	r3, r2
 80082bc:	9a06      	ldr	r2, [sp, #24]
 80082be:	1ae4      	subs	r4, r4, r3
 80082c0:	1ad2      	subs	r2, r2, r3
 80082c2:	9206      	str	r2, [sp, #24]
 80082c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	930d      	str	r3, [sp, #52]	@ 0x34
 80082ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d021      	beq.n	8008314 <_dtoa_r+0x80c>
 80082d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d100      	bne.n	80082d8 <_dtoa_r+0x7d0>
 80082d6:	e0d3      	b.n	8008480 <_dtoa_r+0x978>
 80082d8:	9e05      	ldr	r6, [sp, #20]
 80082da:	2d00      	cmp	r5, #0
 80082dc:	d014      	beq.n	8008308 <_dtoa_r+0x800>
 80082de:	0039      	movs	r1, r7
 80082e0:	002a      	movs	r2, r5
 80082e2:	9803      	ldr	r0, [sp, #12]
 80082e4:	f000 fcc4 	bl	8008c70 <__pow5mult>
 80082e8:	9a05      	ldr	r2, [sp, #20]
 80082ea:	0001      	movs	r1, r0
 80082ec:	0007      	movs	r7, r0
 80082ee:	9803      	ldr	r0, [sp, #12]
 80082f0:	f000 fc14 	bl	8008b1c <__multiply>
 80082f4:	0006      	movs	r6, r0
 80082f6:	9905      	ldr	r1, [sp, #20]
 80082f8:	9803      	ldr	r0, [sp, #12]
 80082fa:	f000 fb3f 	bl	800897c <_Bfree>
 80082fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008300:	9605      	str	r6, [sp, #20]
 8008302:	1b5b      	subs	r3, r3, r5
 8008304:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008306:	d005      	beq.n	8008314 <_dtoa_r+0x80c>
 8008308:	0031      	movs	r1, r6
 800830a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800830c:	9803      	ldr	r0, [sp, #12]
 800830e:	f000 fcaf 	bl	8008c70 <__pow5mult>
 8008312:	9005      	str	r0, [sp, #20]
 8008314:	2101      	movs	r1, #1
 8008316:	9803      	ldr	r0, [sp, #12]
 8008318:	f000 fbe8 	bl	8008aec <__i2b>
 800831c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800831e:	0006      	movs	r6, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d100      	bne.n	8008326 <_dtoa_r+0x81e>
 8008324:	e1bc      	b.n	80086a0 <_dtoa_r+0xb98>
 8008326:	001a      	movs	r2, r3
 8008328:	0001      	movs	r1, r0
 800832a:	9803      	ldr	r0, [sp, #12]
 800832c:	f000 fca0 	bl	8008c70 <__pow5mult>
 8008330:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008332:	0006      	movs	r6, r0
 8008334:	2500      	movs	r5, #0
 8008336:	2b01      	cmp	r3, #1
 8008338:	dc16      	bgt.n	8008368 <_dtoa_r+0x860>
 800833a:	2500      	movs	r5, #0
 800833c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833e:	42ab      	cmp	r3, r5
 8008340:	d10e      	bne.n	8008360 <_dtoa_r+0x858>
 8008342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008344:	031b      	lsls	r3, r3, #12
 8008346:	42ab      	cmp	r3, r5
 8008348:	d10a      	bne.n	8008360 <_dtoa_r+0x858>
 800834a:	4b8d      	ldr	r3, [pc, #564]	@ (8008580 <_dtoa_r+0xa78>)
 800834c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800834e:	4213      	tst	r3, r2
 8008350:	d006      	beq.n	8008360 <_dtoa_r+0x858>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	3501      	adds	r5, #1
 8008356:	3301      	adds	r3, #1
 8008358:	9306      	str	r3, [sp, #24]
 800835a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800835c:	3301      	adds	r3, #1
 800835e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008360:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008362:	2001      	movs	r0, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <_dtoa_r+0x872>
 8008368:	6933      	ldr	r3, [r6, #16]
 800836a:	3303      	adds	r3, #3
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	18f3      	adds	r3, r6, r3
 8008370:	6858      	ldr	r0, [r3, #4]
 8008372:	f000 fb6b 	bl	8008a4c <__hi0bits>
 8008376:	2320      	movs	r3, #32
 8008378:	1a18      	subs	r0, r3, r0
 800837a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800837c:	1818      	adds	r0, r3, r0
 800837e:	0002      	movs	r2, r0
 8008380:	231f      	movs	r3, #31
 8008382:	401a      	ands	r2, r3
 8008384:	4218      	tst	r0, r3
 8008386:	d100      	bne.n	800838a <_dtoa_r+0x882>
 8008388:	e081      	b.n	800848e <_dtoa_r+0x986>
 800838a:	3301      	adds	r3, #1
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	2b04      	cmp	r3, #4
 8008390:	dd79      	ble.n	8008486 <_dtoa_r+0x97e>
 8008392:	231c      	movs	r3, #28
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	9a06      	ldr	r2, [sp, #24]
 8008398:	18e4      	adds	r4, r4, r3
 800839a:	18d2      	adds	r2, r2, r3
 800839c:	9206      	str	r2, [sp, #24]
 800839e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083a0:	18d3      	adds	r3, r2, r3
 80083a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80083a4:	9b06      	ldr	r3, [sp, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dd05      	ble.n	80083b6 <_dtoa_r+0x8ae>
 80083aa:	001a      	movs	r2, r3
 80083ac:	9905      	ldr	r1, [sp, #20]
 80083ae:	9803      	ldr	r0, [sp, #12]
 80083b0:	f000 fcba 	bl	8008d28 <__lshift>
 80083b4:	9005      	str	r0, [sp, #20]
 80083b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dd05      	ble.n	80083c8 <_dtoa_r+0x8c0>
 80083bc:	0031      	movs	r1, r6
 80083be:	001a      	movs	r2, r3
 80083c0:	9803      	ldr	r0, [sp, #12]
 80083c2:	f000 fcb1 	bl	8008d28 <__lshift>
 80083c6:	0006      	movs	r6, r0
 80083c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d061      	beq.n	8008492 <_dtoa_r+0x98a>
 80083ce:	0031      	movs	r1, r6
 80083d0:	9805      	ldr	r0, [sp, #20]
 80083d2:	f000 fd15 	bl	8008e00 <__mcmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	da5b      	bge.n	8008492 <_dtoa_r+0x98a>
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	220a      	movs	r2, #10
 80083de:	3b01      	subs	r3, #1
 80083e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80083e2:	9905      	ldr	r1, [sp, #20]
 80083e4:	2300      	movs	r3, #0
 80083e6:	9803      	ldr	r0, [sp, #12]
 80083e8:	f000 faec 	bl	80089c4 <__multadd>
 80083ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083ee:	9005      	str	r0, [sp, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d100      	bne.n	80083f6 <_dtoa_r+0x8ee>
 80083f4:	e15b      	b.n	80086ae <_dtoa_r+0xba6>
 80083f6:	2300      	movs	r3, #0
 80083f8:	0039      	movs	r1, r7
 80083fa:	220a      	movs	r2, #10
 80083fc:	9803      	ldr	r0, [sp, #12]
 80083fe:	f000 fae1 	bl	80089c4 <__multadd>
 8008402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008404:	0007      	movs	r7, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	dc4d      	bgt.n	80084a6 <_dtoa_r+0x99e>
 800840a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800840c:	2b02      	cmp	r3, #2
 800840e:	dd46      	ble.n	800849e <_dtoa_r+0x996>
 8008410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008412:	2b00      	cmp	r3, #0
 8008414:	d000      	beq.n	8008418 <_dtoa_r+0x910>
 8008416:	e5db      	b.n	8007fd0 <_dtoa_r+0x4c8>
 8008418:	0031      	movs	r1, r6
 800841a:	2205      	movs	r2, #5
 800841c:	9803      	ldr	r0, [sp, #12]
 800841e:	f000 fad1 	bl	80089c4 <__multadd>
 8008422:	0006      	movs	r6, r0
 8008424:	0001      	movs	r1, r0
 8008426:	9805      	ldr	r0, [sp, #20]
 8008428:	f000 fcea 	bl	8008e00 <__mcmp>
 800842c:	2800      	cmp	r0, #0
 800842e:	dc00      	bgt.n	8008432 <_dtoa_r+0x92a>
 8008430:	e5ce      	b.n	8007fd0 <_dtoa_r+0x4c8>
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	9a08      	ldr	r2, [sp, #32]
 8008436:	1c5c      	adds	r4, r3, #1
 8008438:	2331      	movs	r3, #49	@ 0x31
 800843a:	7013      	strb	r3, [r2, #0]
 800843c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800843e:	3301      	adds	r3, #1
 8008440:	930c      	str	r3, [sp, #48]	@ 0x30
 8008442:	e5c9      	b.n	8007fd8 <_dtoa_r+0x4d0>
 8008444:	2336      	movs	r3, #54	@ 0x36
 8008446:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008448:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	9c06      	ldr	r4, [sp, #24]
 800844e:	e720      	b.n	8008292 <_dtoa_r+0x78a>
 8008450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008452:	1e5d      	subs	r5, r3, #1
 8008454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008456:	42ab      	cmp	r3, r5
 8008458:	db08      	blt.n	800846c <_dtoa_r+0x964>
 800845a:	1b5d      	subs	r5, r3, r5
 800845c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	daf4      	bge.n	800844c <_dtoa_r+0x944>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008466:	1a9c      	subs	r4, r3, r2
 8008468:	2300      	movs	r3, #0
 800846a:	e712      	b.n	8008292 <_dtoa_r+0x78a>
 800846c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800846e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008470:	1aeb      	subs	r3, r5, r3
 8008472:	18d3      	adds	r3, r2, r3
 8008474:	9314      	str	r3, [sp, #80]	@ 0x50
 8008476:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008478:	9c06      	ldr	r4, [sp, #24]
 800847a:	2500      	movs	r5, #0
 800847c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847e:	e708      	b.n	8008292 <_dtoa_r+0x78a>
 8008480:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008482:	9905      	ldr	r1, [sp, #20]
 8008484:	e742      	b.n	800830c <_dtoa_r+0x804>
 8008486:	2b04      	cmp	r3, #4
 8008488:	d08c      	beq.n	80083a4 <_dtoa_r+0x89c>
 800848a:	331c      	adds	r3, #28
 800848c:	e783      	b.n	8008396 <_dtoa_r+0x88e>
 800848e:	0013      	movs	r3, r2
 8008490:	e7fb      	b.n	800848a <_dtoa_r+0x982>
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	930c      	str	r3, [sp, #48]	@ 0x30
 8008496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008498:	930e      	str	r3, [sp, #56]	@ 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	ddb5      	ble.n	800840a <_dtoa_r+0x902>
 800849e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d100      	bne.n	80084a6 <_dtoa_r+0x99e>
 80084a4:	e107      	b.n	80086b6 <_dtoa_r+0xbae>
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	dd05      	ble.n	80084b6 <_dtoa_r+0x9ae>
 80084aa:	0039      	movs	r1, r7
 80084ac:	0022      	movs	r2, r4
 80084ae:	9803      	ldr	r0, [sp, #12]
 80084b0:	f000 fc3a 	bl	8008d28 <__lshift>
 80084b4:	0007      	movs	r7, r0
 80084b6:	9704      	str	r7, [sp, #16]
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	d020      	beq.n	80084fe <_dtoa_r+0x9f6>
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	9803      	ldr	r0, [sp, #12]
 80084c0:	f000 fa18 	bl	80088f4 <_Balloc>
 80084c4:	1e04      	subs	r4, r0, #0
 80084c6:	d10c      	bne.n	80084e2 <_dtoa_r+0x9da>
 80084c8:	0022      	movs	r2, r4
 80084ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008584 <_dtoa_r+0xa7c>)
 80084cc:	482e      	ldr	r0, [pc, #184]	@ (8008588 <_dtoa_r+0xa80>)
 80084ce:	492f      	ldr	r1, [pc, #188]	@ (800858c <_dtoa_r+0xa84>)
 80084d0:	f7ff fb2f 	bl	8007b32 <_dtoa_r+0x2a>
 80084d4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80084d6:	0037      	movs	r7, r6
 80084d8:	e7ab      	b.n	8008432 <_dtoa_r+0x92a>
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80084de:	930c      	str	r3, [sp, #48]	@ 0x30
 80084e0:	e7f9      	b.n	80084d6 <_dtoa_r+0x9ce>
 80084e2:	0039      	movs	r1, r7
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	310c      	adds	r1, #12
 80084e8:	3202      	adds	r2, #2
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	300c      	adds	r0, #12
 80084ee:	f7ff fa7d 	bl	80079ec <memcpy>
 80084f2:	2201      	movs	r2, #1
 80084f4:	0021      	movs	r1, r4
 80084f6:	9803      	ldr	r0, [sp, #12]
 80084f8:	f000 fc16 	bl	8008d28 <__lshift>
 80084fc:	9004      	str	r0, [sp, #16]
 80084fe:	9b08      	ldr	r3, [sp, #32]
 8008500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008502:	9306      	str	r3, [sp, #24]
 8008504:	3b01      	subs	r3, #1
 8008506:	189b      	adds	r3, r3, r2
 8008508:	2201      	movs	r2, #1
 800850a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800850c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850e:	4013      	ands	r3, r2
 8008510:	930e      	str	r3, [sp, #56]	@ 0x38
 8008512:	0031      	movs	r1, r6
 8008514:	9805      	ldr	r0, [sp, #20]
 8008516:	f7ff fa72 	bl	80079fe <quorem>
 800851a:	0039      	movs	r1, r7
 800851c:	0005      	movs	r5, r0
 800851e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008520:	9805      	ldr	r0, [sp, #20]
 8008522:	f000 fc6d 	bl	8008e00 <__mcmp>
 8008526:	9a04      	ldr	r2, [sp, #16]
 8008528:	900d      	str	r0, [sp, #52]	@ 0x34
 800852a:	0031      	movs	r1, r6
 800852c:	9803      	ldr	r0, [sp, #12]
 800852e:	f000 fc83 	bl	8008e38 <__mdiff>
 8008532:	2201      	movs	r2, #1
 8008534:	68c3      	ldr	r3, [r0, #12]
 8008536:	0004      	movs	r4, r0
 8008538:	3530      	adds	r5, #48	@ 0x30
 800853a:	9209      	str	r2, [sp, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <_dtoa_r+0xa42>
 8008540:	0001      	movs	r1, r0
 8008542:	9805      	ldr	r0, [sp, #20]
 8008544:	f000 fc5c 	bl	8008e00 <__mcmp>
 8008548:	9009      	str	r0, [sp, #36]	@ 0x24
 800854a:	0021      	movs	r1, r4
 800854c:	9803      	ldr	r0, [sp, #12]
 800854e:	f000 fa15 	bl	800897c <_Bfree>
 8008552:	9b06      	ldr	r3, [sp, #24]
 8008554:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008556:	1c5c      	adds	r4, r3, #1
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	4313      	orrs	r3, r2
 800855c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800855e:	4313      	orrs	r3, r2
 8008560:	d116      	bne.n	8008590 <_dtoa_r+0xa88>
 8008562:	2d39      	cmp	r5, #57	@ 0x39
 8008564:	d02f      	beq.n	80085c6 <_dtoa_r+0xabe>
 8008566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008568:	2b00      	cmp	r3, #0
 800856a:	dd01      	ble.n	8008570 <_dtoa_r+0xa68>
 800856c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800856e:	3531      	adds	r5, #49	@ 0x31
 8008570:	9b06      	ldr	r3, [sp, #24]
 8008572:	701d      	strb	r5, [r3, #0]
 8008574:	e532      	b.n	8007fdc <_dtoa_r+0x4d4>
 8008576:	46c0      	nop			@ (mov r8, r8)
 8008578:	40240000 	.word	0x40240000
 800857c:	00000433 	.word	0x00000433
 8008580:	7ff00000 	.word	0x7ff00000
 8008584:	0800a018 	.word	0x0800a018
 8008588:	08009fc0 	.word	0x08009fc0
 800858c:	000002ef 	.word	0x000002ef
 8008590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008592:	2b00      	cmp	r3, #0
 8008594:	db04      	blt.n	80085a0 <_dtoa_r+0xa98>
 8008596:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008598:	4313      	orrs	r3, r2
 800859a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800859c:	4313      	orrs	r3, r2
 800859e:	d11e      	bne.n	80085de <_dtoa_r+0xad6>
 80085a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dde4      	ble.n	8008570 <_dtoa_r+0xa68>
 80085a6:	9905      	ldr	r1, [sp, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	9803      	ldr	r0, [sp, #12]
 80085ac:	f000 fbbc 	bl	8008d28 <__lshift>
 80085b0:	0031      	movs	r1, r6
 80085b2:	9005      	str	r0, [sp, #20]
 80085b4:	f000 fc24 	bl	8008e00 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dc02      	bgt.n	80085c2 <_dtoa_r+0xaba>
 80085bc:	d1d8      	bne.n	8008570 <_dtoa_r+0xa68>
 80085be:	07eb      	lsls	r3, r5, #31
 80085c0:	d5d6      	bpl.n	8008570 <_dtoa_r+0xa68>
 80085c2:	2d39      	cmp	r5, #57	@ 0x39
 80085c4:	d1d2      	bne.n	800856c <_dtoa_r+0xa64>
 80085c6:	2339      	movs	r3, #57	@ 0x39
 80085c8:	9a06      	ldr	r2, [sp, #24]
 80085ca:	7013      	strb	r3, [r2, #0]
 80085cc:	0023      	movs	r3, r4
 80085ce:	001c      	movs	r4, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	781a      	ldrb	r2, [r3, #0]
 80085d4:	2a39      	cmp	r2, #57	@ 0x39
 80085d6:	d050      	beq.n	800867a <_dtoa_r+0xb72>
 80085d8:	3201      	adds	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e4fe      	b.n	8007fdc <_dtoa_r+0x4d4>
 80085de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd03      	ble.n	80085ec <_dtoa_r+0xae4>
 80085e4:	2d39      	cmp	r5, #57	@ 0x39
 80085e6:	d0ee      	beq.n	80085c6 <_dtoa_r+0xabe>
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c1      	b.n	8008570 <_dtoa_r+0xa68>
 80085ec:	9b06      	ldr	r3, [sp, #24]
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	701d      	strb	r5, [r3, #0]
 80085f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d02b      	beq.n	8008650 <_dtoa_r+0xb48>
 80085f8:	2300      	movs	r3, #0
 80085fa:	220a      	movs	r2, #10
 80085fc:	9905      	ldr	r1, [sp, #20]
 80085fe:	9803      	ldr	r0, [sp, #12]
 8008600:	f000 f9e0 	bl	80089c4 <__multadd>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	9005      	str	r0, [sp, #20]
 8008608:	429f      	cmp	r7, r3
 800860a:	d109      	bne.n	8008620 <_dtoa_r+0xb18>
 800860c:	0039      	movs	r1, r7
 800860e:	2300      	movs	r3, #0
 8008610:	220a      	movs	r2, #10
 8008612:	9803      	ldr	r0, [sp, #12]
 8008614:	f000 f9d6 	bl	80089c4 <__multadd>
 8008618:	0007      	movs	r7, r0
 800861a:	9004      	str	r0, [sp, #16]
 800861c:	9406      	str	r4, [sp, #24]
 800861e:	e778      	b.n	8008512 <_dtoa_r+0xa0a>
 8008620:	0039      	movs	r1, r7
 8008622:	2300      	movs	r3, #0
 8008624:	220a      	movs	r2, #10
 8008626:	9803      	ldr	r0, [sp, #12]
 8008628:	f000 f9cc 	bl	80089c4 <__multadd>
 800862c:	2300      	movs	r3, #0
 800862e:	0007      	movs	r7, r0
 8008630:	220a      	movs	r2, #10
 8008632:	9904      	ldr	r1, [sp, #16]
 8008634:	9803      	ldr	r0, [sp, #12]
 8008636:	f000 f9c5 	bl	80089c4 <__multadd>
 800863a:	9004      	str	r0, [sp, #16]
 800863c:	e7ee      	b.n	800861c <_dtoa_r+0xb14>
 800863e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008640:	2401      	movs	r4, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd00      	ble.n	8008648 <_dtoa_r+0xb40>
 8008646:	001c      	movs	r4, r3
 8008648:	9704      	str	r7, [sp, #16]
 800864a:	2700      	movs	r7, #0
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	191c      	adds	r4, r3, r4
 8008650:	9905      	ldr	r1, [sp, #20]
 8008652:	2201      	movs	r2, #1
 8008654:	9803      	ldr	r0, [sp, #12]
 8008656:	f000 fb67 	bl	8008d28 <__lshift>
 800865a:	0031      	movs	r1, r6
 800865c:	9005      	str	r0, [sp, #20]
 800865e:	f000 fbcf 	bl	8008e00 <__mcmp>
 8008662:	2800      	cmp	r0, #0
 8008664:	dcb2      	bgt.n	80085cc <_dtoa_r+0xac4>
 8008666:	d101      	bne.n	800866c <_dtoa_r+0xb64>
 8008668:	07ed      	lsls	r5, r5, #31
 800866a:	d4af      	bmi.n	80085cc <_dtoa_r+0xac4>
 800866c:	0023      	movs	r3, r4
 800866e:	001c      	movs	r4, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	781a      	ldrb	r2, [r3, #0]
 8008674:	2a30      	cmp	r2, #48	@ 0x30
 8008676:	d0fa      	beq.n	800866e <_dtoa_r+0xb66>
 8008678:	e4b0      	b.n	8007fdc <_dtoa_r+0x4d4>
 800867a:	9a08      	ldr	r2, [sp, #32]
 800867c:	429a      	cmp	r2, r3
 800867e:	d1a6      	bne.n	80085ce <_dtoa_r+0xac6>
 8008680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008682:	3301      	adds	r3, #1
 8008684:	930c      	str	r3, [sp, #48]	@ 0x30
 8008686:	2331      	movs	r3, #49	@ 0x31
 8008688:	7013      	strb	r3, [r2, #0]
 800868a:	e4a7      	b.n	8007fdc <_dtoa_r+0x4d4>
 800868c:	4b14      	ldr	r3, [pc, #80]	@ (80086e0 <_dtoa_r+0xbd8>)
 800868e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008690:	9308      	str	r3, [sp, #32]
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <_dtoa_r+0xbdc>)
 8008694:	2a00      	cmp	r2, #0
 8008696:	d001      	beq.n	800869c <_dtoa_r+0xb94>
 8008698:	f7ff fa7e 	bl	8007b98 <_dtoa_r+0x90>
 800869c:	f7ff fa7e 	bl	8007b9c <_dtoa_r+0x94>
 80086a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	dc00      	bgt.n	80086a8 <_dtoa_r+0xba0>
 80086a6:	e648      	b.n	800833a <_dtoa_r+0x832>
 80086a8:	2001      	movs	r0, #1
 80086aa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80086ac:	e665      	b.n	800837a <_dtoa_r+0x872>
 80086ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dc00      	bgt.n	80086b6 <_dtoa_r+0xbae>
 80086b4:	e6a9      	b.n	800840a <_dtoa_r+0x902>
 80086b6:	2400      	movs	r4, #0
 80086b8:	0031      	movs	r1, r6
 80086ba:	9805      	ldr	r0, [sp, #20]
 80086bc:	f7ff f99f 	bl	80079fe <quorem>
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	3030      	adds	r0, #48	@ 0x30
 80086c4:	5518      	strb	r0, [r3, r4]
 80086c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c8:	3401      	adds	r4, #1
 80086ca:	0005      	movs	r5, r0
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	ddb6      	ble.n	800863e <_dtoa_r+0xb36>
 80086d0:	2300      	movs	r3, #0
 80086d2:	220a      	movs	r2, #10
 80086d4:	9905      	ldr	r1, [sp, #20]
 80086d6:	9803      	ldr	r0, [sp, #12]
 80086d8:	f000 f974 	bl	80089c4 <__multadd>
 80086dc:	9005      	str	r0, [sp, #20]
 80086de:	e7eb      	b.n	80086b8 <_dtoa_r+0xbb0>
 80086e0:	08009f9c 	.word	0x08009f9c
 80086e4:	08009fa4 	.word	0x08009fa4

080086e8 <_free_r>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	0005      	movs	r5, r0
 80086ec:	1e0c      	subs	r4, r1, #0
 80086ee:	d010      	beq.n	8008712 <_free_r+0x2a>
 80086f0:	3c04      	subs	r4, #4
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	da00      	bge.n	80086fa <_free_r+0x12>
 80086f8:	18e4      	adds	r4, r4, r3
 80086fa:	0028      	movs	r0, r5
 80086fc:	f000 f8ea 	bl	80088d4 <__malloc_lock>
 8008700:	4a1d      	ldr	r2, [pc, #116]	@ (8008778 <_free_r+0x90>)
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <_free_r+0x2c>
 8008708:	6063      	str	r3, [r4, #4]
 800870a:	6014      	str	r4, [r2, #0]
 800870c:	0028      	movs	r0, r5
 800870e:	f000 f8e9 	bl	80088e4 <__malloc_unlock>
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x42>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428b      	cmp	r3, r1
 800871e:	d1f3      	bne.n	8008708 <_free_r+0x20>
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	1809      	adds	r1, r1, r0
 8008726:	6021      	str	r1, [r4, #0]
 8008728:	e7ee      	b.n	8008708 <_free_r+0x20>
 800872a:	001a      	movs	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <_free_r+0x4e>
 8008732:	42a3      	cmp	r3, r4
 8008734:	d9f9      	bls.n	800872a <_free_r+0x42>
 8008736:	6811      	ldr	r1, [r2, #0]
 8008738:	1850      	adds	r0, r2, r1
 800873a:	42a0      	cmp	r0, r4
 800873c:	d10b      	bne.n	8008756 <_free_r+0x6e>
 800873e:	6820      	ldr	r0, [r4, #0]
 8008740:	1809      	adds	r1, r1, r0
 8008742:	1850      	adds	r0, r2, r1
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	4283      	cmp	r3, r0
 8008748:	d1e0      	bne.n	800870c <_free_r+0x24>
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	1841      	adds	r1, r0, r1
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	6053      	str	r3, [r2, #4]
 8008754:	e7da      	b.n	800870c <_free_r+0x24>
 8008756:	42a0      	cmp	r0, r4
 8008758:	d902      	bls.n	8008760 <_free_r+0x78>
 800875a:	230c      	movs	r3, #12
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	e7d5      	b.n	800870c <_free_r+0x24>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428b      	cmp	r3, r1
 8008766:	d103      	bne.n	8008770 <_free_r+0x88>
 8008768:	6819      	ldr	r1, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	1809      	adds	r1, r1, r0
 800876e:	6021      	str	r1, [r4, #0]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	6054      	str	r4, [r2, #4]
 8008774:	e7ca      	b.n	800870c <_free_r+0x24>
 8008776:	46c0      	nop			@ (mov r8, r8)
 8008778:	2000041c 	.word	0x2000041c

0800877c <malloc>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4b03      	ldr	r3, [pc, #12]	@ (800878c <malloc+0x10>)
 8008780:	0001      	movs	r1, r0
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	f000 f826 	bl	80087d4 <_malloc_r>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	20000018 	.word	0x20000018

08008790 <sbrk_aligned>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4e0f      	ldr	r6, [pc, #60]	@ (80087d0 <sbrk_aligned+0x40>)
 8008794:	000d      	movs	r5, r1
 8008796:	6831      	ldr	r1, [r6, #0]
 8008798:	0004      	movs	r4, r0
 800879a:	2900      	cmp	r1, #0
 800879c:	d102      	bne.n	80087a4 <sbrk_aligned+0x14>
 800879e:	f000 fe67 	bl	8009470 <_sbrk_r>
 80087a2:	6030      	str	r0, [r6, #0]
 80087a4:	0029      	movs	r1, r5
 80087a6:	0020      	movs	r0, r4
 80087a8:	f000 fe62 	bl	8009470 <_sbrk_r>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d103      	bne.n	80087b8 <sbrk_aligned+0x28>
 80087b0:	2501      	movs	r5, #1
 80087b2:	426d      	negs	r5, r5
 80087b4:	0028      	movs	r0, r5
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	2303      	movs	r3, #3
 80087ba:	1cc5      	adds	r5, r0, #3
 80087bc:	439d      	bics	r5, r3
 80087be:	42a8      	cmp	r0, r5
 80087c0:	d0f8      	beq.n	80087b4 <sbrk_aligned+0x24>
 80087c2:	1a29      	subs	r1, r5, r0
 80087c4:	0020      	movs	r0, r4
 80087c6:	f000 fe53 	bl	8009470 <_sbrk_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	d1f2      	bne.n	80087b4 <sbrk_aligned+0x24>
 80087ce:	e7ef      	b.n	80087b0 <sbrk_aligned+0x20>
 80087d0:	20000418 	.word	0x20000418

080087d4 <_malloc_r>:
 80087d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087d6:	2203      	movs	r2, #3
 80087d8:	1ccb      	adds	r3, r1, #3
 80087da:	4393      	bics	r3, r2
 80087dc:	3308      	adds	r3, #8
 80087de:	0005      	movs	r5, r0
 80087e0:	001f      	movs	r7, r3
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d234      	bcs.n	8008850 <_malloc_r+0x7c>
 80087e6:	270c      	movs	r7, #12
 80087e8:	42b9      	cmp	r1, r7
 80087ea:	d833      	bhi.n	8008854 <_malloc_r+0x80>
 80087ec:	0028      	movs	r0, r5
 80087ee:	f000 f871 	bl	80088d4 <__malloc_lock>
 80087f2:	4e37      	ldr	r6, [pc, #220]	@ (80088d0 <_malloc_r+0xfc>)
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	001c      	movs	r4, r3
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	d12f      	bne.n	800885c <_malloc_r+0x88>
 80087fc:	0039      	movs	r1, r7
 80087fe:	0028      	movs	r0, r5
 8008800:	f7ff ffc6 	bl	8008790 <sbrk_aligned>
 8008804:	0004      	movs	r4, r0
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d15f      	bne.n	80088ca <_malloc_r+0xf6>
 800880a:	6834      	ldr	r4, [r6, #0]
 800880c:	9400      	str	r4, [sp, #0]
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d14a      	bne.n	80088aa <_malloc_r+0xd6>
 8008814:	2c00      	cmp	r4, #0
 8008816:	d052      	beq.n	80088be <_malloc_r+0xea>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	0028      	movs	r0, r5
 800881c:	18e3      	adds	r3, r4, r3
 800881e:	9900      	ldr	r1, [sp, #0]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	f000 fe25 	bl	8009470 <_sbrk_r>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	4283      	cmp	r3, r0
 800882a:	d148      	bne.n	80088be <_malloc_r+0xea>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	0028      	movs	r0, r5
 8008830:	1aff      	subs	r7, r7, r3
 8008832:	0039      	movs	r1, r7
 8008834:	f7ff ffac 	bl	8008790 <sbrk_aligned>
 8008838:	3001      	adds	r0, #1
 800883a:	d040      	beq.n	80088be <_malloc_r+0xea>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	19db      	adds	r3, r3, r7
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	6833      	ldr	r3, [r6, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	2a00      	cmp	r2, #0
 8008848:	d133      	bne.n	80088b2 <_malloc_r+0xde>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	e019      	b.n	8008884 <_malloc_r+0xb0>
 8008850:	2b00      	cmp	r3, #0
 8008852:	dac9      	bge.n	80087e8 <_malloc_r+0x14>
 8008854:	230c      	movs	r3, #12
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	2000      	movs	r0, #0
 800885a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800885c:	6821      	ldr	r1, [r4, #0]
 800885e:	1bc9      	subs	r1, r1, r7
 8008860:	d420      	bmi.n	80088a4 <_malloc_r+0xd0>
 8008862:	290b      	cmp	r1, #11
 8008864:	d90a      	bls.n	800887c <_malloc_r+0xa8>
 8008866:	19e2      	adds	r2, r4, r7
 8008868:	6027      	str	r7, [r4, #0]
 800886a:	42a3      	cmp	r3, r4
 800886c:	d104      	bne.n	8008878 <_malloc_r+0xa4>
 800886e:	6032      	str	r2, [r6, #0]
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	6011      	str	r1, [r2, #0]
 8008874:	6053      	str	r3, [r2, #4]
 8008876:	e005      	b.n	8008884 <_malloc_r+0xb0>
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	e7f9      	b.n	8008870 <_malloc_r+0x9c>
 800887c:	6862      	ldr	r2, [r4, #4]
 800887e:	42a3      	cmp	r3, r4
 8008880:	d10e      	bne.n	80088a0 <_malloc_r+0xcc>
 8008882:	6032      	str	r2, [r6, #0]
 8008884:	0028      	movs	r0, r5
 8008886:	f000 f82d 	bl	80088e4 <__malloc_unlock>
 800888a:	0020      	movs	r0, r4
 800888c:	2207      	movs	r2, #7
 800888e:	300b      	adds	r0, #11
 8008890:	1d23      	adds	r3, r4, #4
 8008892:	4390      	bics	r0, r2
 8008894:	1ac2      	subs	r2, r0, r3
 8008896:	4298      	cmp	r0, r3
 8008898:	d0df      	beq.n	800885a <_malloc_r+0x86>
 800889a:	1a1b      	subs	r3, r3, r0
 800889c:	50a3      	str	r3, [r4, r2]
 800889e:	e7dc      	b.n	800885a <_malloc_r+0x86>
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	e7ef      	b.n	8008884 <_malloc_r+0xb0>
 80088a4:	0023      	movs	r3, r4
 80088a6:	6864      	ldr	r4, [r4, #4]
 80088a8:	e7a6      	b.n	80087f8 <_malloc_r+0x24>
 80088aa:	9c00      	ldr	r4, [sp, #0]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	e7ad      	b.n	800880e <_malloc_r+0x3a>
 80088b2:	001a      	movs	r2, r3
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	d1fb      	bne.n	80088b2 <_malloc_r+0xde>
 80088ba:	2300      	movs	r3, #0
 80088bc:	e7da      	b.n	8008874 <_malloc_r+0xa0>
 80088be:	230c      	movs	r3, #12
 80088c0:	0028      	movs	r0, r5
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f000 f80e 	bl	80088e4 <__malloc_unlock>
 80088c8:	e7c6      	b.n	8008858 <_malloc_r+0x84>
 80088ca:	6007      	str	r7, [r0, #0]
 80088cc:	e7da      	b.n	8008884 <_malloc_r+0xb0>
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	2000041c 	.word	0x2000041c

080088d4 <__malloc_lock>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4802      	ldr	r0, [pc, #8]	@ (80088e0 <__malloc_lock+0xc>)
 80088d8:	f7ff f87b 	bl	80079d2 <__retarget_lock_acquire_recursive>
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	20000414 	.word	0x20000414

080088e4 <__malloc_unlock>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4802      	ldr	r0, [pc, #8]	@ (80088f0 <__malloc_unlock+0xc>)
 80088e8:	f7ff f874 	bl	80079d4 <__retarget_lock_release_recursive>
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	20000414 	.word	0x20000414

080088f4 <_Balloc>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	69c5      	ldr	r5, [r0, #28]
 80088f8:	0006      	movs	r6, r0
 80088fa:	000c      	movs	r4, r1
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	d10e      	bne.n	800891e <_Balloc+0x2a>
 8008900:	2010      	movs	r0, #16
 8008902:	f7ff ff3b 	bl	800877c <malloc>
 8008906:	1e02      	subs	r2, r0, #0
 8008908:	61f0      	str	r0, [r6, #28]
 800890a:	d104      	bne.n	8008916 <_Balloc+0x22>
 800890c:	216b      	movs	r1, #107	@ 0x6b
 800890e:	4b19      	ldr	r3, [pc, #100]	@ (8008974 <_Balloc+0x80>)
 8008910:	4819      	ldr	r0, [pc, #100]	@ (8008978 <_Balloc+0x84>)
 8008912:	f000 fdbf 	bl	8009494 <__assert_func>
 8008916:	6045      	str	r5, [r0, #4]
 8008918:	6085      	str	r5, [r0, #8]
 800891a:	6005      	str	r5, [r0, #0]
 800891c:	60c5      	str	r5, [r0, #12]
 800891e:	69f5      	ldr	r5, [r6, #28]
 8008920:	68eb      	ldr	r3, [r5, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d013      	beq.n	800894e <_Balloc+0x5a>
 8008926:	69f3      	ldr	r3, [r6, #28]
 8008928:	00a2      	lsls	r2, r4, #2
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	189b      	adds	r3, r3, r2
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	2800      	cmp	r0, #0
 8008932:	d118      	bne.n	8008966 <_Balloc+0x72>
 8008934:	2101      	movs	r1, #1
 8008936:	000d      	movs	r5, r1
 8008938:	40a5      	lsls	r5, r4
 800893a:	1d6a      	adds	r2, r5, #5
 800893c:	0030      	movs	r0, r6
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	f000 fdc6 	bl	80094d0 <_calloc_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	d00c      	beq.n	8008962 <_Balloc+0x6e>
 8008948:	6044      	str	r4, [r0, #4]
 800894a:	6085      	str	r5, [r0, #8]
 800894c:	e00d      	b.n	800896a <_Balloc+0x76>
 800894e:	2221      	movs	r2, #33	@ 0x21
 8008950:	2104      	movs	r1, #4
 8008952:	0030      	movs	r0, r6
 8008954:	f000 fdbc 	bl	80094d0 <_calloc_r>
 8008958:	69f3      	ldr	r3, [r6, #28]
 800895a:	60e8      	str	r0, [r5, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e1      	bne.n	8008926 <_Balloc+0x32>
 8008962:	2000      	movs	r0, #0
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	6802      	ldr	r2, [r0, #0]
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	2300      	movs	r3, #0
 800896c:	6103      	str	r3, [r0, #16]
 800896e:	60c3      	str	r3, [r0, #12]
 8008970:	e7f8      	b.n	8008964 <_Balloc+0x70>
 8008972:	46c0      	nop			@ (mov r8, r8)
 8008974:	08009fa9 	.word	0x08009fa9
 8008978:	0800a029 	.word	0x0800a029

0800897c <_Bfree>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	69c6      	ldr	r6, [r0, #28]
 8008980:	0005      	movs	r5, r0
 8008982:	000c      	movs	r4, r1
 8008984:	2e00      	cmp	r6, #0
 8008986:	d10e      	bne.n	80089a6 <_Bfree+0x2a>
 8008988:	2010      	movs	r0, #16
 800898a:	f7ff fef7 	bl	800877c <malloc>
 800898e:	1e02      	subs	r2, r0, #0
 8008990:	61e8      	str	r0, [r5, #28]
 8008992:	d104      	bne.n	800899e <_Bfree+0x22>
 8008994:	218f      	movs	r1, #143	@ 0x8f
 8008996:	4b09      	ldr	r3, [pc, #36]	@ (80089bc <_Bfree+0x40>)
 8008998:	4809      	ldr	r0, [pc, #36]	@ (80089c0 <_Bfree+0x44>)
 800899a:	f000 fd7b 	bl	8009494 <__assert_func>
 800899e:	6046      	str	r6, [r0, #4]
 80089a0:	6086      	str	r6, [r0, #8]
 80089a2:	6006      	str	r6, [r0, #0]
 80089a4:	60c6      	str	r6, [r0, #12]
 80089a6:	2c00      	cmp	r4, #0
 80089a8:	d007      	beq.n	80089ba <_Bfree+0x3e>
 80089aa:	69eb      	ldr	r3, [r5, #28]
 80089ac:	6862      	ldr	r2, [r4, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0092      	lsls	r2, r2, #2
 80089b2:	189b      	adds	r3, r3, r2
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	6022      	str	r2, [r4, #0]
 80089b8:	601c      	str	r4, [r3, #0]
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	08009fa9 	.word	0x08009fa9
 80089c0:	0800a029 	.word	0x0800a029

080089c4 <__multadd>:
 80089c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c6:	000f      	movs	r7, r1
 80089c8:	9001      	str	r0, [sp, #4]
 80089ca:	000c      	movs	r4, r1
 80089cc:	001e      	movs	r6, r3
 80089ce:	2000      	movs	r0, #0
 80089d0:	690d      	ldr	r5, [r1, #16]
 80089d2:	3714      	adds	r7, #20
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	3001      	adds	r0, #1
 80089d8:	b299      	uxth	r1, r3
 80089da:	4351      	muls	r1, r2
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	4353      	muls	r3, r2
 80089e0:	1989      	adds	r1, r1, r6
 80089e2:	0c0e      	lsrs	r6, r1, #16
 80089e4:	199b      	adds	r3, r3, r6
 80089e6:	0c1e      	lsrs	r6, r3, #16
 80089e8:	b289      	uxth	r1, r1
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	185b      	adds	r3, r3, r1
 80089ee:	c708      	stmia	r7!, {r3}
 80089f0:	4285      	cmp	r5, r0
 80089f2:	dcef      	bgt.n	80089d4 <__multadd+0x10>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	d022      	beq.n	8008a3e <__multadd+0x7a>
 80089f8:	68a3      	ldr	r3, [r4, #8]
 80089fa:	42ab      	cmp	r3, r5
 80089fc:	dc19      	bgt.n	8008a32 <__multadd+0x6e>
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	9801      	ldr	r0, [sp, #4]
 8008a02:	3101      	adds	r1, #1
 8008a04:	f7ff ff76 	bl	80088f4 <_Balloc>
 8008a08:	1e07      	subs	r7, r0, #0
 8008a0a:	d105      	bne.n	8008a18 <__multadd+0x54>
 8008a0c:	003a      	movs	r2, r7
 8008a0e:	21ba      	movs	r1, #186	@ 0xba
 8008a10:	4b0c      	ldr	r3, [pc, #48]	@ (8008a44 <__multadd+0x80>)
 8008a12:	480d      	ldr	r0, [pc, #52]	@ (8008a48 <__multadd+0x84>)
 8008a14:	f000 fd3e 	bl	8009494 <__assert_func>
 8008a18:	0021      	movs	r1, r4
 8008a1a:	6922      	ldr	r2, [r4, #16]
 8008a1c:	310c      	adds	r1, #12
 8008a1e:	3202      	adds	r2, #2
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	300c      	adds	r0, #12
 8008a24:	f7fe ffe2 	bl	80079ec <memcpy>
 8008a28:	0021      	movs	r1, r4
 8008a2a:	9801      	ldr	r0, [sp, #4]
 8008a2c:	f7ff ffa6 	bl	800897c <_Bfree>
 8008a30:	003c      	movs	r4, r7
 8008a32:	1d2b      	adds	r3, r5, #4
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	18e3      	adds	r3, r4, r3
 8008a38:	3501      	adds	r5, #1
 8008a3a:	605e      	str	r6, [r3, #4]
 8008a3c:	6125      	str	r5, [r4, #16]
 8008a3e:	0020      	movs	r0, r4
 8008a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	0800a018 	.word	0x0800a018
 8008a48:	0800a029 	.word	0x0800a029

08008a4c <__hi0bits>:
 8008a4c:	2280      	movs	r2, #128	@ 0x80
 8008a4e:	0003      	movs	r3, r0
 8008a50:	0252      	lsls	r2, r2, #9
 8008a52:	2000      	movs	r0, #0
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d201      	bcs.n	8008a5c <__hi0bits+0x10>
 8008a58:	041b      	lsls	r3, r3, #16
 8008a5a:	3010      	adds	r0, #16
 8008a5c:	2280      	movs	r2, #128	@ 0x80
 8008a5e:	0452      	lsls	r2, r2, #17
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d201      	bcs.n	8008a68 <__hi0bits+0x1c>
 8008a64:	3008      	adds	r0, #8
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	2280      	movs	r2, #128	@ 0x80
 8008a6a:	0552      	lsls	r2, r2, #21
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d201      	bcs.n	8008a74 <__hi0bits+0x28>
 8008a70:	3004      	adds	r0, #4
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	2280      	movs	r2, #128	@ 0x80
 8008a76:	05d2      	lsls	r2, r2, #23
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d201      	bcs.n	8008a80 <__hi0bits+0x34>
 8008a7c:	3002      	adds	r0, #2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db03      	blt.n	8008a8c <__hi0bits+0x40>
 8008a84:	3001      	adds	r0, #1
 8008a86:	4213      	tst	r3, r2
 8008a88:	d100      	bne.n	8008a8c <__hi0bits+0x40>
 8008a8a:	2020      	movs	r0, #32
 8008a8c:	4770      	bx	lr

08008a8e <__lo0bits>:
 8008a8e:	6803      	ldr	r3, [r0, #0]
 8008a90:	0001      	movs	r1, r0
 8008a92:	2207      	movs	r2, #7
 8008a94:	0018      	movs	r0, r3
 8008a96:	4010      	ands	r0, r2
 8008a98:	4213      	tst	r3, r2
 8008a9a:	d00d      	beq.n	8008ab8 <__lo0bits+0x2a>
 8008a9c:	3a06      	subs	r2, #6
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	4213      	tst	r3, r2
 8008aa2:	d105      	bne.n	8008ab0 <__lo0bits+0x22>
 8008aa4:	3002      	adds	r0, #2
 8008aa6:	4203      	tst	r3, r0
 8008aa8:	d003      	beq.n	8008ab2 <__lo0bits+0x24>
 8008aaa:	40d3      	lsrs	r3, r2
 8008aac:	0010      	movs	r0, r2
 8008aae:	600b      	str	r3, [r1, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	089b      	lsrs	r3, r3, #2
 8008ab4:	600b      	str	r3, [r1, #0]
 8008ab6:	e7fb      	b.n	8008ab0 <__lo0bits+0x22>
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	d101      	bne.n	8008ac2 <__lo0bits+0x34>
 8008abe:	2010      	movs	r0, #16
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	d101      	bne.n	8008acc <__lo0bits+0x3e>
 8008ac8:	3008      	adds	r0, #8
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	071a      	lsls	r2, r3, #28
 8008ace:	d101      	bne.n	8008ad4 <__lo0bits+0x46>
 8008ad0:	3004      	adds	r0, #4
 8008ad2:	091b      	lsrs	r3, r3, #4
 8008ad4:	079a      	lsls	r2, r3, #30
 8008ad6:	d101      	bne.n	8008adc <__lo0bits+0x4e>
 8008ad8:	3002      	adds	r0, #2
 8008ada:	089b      	lsrs	r3, r3, #2
 8008adc:	07da      	lsls	r2, r3, #31
 8008ade:	d4e9      	bmi.n	8008ab4 <__lo0bits+0x26>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	085b      	lsrs	r3, r3, #1
 8008ae4:	d1e6      	bne.n	8008ab4 <__lo0bits+0x26>
 8008ae6:	2020      	movs	r0, #32
 8008ae8:	e7e2      	b.n	8008ab0 <__lo0bits+0x22>
	...

08008aec <__i2b>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	000c      	movs	r4, r1
 8008af0:	2101      	movs	r1, #1
 8008af2:	f7ff feff 	bl	80088f4 <_Balloc>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d107      	bne.n	8008b0a <__i2b+0x1e>
 8008afa:	2146      	movs	r1, #70	@ 0x46
 8008afc:	4c05      	ldr	r4, [pc, #20]	@ (8008b14 <__i2b+0x28>)
 8008afe:	0002      	movs	r2, r0
 8008b00:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <__i2b+0x2c>)
 8008b02:	0020      	movs	r0, r4
 8008b04:	31ff      	adds	r1, #255	@ 0xff
 8008b06:	f000 fcc5 	bl	8009494 <__assert_func>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	6144      	str	r4, [r0, #20]
 8008b0e:	6103      	str	r3, [r0, #16]
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	46c0      	nop			@ (mov r8, r8)
 8008b14:	0800a029 	.word	0x0800a029
 8008b18:	0800a018 	.word	0x0800a018

08008b1c <__multiply>:
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	0014      	movs	r4, r2
 8008b20:	690a      	ldr	r2, [r1, #16]
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	000d      	movs	r5, r1
 8008b26:	b089      	sub	sp, #36	@ 0x24
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	db02      	blt.n	8008b32 <__multiply+0x16>
 8008b2c:	0023      	movs	r3, r4
 8008b2e:	000c      	movs	r4, r1
 8008b30:	001d      	movs	r5, r3
 8008b32:	6927      	ldr	r7, [r4, #16]
 8008b34:	692e      	ldr	r6, [r5, #16]
 8008b36:	6861      	ldr	r1, [r4, #4]
 8008b38:	19bb      	adds	r3, r7, r6
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	68a3      	ldr	r3, [r4, #8]
 8008b3e:	19ba      	adds	r2, r7, r6
 8008b40:	4293      	cmp	r3, r2
 8008b42:	da00      	bge.n	8008b46 <__multiply+0x2a>
 8008b44:	3101      	adds	r1, #1
 8008b46:	f7ff fed5 	bl	80088f4 <_Balloc>
 8008b4a:	4684      	mov	ip, r0
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d106      	bne.n	8008b5e <__multiply+0x42>
 8008b50:	21b1      	movs	r1, #177	@ 0xb1
 8008b52:	4662      	mov	r2, ip
 8008b54:	4b44      	ldr	r3, [pc, #272]	@ (8008c68 <__multiply+0x14c>)
 8008b56:	4845      	ldr	r0, [pc, #276]	@ (8008c6c <__multiply+0x150>)
 8008b58:	0049      	lsls	r1, r1, #1
 8008b5a:	f000 fc9b 	bl	8009494 <__assert_func>
 8008b5e:	0002      	movs	r2, r0
 8008b60:	19bb      	adds	r3, r7, r6
 8008b62:	3214      	adds	r2, #20
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	0013      	movs	r3, r2
 8008b6e:	9801      	ldr	r0, [sp, #4]
 8008b70:	4283      	cmp	r3, r0
 8008b72:	d328      	bcc.n	8008bc6 <__multiply+0xaa>
 8008b74:	0023      	movs	r3, r4
 8008b76:	00bf      	lsls	r7, r7, #2
 8008b78:	3314      	adds	r3, #20
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	3514      	adds	r5, #20
 8008b7e:	19db      	adds	r3, r3, r7
 8008b80:	00b6      	lsls	r6, r6, #2
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	19ab      	adds	r3, r5, r6
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	2304      	movs	r3, #4
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	0023      	movs	r3, r4
 8008b8e:	9902      	ldr	r1, [sp, #8]
 8008b90:	3315      	adds	r3, #21
 8008b92:	4299      	cmp	r1, r3
 8008b94:	d305      	bcc.n	8008ba2 <__multiply+0x86>
 8008b96:	1b0c      	subs	r4, r1, r4
 8008b98:	3c15      	subs	r4, #21
 8008b9a:	08a4      	lsrs	r4, r4, #2
 8008b9c:	3401      	adds	r4, #1
 8008b9e:	00a3      	lsls	r3, r4, #2
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	d310      	bcc.n	8008bca <__multiply+0xae>
 8008ba8:	9b00      	ldr	r3, [sp, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <__multiply+0x9e>
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d052      	beq.n	8008c60 <__multiply+0x144>
 8008bba:	4663      	mov	r3, ip
 8008bbc:	4660      	mov	r0, ip
 8008bbe:	9a00      	ldr	r2, [sp, #0]
 8008bc0:	611a      	str	r2, [r3, #16]
 8008bc2:	b009      	add	sp, #36	@ 0x24
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc6:	c302      	stmia	r3!, {r1}
 8008bc8:	e7d1      	b.n	8008b6e <__multiply+0x52>
 8008bca:	682c      	ldr	r4, [r5, #0]
 8008bcc:	b2a4      	uxth	r4, r4
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d01f      	beq.n	8008c12 <__multiply+0xf6>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	0017      	movs	r7, r2
 8008bd6:	9e04      	ldr	r6, [sp, #16]
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	ce08      	ldmia	r6!, {r3}
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	466b      	mov	r3, sp
 8008be2:	8b1b      	ldrh	r3, [r3, #24]
 8008be4:	b288      	uxth	r0, r1
 8008be6:	4363      	muls	r3, r4
 8008be8:	181b      	adds	r3, r3, r0
 8008bea:	9803      	ldr	r0, [sp, #12]
 8008bec:	0c09      	lsrs	r1, r1, #16
 8008bee:	181b      	adds	r3, r3, r0
 8008bf0:	9806      	ldr	r0, [sp, #24]
 8008bf2:	0c00      	lsrs	r0, r0, #16
 8008bf4:	4360      	muls	r0, r4
 8008bf6:	1840      	adds	r0, r0, r1
 8008bf8:	0c19      	lsrs	r1, r3, #16
 8008bfa:	1841      	adds	r1, r0, r1
 8008bfc:	0c08      	lsrs	r0, r1, #16
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	0409      	lsls	r1, r1, #16
 8008c02:	4319      	orrs	r1, r3
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	9003      	str	r0, [sp, #12]
 8008c08:	c702      	stmia	r7!, {r1}
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	d8e5      	bhi.n	8008bda <__multiply+0xbe>
 8008c0e:	9b05      	ldr	r3, [sp, #20]
 8008c10:	50d0      	str	r0, [r2, r3]
 8008c12:	682c      	ldr	r4, [r5, #0]
 8008c14:	0c24      	lsrs	r4, r4, #16
 8008c16:	d020      	beq.n	8008c5a <__multiply+0x13e>
 8008c18:	2100      	movs	r1, #0
 8008c1a:	0010      	movs	r0, r2
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	9e04      	ldr	r6, [sp, #16]
 8008c20:	9103      	str	r1, [sp, #12]
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	6807      	ldr	r7, [r0, #0]
 8008c26:	b289      	uxth	r1, r1
 8008c28:	4361      	muls	r1, r4
 8008c2a:	0c3f      	lsrs	r7, r7, #16
 8008c2c:	19c9      	adds	r1, r1, r7
 8008c2e:	9f03      	ldr	r7, [sp, #12]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	19c9      	adds	r1, r1, r7
 8008c34:	040f      	lsls	r7, r1, #16
 8008c36:	431f      	orrs	r7, r3
 8008c38:	6007      	str	r7, [r0, #0]
 8008c3a:	ce80      	ldmia	r6!, {r7}
 8008c3c:	6843      	ldr	r3, [r0, #4]
 8008c3e:	0c3f      	lsrs	r7, r7, #16
 8008c40:	4367      	muls	r7, r4
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	0c09      	lsrs	r1, r1, #16
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	185b      	adds	r3, r3, r1
 8008c4a:	0c19      	lsrs	r1, r3, #16
 8008c4c:	9103      	str	r1, [sp, #12]
 8008c4e:	9902      	ldr	r1, [sp, #8]
 8008c50:	3004      	adds	r0, #4
 8008c52:	42b1      	cmp	r1, r6
 8008c54:	d8e5      	bhi.n	8008c22 <__multiply+0x106>
 8008c56:	9905      	ldr	r1, [sp, #20]
 8008c58:	5053      	str	r3, [r2, r1]
 8008c5a:	3504      	adds	r5, #4
 8008c5c:	3204      	adds	r2, #4
 8008c5e:	e7a0      	b.n	8008ba2 <__multiply+0x86>
 8008c60:	9b00      	ldr	r3, [sp, #0]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	e79f      	b.n	8008ba8 <__multiply+0x8c>
 8008c68:	0800a018 	.word	0x0800a018
 8008c6c:	0800a029 	.word	0x0800a029

08008c70 <__pow5mult>:
 8008c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c72:	2303      	movs	r3, #3
 8008c74:	0015      	movs	r5, r2
 8008c76:	0007      	movs	r7, r0
 8008c78:	000e      	movs	r6, r1
 8008c7a:	401a      	ands	r2, r3
 8008c7c:	421d      	tst	r5, r3
 8008c7e:	d008      	beq.n	8008c92 <__pow5mult+0x22>
 8008c80:	4925      	ldr	r1, [pc, #148]	@ (8008d18 <__pow5mult+0xa8>)
 8008c82:	3a01      	subs	r2, #1
 8008c84:	0092      	lsls	r2, r2, #2
 8008c86:	5852      	ldr	r2, [r2, r1]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	0031      	movs	r1, r6
 8008c8c:	f7ff fe9a 	bl	80089c4 <__multadd>
 8008c90:	0006      	movs	r6, r0
 8008c92:	10ad      	asrs	r5, r5, #2
 8008c94:	d03d      	beq.n	8008d12 <__pow5mult+0xa2>
 8008c96:	69fc      	ldr	r4, [r7, #28]
 8008c98:	2c00      	cmp	r4, #0
 8008c9a:	d10f      	bne.n	8008cbc <__pow5mult+0x4c>
 8008c9c:	2010      	movs	r0, #16
 8008c9e:	f7ff fd6d 	bl	800877c <malloc>
 8008ca2:	1e02      	subs	r2, r0, #0
 8008ca4:	61f8      	str	r0, [r7, #28]
 8008ca6:	d105      	bne.n	8008cb4 <__pow5mult+0x44>
 8008ca8:	21b4      	movs	r1, #180	@ 0xb4
 8008caa:	4b1c      	ldr	r3, [pc, #112]	@ (8008d1c <__pow5mult+0xac>)
 8008cac:	481c      	ldr	r0, [pc, #112]	@ (8008d20 <__pow5mult+0xb0>)
 8008cae:	31ff      	adds	r1, #255	@ 0xff
 8008cb0:	f000 fbf0 	bl	8009494 <__assert_func>
 8008cb4:	6044      	str	r4, [r0, #4]
 8008cb6:	6084      	str	r4, [r0, #8]
 8008cb8:	6004      	str	r4, [r0, #0]
 8008cba:	60c4      	str	r4, [r0, #12]
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	689c      	ldr	r4, [r3, #8]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	d108      	bne.n	8008cd8 <__pow5mult+0x68>
 8008cc6:	0038      	movs	r0, r7
 8008cc8:	4916      	ldr	r1, [pc, #88]	@ (8008d24 <__pow5mult+0xb4>)
 8008cca:	f7ff ff0f 	bl	8008aec <__i2b>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	0004      	movs	r4, r0
 8008cd2:	6098      	str	r0, [r3, #8]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6003      	str	r3, [r0, #0]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	421d      	tst	r5, r3
 8008cdc:	d00a      	beq.n	8008cf4 <__pow5mult+0x84>
 8008cde:	0031      	movs	r1, r6
 8008ce0:	0022      	movs	r2, r4
 8008ce2:	0038      	movs	r0, r7
 8008ce4:	f7ff ff1a 	bl	8008b1c <__multiply>
 8008ce8:	0031      	movs	r1, r6
 8008cea:	9001      	str	r0, [sp, #4]
 8008cec:	0038      	movs	r0, r7
 8008cee:	f7ff fe45 	bl	800897c <_Bfree>
 8008cf2:	9e01      	ldr	r6, [sp, #4]
 8008cf4:	106d      	asrs	r5, r5, #1
 8008cf6:	d00c      	beq.n	8008d12 <__pow5mult+0xa2>
 8008cf8:	6820      	ldr	r0, [r4, #0]
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d107      	bne.n	8008d0e <__pow5mult+0x9e>
 8008cfe:	0022      	movs	r2, r4
 8008d00:	0021      	movs	r1, r4
 8008d02:	0038      	movs	r0, r7
 8008d04:	f7ff ff0a 	bl	8008b1c <__multiply>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	0004      	movs	r4, r0
 8008d10:	e7e2      	b.n	8008cd8 <__pow5mult+0x68>
 8008d12:	0030      	movs	r0, r6
 8008d14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	0800a0dc 	.word	0x0800a0dc
 8008d1c:	08009fa9 	.word	0x08009fa9
 8008d20:	0800a029 	.word	0x0800a029
 8008d24:	00000271 	.word	0x00000271

08008d28 <__lshift>:
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	000c      	movs	r4, r1
 8008d2c:	0016      	movs	r6, r2
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	1157      	asrs	r7, r2, #5
 8008d32:	b085      	sub	sp, #20
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	6849      	ldr	r1, [r1, #4]
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	9002      	str	r0, [sp, #8]
 8008d42:	9a00      	ldr	r2, [sp, #0]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	db10      	blt.n	8008d6a <__lshift+0x42>
 8008d48:	9802      	ldr	r0, [sp, #8]
 8008d4a:	f7ff fdd3 	bl	80088f4 <_Balloc>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	0001      	movs	r1, r0
 8008d52:	0005      	movs	r5, r0
 8008d54:	001a      	movs	r2, r3
 8008d56:	3114      	adds	r1, #20
 8008d58:	4298      	cmp	r0, r3
 8008d5a:	d10c      	bne.n	8008d76 <__lshift+0x4e>
 8008d5c:	21ef      	movs	r1, #239	@ 0xef
 8008d5e:	002a      	movs	r2, r5
 8008d60:	4b25      	ldr	r3, [pc, #148]	@ (8008df8 <__lshift+0xd0>)
 8008d62:	4826      	ldr	r0, [pc, #152]	@ (8008dfc <__lshift+0xd4>)
 8008d64:	0049      	lsls	r1, r1, #1
 8008d66:	f000 fb95 	bl	8009494 <__assert_func>
 8008d6a:	3101      	adds	r1, #1
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	e7e8      	b.n	8008d42 <__lshift+0x1a>
 8008d70:	0098      	lsls	r0, r3, #2
 8008d72:	500a      	str	r2, [r1, r0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	42bb      	cmp	r3, r7
 8008d78:	dbfa      	blt.n	8008d70 <__lshift+0x48>
 8008d7a:	43fb      	mvns	r3, r7
 8008d7c:	17db      	asrs	r3, r3, #31
 8008d7e:	401f      	ands	r7, r3
 8008d80:	00bf      	lsls	r7, r7, #2
 8008d82:	0023      	movs	r3, r4
 8008d84:	201f      	movs	r0, #31
 8008d86:	19c9      	adds	r1, r1, r7
 8008d88:	0037      	movs	r7, r6
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	3314      	adds	r3, #20
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	189a      	adds	r2, r3, r2
 8008d92:	4007      	ands	r7, r0
 8008d94:	4206      	tst	r6, r0
 8008d96:	d029      	beq.n	8008dec <__lshift+0xc4>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	1bc0      	subs	r0, r0, r7
 8008d9c:	9003      	str	r0, [sp, #12]
 8008d9e:	468c      	mov	ip, r1
 8008da0:	2000      	movs	r0, #0
 8008da2:	681e      	ldr	r6, [r3, #0]
 8008da4:	40be      	lsls	r6, r7
 8008da6:	4306      	orrs	r6, r0
 8008da8:	4660      	mov	r0, ip
 8008daa:	c040      	stmia	r0!, {r6}
 8008dac:	4684      	mov	ip, r0
 8008dae:	9e03      	ldr	r6, [sp, #12]
 8008db0:	cb01      	ldmia	r3!, {r0}
 8008db2:	40f0      	lsrs	r0, r6
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d8f4      	bhi.n	8008da2 <__lshift+0x7a>
 8008db8:	0026      	movs	r6, r4
 8008dba:	3615      	adds	r6, #21
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	42b2      	cmp	r2, r6
 8008dc0:	d304      	bcc.n	8008dcc <__lshift+0xa4>
 8008dc2:	1b13      	subs	r3, r2, r4
 8008dc4:	3b15      	subs	r3, #21
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	3301      	adds	r3, #1
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	50c8      	str	r0, [r1, r3]
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d002      	beq.n	8008dd8 <__lshift+0xb0>
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	9802      	ldr	r0, [sp, #8]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	0021      	movs	r1, r4
 8008de0:	612b      	str	r3, [r5, #16]
 8008de2:	f7ff fdcb 	bl	800897c <_Bfree>
 8008de6:	0028      	movs	r0, r5
 8008de8:	b005      	add	sp, #20
 8008dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dec:	cb01      	ldmia	r3!, {r0}
 8008dee:	c101      	stmia	r1!, {r0}
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d8fb      	bhi.n	8008dec <__lshift+0xc4>
 8008df4:	e7f0      	b.n	8008dd8 <__lshift+0xb0>
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	0800a018 	.word	0x0800a018
 8008dfc:	0800a029 	.word	0x0800a029

08008e00 <__mcmp>:
 8008e00:	b530      	push	{r4, r5, lr}
 8008e02:	690b      	ldr	r3, [r1, #16]
 8008e04:	6904      	ldr	r4, [r0, #16]
 8008e06:	0002      	movs	r2, r0
 8008e08:	1ae0      	subs	r0, r4, r3
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d10f      	bne.n	8008e2e <__mcmp+0x2e>
 8008e0e:	3214      	adds	r2, #20
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	3114      	adds	r1, #20
 8008e14:	0014      	movs	r4, r2
 8008e16:	18c9      	adds	r1, r1, r3
 8008e18:	18d2      	adds	r2, r2, r3
 8008e1a:	3a04      	subs	r2, #4
 8008e1c:	3904      	subs	r1, #4
 8008e1e:	6815      	ldr	r5, [r2, #0]
 8008e20:	680b      	ldr	r3, [r1, #0]
 8008e22:	429d      	cmp	r5, r3
 8008e24:	d004      	beq.n	8008e30 <__mcmp+0x30>
 8008e26:	2001      	movs	r0, #1
 8008e28:	429d      	cmp	r5, r3
 8008e2a:	d200      	bcs.n	8008e2e <__mcmp+0x2e>
 8008e2c:	3802      	subs	r0, #2
 8008e2e:	bd30      	pop	{r4, r5, pc}
 8008e30:	4294      	cmp	r4, r2
 8008e32:	d3f2      	bcc.n	8008e1a <__mcmp+0x1a>
 8008e34:	e7fb      	b.n	8008e2e <__mcmp+0x2e>
	...

08008e38 <__mdiff>:
 8008e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3a:	000c      	movs	r4, r1
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	9000      	str	r0, [sp, #0]
 8008e40:	0011      	movs	r1, r2
 8008e42:	0020      	movs	r0, r4
 8008e44:	0017      	movs	r7, r2
 8008e46:	f7ff ffdb 	bl	8008e00 <__mcmp>
 8008e4a:	1e05      	subs	r5, r0, #0
 8008e4c:	d110      	bne.n	8008e70 <__mdiff+0x38>
 8008e4e:	0001      	movs	r1, r0
 8008e50:	9800      	ldr	r0, [sp, #0]
 8008e52:	f7ff fd4f 	bl	80088f4 <_Balloc>
 8008e56:	1e02      	subs	r2, r0, #0
 8008e58:	d104      	bne.n	8008e64 <__mdiff+0x2c>
 8008e5a:	4b40      	ldr	r3, [pc, #256]	@ (8008f5c <__mdiff+0x124>)
 8008e5c:	4840      	ldr	r0, [pc, #256]	@ (8008f60 <__mdiff+0x128>)
 8008e5e:	4941      	ldr	r1, [pc, #260]	@ (8008f64 <__mdiff+0x12c>)
 8008e60:	f000 fb18 	bl	8009494 <__assert_func>
 8008e64:	2301      	movs	r3, #1
 8008e66:	6145      	str	r5, [r0, #20]
 8008e68:	6103      	str	r3, [r0, #16]
 8008e6a:	0010      	movs	r0, r2
 8008e6c:	b007      	add	sp, #28
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e70:	2600      	movs	r6, #0
 8008e72:	42b0      	cmp	r0, r6
 8008e74:	da03      	bge.n	8008e7e <__mdiff+0x46>
 8008e76:	0023      	movs	r3, r4
 8008e78:	003c      	movs	r4, r7
 8008e7a:	001f      	movs	r7, r3
 8008e7c:	3601      	adds	r6, #1
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	9800      	ldr	r0, [sp, #0]
 8008e82:	f7ff fd37 	bl	80088f4 <_Balloc>
 8008e86:	1e02      	subs	r2, r0, #0
 8008e88:	d103      	bne.n	8008e92 <__mdiff+0x5a>
 8008e8a:	4b34      	ldr	r3, [pc, #208]	@ (8008f5c <__mdiff+0x124>)
 8008e8c:	4834      	ldr	r0, [pc, #208]	@ (8008f60 <__mdiff+0x128>)
 8008e8e:	4936      	ldr	r1, [pc, #216]	@ (8008f68 <__mdiff+0x130>)
 8008e90:	e7e6      	b.n	8008e60 <__mdiff+0x28>
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	3414      	adds	r4, #20
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	18e3      	adds	r3, r4, r3
 8008e9c:	0021      	movs	r1, r4
 8008e9e:	9401      	str	r4, [sp, #4]
 8008ea0:	003c      	movs	r4, r7
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	3414      	adds	r4, #20
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	18e3      	adds	r3, r4, r3
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	0003      	movs	r3, r0
 8008eb0:	60c6      	str	r6, [r0, #12]
 8008eb2:	468c      	mov	ip, r1
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	3314      	adds	r3, #20
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	9305      	str	r3, [sp, #20]
 8008ebc:	4663      	mov	r3, ip
 8008ebe:	cb20      	ldmia	r3!, {r5}
 8008ec0:	b2a9      	uxth	r1, r5
 8008ec2:	000e      	movs	r6, r1
 8008ec4:	469c      	mov	ip, r3
 8008ec6:	cc08      	ldmia	r4!, {r3}
 8008ec8:	0c2d      	lsrs	r5, r5, #16
 8008eca:	b299      	uxth	r1, r3
 8008ecc:	1a71      	subs	r1, r6, r1
 8008ece:	1809      	adds	r1, r1, r0
 8008ed0:	0c1b      	lsrs	r3, r3, #16
 8008ed2:	1408      	asrs	r0, r1, #16
 8008ed4:	1aeb      	subs	r3, r5, r3
 8008ed6:	181b      	adds	r3, r3, r0
 8008ed8:	1418      	asrs	r0, r3, #16
 8008eda:	b289      	uxth	r1, r1
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	4319      	orrs	r1, r3
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	c302      	stmia	r3!, {r1}
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d8e7      	bhi.n	8008ebc <__mdiff+0x84>
 8008eec:	0039      	movs	r1, r7
 8008eee:	9c03      	ldr	r4, [sp, #12]
 8008ef0:	3115      	adds	r1, #21
 8008ef2:	2304      	movs	r3, #4
 8008ef4:	428c      	cmp	r4, r1
 8008ef6:	d304      	bcc.n	8008f02 <__mdiff+0xca>
 8008ef8:	1be3      	subs	r3, r4, r7
 8008efa:	3b15      	subs	r3, #21
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	3301      	adds	r3, #1
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	9901      	ldr	r1, [sp, #4]
 8008f04:	18cd      	adds	r5, r1, r3
 8008f06:	9904      	ldr	r1, [sp, #16]
 8008f08:	002e      	movs	r6, r5
 8008f0a:	18cb      	adds	r3, r1, r3
 8008f0c:	001f      	movs	r7, r3
 8008f0e:	9902      	ldr	r1, [sp, #8]
 8008f10:	428e      	cmp	r6, r1
 8008f12:	d311      	bcc.n	8008f38 <__mdiff+0x100>
 8008f14:	9c02      	ldr	r4, [sp, #8]
 8008f16:	1ee9      	subs	r1, r5, #3
 8008f18:	2000      	movs	r0, #0
 8008f1a:	428c      	cmp	r4, r1
 8008f1c:	d304      	bcc.n	8008f28 <__mdiff+0xf0>
 8008f1e:	0021      	movs	r1, r4
 8008f20:	3103      	adds	r1, #3
 8008f22:	1b49      	subs	r1, r1, r5
 8008f24:	0889      	lsrs	r1, r1, #2
 8008f26:	0088      	lsls	r0, r1, #2
 8008f28:	181b      	adds	r3, r3, r0
 8008f2a:	3b04      	subs	r3, #4
 8008f2c:	6819      	ldr	r1, [r3, #0]
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	d010      	beq.n	8008f54 <__mdiff+0x11c>
 8008f32:	9b00      	ldr	r3, [sp, #0]
 8008f34:	6113      	str	r3, [r2, #16]
 8008f36:	e798      	b.n	8008e6a <__mdiff+0x32>
 8008f38:	4684      	mov	ip, r0
 8008f3a:	ce02      	ldmia	r6!, {r1}
 8008f3c:	b288      	uxth	r0, r1
 8008f3e:	4460      	add	r0, ip
 8008f40:	1400      	asrs	r0, r0, #16
 8008f42:	0c0c      	lsrs	r4, r1, #16
 8008f44:	1904      	adds	r4, r0, r4
 8008f46:	4461      	add	r1, ip
 8008f48:	1420      	asrs	r0, r4, #16
 8008f4a:	b289      	uxth	r1, r1
 8008f4c:	0424      	lsls	r4, r4, #16
 8008f4e:	4321      	orrs	r1, r4
 8008f50:	c702      	stmia	r7!, {r1}
 8008f52:	e7dc      	b.n	8008f0e <__mdiff+0xd6>
 8008f54:	9900      	ldr	r1, [sp, #0]
 8008f56:	3901      	subs	r1, #1
 8008f58:	9100      	str	r1, [sp, #0]
 8008f5a:	e7e6      	b.n	8008f2a <__mdiff+0xf2>
 8008f5c:	0800a018 	.word	0x0800a018
 8008f60:	0800a029 	.word	0x0800a029
 8008f64:	00000237 	.word	0x00000237
 8008f68:	00000245 	.word	0x00000245

08008f6c <__d2b>:
 8008f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f6e:	2101      	movs	r1, #1
 8008f70:	0016      	movs	r6, r2
 8008f72:	001f      	movs	r7, r3
 8008f74:	f7ff fcbe 	bl	80088f4 <_Balloc>
 8008f78:	1e04      	subs	r4, r0, #0
 8008f7a:	d105      	bne.n	8008f88 <__d2b+0x1c>
 8008f7c:	0022      	movs	r2, r4
 8008f7e:	4b25      	ldr	r3, [pc, #148]	@ (8009014 <__d2b+0xa8>)
 8008f80:	4825      	ldr	r0, [pc, #148]	@ (8009018 <__d2b+0xac>)
 8008f82:	4926      	ldr	r1, [pc, #152]	@ (800901c <__d2b+0xb0>)
 8008f84:	f000 fa86 	bl	8009494 <__assert_func>
 8008f88:	033b      	lsls	r3, r7, #12
 8008f8a:	007d      	lsls	r5, r7, #1
 8008f8c:	0b1b      	lsrs	r3, r3, #12
 8008f8e:	0d6d      	lsrs	r5, r5, #21
 8008f90:	d002      	beq.n	8008f98 <__d2b+0x2c>
 8008f92:	2280      	movs	r2, #128	@ 0x80
 8008f94:	0352      	lsls	r2, r2, #13
 8008f96:	4313      	orrs	r3, r2
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d025      	beq.n	8008fea <__d2b+0x7e>
 8008f9e:	4668      	mov	r0, sp
 8008fa0:	9600      	str	r6, [sp, #0]
 8008fa2:	f7ff fd74 	bl	8008a8e <__lo0bits>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	9900      	ldr	r1, [sp, #0]
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d01b      	beq.n	8008fe6 <__d2b+0x7a>
 8008fae:	2220      	movs	r2, #32
 8008fb0:	001e      	movs	r6, r3
 8008fb2:	1a12      	subs	r2, r2, r0
 8008fb4:	4096      	lsls	r6, r2
 8008fb6:	0032      	movs	r2, r6
 8008fb8:	40c3      	lsrs	r3, r0
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	6162      	str	r2, [r4, #20]
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	9e01      	ldr	r6, [sp, #4]
 8008fc2:	61a6      	str	r6, [r4, #24]
 8008fc4:	1e73      	subs	r3, r6, #1
 8008fc6:	419e      	sbcs	r6, r3
 8008fc8:	3601      	adds	r6, #1
 8008fca:	6126      	str	r6, [r4, #16]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	d014      	beq.n	8008ffa <__d2b+0x8e>
 8008fd0:	2635      	movs	r6, #53	@ 0x35
 8008fd2:	4b13      	ldr	r3, [pc, #76]	@ (8009020 <__d2b+0xb4>)
 8008fd4:	18ed      	adds	r5, r5, r3
 8008fd6:	9b08      	ldr	r3, [sp, #32]
 8008fd8:	182d      	adds	r5, r5, r0
 8008fda:	601d      	str	r5, [r3, #0]
 8008fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fde:	1a36      	subs	r6, r6, r0
 8008fe0:	601e      	str	r6, [r3, #0]
 8008fe2:	0020      	movs	r0, r4
 8008fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fe6:	6161      	str	r1, [r4, #20]
 8008fe8:	e7ea      	b.n	8008fc0 <__d2b+0x54>
 8008fea:	a801      	add	r0, sp, #4
 8008fec:	f7ff fd4f 	bl	8008a8e <__lo0bits>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	2601      	movs	r6, #1
 8008ff4:	6163      	str	r3, [r4, #20]
 8008ff6:	3020      	adds	r0, #32
 8008ff8:	e7e7      	b.n	8008fca <__d2b+0x5e>
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <__d2b+0xb8>)
 8008ffc:	18c0      	adds	r0, r0, r3
 8008ffe:	9b08      	ldr	r3, [sp, #32]
 8009000:	6018      	str	r0, [r3, #0]
 8009002:	4b09      	ldr	r3, [pc, #36]	@ (8009028 <__d2b+0xbc>)
 8009004:	18f3      	adds	r3, r6, r3
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	18e3      	adds	r3, r4, r3
 800900a:	6958      	ldr	r0, [r3, #20]
 800900c:	f7ff fd1e 	bl	8008a4c <__hi0bits>
 8009010:	0176      	lsls	r6, r6, #5
 8009012:	e7e3      	b.n	8008fdc <__d2b+0x70>
 8009014:	0800a018 	.word	0x0800a018
 8009018:	0800a029 	.word	0x0800a029
 800901c:	0000030f 	.word	0x0000030f
 8009020:	fffffbcd 	.word	0xfffffbcd
 8009024:	fffffbce 	.word	0xfffffbce
 8009028:	3fffffff 	.word	0x3fffffff

0800902c <__ssputs_r>:
 800902c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902e:	688e      	ldr	r6, [r1, #8]
 8009030:	b085      	sub	sp, #20
 8009032:	001f      	movs	r7, r3
 8009034:	000c      	movs	r4, r1
 8009036:	680b      	ldr	r3, [r1, #0]
 8009038:	9002      	str	r0, [sp, #8]
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	42be      	cmp	r6, r7
 800903e:	d830      	bhi.n	80090a2 <__ssputs_r+0x76>
 8009040:	210c      	movs	r1, #12
 8009042:	5e62      	ldrsh	r2, [r4, r1]
 8009044:	2190      	movs	r1, #144	@ 0x90
 8009046:	00c9      	lsls	r1, r1, #3
 8009048:	420a      	tst	r2, r1
 800904a:	d028      	beq.n	800909e <__ssputs_r+0x72>
 800904c:	2003      	movs	r0, #3
 800904e:	6921      	ldr	r1, [r4, #16]
 8009050:	1a5b      	subs	r3, r3, r1
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6963      	ldr	r3, [r4, #20]
 8009056:	4343      	muls	r3, r0
 8009058:	9801      	ldr	r0, [sp, #4]
 800905a:	0fdd      	lsrs	r5, r3, #31
 800905c:	18ed      	adds	r5, r5, r3
 800905e:	1c7b      	adds	r3, r7, #1
 8009060:	181b      	adds	r3, r3, r0
 8009062:	106d      	asrs	r5, r5, #1
 8009064:	42ab      	cmp	r3, r5
 8009066:	d900      	bls.n	800906a <__ssputs_r+0x3e>
 8009068:	001d      	movs	r5, r3
 800906a:	0552      	lsls	r2, r2, #21
 800906c:	d528      	bpl.n	80090c0 <__ssputs_r+0x94>
 800906e:	0029      	movs	r1, r5
 8009070:	9802      	ldr	r0, [sp, #8]
 8009072:	f7ff fbaf 	bl	80087d4 <_malloc_r>
 8009076:	1e06      	subs	r6, r0, #0
 8009078:	d02c      	beq.n	80090d4 <__ssputs_r+0xa8>
 800907a:	9a01      	ldr	r2, [sp, #4]
 800907c:	6921      	ldr	r1, [r4, #16]
 800907e:	f7fe fcb5 	bl	80079ec <memcpy>
 8009082:	89a2      	ldrh	r2, [r4, #12]
 8009084:	4b18      	ldr	r3, [pc, #96]	@ (80090e8 <__ssputs_r+0xbc>)
 8009086:	401a      	ands	r2, r3
 8009088:	2380      	movs	r3, #128	@ 0x80
 800908a:	4313      	orrs	r3, r2
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	6126      	str	r6, [r4, #16]
 8009092:	18f6      	adds	r6, r6, r3
 8009094:	6026      	str	r6, [r4, #0]
 8009096:	003e      	movs	r6, r7
 8009098:	6165      	str	r5, [r4, #20]
 800909a:	1aed      	subs	r5, r5, r3
 800909c:	60a5      	str	r5, [r4, #8]
 800909e:	42be      	cmp	r6, r7
 80090a0:	d900      	bls.n	80090a4 <__ssputs_r+0x78>
 80090a2:	003e      	movs	r6, r7
 80090a4:	0032      	movs	r2, r6
 80090a6:	9903      	ldr	r1, [sp, #12]
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	f000 f9ce 	bl	800944a <memmove>
 80090ae:	2000      	movs	r0, #0
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	1b9b      	subs	r3, r3, r6
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	199b      	adds	r3, r3, r6
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	b005      	add	sp, #20
 80090be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c0:	002a      	movs	r2, r5
 80090c2:	9802      	ldr	r0, [sp, #8]
 80090c4:	f000 fa43 	bl	800954e <_realloc_r>
 80090c8:	1e06      	subs	r6, r0, #0
 80090ca:	d1e0      	bne.n	800908e <__ssputs_r+0x62>
 80090cc:	6921      	ldr	r1, [r4, #16]
 80090ce:	9802      	ldr	r0, [sp, #8]
 80090d0:	f7ff fb0a 	bl	80086e8 <_free_r>
 80090d4:	230c      	movs	r3, #12
 80090d6:	2001      	movs	r0, #1
 80090d8:	9a02      	ldr	r2, [sp, #8]
 80090da:	4240      	negs	r0, r0
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	89a2      	ldrh	r2, [r4, #12]
 80090e0:	3334      	adds	r3, #52	@ 0x34
 80090e2:	4313      	orrs	r3, r2
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	e7e9      	b.n	80090bc <__ssputs_r+0x90>
 80090e8:	fffffb7f 	.word	0xfffffb7f

080090ec <_svfiprintf_r>:
 80090ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ee:	b0a1      	sub	sp, #132	@ 0x84
 80090f0:	9003      	str	r0, [sp, #12]
 80090f2:	001d      	movs	r5, r3
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	000f      	movs	r7, r1
 80090f8:	0016      	movs	r6, r2
 80090fa:	061b      	lsls	r3, r3, #24
 80090fc:	d511      	bpl.n	8009122 <_svfiprintf_r+0x36>
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10e      	bne.n	8009122 <_svfiprintf_r+0x36>
 8009104:	2140      	movs	r1, #64	@ 0x40
 8009106:	f7ff fb65 	bl	80087d4 <_malloc_r>
 800910a:	6038      	str	r0, [r7, #0]
 800910c:	6138      	str	r0, [r7, #16]
 800910e:	2800      	cmp	r0, #0
 8009110:	d105      	bne.n	800911e <_svfiprintf_r+0x32>
 8009112:	230c      	movs	r3, #12
 8009114:	9a03      	ldr	r2, [sp, #12]
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	2001      	movs	r0, #1
 800911a:	4240      	negs	r0, r0
 800911c:	e0cf      	b.n	80092be <_svfiprintf_r+0x1d2>
 800911e:	2340      	movs	r3, #64	@ 0x40
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	2300      	movs	r3, #0
 8009124:	ac08      	add	r4, sp, #32
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	3320      	adds	r3, #32
 800912a:	7663      	strb	r3, [r4, #25]
 800912c:	3310      	adds	r3, #16
 800912e:	76a3      	strb	r3, [r4, #26]
 8009130:	9507      	str	r5, [sp, #28]
 8009132:	0035      	movs	r5, r6
 8009134:	782b      	ldrb	r3, [r5, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <_svfiprintf_r+0x52>
 800913a:	2b25      	cmp	r3, #37	@ 0x25
 800913c:	d148      	bne.n	80091d0 <_svfiprintf_r+0xe4>
 800913e:	1bab      	subs	r3, r5, r6
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	42b5      	cmp	r5, r6
 8009144:	d00b      	beq.n	800915e <_svfiprintf_r+0x72>
 8009146:	0032      	movs	r2, r6
 8009148:	0039      	movs	r1, r7
 800914a:	9803      	ldr	r0, [sp, #12]
 800914c:	f7ff ff6e 	bl	800902c <__ssputs_r>
 8009150:	3001      	adds	r0, #1
 8009152:	d100      	bne.n	8009156 <_svfiprintf_r+0x6a>
 8009154:	e0ae      	b.n	80092b4 <_svfiprintf_r+0x1c8>
 8009156:	6963      	ldr	r3, [r4, #20]
 8009158:	9a05      	ldr	r2, [sp, #20]
 800915a:	189b      	adds	r3, r3, r2
 800915c:	6163      	str	r3, [r4, #20]
 800915e:	782b      	ldrb	r3, [r5, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d100      	bne.n	8009166 <_svfiprintf_r+0x7a>
 8009164:	e0a6      	b.n	80092b4 <_svfiprintf_r+0x1c8>
 8009166:	2201      	movs	r2, #1
 8009168:	2300      	movs	r3, #0
 800916a:	4252      	negs	r2, r2
 800916c:	6062      	str	r2, [r4, #4]
 800916e:	a904      	add	r1, sp, #16
 8009170:	3254      	adds	r2, #84	@ 0x54
 8009172:	1852      	adds	r2, r2, r1
 8009174:	1c6e      	adds	r6, r5, #1
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	60e3      	str	r3, [r4, #12]
 800917a:	60a3      	str	r3, [r4, #8]
 800917c:	7013      	strb	r3, [r2, #0]
 800917e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009180:	4b54      	ldr	r3, [pc, #336]	@ (80092d4 <_svfiprintf_r+0x1e8>)
 8009182:	2205      	movs	r2, #5
 8009184:	0018      	movs	r0, r3
 8009186:	7831      	ldrb	r1, [r6, #0]
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	f7fe fc24 	bl	80079d6 <memchr>
 800918e:	1c75      	adds	r5, r6, #1
 8009190:	2800      	cmp	r0, #0
 8009192:	d11f      	bne.n	80091d4 <_svfiprintf_r+0xe8>
 8009194:	6822      	ldr	r2, [r4, #0]
 8009196:	06d3      	lsls	r3, r2, #27
 8009198:	d504      	bpl.n	80091a4 <_svfiprintf_r+0xb8>
 800919a:	2353      	movs	r3, #83	@ 0x53
 800919c:	a904      	add	r1, sp, #16
 800919e:	185b      	adds	r3, r3, r1
 80091a0:	2120      	movs	r1, #32
 80091a2:	7019      	strb	r1, [r3, #0]
 80091a4:	0713      	lsls	r3, r2, #28
 80091a6:	d504      	bpl.n	80091b2 <_svfiprintf_r+0xc6>
 80091a8:	2353      	movs	r3, #83	@ 0x53
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	185b      	adds	r3, r3, r1
 80091ae:	212b      	movs	r1, #43	@ 0x2b
 80091b0:	7019      	strb	r1, [r3, #0]
 80091b2:	7833      	ldrb	r3, [r6, #0]
 80091b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091b6:	d016      	beq.n	80091e6 <_svfiprintf_r+0xfa>
 80091b8:	0035      	movs	r5, r6
 80091ba:	2100      	movs	r1, #0
 80091bc:	200a      	movs	r0, #10
 80091be:	68e3      	ldr	r3, [r4, #12]
 80091c0:	782a      	ldrb	r2, [r5, #0]
 80091c2:	1c6e      	adds	r6, r5, #1
 80091c4:	3a30      	subs	r2, #48	@ 0x30
 80091c6:	2a09      	cmp	r2, #9
 80091c8:	d950      	bls.n	800926c <_svfiprintf_r+0x180>
 80091ca:	2900      	cmp	r1, #0
 80091cc:	d111      	bne.n	80091f2 <_svfiprintf_r+0x106>
 80091ce:	e017      	b.n	8009200 <_svfiprintf_r+0x114>
 80091d0:	3501      	adds	r5, #1
 80091d2:	e7af      	b.n	8009134 <_svfiprintf_r+0x48>
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	1ac0      	subs	r0, r0, r3
 80091da:	2301      	movs	r3, #1
 80091dc:	4083      	lsls	r3, r0
 80091de:	4313      	orrs	r3, r2
 80091e0:	002e      	movs	r6, r5
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	e7cc      	b.n	8009180 <_svfiprintf_r+0x94>
 80091e6:	9b07      	ldr	r3, [sp, #28]
 80091e8:	1d19      	adds	r1, r3, #4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	9107      	str	r1, [sp, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	db01      	blt.n	80091f6 <_svfiprintf_r+0x10a>
 80091f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f4:	e004      	b.n	8009200 <_svfiprintf_r+0x114>
 80091f6:	425b      	negs	r3, r3
 80091f8:	60e3      	str	r3, [r4, #12]
 80091fa:	2302      	movs	r3, #2
 80091fc:	4313      	orrs	r3, r2
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	782b      	ldrb	r3, [r5, #0]
 8009202:	2b2e      	cmp	r3, #46	@ 0x2e
 8009204:	d10c      	bne.n	8009220 <_svfiprintf_r+0x134>
 8009206:	786b      	ldrb	r3, [r5, #1]
 8009208:	2b2a      	cmp	r3, #42	@ 0x2a
 800920a:	d134      	bne.n	8009276 <_svfiprintf_r+0x18a>
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	3502      	adds	r5, #2
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9207      	str	r2, [sp, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	da01      	bge.n	800921e <_svfiprintf_r+0x132>
 800921a:	2301      	movs	r3, #1
 800921c:	425b      	negs	r3, r3
 800921e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009220:	4e2d      	ldr	r6, [pc, #180]	@ (80092d8 <_svfiprintf_r+0x1ec>)
 8009222:	2203      	movs	r2, #3
 8009224:	0030      	movs	r0, r6
 8009226:	7829      	ldrb	r1, [r5, #0]
 8009228:	f7fe fbd5 	bl	80079d6 <memchr>
 800922c:	2800      	cmp	r0, #0
 800922e:	d006      	beq.n	800923e <_svfiprintf_r+0x152>
 8009230:	2340      	movs	r3, #64	@ 0x40
 8009232:	1b80      	subs	r0, r0, r6
 8009234:	4083      	lsls	r3, r0
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	3501      	adds	r5, #1
 800923a:	4313      	orrs	r3, r2
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	7829      	ldrb	r1, [r5, #0]
 8009240:	2206      	movs	r2, #6
 8009242:	4826      	ldr	r0, [pc, #152]	@ (80092dc <_svfiprintf_r+0x1f0>)
 8009244:	1c6e      	adds	r6, r5, #1
 8009246:	7621      	strb	r1, [r4, #24]
 8009248:	f7fe fbc5 	bl	80079d6 <memchr>
 800924c:	2800      	cmp	r0, #0
 800924e:	d038      	beq.n	80092c2 <_svfiprintf_r+0x1d6>
 8009250:	4b23      	ldr	r3, [pc, #140]	@ (80092e0 <_svfiprintf_r+0x1f4>)
 8009252:	2b00      	cmp	r3, #0
 8009254:	d122      	bne.n	800929c <_svfiprintf_r+0x1b0>
 8009256:	2207      	movs	r2, #7
 8009258:	9b07      	ldr	r3, [sp, #28]
 800925a:	3307      	adds	r3, #7
 800925c:	4393      	bics	r3, r2
 800925e:	3308      	adds	r3, #8
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	6963      	ldr	r3, [r4, #20]
 8009264:	9a04      	ldr	r2, [sp, #16]
 8009266:	189b      	adds	r3, r3, r2
 8009268:	6163      	str	r3, [r4, #20]
 800926a:	e762      	b.n	8009132 <_svfiprintf_r+0x46>
 800926c:	4343      	muls	r3, r0
 800926e:	0035      	movs	r5, r6
 8009270:	2101      	movs	r1, #1
 8009272:	189b      	adds	r3, r3, r2
 8009274:	e7a4      	b.n	80091c0 <_svfiprintf_r+0xd4>
 8009276:	2300      	movs	r3, #0
 8009278:	200a      	movs	r0, #10
 800927a:	0019      	movs	r1, r3
 800927c:	3501      	adds	r5, #1
 800927e:	6063      	str	r3, [r4, #4]
 8009280:	782a      	ldrb	r2, [r5, #0]
 8009282:	1c6e      	adds	r6, r5, #1
 8009284:	3a30      	subs	r2, #48	@ 0x30
 8009286:	2a09      	cmp	r2, #9
 8009288:	d903      	bls.n	8009292 <_svfiprintf_r+0x1a6>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0c8      	beq.n	8009220 <_svfiprintf_r+0x134>
 800928e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009290:	e7c6      	b.n	8009220 <_svfiprintf_r+0x134>
 8009292:	4341      	muls	r1, r0
 8009294:	0035      	movs	r5, r6
 8009296:	2301      	movs	r3, #1
 8009298:	1889      	adds	r1, r1, r2
 800929a:	e7f1      	b.n	8009280 <_svfiprintf_r+0x194>
 800929c:	aa07      	add	r2, sp, #28
 800929e:	9200      	str	r2, [sp, #0]
 80092a0:	0021      	movs	r1, r4
 80092a2:	003a      	movs	r2, r7
 80092a4:	4b0f      	ldr	r3, [pc, #60]	@ (80092e4 <_svfiprintf_r+0x1f8>)
 80092a6:	9803      	ldr	r0, [sp, #12]
 80092a8:	f7fd fe0e 	bl	8006ec8 <_printf_float>
 80092ac:	9004      	str	r0, [sp, #16]
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	d1d6      	bne.n	8009262 <_svfiprintf_r+0x176>
 80092b4:	89bb      	ldrh	r3, [r7, #12]
 80092b6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80092b8:	065b      	lsls	r3, r3, #25
 80092ba:	d500      	bpl.n	80092be <_svfiprintf_r+0x1d2>
 80092bc:	e72c      	b.n	8009118 <_svfiprintf_r+0x2c>
 80092be:	b021      	add	sp, #132	@ 0x84
 80092c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c2:	aa07      	add	r2, sp, #28
 80092c4:	9200      	str	r2, [sp, #0]
 80092c6:	0021      	movs	r1, r4
 80092c8:	003a      	movs	r2, r7
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <_svfiprintf_r+0x1f8>)
 80092cc:	9803      	ldr	r0, [sp, #12]
 80092ce:	f7fe f8a9 	bl	8007424 <_printf_i>
 80092d2:	e7eb      	b.n	80092ac <_svfiprintf_r+0x1c0>
 80092d4:	0800a082 	.word	0x0800a082
 80092d8:	0800a088 	.word	0x0800a088
 80092dc:	0800a08c 	.word	0x0800a08c
 80092e0:	08006ec9 	.word	0x08006ec9
 80092e4:	0800902d 	.word	0x0800902d

080092e8 <__sflush_r>:
 80092e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ea:	220c      	movs	r2, #12
 80092ec:	5e8b      	ldrsh	r3, [r1, r2]
 80092ee:	0005      	movs	r5, r0
 80092f0:	000c      	movs	r4, r1
 80092f2:	071a      	lsls	r2, r3, #28
 80092f4:	d456      	bmi.n	80093a4 <__sflush_r+0xbc>
 80092f6:	684a      	ldr	r2, [r1, #4]
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	dc02      	bgt.n	8009302 <__sflush_r+0x1a>
 80092fc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80092fe:	2a00      	cmp	r2, #0
 8009300:	dd4e      	ble.n	80093a0 <__sflush_r+0xb8>
 8009302:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009304:	2f00      	cmp	r7, #0
 8009306:	d04b      	beq.n	80093a0 <__sflush_r+0xb8>
 8009308:	2200      	movs	r2, #0
 800930a:	2080      	movs	r0, #128	@ 0x80
 800930c:	682e      	ldr	r6, [r5, #0]
 800930e:	602a      	str	r2, [r5, #0]
 8009310:	001a      	movs	r2, r3
 8009312:	0140      	lsls	r0, r0, #5
 8009314:	6a21      	ldr	r1, [r4, #32]
 8009316:	4002      	ands	r2, r0
 8009318:	4203      	tst	r3, r0
 800931a:	d033      	beq.n	8009384 <__sflush_r+0x9c>
 800931c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	075b      	lsls	r3, r3, #29
 8009322:	d506      	bpl.n	8009332 <__sflush_r+0x4a>
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <__sflush_r+0x4a>
 800932e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009330:	1ad2      	subs	r2, r2, r3
 8009332:	2300      	movs	r3, #0
 8009334:	0028      	movs	r0, r5
 8009336:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009338:	6a21      	ldr	r1, [r4, #32]
 800933a:	47b8      	blx	r7
 800933c:	89a2      	ldrh	r2, [r4, #12]
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d106      	bne.n	8009350 <__sflush_r+0x68>
 8009342:	6829      	ldr	r1, [r5, #0]
 8009344:	291d      	cmp	r1, #29
 8009346:	d846      	bhi.n	80093d6 <__sflush_r+0xee>
 8009348:	4b29      	ldr	r3, [pc, #164]	@ (80093f0 <__sflush_r+0x108>)
 800934a:	40cb      	lsrs	r3, r1
 800934c:	07db      	lsls	r3, r3, #31
 800934e:	d542      	bpl.n	80093d6 <__sflush_r+0xee>
 8009350:	2300      	movs	r3, #0
 8009352:	6063      	str	r3, [r4, #4]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	04d2      	lsls	r2, r2, #19
 800935a:	d505      	bpl.n	8009368 <__sflush_r+0x80>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <__sflush_r+0x7e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d100      	bne.n	8009368 <__sflush_r+0x80>
 8009366:	6560      	str	r0, [r4, #84]	@ 0x54
 8009368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800936a:	602e      	str	r6, [r5, #0]
 800936c:	2900      	cmp	r1, #0
 800936e:	d017      	beq.n	80093a0 <__sflush_r+0xb8>
 8009370:	0023      	movs	r3, r4
 8009372:	3344      	adds	r3, #68	@ 0x44
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <__sflush_r+0x96>
 8009378:	0028      	movs	r0, r5
 800937a:	f7ff f9b5 	bl	80086e8 <_free_r>
 800937e:	2300      	movs	r3, #0
 8009380:	6363      	str	r3, [r4, #52]	@ 0x34
 8009382:	e00d      	b.n	80093a0 <__sflush_r+0xb8>
 8009384:	2301      	movs	r3, #1
 8009386:	0028      	movs	r0, r5
 8009388:	47b8      	blx	r7
 800938a:	0002      	movs	r2, r0
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d1c6      	bne.n	800931e <__sflush_r+0x36>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0c3      	beq.n	800931e <__sflush_r+0x36>
 8009396:	2b1d      	cmp	r3, #29
 8009398:	d001      	beq.n	800939e <__sflush_r+0xb6>
 800939a:	2b16      	cmp	r3, #22
 800939c:	d11a      	bne.n	80093d4 <__sflush_r+0xec>
 800939e:	602e      	str	r6, [r5, #0]
 80093a0:	2000      	movs	r0, #0
 80093a2:	e01e      	b.n	80093e2 <__sflush_r+0xfa>
 80093a4:	690e      	ldr	r6, [r1, #16]
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	d0fa      	beq.n	80093a0 <__sflush_r+0xb8>
 80093aa:	680f      	ldr	r7, [r1, #0]
 80093ac:	600e      	str	r6, [r1, #0]
 80093ae:	1bba      	subs	r2, r7, r6
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	079b      	lsls	r3, r3, #30
 80093b6:	d100      	bne.n	80093ba <__sflush_r+0xd2>
 80093b8:	694a      	ldr	r2, [r1, #20]
 80093ba:	60a2      	str	r2, [r4, #8]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	ddee      	ble.n	80093a0 <__sflush_r+0xb8>
 80093c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80093c4:	0032      	movs	r2, r6
 80093c6:	001f      	movs	r7, r3
 80093c8:	0028      	movs	r0, r5
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	6a21      	ldr	r1, [r4, #32]
 80093ce:	47b8      	blx	r7
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dc07      	bgt.n	80093e4 <__sflush_r+0xfc>
 80093d4:	89a2      	ldrh	r2, [r4, #12]
 80093d6:	2340      	movs	r3, #64	@ 0x40
 80093d8:	2001      	movs	r0, #1
 80093da:	4313      	orrs	r3, r2
 80093dc:	b21b      	sxth	r3, r3
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	4240      	negs	r0, r0
 80093e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	1836      	adds	r6, r6, r0
 80093e8:	1a1b      	subs	r3, r3, r0
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	e7e6      	b.n	80093bc <__sflush_r+0xd4>
 80093ee:	46c0      	nop			@ (mov r8, r8)
 80093f0:	20400001 	.word	0x20400001

080093f4 <_fflush_r>:
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	0005      	movs	r5, r0
 80093fa:	000c      	movs	r4, r1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <_fflush_r+0x12>
 8009400:	2500      	movs	r5, #0
 8009402:	0028      	movs	r0, r5
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	2800      	cmp	r0, #0
 8009408:	d004      	beq.n	8009414 <_fflush_r+0x20>
 800940a:	6a03      	ldr	r3, [r0, #32]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <_fflush_r+0x20>
 8009410:	f7fe f9a4 	bl	800775c <__sinit>
 8009414:	220c      	movs	r2, #12
 8009416:	5ea3      	ldrsh	r3, [r4, r2]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0f1      	beq.n	8009400 <_fflush_r+0xc>
 800941c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800941e:	07d2      	lsls	r2, r2, #31
 8009420:	d404      	bmi.n	800942c <_fflush_r+0x38>
 8009422:	059b      	lsls	r3, r3, #22
 8009424:	d402      	bmi.n	800942c <_fflush_r+0x38>
 8009426:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009428:	f7fe fad3 	bl	80079d2 <__retarget_lock_acquire_recursive>
 800942c:	0028      	movs	r0, r5
 800942e:	0021      	movs	r1, r4
 8009430:	f7ff ff5a 	bl	80092e8 <__sflush_r>
 8009434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009436:	0005      	movs	r5, r0
 8009438:	07db      	lsls	r3, r3, #31
 800943a:	d4e2      	bmi.n	8009402 <_fflush_r+0xe>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	059b      	lsls	r3, r3, #22
 8009440:	d4df      	bmi.n	8009402 <_fflush_r+0xe>
 8009442:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009444:	f7fe fac6 	bl	80079d4 <__retarget_lock_release_recursive>
 8009448:	e7db      	b.n	8009402 <_fflush_r+0xe>

0800944a <memmove>:
 800944a:	b510      	push	{r4, lr}
 800944c:	4288      	cmp	r0, r1
 800944e:	d902      	bls.n	8009456 <memmove+0xc>
 8009450:	188b      	adds	r3, r1, r2
 8009452:	4298      	cmp	r0, r3
 8009454:	d308      	bcc.n	8009468 <memmove+0x1e>
 8009456:	2300      	movs	r3, #0
 8009458:	429a      	cmp	r2, r3
 800945a:	d007      	beq.n	800946c <memmove+0x22>
 800945c:	5ccc      	ldrb	r4, [r1, r3]
 800945e:	54c4      	strb	r4, [r0, r3]
 8009460:	3301      	adds	r3, #1
 8009462:	e7f9      	b.n	8009458 <memmove+0xe>
 8009464:	5c8b      	ldrb	r3, [r1, r2]
 8009466:	5483      	strb	r3, [r0, r2]
 8009468:	3a01      	subs	r2, #1
 800946a:	d2fb      	bcs.n	8009464 <memmove+0x1a>
 800946c:	bd10      	pop	{r4, pc}
	...

08009470 <_sbrk_r>:
 8009470:	2300      	movs	r3, #0
 8009472:	b570      	push	{r4, r5, r6, lr}
 8009474:	4d06      	ldr	r5, [pc, #24]	@ (8009490 <_sbrk_r+0x20>)
 8009476:	0004      	movs	r4, r0
 8009478:	0008      	movs	r0, r1
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7fa f908 	bl	8003690 <_sbrk>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d103      	bne.n	800948c <_sbrk_r+0x1c>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d000      	beq.n	800948c <_sbrk_r+0x1c>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	46c0      	nop			@ (mov r8, r8)
 8009490:	20000410 	.word	0x20000410

08009494 <__assert_func>:
 8009494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009496:	0014      	movs	r4, r2
 8009498:	001a      	movs	r2, r3
 800949a:	4b09      	ldr	r3, [pc, #36]	@ (80094c0 <__assert_func+0x2c>)
 800949c:	0005      	movs	r5, r0
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	000e      	movs	r6, r1
 80094a2:	68d8      	ldr	r0, [r3, #12]
 80094a4:	4b07      	ldr	r3, [pc, #28]	@ (80094c4 <__assert_func+0x30>)
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	d101      	bne.n	80094ae <__assert_func+0x1a>
 80094aa:	4b07      	ldr	r3, [pc, #28]	@ (80094c8 <__assert_func+0x34>)
 80094ac:	001c      	movs	r4, r3
 80094ae:	4907      	ldr	r1, [pc, #28]	@ (80094cc <__assert_func+0x38>)
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	9402      	str	r4, [sp, #8]
 80094b4:	002b      	movs	r3, r5
 80094b6:	9600      	str	r6, [sp, #0]
 80094b8:	f000 f886 	bl	80095c8 <fiprintf>
 80094bc:	f000 f894 	bl	80095e8 <abort>
 80094c0:	20000018 	.word	0x20000018
 80094c4:	0800a09d 	.word	0x0800a09d
 80094c8:	0800a0d8 	.word	0x0800a0d8
 80094cc:	0800a0aa 	.word	0x0800a0aa

080094d0 <_calloc_r>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	0c0b      	lsrs	r3, r1, #16
 80094d4:	0c15      	lsrs	r5, r2, #16
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d11e      	bne.n	8009518 <_calloc_r+0x48>
 80094da:	2d00      	cmp	r5, #0
 80094dc:	d10c      	bne.n	80094f8 <_calloc_r+0x28>
 80094de:	b289      	uxth	r1, r1
 80094e0:	b294      	uxth	r4, r2
 80094e2:	434c      	muls	r4, r1
 80094e4:	0021      	movs	r1, r4
 80094e6:	f7ff f975 	bl	80087d4 <_malloc_r>
 80094ea:	1e05      	subs	r5, r0, #0
 80094ec:	d01b      	beq.n	8009526 <_calloc_r+0x56>
 80094ee:	0022      	movs	r2, r4
 80094f0:	2100      	movs	r1, #0
 80094f2:	f7fe f9e9 	bl	80078c8 <memset>
 80094f6:	e016      	b.n	8009526 <_calloc_r+0x56>
 80094f8:	1c2b      	adds	r3, r5, #0
 80094fa:	1c0c      	adds	r4, r1, #0
 80094fc:	b289      	uxth	r1, r1
 80094fe:	b292      	uxth	r2, r2
 8009500:	434a      	muls	r2, r1
 8009502:	b29b      	uxth	r3, r3
 8009504:	b2a1      	uxth	r1, r4
 8009506:	4359      	muls	r1, r3
 8009508:	0c14      	lsrs	r4, r2, #16
 800950a:	190c      	adds	r4, r1, r4
 800950c:	0c23      	lsrs	r3, r4, #16
 800950e:	d107      	bne.n	8009520 <_calloc_r+0x50>
 8009510:	0424      	lsls	r4, r4, #16
 8009512:	b292      	uxth	r2, r2
 8009514:	4314      	orrs	r4, r2
 8009516:	e7e5      	b.n	80094e4 <_calloc_r+0x14>
 8009518:	2d00      	cmp	r5, #0
 800951a:	d101      	bne.n	8009520 <_calloc_r+0x50>
 800951c:	1c14      	adds	r4, r2, #0
 800951e:	e7ed      	b.n	80094fc <_calloc_r+0x2c>
 8009520:	230c      	movs	r3, #12
 8009522:	2500      	movs	r5, #0
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	0028      	movs	r0, r5
 8009528:	bd70      	pop	{r4, r5, r6, pc}

0800952a <__ascii_mbtowc>:
 800952a:	b082      	sub	sp, #8
 800952c:	2900      	cmp	r1, #0
 800952e:	d100      	bne.n	8009532 <__ascii_mbtowc+0x8>
 8009530:	a901      	add	r1, sp, #4
 8009532:	1e10      	subs	r0, r2, #0
 8009534:	d006      	beq.n	8009544 <__ascii_mbtowc+0x1a>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d006      	beq.n	8009548 <__ascii_mbtowc+0x1e>
 800953a:	7813      	ldrb	r3, [r2, #0]
 800953c:	600b      	str	r3, [r1, #0]
 800953e:	7810      	ldrb	r0, [r2, #0]
 8009540:	1e43      	subs	r3, r0, #1
 8009542:	4198      	sbcs	r0, r3
 8009544:	b002      	add	sp, #8
 8009546:	4770      	bx	lr
 8009548:	2002      	movs	r0, #2
 800954a:	4240      	negs	r0, r0
 800954c:	e7fa      	b.n	8009544 <__ascii_mbtowc+0x1a>

0800954e <_realloc_r>:
 800954e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009550:	0006      	movs	r6, r0
 8009552:	000c      	movs	r4, r1
 8009554:	0015      	movs	r5, r2
 8009556:	2900      	cmp	r1, #0
 8009558:	d105      	bne.n	8009566 <_realloc_r+0x18>
 800955a:	0011      	movs	r1, r2
 800955c:	f7ff f93a 	bl	80087d4 <_malloc_r>
 8009560:	0004      	movs	r4, r0
 8009562:	0020      	movs	r0, r4
 8009564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009566:	2a00      	cmp	r2, #0
 8009568:	d103      	bne.n	8009572 <_realloc_r+0x24>
 800956a:	f7ff f8bd 	bl	80086e8 <_free_r>
 800956e:	002c      	movs	r4, r5
 8009570:	e7f7      	b.n	8009562 <_realloc_r+0x14>
 8009572:	f000 f840 	bl	80095f6 <_malloc_usable_size_r>
 8009576:	0007      	movs	r7, r0
 8009578:	4285      	cmp	r5, r0
 800957a:	d802      	bhi.n	8009582 <_realloc_r+0x34>
 800957c:	0843      	lsrs	r3, r0, #1
 800957e:	42ab      	cmp	r3, r5
 8009580:	d3ef      	bcc.n	8009562 <_realloc_r+0x14>
 8009582:	0029      	movs	r1, r5
 8009584:	0030      	movs	r0, r6
 8009586:	f7ff f925 	bl	80087d4 <_malloc_r>
 800958a:	9001      	str	r0, [sp, #4]
 800958c:	2800      	cmp	r0, #0
 800958e:	d101      	bne.n	8009594 <_realloc_r+0x46>
 8009590:	9c01      	ldr	r4, [sp, #4]
 8009592:	e7e6      	b.n	8009562 <_realloc_r+0x14>
 8009594:	002a      	movs	r2, r5
 8009596:	42bd      	cmp	r5, r7
 8009598:	d900      	bls.n	800959c <_realloc_r+0x4e>
 800959a:	003a      	movs	r2, r7
 800959c:	0021      	movs	r1, r4
 800959e:	9801      	ldr	r0, [sp, #4]
 80095a0:	f7fe fa24 	bl	80079ec <memcpy>
 80095a4:	0021      	movs	r1, r4
 80095a6:	0030      	movs	r0, r6
 80095a8:	f7ff f89e 	bl	80086e8 <_free_r>
 80095ac:	e7f0      	b.n	8009590 <_realloc_r+0x42>

080095ae <__ascii_wctomb>:
 80095ae:	0003      	movs	r3, r0
 80095b0:	1e08      	subs	r0, r1, #0
 80095b2:	d005      	beq.n	80095c0 <__ascii_wctomb+0x12>
 80095b4:	2aff      	cmp	r2, #255	@ 0xff
 80095b6:	d904      	bls.n	80095c2 <__ascii_wctomb+0x14>
 80095b8:	228a      	movs	r2, #138	@ 0x8a
 80095ba:	2001      	movs	r0, #1
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	4240      	negs	r0, r0
 80095c0:	4770      	bx	lr
 80095c2:	2001      	movs	r0, #1
 80095c4:	700a      	strb	r2, [r1, #0]
 80095c6:	e7fb      	b.n	80095c0 <__ascii_wctomb+0x12>

080095c8 <fiprintf>:
 80095c8:	b40e      	push	{r1, r2, r3}
 80095ca:	b517      	push	{r0, r1, r2, r4, lr}
 80095cc:	4c05      	ldr	r4, [pc, #20]	@ (80095e4 <fiprintf+0x1c>)
 80095ce:	ab05      	add	r3, sp, #20
 80095d0:	cb04      	ldmia	r3!, {r2}
 80095d2:	0001      	movs	r1, r0
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	f000 f83c 	bl	8009654 <_vfiprintf_r>
 80095dc:	bc1e      	pop	{r1, r2, r3, r4}
 80095de:	bc08      	pop	{r3}
 80095e0:	b003      	add	sp, #12
 80095e2:	4718      	bx	r3
 80095e4:	20000018 	.word	0x20000018

080095e8 <abort>:
 80095e8:	2006      	movs	r0, #6
 80095ea:	b510      	push	{r4, lr}
 80095ec:	f000 fa18 	bl	8009a20 <raise>
 80095f0:	2001      	movs	r0, #1
 80095f2:	f7f9 ffdb 	bl	80035ac <_exit>

080095f6 <_malloc_usable_size_r>:
 80095f6:	1f0b      	subs	r3, r1, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	1f18      	subs	r0, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da01      	bge.n	8009604 <_malloc_usable_size_r+0xe>
 8009600:	580b      	ldr	r3, [r1, r0]
 8009602:	18c0      	adds	r0, r0, r3
 8009604:	4770      	bx	lr

08009606 <__sfputc_r>:
 8009606:	6893      	ldr	r3, [r2, #8]
 8009608:	b510      	push	{r4, lr}
 800960a:	3b01      	subs	r3, #1
 800960c:	6093      	str	r3, [r2, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	da04      	bge.n	800961c <__sfputc_r+0x16>
 8009612:	6994      	ldr	r4, [r2, #24]
 8009614:	42a3      	cmp	r3, r4
 8009616:	db07      	blt.n	8009628 <__sfputc_r+0x22>
 8009618:	290a      	cmp	r1, #10
 800961a:	d005      	beq.n	8009628 <__sfputc_r+0x22>
 800961c:	6813      	ldr	r3, [r2, #0]
 800961e:	1c58      	adds	r0, r3, #1
 8009620:	6010      	str	r0, [r2, #0]
 8009622:	7019      	strb	r1, [r3, #0]
 8009624:	0008      	movs	r0, r1
 8009626:	bd10      	pop	{r4, pc}
 8009628:	f000 f930 	bl	800988c <__swbuf_r>
 800962c:	0001      	movs	r1, r0
 800962e:	e7f9      	b.n	8009624 <__sfputc_r+0x1e>

08009630 <__sfputs_r>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	0006      	movs	r6, r0
 8009634:	000f      	movs	r7, r1
 8009636:	0014      	movs	r4, r2
 8009638:	18d5      	adds	r5, r2, r3
 800963a:	42ac      	cmp	r4, r5
 800963c:	d101      	bne.n	8009642 <__sfputs_r+0x12>
 800963e:	2000      	movs	r0, #0
 8009640:	e007      	b.n	8009652 <__sfputs_r+0x22>
 8009642:	7821      	ldrb	r1, [r4, #0]
 8009644:	003a      	movs	r2, r7
 8009646:	0030      	movs	r0, r6
 8009648:	f7ff ffdd 	bl	8009606 <__sfputc_r>
 800964c:	3401      	adds	r4, #1
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d1f3      	bne.n	800963a <__sfputs_r+0xa>
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009654 <_vfiprintf_r>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	b0a1      	sub	sp, #132	@ 0x84
 8009658:	000f      	movs	r7, r1
 800965a:	0015      	movs	r5, r2
 800965c:	001e      	movs	r6, r3
 800965e:	9003      	str	r0, [sp, #12]
 8009660:	2800      	cmp	r0, #0
 8009662:	d004      	beq.n	800966e <_vfiprintf_r+0x1a>
 8009664:	6a03      	ldr	r3, [r0, #32]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <_vfiprintf_r+0x1a>
 800966a:	f7fe f877 	bl	800775c <__sinit>
 800966e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009670:	07db      	lsls	r3, r3, #31
 8009672:	d405      	bmi.n	8009680 <_vfiprintf_r+0x2c>
 8009674:	89bb      	ldrh	r3, [r7, #12]
 8009676:	059b      	lsls	r3, r3, #22
 8009678:	d402      	bmi.n	8009680 <_vfiprintf_r+0x2c>
 800967a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800967c:	f7fe f9a9 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8009680:	89bb      	ldrh	r3, [r7, #12]
 8009682:	071b      	lsls	r3, r3, #28
 8009684:	d502      	bpl.n	800968c <_vfiprintf_r+0x38>
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d113      	bne.n	80096b4 <_vfiprintf_r+0x60>
 800968c:	0039      	movs	r1, r7
 800968e:	9803      	ldr	r0, [sp, #12]
 8009690:	f000 f93e 	bl	8009910 <__swsetup_r>
 8009694:	2800      	cmp	r0, #0
 8009696:	d00d      	beq.n	80096b4 <_vfiprintf_r+0x60>
 8009698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d503      	bpl.n	80096a6 <_vfiprintf_r+0x52>
 800969e:	2001      	movs	r0, #1
 80096a0:	4240      	negs	r0, r0
 80096a2:	b021      	add	sp, #132	@ 0x84
 80096a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a6:	89bb      	ldrh	r3, [r7, #12]
 80096a8:	059b      	lsls	r3, r3, #22
 80096aa:	d4f8      	bmi.n	800969e <_vfiprintf_r+0x4a>
 80096ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80096ae:	f7fe f991 	bl	80079d4 <__retarget_lock_release_recursive>
 80096b2:	e7f4      	b.n	800969e <_vfiprintf_r+0x4a>
 80096b4:	2300      	movs	r3, #0
 80096b6:	ac08      	add	r4, sp, #32
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	3320      	adds	r3, #32
 80096bc:	7663      	strb	r3, [r4, #25]
 80096be:	3310      	adds	r3, #16
 80096c0:	76a3      	strb	r3, [r4, #26]
 80096c2:	9607      	str	r6, [sp, #28]
 80096c4:	002e      	movs	r6, r5
 80096c6:	7833      	ldrb	r3, [r6, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <_vfiprintf_r+0x7c>
 80096cc:	2b25      	cmp	r3, #37	@ 0x25
 80096ce:	d148      	bne.n	8009762 <_vfiprintf_r+0x10e>
 80096d0:	1b73      	subs	r3, r6, r5
 80096d2:	9305      	str	r3, [sp, #20]
 80096d4:	42ae      	cmp	r6, r5
 80096d6:	d00b      	beq.n	80096f0 <_vfiprintf_r+0x9c>
 80096d8:	002a      	movs	r2, r5
 80096da:	0039      	movs	r1, r7
 80096dc:	9803      	ldr	r0, [sp, #12]
 80096de:	f7ff ffa7 	bl	8009630 <__sfputs_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d100      	bne.n	80096e8 <_vfiprintf_r+0x94>
 80096e6:	e0ae      	b.n	8009846 <_vfiprintf_r+0x1f2>
 80096e8:	6963      	ldr	r3, [r4, #20]
 80096ea:	9a05      	ldr	r2, [sp, #20]
 80096ec:	189b      	adds	r3, r3, r2
 80096ee:	6163      	str	r3, [r4, #20]
 80096f0:	7833      	ldrb	r3, [r6, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d100      	bne.n	80096f8 <_vfiprintf_r+0xa4>
 80096f6:	e0a6      	b.n	8009846 <_vfiprintf_r+0x1f2>
 80096f8:	2201      	movs	r2, #1
 80096fa:	2300      	movs	r3, #0
 80096fc:	4252      	negs	r2, r2
 80096fe:	6062      	str	r2, [r4, #4]
 8009700:	a904      	add	r1, sp, #16
 8009702:	3254      	adds	r2, #84	@ 0x54
 8009704:	1852      	adds	r2, r2, r1
 8009706:	1c75      	adds	r5, r6, #1
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	60e3      	str	r3, [r4, #12]
 800970c:	60a3      	str	r3, [r4, #8]
 800970e:	7013      	strb	r3, [r2, #0]
 8009710:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009712:	4b59      	ldr	r3, [pc, #356]	@ (8009878 <_vfiprintf_r+0x224>)
 8009714:	2205      	movs	r2, #5
 8009716:	0018      	movs	r0, r3
 8009718:	7829      	ldrb	r1, [r5, #0]
 800971a:	9305      	str	r3, [sp, #20]
 800971c:	f7fe f95b 	bl	80079d6 <memchr>
 8009720:	1c6e      	adds	r6, r5, #1
 8009722:	2800      	cmp	r0, #0
 8009724:	d11f      	bne.n	8009766 <_vfiprintf_r+0x112>
 8009726:	6822      	ldr	r2, [r4, #0]
 8009728:	06d3      	lsls	r3, r2, #27
 800972a:	d504      	bpl.n	8009736 <_vfiprintf_r+0xe2>
 800972c:	2353      	movs	r3, #83	@ 0x53
 800972e:	a904      	add	r1, sp, #16
 8009730:	185b      	adds	r3, r3, r1
 8009732:	2120      	movs	r1, #32
 8009734:	7019      	strb	r1, [r3, #0]
 8009736:	0713      	lsls	r3, r2, #28
 8009738:	d504      	bpl.n	8009744 <_vfiprintf_r+0xf0>
 800973a:	2353      	movs	r3, #83	@ 0x53
 800973c:	a904      	add	r1, sp, #16
 800973e:	185b      	adds	r3, r3, r1
 8009740:	212b      	movs	r1, #43	@ 0x2b
 8009742:	7019      	strb	r1, [r3, #0]
 8009744:	782b      	ldrb	r3, [r5, #0]
 8009746:	2b2a      	cmp	r3, #42	@ 0x2a
 8009748:	d016      	beq.n	8009778 <_vfiprintf_r+0x124>
 800974a:	002e      	movs	r6, r5
 800974c:	2100      	movs	r1, #0
 800974e:	200a      	movs	r0, #10
 8009750:	68e3      	ldr	r3, [r4, #12]
 8009752:	7832      	ldrb	r2, [r6, #0]
 8009754:	1c75      	adds	r5, r6, #1
 8009756:	3a30      	subs	r2, #48	@ 0x30
 8009758:	2a09      	cmp	r2, #9
 800975a:	d950      	bls.n	80097fe <_vfiprintf_r+0x1aa>
 800975c:	2900      	cmp	r1, #0
 800975e:	d111      	bne.n	8009784 <_vfiprintf_r+0x130>
 8009760:	e017      	b.n	8009792 <_vfiprintf_r+0x13e>
 8009762:	3601      	adds	r6, #1
 8009764:	e7af      	b.n	80096c6 <_vfiprintf_r+0x72>
 8009766:	9b05      	ldr	r3, [sp, #20]
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	1ac0      	subs	r0, r0, r3
 800976c:	2301      	movs	r3, #1
 800976e:	4083      	lsls	r3, r0
 8009770:	4313      	orrs	r3, r2
 8009772:	0035      	movs	r5, r6
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	e7cc      	b.n	8009712 <_vfiprintf_r+0xbe>
 8009778:	9b07      	ldr	r3, [sp, #28]
 800977a:	1d19      	adds	r1, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9107      	str	r1, [sp, #28]
 8009780:	2b00      	cmp	r3, #0
 8009782:	db01      	blt.n	8009788 <_vfiprintf_r+0x134>
 8009784:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009786:	e004      	b.n	8009792 <_vfiprintf_r+0x13e>
 8009788:	425b      	negs	r3, r3
 800978a:	60e3      	str	r3, [r4, #12]
 800978c:	2302      	movs	r3, #2
 800978e:	4313      	orrs	r3, r2
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	7833      	ldrb	r3, [r6, #0]
 8009794:	2b2e      	cmp	r3, #46	@ 0x2e
 8009796:	d10c      	bne.n	80097b2 <_vfiprintf_r+0x15e>
 8009798:	7873      	ldrb	r3, [r6, #1]
 800979a:	2b2a      	cmp	r3, #42	@ 0x2a
 800979c:	d134      	bne.n	8009808 <_vfiprintf_r+0x1b4>
 800979e:	9b07      	ldr	r3, [sp, #28]
 80097a0:	3602      	adds	r6, #2
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9207      	str	r2, [sp, #28]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da01      	bge.n	80097b0 <_vfiprintf_r+0x15c>
 80097ac:	2301      	movs	r3, #1
 80097ae:	425b      	negs	r3, r3
 80097b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097b2:	4d32      	ldr	r5, [pc, #200]	@ (800987c <_vfiprintf_r+0x228>)
 80097b4:	2203      	movs	r2, #3
 80097b6:	0028      	movs	r0, r5
 80097b8:	7831      	ldrb	r1, [r6, #0]
 80097ba:	f7fe f90c 	bl	80079d6 <memchr>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d006      	beq.n	80097d0 <_vfiprintf_r+0x17c>
 80097c2:	2340      	movs	r3, #64	@ 0x40
 80097c4:	1b40      	subs	r0, r0, r5
 80097c6:	4083      	lsls	r3, r0
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	3601      	adds	r6, #1
 80097cc:	4313      	orrs	r3, r2
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	7831      	ldrb	r1, [r6, #0]
 80097d2:	2206      	movs	r2, #6
 80097d4:	482a      	ldr	r0, [pc, #168]	@ (8009880 <_vfiprintf_r+0x22c>)
 80097d6:	1c75      	adds	r5, r6, #1
 80097d8:	7621      	strb	r1, [r4, #24]
 80097da:	f7fe f8fc 	bl	80079d6 <memchr>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d040      	beq.n	8009864 <_vfiprintf_r+0x210>
 80097e2:	4b28      	ldr	r3, [pc, #160]	@ (8009884 <_vfiprintf_r+0x230>)
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d122      	bne.n	800982e <_vfiprintf_r+0x1da>
 80097e8:	2207      	movs	r2, #7
 80097ea:	9b07      	ldr	r3, [sp, #28]
 80097ec:	3307      	adds	r3, #7
 80097ee:	4393      	bics	r3, r2
 80097f0:	3308      	adds	r3, #8
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	6963      	ldr	r3, [r4, #20]
 80097f6:	9a04      	ldr	r2, [sp, #16]
 80097f8:	189b      	adds	r3, r3, r2
 80097fa:	6163      	str	r3, [r4, #20]
 80097fc:	e762      	b.n	80096c4 <_vfiprintf_r+0x70>
 80097fe:	4343      	muls	r3, r0
 8009800:	002e      	movs	r6, r5
 8009802:	2101      	movs	r1, #1
 8009804:	189b      	adds	r3, r3, r2
 8009806:	e7a4      	b.n	8009752 <_vfiprintf_r+0xfe>
 8009808:	2300      	movs	r3, #0
 800980a:	200a      	movs	r0, #10
 800980c:	0019      	movs	r1, r3
 800980e:	3601      	adds	r6, #1
 8009810:	6063      	str	r3, [r4, #4]
 8009812:	7832      	ldrb	r2, [r6, #0]
 8009814:	1c75      	adds	r5, r6, #1
 8009816:	3a30      	subs	r2, #48	@ 0x30
 8009818:	2a09      	cmp	r2, #9
 800981a:	d903      	bls.n	8009824 <_vfiprintf_r+0x1d0>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0c8      	beq.n	80097b2 <_vfiprintf_r+0x15e>
 8009820:	9109      	str	r1, [sp, #36]	@ 0x24
 8009822:	e7c6      	b.n	80097b2 <_vfiprintf_r+0x15e>
 8009824:	4341      	muls	r1, r0
 8009826:	002e      	movs	r6, r5
 8009828:	2301      	movs	r3, #1
 800982a:	1889      	adds	r1, r1, r2
 800982c:	e7f1      	b.n	8009812 <_vfiprintf_r+0x1be>
 800982e:	aa07      	add	r2, sp, #28
 8009830:	9200      	str	r2, [sp, #0]
 8009832:	0021      	movs	r1, r4
 8009834:	003a      	movs	r2, r7
 8009836:	4b14      	ldr	r3, [pc, #80]	@ (8009888 <_vfiprintf_r+0x234>)
 8009838:	9803      	ldr	r0, [sp, #12]
 800983a:	f7fd fb45 	bl	8006ec8 <_printf_float>
 800983e:	9004      	str	r0, [sp, #16]
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	3301      	adds	r3, #1
 8009844:	d1d6      	bne.n	80097f4 <_vfiprintf_r+0x1a0>
 8009846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009848:	07db      	lsls	r3, r3, #31
 800984a:	d405      	bmi.n	8009858 <_vfiprintf_r+0x204>
 800984c:	89bb      	ldrh	r3, [r7, #12]
 800984e:	059b      	lsls	r3, r3, #22
 8009850:	d402      	bmi.n	8009858 <_vfiprintf_r+0x204>
 8009852:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009854:	f7fe f8be 	bl	80079d4 <__retarget_lock_release_recursive>
 8009858:	89bb      	ldrh	r3, [r7, #12]
 800985a:	065b      	lsls	r3, r3, #25
 800985c:	d500      	bpl.n	8009860 <_vfiprintf_r+0x20c>
 800985e:	e71e      	b.n	800969e <_vfiprintf_r+0x4a>
 8009860:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009862:	e71e      	b.n	80096a2 <_vfiprintf_r+0x4e>
 8009864:	aa07      	add	r2, sp, #28
 8009866:	9200      	str	r2, [sp, #0]
 8009868:	0021      	movs	r1, r4
 800986a:	003a      	movs	r2, r7
 800986c:	4b06      	ldr	r3, [pc, #24]	@ (8009888 <_vfiprintf_r+0x234>)
 800986e:	9803      	ldr	r0, [sp, #12]
 8009870:	f7fd fdd8 	bl	8007424 <_printf_i>
 8009874:	e7e3      	b.n	800983e <_vfiprintf_r+0x1ea>
 8009876:	46c0      	nop			@ (mov r8, r8)
 8009878:	0800a082 	.word	0x0800a082
 800987c:	0800a088 	.word	0x0800a088
 8009880:	0800a08c 	.word	0x0800a08c
 8009884:	08006ec9 	.word	0x08006ec9
 8009888:	08009631 	.word	0x08009631

0800988c <__swbuf_r>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	0006      	movs	r6, r0
 8009890:	000d      	movs	r5, r1
 8009892:	0014      	movs	r4, r2
 8009894:	2800      	cmp	r0, #0
 8009896:	d004      	beq.n	80098a2 <__swbuf_r+0x16>
 8009898:	6a03      	ldr	r3, [r0, #32]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <__swbuf_r+0x16>
 800989e:	f7fd ff5d 	bl	800775c <__sinit>
 80098a2:	69a3      	ldr	r3, [r4, #24]
 80098a4:	60a3      	str	r3, [r4, #8]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	071b      	lsls	r3, r3, #28
 80098aa:	d502      	bpl.n	80098b2 <__swbuf_r+0x26>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d109      	bne.n	80098c6 <__swbuf_r+0x3a>
 80098b2:	0021      	movs	r1, r4
 80098b4:	0030      	movs	r0, r6
 80098b6:	f000 f82b 	bl	8009910 <__swsetup_r>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d003      	beq.n	80098c6 <__swbuf_r+0x3a>
 80098be:	2501      	movs	r5, #1
 80098c0:	426d      	negs	r5, r5
 80098c2:	0028      	movs	r0, r5
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	b2ef      	uxtb	r7, r5
 80098cc:	1ac0      	subs	r0, r0, r3
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	b2ed      	uxtb	r5, r5
 80098d2:	4283      	cmp	r3, r0
 80098d4:	dc05      	bgt.n	80098e2 <__swbuf_r+0x56>
 80098d6:	0021      	movs	r1, r4
 80098d8:	0030      	movs	r0, r6
 80098da:	f7ff fd8b 	bl	80093f4 <_fflush_r>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1ed      	bne.n	80098be <__swbuf_r+0x32>
 80098e2:	68a3      	ldr	r3, [r4, #8]
 80098e4:	3001      	adds	r0, #1
 80098e6:	3b01      	subs	r3, #1
 80098e8:	60a3      	str	r3, [r4, #8]
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	6022      	str	r2, [r4, #0]
 80098f0:	701f      	strb	r7, [r3, #0]
 80098f2:	6963      	ldr	r3, [r4, #20]
 80098f4:	4283      	cmp	r3, r0
 80098f6:	d004      	beq.n	8009902 <__swbuf_r+0x76>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	07db      	lsls	r3, r3, #31
 80098fc:	d5e1      	bpl.n	80098c2 <__swbuf_r+0x36>
 80098fe:	2d0a      	cmp	r5, #10
 8009900:	d1df      	bne.n	80098c2 <__swbuf_r+0x36>
 8009902:	0021      	movs	r1, r4
 8009904:	0030      	movs	r0, r6
 8009906:	f7ff fd75 	bl	80093f4 <_fflush_r>
 800990a:	2800      	cmp	r0, #0
 800990c:	d0d9      	beq.n	80098c2 <__swbuf_r+0x36>
 800990e:	e7d6      	b.n	80098be <__swbuf_r+0x32>

08009910 <__swsetup_r>:
 8009910:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <__swsetup_r+0xb8>)
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	0005      	movs	r5, r0
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	000c      	movs	r4, r1
 800991a:	2800      	cmp	r0, #0
 800991c:	d004      	beq.n	8009928 <__swsetup_r+0x18>
 800991e:	6a03      	ldr	r3, [r0, #32]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <__swsetup_r+0x18>
 8009924:	f7fd ff1a 	bl	800775c <__sinit>
 8009928:	220c      	movs	r2, #12
 800992a:	5ea3      	ldrsh	r3, [r4, r2]
 800992c:	071a      	lsls	r2, r3, #28
 800992e:	d423      	bmi.n	8009978 <__swsetup_r+0x68>
 8009930:	06da      	lsls	r2, r3, #27
 8009932:	d407      	bmi.n	8009944 <__swsetup_r+0x34>
 8009934:	2209      	movs	r2, #9
 8009936:	602a      	str	r2, [r5, #0]
 8009938:	2240      	movs	r2, #64	@ 0x40
 800993a:	2001      	movs	r0, #1
 800993c:	4313      	orrs	r3, r2
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	4240      	negs	r0, r0
 8009942:	e03a      	b.n	80099ba <__swsetup_r+0xaa>
 8009944:	075b      	lsls	r3, r3, #29
 8009946:	d513      	bpl.n	8009970 <__swsetup_r+0x60>
 8009948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994a:	2900      	cmp	r1, #0
 800994c:	d008      	beq.n	8009960 <__swsetup_r+0x50>
 800994e:	0023      	movs	r3, r4
 8009950:	3344      	adds	r3, #68	@ 0x44
 8009952:	4299      	cmp	r1, r3
 8009954:	d002      	beq.n	800995c <__swsetup_r+0x4c>
 8009956:	0028      	movs	r0, r5
 8009958:	f7fe fec6 	bl	80086e8 <_free_r>
 800995c:	2300      	movs	r3, #0
 800995e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009960:	2224      	movs	r2, #36	@ 0x24
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	4393      	bics	r3, r2
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	2300      	movs	r3, #0
 800996a:	6063      	str	r3, [r4, #4]
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	2308      	movs	r3, #8
 8009972:	89a2      	ldrh	r2, [r4, #12]
 8009974:	4313      	orrs	r3, r2
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10b      	bne.n	8009996 <__swsetup_r+0x86>
 800997e:	21a0      	movs	r1, #160	@ 0xa0
 8009980:	2280      	movs	r2, #128	@ 0x80
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	0089      	lsls	r1, r1, #2
 8009986:	0092      	lsls	r2, r2, #2
 8009988:	400b      	ands	r3, r1
 800998a:	4293      	cmp	r3, r2
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x86>
 800998e:	0021      	movs	r1, r4
 8009990:	0028      	movs	r0, r5
 8009992:	f000 f88f 	bl	8009ab4 <__smakebuf_r>
 8009996:	220c      	movs	r2, #12
 8009998:	5ea3      	ldrsh	r3, [r4, r2]
 800999a:	2101      	movs	r1, #1
 800999c:	001a      	movs	r2, r3
 800999e:	400a      	ands	r2, r1
 80099a0:	420b      	tst	r3, r1
 80099a2:	d00b      	beq.n	80099bc <__swsetup_r+0xac>
 80099a4:	2200      	movs	r2, #0
 80099a6:	60a2      	str	r2, [r4, #8]
 80099a8:	6962      	ldr	r2, [r4, #20]
 80099aa:	4252      	negs	r2, r2
 80099ac:	61a2      	str	r2, [r4, #24]
 80099ae:	2000      	movs	r0, #0
 80099b0:	6922      	ldr	r2, [r4, #16]
 80099b2:	4282      	cmp	r2, r0
 80099b4:	d101      	bne.n	80099ba <__swsetup_r+0xaa>
 80099b6:	061a      	lsls	r2, r3, #24
 80099b8:	d4be      	bmi.n	8009938 <__swsetup_r+0x28>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	0799      	lsls	r1, r3, #30
 80099be:	d400      	bmi.n	80099c2 <__swsetup_r+0xb2>
 80099c0:	6962      	ldr	r2, [r4, #20]
 80099c2:	60a2      	str	r2, [r4, #8]
 80099c4:	e7f3      	b.n	80099ae <__swsetup_r+0x9e>
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	20000018 	.word	0x20000018

080099cc <_raise_r>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	0004      	movs	r4, r0
 80099d0:	000d      	movs	r5, r1
 80099d2:	291f      	cmp	r1, #31
 80099d4:	d904      	bls.n	80099e0 <_raise_r+0x14>
 80099d6:	2316      	movs	r3, #22
 80099d8:	6003      	str	r3, [r0, #0]
 80099da:	2001      	movs	r0, #1
 80099dc:	4240      	negs	r0, r0
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d004      	beq.n	80099f0 <_raise_r+0x24>
 80099e6:	008a      	lsls	r2, r1, #2
 80099e8:	189b      	adds	r3, r3, r2
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	d108      	bne.n	8009a02 <_raise_r+0x36>
 80099f0:	0020      	movs	r0, r4
 80099f2:	f000 f831 	bl	8009a58 <_getpid_r>
 80099f6:	002a      	movs	r2, r5
 80099f8:	0001      	movs	r1, r0
 80099fa:	0020      	movs	r0, r4
 80099fc:	f000 f81a 	bl	8009a34 <_kill_r>
 8009a00:	e7ed      	b.n	80099de <_raise_r+0x12>
 8009a02:	2a01      	cmp	r2, #1
 8009a04:	d009      	beq.n	8009a1a <_raise_r+0x4e>
 8009a06:	1c51      	adds	r1, r2, #1
 8009a08:	d103      	bne.n	8009a12 <_raise_r+0x46>
 8009a0a:	2316      	movs	r3, #22
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7e5      	b.n	80099de <_raise_r+0x12>
 8009a12:	2100      	movs	r1, #0
 8009a14:	0028      	movs	r0, r5
 8009a16:	6019      	str	r1, [r3, #0]
 8009a18:	4790      	blx	r2
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e7df      	b.n	80099de <_raise_r+0x12>
	...

08009a20 <raise>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4b03      	ldr	r3, [pc, #12]	@ (8009a30 <raise+0x10>)
 8009a24:	0001      	movs	r1, r0
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	f7ff ffd0 	bl	80099cc <_raise_r>
 8009a2c:	bd10      	pop	{r4, pc}
 8009a2e:	46c0      	nop			@ (mov r8, r8)
 8009a30:	20000018 	.word	0x20000018

08009a34 <_kill_r>:
 8009a34:	2300      	movs	r3, #0
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_kill_r+0x20>)
 8009a3a:	0004      	movs	r4, r0
 8009a3c:	0008      	movs	r0, r1
 8009a3e:	0011      	movs	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f9 fda3 	bl	800358c <_kill>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d103      	bne.n	8009a52 <_kill_r+0x1e>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d000      	beq.n	8009a52 <_kill_r+0x1e>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	20000410 	.word	0x20000410

08009a58 <_getpid_r>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	f7f9 fd91 	bl	8003580 <_getpid>
 8009a5e:	bd10      	pop	{r4, pc}

08009a60 <__swhatbuf_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	000e      	movs	r6, r1
 8009a64:	001d      	movs	r5, r3
 8009a66:	230e      	movs	r3, #14
 8009a68:	5ec9      	ldrsh	r1, [r1, r3]
 8009a6a:	0014      	movs	r4, r2
 8009a6c:	b096      	sub	sp, #88	@ 0x58
 8009a6e:	2900      	cmp	r1, #0
 8009a70:	da0c      	bge.n	8009a8c <__swhatbuf_r+0x2c>
 8009a72:	89b2      	ldrh	r2, [r6, #12]
 8009a74:	2380      	movs	r3, #128	@ 0x80
 8009a76:	0011      	movs	r1, r2
 8009a78:	4019      	ands	r1, r3
 8009a7a:	421a      	tst	r2, r3
 8009a7c:	d114      	bne.n	8009aa8 <__swhatbuf_r+0x48>
 8009a7e:	2380      	movs	r3, #128	@ 0x80
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	2000      	movs	r0, #0
 8009a84:	6029      	str	r1, [r5, #0]
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	b016      	add	sp, #88	@ 0x58
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	466a      	mov	r2, sp
 8009a8e:	f000 f853 	bl	8009b38 <_fstat_r>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	dbed      	blt.n	8009a72 <__swhatbuf_r+0x12>
 8009a96:	23f0      	movs	r3, #240	@ 0xf0
 8009a98:	9901      	ldr	r1, [sp, #4]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	4019      	ands	r1, r3
 8009a9e:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <__swhatbuf_r+0x50>)
 8009aa0:	18c9      	adds	r1, r1, r3
 8009aa2:	424b      	negs	r3, r1
 8009aa4:	4159      	adcs	r1, r3
 8009aa6:	e7ea      	b.n	8009a7e <__swhatbuf_r+0x1e>
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	2340      	movs	r3, #64	@ 0x40
 8009aac:	e7e9      	b.n	8009a82 <__swhatbuf_r+0x22>
 8009aae:	46c0      	nop			@ (mov r8, r8)
 8009ab0:	ffffe000 	.word	0xffffe000

08009ab4 <__smakebuf_r>:
 8009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab6:	2602      	movs	r6, #2
 8009ab8:	898b      	ldrh	r3, [r1, #12]
 8009aba:	0005      	movs	r5, r0
 8009abc:	000c      	movs	r4, r1
 8009abe:	b085      	sub	sp, #20
 8009ac0:	4233      	tst	r3, r6
 8009ac2:	d007      	beq.n	8009ad4 <__smakebuf_r+0x20>
 8009ac4:	0023      	movs	r3, r4
 8009ac6:	3347      	adds	r3, #71	@ 0x47
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	2301      	movs	r3, #1
 8009ace:	6163      	str	r3, [r4, #20]
 8009ad0:	b005      	add	sp, #20
 8009ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad4:	ab03      	add	r3, sp, #12
 8009ad6:	aa02      	add	r2, sp, #8
 8009ad8:	f7ff ffc2 	bl	8009a60 <__swhatbuf_r>
 8009adc:	9f02      	ldr	r7, [sp, #8]
 8009ade:	9001      	str	r0, [sp, #4]
 8009ae0:	0039      	movs	r1, r7
 8009ae2:	0028      	movs	r0, r5
 8009ae4:	f7fe fe76 	bl	80087d4 <_malloc_r>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d108      	bne.n	8009afe <__smakebuf_r+0x4a>
 8009aec:	220c      	movs	r2, #12
 8009aee:	5ea3      	ldrsh	r3, [r4, r2]
 8009af0:	059a      	lsls	r2, r3, #22
 8009af2:	d4ed      	bmi.n	8009ad0 <__smakebuf_r+0x1c>
 8009af4:	2203      	movs	r2, #3
 8009af6:	4393      	bics	r3, r2
 8009af8:	431e      	orrs	r6, r3
 8009afa:	81a6      	strh	r6, [r4, #12]
 8009afc:	e7e2      	b.n	8009ac4 <__smakebuf_r+0x10>
 8009afe:	2380      	movs	r3, #128	@ 0x80
 8009b00:	89a2      	ldrh	r2, [r4, #12]
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	6120      	str	r0, [r4, #16]
 8009b0c:	6167      	str	r7, [r4, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <__smakebuf_r+0x78>
 8009b12:	0028      	movs	r0, r5
 8009b14:	230e      	movs	r3, #14
 8009b16:	5ee1      	ldrsh	r1, [r4, r3]
 8009b18:	f000 f820 	bl	8009b5c <_isatty_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d005      	beq.n	8009b2c <__smakebuf_r+0x78>
 8009b20:	2303      	movs	r3, #3
 8009b22:	89a2      	ldrh	r2, [r4, #12]
 8009b24:	439a      	bics	r2, r3
 8009b26:	3b02      	subs	r3, #2
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	9a01      	ldr	r2, [sp, #4]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	e7cc      	b.n	8009ad0 <__smakebuf_r+0x1c>
	...

08009b38 <_fstat_r>:
 8009b38:	2300      	movs	r3, #0
 8009b3a:	b570      	push	{r4, r5, r6, lr}
 8009b3c:	4d06      	ldr	r5, [pc, #24]	@ (8009b58 <_fstat_r+0x20>)
 8009b3e:	0004      	movs	r4, r0
 8009b40:	0008      	movs	r0, r1
 8009b42:	0011      	movs	r1, r2
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	f7f9 fd81 	bl	800364c <_fstat>
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	d103      	bne.n	8009b56 <_fstat_r+0x1e>
 8009b4e:	682b      	ldr	r3, [r5, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d000      	beq.n	8009b56 <_fstat_r+0x1e>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	20000410 	.word	0x20000410

08009b5c <_isatty_r>:
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	b570      	push	{r4, r5, r6, lr}
 8009b60:	4d06      	ldr	r5, [pc, #24]	@ (8009b7c <_isatty_r+0x20>)
 8009b62:	0004      	movs	r4, r0
 8009b64:	0008      	movs	r0, r1
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	f7f9 fd7e 	bl	8003668 <_isatty>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d103      	bne.n	8009b78 <_isatty_r+0x1c>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d000      	beq.n	8009b78 <_isatty_r+0x1c>
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	46c0      	nop			@ (mov r8, r8)
 8009b7c:	20000410 	.word	0x20000410

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	46c0      	nop			@ (mov r8, r8)
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	46c0      	nop			@ (mov r8, r8)
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
