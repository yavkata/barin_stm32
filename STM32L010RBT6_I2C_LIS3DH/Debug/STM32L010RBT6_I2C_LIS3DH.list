
STM32L010RBT6_I2C_LIS3DH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008ac0  08008ac0  00009ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f04  08008f04  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f04  08008f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f0c  08008f0c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  080090e8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080090e8  0000a420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae44  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acf  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00016b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ca  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e0b  00000000  00000000  00017ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cecc  00000000  00000000  00029aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068b95  00000000  00000000  000369b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f54e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  0009f594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a2acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008aa8 	.word	0x08008aa8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08008aa8 	.word	0x08008aa8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa5b 	bl	80018f8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f99f 	bl	8001790 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa4d 	bl	80018f8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa43 	bl	80018f8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9c9 	bl	8001818 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9bf 	bl	8001818 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 fa6a 	bl	80029e0 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fa65 	bl	80029e0 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fmul>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0044      	lsls	r4, r0, #1
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0246      	lsls	r6, r0, #9
 800068e:	1c0f      	adds	r7, r1, #0
 8000690:	0a76      	lsrs	r6, r6, #9
 8000692:	0e24      	lsrs	r4, r4, #24
 8000694:	0fc5      	lsrs	r5, r0, #31
 8000696:	2c00      	cmp	r4, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x1c>
 800069a:	e0da      	b.n	8000852 <__aeabi_fmul+0x1d2>
 800069c:	2cff      	cmp	r4, #255	@ 0xff
 800069e:	d074      	beq.n	800078a <__aeabi_fmul+0x10a>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	00f6      	lsls	r6, r6, #3
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431e      	orrs	r6, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	4699      	mov	r9, r3
 80006ac:	469a      	mov	sl, r3
 80006ae:	3c7f      	subs	r4, #127	@ 0x7f
 80006b0:	027b      	lsls	r3, r7, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	4698      	mov	r8, r3
 80006b6:	007b      	lsls	r3, r7, #1
 80006b8:	0e1b      	lsrs	r3, r3, #24
 80006ba:	0fff      	lsrs	r7, r7, #31
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d074      	beq.n	80007aa <__aeabi_fmul+0x12a>
 80006c0:	2bff      	cmp	r3, #255	@ 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fmul+0x46>
 80006c4:	e08e      	b.n	80007e4 <__aeabi_fmul+0x164>
 80006c6:	4642      	mov	r2, r8
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	04c9      	lsls	r1, r1, #19
 80006ce:	4311      	orrs	r1, r2
 80006d0:	3b7f      	subs	r3, #127	@ 0x7f
 80006d2:	002a      	movs	r2, r5
 80006d4:	18e4      	adds	r4, r4, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	407a      	eors	r2, r7
 80006da:	4688      	mov	r8, r1
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	dc75      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80006e2:	464b      	mov	r3, r9
 80006e4:	2000      	movs	r0, #0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	dd0f      	ble.n	800070a <__aeabi_fmul+0x8a>
 80006ea:	4649      	mov	r1, r9
 80006ec:	2301      	movs	r3, #1
 80006ee:	408b      	lsls	r3, r1
 80006f0:	21a6      	movs	r1, #166	@ 0xa6
 80006f2:	00c9      	lsls	r1, r1, #3
 80006f4:	420b      	tst	r3, r1
 80006f6:	d169      	bne.n	80007cc <__aeabi_fmul+0x14c>
 80006f8:	2190      	movs	r1, #144	@ 0x90
 80006fa:	0089      	lsls	r1, r1, #2
 80006fc:	420b      	tst	r3, r1
 80006fe:	d000      	beq.n	8000702 <__aeabi_fmul+0x82>
 8000700:	e100      	b.n	8000904 <__aeabi_fmul+0x284>
 8000702:	2188      	movs	r1, #136	@ 0x88
 8000704:	4219      	tst	r1, r3
 8000706:	d000      	beq.n	800070a <__aeabi_fmul+0x8a>
 8000708:	e0f5      	b.n	80008f6 <__aeabi_fmul+0x276>
 800070a:	4641      	mov	r1, r8
 800070c:	0409      	lsls	r1, r1, #16
 800070e:	0c09      	lsrs	r1, r1, #16
 8000710:	4643      	mov	r3, r8
 8000712:	0008      	movs	r0, r1
 8000714:	0c35      	lsrs	r5, r6, #16
 8000716:	0436      	lsls	r6, r6, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	0c36      	lsrs	r6, r6, #16
 800071c:	4370      	muls	r0, r6
 800071e:	4369      	muls	r1, r5
 8000720:	435e      	muls	r6, r3
 8000722:	435d      	muls	r5, r3
 8000724:	1876      	adds	r6, r6, r1
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	199b      	adds	r3, r3, r6
 800072a:	4299      	cmp	r1, r3
 800072c:	d903      	bls.n	8000736 <__aeabi_fmul+0xb6>
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	0249      	lsls	r1, r1, #9
 8000732:	468c      	mov	ip, r1
 8000734:	4465      	add	r5, ip
 8000736:	0400      	lsls	r0, r0, #16
 8000738:	0419      	lsls	r1, r3, #16
 800073a:	0c00      	lsrs	r0, r0, #16
 800073c:	1809      	adds	r1, r1, r0
 800073e:	018e      	lsls	r6, r1, #6
 8000740:	1e70      	subs	r0, r6, #1
 8000742:	4186      	sbcs	r6, r0
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	0e89      	lsrs	r1, r1, #26
 8000748:	195b      	adds	r3, r3, r5
 800074a:	430e      	orrs	r6, r1
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	431e      	orrs	r6, r3
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	d46c      	bmi.n	800082e <__aeabi_fmul+0x1ae>
 8000754:	0023      	movs	r3, r4
 8000756:	337f      	adds	r3, #127	@ 0x7f
 8000758:	2b00      	cmp	r3, #0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fmul+0xde>
 800075c:	e0b1      	b.n	80008c2 <__aeabi_fmul+0x242>
 800075e:	0015      	movs	r5, r2
 8000760:	0771      	lsls	r1, r6, #29
 8000762:	d00b      	beq.n	800077c <__aeabi_fmul+0xfc>
 8000764:	200f      	movs	r0, #15
 8000766:	0021      	movs	r1, r4
 8000768:	4030      	ands	r0, r6
 800076a:	2804      	cmp	r0, #4
 800076c:	d006      	beq.n	800077c <__aeabi_fmul+0xfc>
 800076e:	3604      	adds	r6, #4
 8000770:	0132      	lsls	r2, r6, #4
 8000772:	d503      	bpl.n	800077c <__aeabi_fmul+0xfc>
 8000774:	4b6e      	ldr	r3, [pc, #440]	@ (8000930 <__aeabi_fmul+0x2b0>)
 8000776:	401e      	ands	r6, r3
 8000778:	000b      	movs	r3, r1
 800077a:	3380      	adds	r3, #128	@ 0x80
 800077c:	2bfe      	cmp	r3, #254	@ 0xfe
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0x102>
 8000780:	e0bd      	b.n	80008fe <__aeabi_fmul+0x27e>
 8000782:	01b2      	lsls	r2, r6, #6
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	b2db      	uxtb	r3, r3
 8000788:	e048      	b.n	800081c <__aeabi_fmul+0x19c>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fmul+0x110>
 800078e:	e092      	b.n	80008b6 <__aeabi_fmul+0x236>
 8000790:	2308      	movs	r3, #8
 8000792:	4699      	mov	r9, r3
 8000794:	3b06      	subs	r3, #6
 8000796:	469a      	mov	sl, r3
 8000798:	027b      	lsls	r3, r7, #9
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	4698      	mov	r8, r3
 800079e:	007b      	lsls	r3, r7, #1
 80007a0:	24ff      	movs	r4, #255	@ 0xff
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	0fff      	lsrs	r7, r7, #31
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d18a      	bne.n	80006c0 <__aeabi_fmul+0x40>
 80007aa:	4642      	mov	r2, r8
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d164      	bne.n	800087a <__aeabi_fmul+0x1fa>
 80007b0:	4649      	mov	r1, r9
 80007b2:	3201      	adds	r2, #1
 80007b4:	4311      	orrs	r1, r2
 80007b6:	4689      	mov	r9, r1
 80007b8:	290a      	cmp	r1, #10
 80007ba:	dc08      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80007bc:	407d      	eors	r5, r7
 80007be:	2001      	movs	r0, #1
 80007c0:	b2ea      	uxtb	r2, r5
 80007c2:	2902      	cmp	r1, #2
 80007c4:	dc91      	bgt.n	80006ea <__aeabi_fmul+0x6a>
 80007c6:	0015      	movs	r5, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e027      	b.n	800081c <__aeabi_fmul+0x19c>
 80007cc:	0015      	movs	r5, r2
 80007ce:	4653      	mov	r3, sl
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x156>
 80007d4:	e093      	b.n	80008fe <__aeabi_fmul+0x27e>
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d01a      	beq.n	8000810 <__aeabi_fmul+0x190>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12c      	bne.n	8000838 <__aeabi_fmul+0x1b8>
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	e01b      	b.n	800081c <__aeabi_fmul+0x19c>
 80007e4:	4643      	mov	r3, r8
 80007e6:	34ff      	adds	r4, #255	@ 0xff
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d055      	beq.n	8000898 <__aeabi_fmul+0x218>
 80007ec:	2103      	movs	r1, #3
 80007ee:	464b      	mov	r3, r9
 80007f0:	430b      	orrs	r3, r1
 80007f2:	0019      	movs	r1, r3
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_fmul+0x17a>
 80007f8:	e092      	b.n	8000920 <__aeabi_fmul+0x2a0>
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d000      	beq.n	8000800 <__aeabi_fmul+0x180>
 80007fe:	e08c      	b.n	800091a <__aeabi_fmul+0x29a>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	03d2      	lsls	r2, r2, #15
 8000804:	4216      	tst	r6, r2
 8000806:	d003      	beq.n	8000810 <__aeabi_fmul+0x190>
 8000808:	4643      	mov	r3, r8
 800080a:	4213      	tst	r3, r2
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x190>
 800080e:	e07d      	b.n	800090c <__aeabi_fmul+0x28c>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	4332      	orrs	r2, r6
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	23ff      	movs	r3, #255	@ 0xff
 800081c:	05d8      	lsls	r0, r3, #23
 800081e:	07ed      	lsls	r5, r5, #31
 8000820:	4310      	orrs	r0, r2
 8000822:	4328      	orrs	r0, r5
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	2301      	movs	r3, #1
 8000830:	0015      	movs	r5, r2
 8000832:	0871      	lsrs	r1, r6, #1
 8000834:	401e      	ands	r6, r3
 8000836:	430e      	orrs	r6, r1
 8000838:	0023      	movs	r3, r4
 800083a:	3380      	adds	r3, #128	@ 0x80
 800083c:	1c61      	adds	r1, r4, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	dd41      	ble.n	80008c6 <__aeabi_fmul+0x246>
 8000842:	0772      	lsls	r2, r6, #29
 8000844:	d094      	beq.n	8000770 <__aeabi_fmul+0xf0>
 8000846:	220f      	movs	r2, #15
 8000848:	4032      	ands	r2, r6
 800084a:	2a04      	cmp	r2, #4
 800084c:	d000      	beq.n	8000850 <__aeabi_fmul+0x1d0>
 800084e:	e78e      	b.n	800076e <__aeabi_fmul+0xee>
 8000850:	e78e      	b.n	8000770 <__aeabi_fmul+0xf0>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d105      	bne.n	8000862 <__aeabi_fmul+0x1e2>
 8000856:	2304      	movs	r3, #4
 8000858:	4699      	mov	r9, r3
 800085a:	3b03      	subs	r3, #3
 800085c:	2400      	movs	r4, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e726      	b.n	80006b0 <__aeabi_fmul+0x30>
 8000862:	0030      	movs	r0, r6
 8000864:	f002 f89e 	bl	80029a4 <__clzsi2>
 8000868:	2476      	movs	r4, #118	@ 0x76
 800086a:	1f43      	subs	r3, r0, #5
 800086c:	409e      	lsls	r6, r3
 800086e:	2300      	movs	r3, #0
 8000870:	4264      	negs	r4, r4
 8000872:	4699      	mov	r9, r3
 8000874:	469a      	mov	sl, r3
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	e71a      	b.n	80006b0 <__aeabi_fmul+0x30>
 800087a:	4640      	mov	r0, r8
 800087c:	f002 f892 	bl	80029a4 <__clzsi2>
 8000880:	464b      	mov	r3, r9
 8000882:	1a24      	subs	r4, r4, r0
 8000884:	3c76      	subs	r4, #118	@ 0x76
 8000886:	2b0a      	cmp	r3, #10
 8000888:	dca1      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 800088a:	4643      	mov	r3, r8
 800088c:	3805      	subs	r0, #5
 800088e:	4083      	lsls	r3, r0
 8000890:	407d      	eors	r5, r7
 8000892:	4698      	mov	r8, r3
 8000894:	b2ea      	uxtb	r2, r5
 8000896:	e724      	b.n	80006e2 <__aeabi_fmul+0x62>
 8000898:	464a      	mov	r2, r9
 800089a:	3302      	adds	r3, #2
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	407a      	eors	r2, r7
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	dc92      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80008a8:	4649      	mov	r1, r9
 80008aa:	0015      	movs	r5, r2
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d026      	beq.n	80008fe <__aeabi_fmul+0x27e>
 80008b0:	4699      	mov	r9, r3
 80008b2:	2002      	movs	r0, #2
 80008b4:	e719      	b.n	80006ea <__aeabi_fmul+0x6a>
 80008b6:	230c      	movs	r3, #12
 80008b8:	4699      	mov	r9, r3
 80008ba:	3b09      	subs	r3, #9
 80008bc:	24ff      	movs	r4, #255	@ 0xff
 80008be:	469a      	mov	sl, r3
 80008c0:	e6f6      	b.n	80006b0 <__aeabi_fmul+0x30>
 80008c2:	0015      	movs	r5, r2
 80008c4:	0021      	movs	r1, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b1b      	cmp	r3, #27
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x250>
 80008ce:	e786      	b.n	80007de <__aeabi_fmul+0x15e>
 80008d0:	319e      	adds	r1, #158	@ 0x9e
 80008d2:	0032      	movs	r2, r6
 80008d4:	408e      	lsls	r6, r1
 80008d6:	40da      	lsrs	r2, r3
 80008d8:	1e73      	subs	r3, r6, #1
 80008da:	419e      	sbcs	r6, r3
 80008dc:	4332      	orrs	r2, r6
 80008de:	0753      	lsls	r3, r2, #29
 80008e0:	d004      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008e2:	230f      	movs	r3, #15
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d000      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008ea:	3204      	adds	r2, #4
 80008ec:	0153      	lsls	r3, r2, #5
 80008ee:	d510      	bpl.n	8000912 <__aeabi_fmul+0x292>
 80008f0:	2301      	movs	r3, #1
 80008f2:	2200      	movs	r2, #0
 80008f4:	e792      	b.n	800081c <__aeabi_fmul+0x19c>
 80008f6:	003d      	movs	r5, r7
 80008f8:	4646      	mov	r6, r8
 80008fa:	4682      	mov	sl, r0
 80008fc:	e767      	b.n	80007ce <__aeabi_fmul+0x14e>
 80008fe:	23ff      	movs	r3, #255	@ 0xff
 8000900:	2200      	movs	r2, #0
 8000902:	e78b      	b.n	800081c <__aeabi_fmul+0x19c>
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	2500      	movs	r5, #0
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	e786      	b.n	800081a <__aeabi_fmul+0x19a>
 800090c:	003d      	movs	r5, r7
 800090e:	431a      	orrs	r2, r3
 8000910:	e783      	b.n	800081a <__aeabi_fmul+0x19a>
 8000912:	0192      	lsls	r2, r2, #6
 8000914:	2300      	movs	r3, #0
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e780      	b.n	800081c <__aeabi_fmul+0x19c>
 800091a:	003d      	movs	r5, r7
 800091c:	4646      	mov	r6, r8
 800091e:	e777      	b.n	8000810 <__aeabi_fmul+0x190>
 8000920:	002a      	movs	r2, r5
 8000922:	2301      	movs	r3, #1
 8000924:	407a      	eors	r2, r7
 8000926:	408b      	lsls	r3, r1
 8000928:	2003      	movs	r0, #3
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	e6e9      	b.n	8000702 <__aeabi_fmul+0x82>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	f7ffffff 	.word	0xf7ffffff

08000934 <__aeabi_i2f>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	2800      	cmp	r0, #0
 8000938:	d012      	beq.n	8000960 <__aeabi_i2f+0x2c>
 800093a:	17c3      	asrs	r3, r0, #31
 800093c:	18c5      	adds	r5, r0, r3
 800093e:	405d      	eors	r5, r3
 8000940:	0fc4      	lsrs	r4, r0, #31
 8000942:	0028      	movs	r0, r5
 8000944:	f002 f82e 	bl	80029a4 <__clzsi2>
 8000948:	239e      	movs	r3, #158	@ 0x9e
 800094a:	1a1b      	subs	r3, r3, r0
 800094c:	2b96      	cmp	r3, #150	@ 0x96
 800094e:	dc0f      	bgt.n	8000970 <__aeabi_i2f+0x3c>
 8000950:	2808      	cmp	r0, #8
 8000952:	d038      	beq.n	80009c6 <__aeabi_i2f+0x92>
 8000954:	3808      	subs	r0, #8
 8000956:	4085      	lsls	r5, r0
 8000958:	026d      	lsls	r5, r5, #9
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e002      	b.n	8000966 <__aeabi_i2f+0x32>
 8000960:	2400      	movs	r4, #0
 8000962:	2000      	movs	r0, #0
 8000964:	2500      	movs	r5, #0
 8000966:	05c0      	lsls	r0, r0, #23
 8000968:	4328      	orrs	r0, r5
 800096a:	07e4      	lsls	r4, r4, #31
 800096c:	4320      	orrs	r0, r4
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	2b99      	cmp	r3, #153	@ 0x99
 8000972:	dc14      	bgt.n	800099e <__aeabi_i2f+0x6a>
 8000974:	1f42      	subs	r2, r0, #5
 8000976:	4095      	lsls	r5, r2
 8000978:	002a      	movs	r2, r5
 800097a:	4915      	ldr	r1, [pc, #84]	@ (80009d0 <__aeabi_i2f+0x9c>)
 800097c:	4011      	ands	r1, r2
 800097e:	0755      	lsls	r5, r2, #29
 8000980:	d01c      	beq.n	80009bc <__aeabi_i2f+0x88>
 8000982:	250f      	movs	r5, #15
 8000984:	402a      	ands	r2, r5
 8000986:	2a04      	cmp	r2, #4
 8000988:	d018      	beq.n	80009bc <__aeabi_i2f+0x88>
 800098a:	3104      	adds	r1, #4
 800098c:	08ca      	lsrs	r2, r1, #3
 800098e:	0149      	lsls	r1, r1, #5
 8000990:	d515      	bpl.n	80009be <__aeabi_i2f+0x8a>
 8000992:	239f      	movs	r3, #159	@ 0x9f
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	1a18      	subs	r0, r3, r0
 8000998:	0a55      	lsrs	r5, r2, #9
 800099a:	b2c0      	uxtb	r0, r0
 800099c:	e7e3      	b.n	8000966 <__aeabi_i2f+0x32>
 800099e:	2205      	movs	r2, #5
 80009a0:	0029      	movs	r1, r5
 80009a2:	1a12      	subs	r2, r2, r0
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	0002      	movs	r2, r0
 80009a8:	321b      	adds	r2, #27
 80009aa:	4095      	lsls	r5, r2
 80009ac:	002a      	movs	r2, r5
 80009ae:	1e55      	subs	r5, r2, #1
 80009b0:	41aa      	sbcs	r2, r5
 80009b2:	430a      	orrs	r2, r1
 80009b4:	4906      	ldr	r1, [pc, #24]	@ (80009d0 <__aeabi_i2f+0x9c>)
 80009b6:	4011      	ands	r1, r2
 80009b8:	0755      	lsls	r5, r2, #29
 80009ba:	d1e2      	bne.n	8000982 <__aeabi_i2f+0x4e>
 80009bc:	08ca      	lsrs	r2, r1, #3
 80009be:	0252      	lsls	r2, r2, #9
 80009c0:	0a55      	lsrs	r5, r2, #9
 80009c2:	b2d8      	uxtb	r0, r3
 80009c4:	e7cf      	b.n	8000966 <__aeabi_i2f+0x32>
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	308e      	adds	r0, #142	@ 0x8e
 80009cc:	e7cb      	b.n	8000966 <__aeabi_i2f+0x32>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	fbffffff 	.word	0xfbffffff

080009d4 <__aeabi_dadd>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	464f      	mov	r7, r9
 80009d8:	4646      	mov	r6, r8
 80009da:	46d6      	mov	lr, sl
 80009dc:	b5c0      	push	{r6, r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	9000      	str	r0, [sp, #0]
 80009e2:	9101      	str	r1, [sp, #4]
 80009e4:	030e      	lsls	r6, r1, #12
 80009e6:	004c      	lsls	r4, r1, #1
 80009e8:	0fcd      	lsrs	r5, r1, #31
 80009ea:	0a71      	lsrs	r1, r6, #9
 80009ec:	9e00      	ldr	r6, [sp, #0]
 80009ee:	005f      	lsls	r7, r3, #1
 80009f0:	0f76      	lsrs	r6, r6, #29
 80009f2:	430e      	orrs	r6, r1
 80009f4:	9900      	ldr	r1, [sp, #0]
 80009f6:	9200      	str	r2, [sp, #0]
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4689      	mov	r9, r1
 80009fe:	0319      	lsls	r1, r3, #12
 8000a00:	0d7b      	lsrs	r3, r7, #21
 8000a02:	4698      	mov	r8, r3
 8000a04:	9b01      	ldr	r3, [sp, #4]
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	0fdb      	lsrs	r3, r3, #31
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	0f5b      	lsrs	r3, r3, #29
 8000a12:	430b      	orrs	r3, r1
 8000a14:	4641      	mov	r1, r8
 8000a16:	0d64      	lsrs	r4, r4, #21
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	1a61      	subs	r1, r4, r1
 8000a1c:	4565      	cmp	r5, ip
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x4e>
 8000a20:	e0a6      	b.n	8000b70 <__aeabi_dadd+0x19c>
 8000a22:	2900      	cmp	r1, #0
 8000a24:	dd72      	ble.n	8000b0c <__aeabi_dadd+0x138>
 8000a26:	4647      	mov	r7, r8
 8000a28:	2f00      	cmp	r7, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x5a>
 8000a2c:	e0dd      	b.n	8000bea <__aeabi_dadd+0x216>
 8000a2e:	4fcc      	ldr	r7, [pc, #816]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000a30:	42bc      	cmp	r4, r7
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x62>
 8000a34:	e19a      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000a36:	2701      	movs	r7, #1
 8000a38:	2938      	cmp	r1, #56	@ 0x38
 8000a3a:	dc17      	bgt.n	8000a6c <__aeabi_dadd+0x98>
 8000a3c:	2780      	movs	r7, #128	@ 0x80
 8000a3e:	043f      	lsls	r7, r7, #16
 8000a40:	433b      	orrs	r3, r7
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dadd+0x74>
 8000a46:	e1dd      	b.n	8000e04 <__aeabi_dadd+0x430>
 8000a48:	2720      	movs	r7, #32
 8000a4a:	1a78      	subs	r0, r7, r1
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	4087      	lsls	r7, r0
 8000a50:	46ba      	mov	sl, r7
 8000a52:	0017      	movs	r7, r2
 8000a54:	40cf      	lsrs	r7, r1
 8000a56:	4684      	mov	ip, r0
 8000a58:	0038      	movs	r0, r7
 8000a5a:	4657      	mov	r7, sl
 8000a5c:	4307      	orrs	r7, r0
 8000a5e:	4660      	mov	r0, ip
 8000a60:	4082      	lsls	r2, r0
 8000a62:	40cb      	lsrs	r3, r1
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	1af6      	subs	r6, r6, r3
 8000a6a:	4317      	orrs	r7, r2
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1bdf      	subs	r7, r3, r7
 8000a70:	45b9      	cmp	r9, r7
 8000a72:	4180      	sbcs	r0, r0
 8000a74:	4240      	negs	r0, r0
 8000a76:	1a36      	subs	r6, r6, r0
 8000a78:	0233      	lsls	r3, r6, #8
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_dadd+0xaa>
 8000a7c:	e0ff      	b.n	8000c7e <__aeabi_dadd+0x2aa>
 8000a7e:	0276      	lsls	r6, r6, #9
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0xb4>
 8000a86:	e13c      	b.n	8000d02 <__aeabi_dadd+0x32e>
 8000a88:	0030      	movs	r0, r6
 8000a8a:	f001 ff8b 	bl	80029a4 <__clzsi2>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	3b08      	subs	r3, #8
 8000a92:	2120      	movs	r1, #32
 8000a94:	0038      	movs	r0, r7
 8000a96:	1aca      	subs	r2, r1, r3
 8000a98:	40d0      	lsrs	r0, r2
 8000a9a:	409e      	lsls	r6, r3
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	409f      	lsls	r7, r3
 8000aa0:	4332      	orrs	r2, r6
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0xd4>
 8000aa6:	e1a6      	b.n	8000df6 <__aeabi_dadd+0x422>
 8000aa8:	1b18      	subs	r0, r3, r4
 8000aaa:	3001      	adds	r0, #1
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	003e      	movs	r6, r7
 8000ab0:	408f      	lsls	r7, r1
 8000ab2:	40c6      	lsrs	r6, r0
 8000ab4:	1e7b      	subs	r3, r7, #1
 8000ab6:	419f      	sbcs	r7, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	408b      	lsls	r3, r1
 8000abc:	4337      	orrs	r7, r6
 8000abe:	431f      	orrs	r7, r3
 8000ac0:	40c2      	lsrs	r2, r0
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0016      	movs	r6, r2
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0xfa>
 8000acc:	e1df      	b.n	8000e8e <__aeabi_dadd+0x4ba>
 8000ace:	077b      	lsls	r3, r7, #29
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x100>
 8000ad2:	e332      	b.n	800113a <__aeabi_dadd+0x766>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	403b      	ands	r3, r7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d004      	beq.n	8000ae8 <__aeabi_dadd+0x114>
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	42ba      	cmp	r2, r7
 8000ae2:	41bf      	sbcs	r7, r7
 8000ae4:	427f      	negs	r7, r7
 8000ae6:	19f6      	adds	r6, r6, r7
 8000ae8:	0233      	lsls	r3, r6, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dadd+0x11a>
 8000aec:	e323      	b.n	8001136 <__aeabi_dadd+0x762>
 8000aee:	4b9c      	ldr	r3, [pc, #624]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000af0:	3401      	adds	r4, #1
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x124>
 8000af6:	e0b4      	b.n	8000c62 <__aeabi_dadd+0x28e>
 8000af8:	4b9a      	ldr	r3, [pc, #616]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000afa:	0564      	lsls	r4, r4, #21
 8000afc:	401e      	ands	r6, r3
 8000afe:	0d64      	lsrs	r4, r4, #21
 8000b00:	0777      	lsls	r7, r6, #29
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	0276      	lsls	r6, r6, #9
 8000b06:	4317      	orrs	r7, r2
 8000b08:	0b36      	lsrs	r6, r6, #12
 8000b0a:	e0ac      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x13e>
 8000b10:	e07e      	b.n	8000c10 <__aeabi_dadd+0x23c>
 8000b12:	4641      	mov	r1, r8
 8000b14:	1b09      	subs	r1, r1, r4
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x148>
 8000b1a:	e160      	b.n	8000dde <__aeabi_dadd+0x40a>
 8000b1c:	0034      	movs	r4, r6
 8000b1e:	4648      	mov	r0, r9
 8000b20:	4304      	orrs	r4, r0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x152>
 8000b24:	e1c9      	b.n	8000eba <__aeabi_dadd+0x4e6>
 8000b26:	1e4c      	subs	r4, r1, #1
 8000b28:	2901      	cmp	r1, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x15a>
 8000b2c:	e22e      	b.n	8000f8c <__aeabi_dadd+0x5b8>
 8000b2e:	4d8c      	ldr	r5, [pc, #560]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b30:	42a9      	cmp	r1, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x162>
 8000b34:	e224      	b.n	8000f80 <__aeabi_dadd+0x5ac>
 8000b36:	2701      	movs	r7, #1
 8000b38:	2c38      	cmp	r4, #56	@ 0x38
 8000b3a:	dc11      	bgt.n	8000b60 <__aeabi_dadd+0x18c>
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x170>
 8000b42:	e20b      	b.n	8000f5c <__aeabi_dadd+0x588>
 8000b44:	2420      	movs	r4, #32
 8000b46:	0037      	movs	r7, r6
 8000b48:	4648      	mov	r0, r9
 8000b4a:	1a64      	subs	r4, r4, r1
 8000b4c:	40a7      	lsls	r7, r4
 8000b4e:	40c8      	lsrs	r0, r1
 8000b50:	4307      	orrs	r7, r0
 8000b52:	4648      	mov	r0, r9
 8000b54:	40a0      	lsls	r0, r4
 8000b56:	40ce      	lsrs	r6, r1
 8000b58:	1e44      	subs	r4, r0, #1
 8000b5a:	41a0      	sbcs	r0, r4
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	4307      	orrs	r7, r0
 8000b60:	1bd7      	subs	r7, r2, r7
 8000b62:	42ba      	cmp	r2, r7
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4252      	negs	r2, r2
 8000b68:	4665      	mov	r5, ip
 8000b6a:	4644      	mov	r4, r8
 8000b6c:	1a9e      	subs	r6, r3, r2
 8000b6e:	e783      	b.n	8000a78 <__aeabi_dadd+0xa4>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_dadd+0x1a2>
 8000b74:	e09c      	b.n	8000cb0 <__aeabi_dadd+0x2dc>
 8000b76:	4647      	mov	r7, r8
 8000b78:	2f00      	cmp	r7, #0
 8000b7a:	d167      	bne.n	8000c4c <__aeabi_dadd+0x278>
 8000b7c:	001f      	movs	r7, r3
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x1b0>
 8000b82:	e0e4      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000b84:	1e48      	subs	r0, r1, #1
 8000b86:	2901      	cmp	r1, #1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1b8>
 8000b8a:	e19b      	b.n	8000ec4 <__aeabi_dadd+0x4f0>
 8000b8c:	4f74      	ldr	r7, [pc, #464]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b8e:	42b9      	cmp	r1, r7
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x1c0>
 8000b92:	e0eb      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000b94:	2701      	movs	r7, #1
 8000b96:	0001      	movs	r1, r0
 8000b98:	2838      	cmp	r0, #56	@ 0x38
 8000b9a:	dc11      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000b9c:	291f      	cmp	r1, #31
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x1ce>
 8000ba0:	e1c7      	b.n	8000f32 <__aeabi_dadd+0x55e>
 8000ba2:	2720      	movs	r7, #32
 8000ba4:	1a78      	subs	r0, r7, r1
 8000ba6:	001f      	movs	r7, r3
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4087      	lsls	r7, r0
 8000bac:	0010      	movs	r0, r2
 8000bae:	40c8      	lsrs	r0, r1
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4660      	mov	r0, ip
 8000bb4:	4082      	lsls	r2, r0
 8000bb6:	40cb      	lsrs	r3, r1
 8000bb8:	1e50      	subs	r0, r2, #1
 8000bba:	4182      	sbcs	r2, r0
 8000bbc:	18f6      	adds	r6, r6, r3
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	444f      	add	r7, r9
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	1836      	adds	r6, r6, r0
 8000bca:	0233      	lsls	r3, r6, #8
 8000bcc:	d557      	bpl.n	8000c7e <__aeabi_dadd+0x2aa>
 8000bce:	4b64      	ldr	r3, [pc, #400]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d045      	beq.n	8000c62 <__aeabi_dadd+0x28e>
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4b62      	ldr	r3, [pc, #392]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000bda:	087a      	lsrs	r2, r7, #1
 8000bdc:	401e      	ands	r6, r3
 8000bde:	4039      	ands	r1, r7
 8000be0:	430a      	orrs	r2, r1
 8000be2:	07f7      	lsls	r7, r6, #31
 8000be4:	4317      	orrs	r7, r2
 8000be6:	0876      	lsrs	r6, r6, #1
 8000be8:	e771      	b.n	8000ace <__aeabi_dadd+0xfa>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4317      	orrs	r7, r2
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x21e>
 8000bf0:	e0ad      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000bf2:	1e4f      	subs	r7, r1, #1
 8000bf4:	46bc      	mov	ip, r7
 8000bf6:	2901      	cmp	r1, #1
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x228>
 8000bfa:	e182      	b.n	8000f02 <__aeabi_dadd+0x52e>
 8000bfc:	4f58      	ldr	r7, [pc, #352]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bfe:	42b9      	cmp	r1, r7
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x230>
 8000c02:	e190      	b.n	8000f26 <__aeabi_dadd+0x552>
 8000c04:	4661      	mov	r1, ip
 8000c06:	2701      	movs	r7, #1
 8000c08:	2938      	cmp	r1, #56	@ 0x38
 8000c0a:	dd00      	ble.n	8000c0e <__aeabi_dadd+0x23a>
 8000c0c:	e72e      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000c0e:	e718      	b.n	8000a42 <__aeabi_dadd+0x6e>
 8000c10:	4f55      	ldr	r7, [pc, #340]	@ (8000d68 <__aeabi_dadd+0x394>)
 8000c12:	1c61      	adds	r1, r4, #1
 8000c14:	4239      	tst	r1, r7
 8000c16:	d000      	beq.n	8000c1a <__aeabi_dadd+0x246>
 8000c18:	e0d0      	b.n	8000dbc <__aeabi_dadd+0x3e8>
 8000c1a:	0031      	movs	r1, r6
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	001f      	movs	r7, r3
 8000c20:	4301      	orrs	r1, r0
 8000c22:	4317      	orrs	r7, r2
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x256>
 8000c28:	e13d      	b.n	8000ea6 <__aeabi_dadd+0x4d2>
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x25c>
 8000c2e:	e1bc      	b.n	8000faa <__aeabi_dadd+0x5d6>
 8000c30:	2f00      	cmp	r7, #0
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x262>
 8000c34:	e1bf      	b.n	8000fb6 <__aeabi_dadd+0x5e2>
 8000c36:	464b      	mov	r3, r9
 8000c38:	2100      	movs	r1, #0
 8000c3a:	08d8      	lsrs	r0, r3, #3
 8000c3c:	0777      	lsls	r7, r6, #29
 8000c3e:	4307      	orrs	r7, r0
 8000c40:	08f0      	lsrs	r0, r6, #3
 8000c42:	0306      	lsls	r6, r0, #12
 8000c44:	054c      	lsls	r4, r1, #21
 8000c46:	0b36      	lsrs	r6, r6, #12
 8000c48:	0d64      	lsrs	r4, r4, #21
 8000c4a:	e00c      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000c4c:	4f44      	ldr	r7, [pc, #272]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c4e:	42bc      	cmp	r4, r7
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x280>
 8000c52:	e08b      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000c54:	2701      	movs	r7, #1
 8000c56:	2938      	cmp	r1, #56	@ 0x38
 8000c58:	dcb2      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000c5a:	2780      	movs	r7, #128	@ 0x80
 8000c5c:	043f      	lsls	r7, r7, #16
 8000c5e:	433b      	orrs	r3, r7
 8000c60:	e79c      	b.n	8000b9c <__aeabi_dadd+0x1c8>
 8000c62:	2600      	movs	r6, #0
 8000c64:	2700      	movs	r7, #0
 8000c66:	0524      	lsls	r4, r4, #20
 8000c68:	4334      	orrs	r4, r6
 8000c6a:	07ed      	lsls	r5, r5, #31
 8000c6c:	432c      	orrs	r4, r5
 8000c6e:	0038      	movs	r0, r7
 8000c70:	0021      	movs	r1, r4
 8000c72:	b002      	add	sp, #8
 8000c74:	bce0      	pop	{r5, r6, r7}
 8000c76:	46ba      	mov	sl, r7
 8000c78:	46b1      	mov	r9, r6
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	077b      	lsls	r3, r7, #29
 8000c80:	d004      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c82:	230f      	movs	r3, #15
 8000c84:	403b      	ands	r3, r7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c8a:	e728      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000c8c:	08f8      	lsrs	r0, r7, #3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c90:	0777      	lsls	r7, r6, #29
 8000c92:	4307      	orrs	r7, r0
 8000c94:	08f0      	lsrs	r0, r6, #3
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x2c8>
 8000c9a:	e24a      	b.n	8001132 <__aeabi_dadd+0x75e>
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	d059      	beq.n	8000d56 <__aeabi_dadd+0x382>
 8000ca2:	2680      	movs	r6, #128	@ 0x80
 8000ca4:	0336      	lsls	r6, r6, #12
 8000ca6:	4306      	orrs	r6, r0
 8000ca8:	0336      	lsls	r6, r6, #12
 8000caa:	4c2d      	ldr	r4, [pc, #180]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cac:	0b36      	lsrs	r6, r6, #12
 8000cae:	e7da      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d061      	beq.n	8000d78 <__aeabi_dadd+0x3a4>
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	1b09      	subs	r1, r1, r4
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x2ea>
 8000cbc:	e0b9      	b.n	8000e32 <__aeabi_dadd+0x45e>
 8000cbe:	4c28      	ldr	r4, [pc, #160]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x2f2>
 8000cc4:	e1a5      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	2938      	cmp	r1, #56	@ 0x38
 8000cca:	dc13      	bgt.n	8000cf4 <__aeabi_dadd+0x320>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	0424      	lsls	r4, r4, #16
 8000cd0:	4326      	orrs	r6, r4
 8000cd2:	291f      	cmp	r1, #31
 8000cd4:	dd00      	ble.n	8000cd8 <__aeabi_dadd+0x304>
 8000cd6:	e1c8      	b.n	800106a <__aeabi_dadd+0x696>
 8000cd8:	2420      	movs	r4, #32
 8000cda:	0037      	movs	r7, r6
 8000cdc:	4648      	mov	r0, r9
 8000cde:	1a64      	subs	r4, r4, r1
 8000ce0:	40a7      	lsls	r7, r4
 8000ce2:	40c8      	lsrs	r0, r1
 8000ce4:	4307      	orrs	r7, r0
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	40a0      	lsls	r0, r4
 8000cea:	40ce      	lsrs	r6, r1
 8000cec:	1e44      	subs	r4, r0, #1
 8000cee:	41a0      	sbcs	r0, r4
 8000cf0:	199b      	adds	r3, r3, r6
 8000cf2:	4307      	orrs	r7, r0
 8000cf4:	18bf      	adds	r7, r7, r2
 8000cf6:	4297      	cmp	r7, r2
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	4252      	negs	r2, r2
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	18d6      	adds	r6, r2, r3
 8000d00:	e763      	b.n	8000bca <__aeabi_dadd+0x1f6>
 8000d02:	0038      	movs	r0, r7
 8000d04:	f001 fe4e 	bl	80029a4 <__clzsi2>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dadd+0x33e>
 8000d10:	e6bf      	b.n	8000a92 <__aeabi_dadd+0xbe>
 8000d12:	003a      	movs	r2, r7
 8000d14:	3808      	subs	r0, #8
 8000d16:	4082      	lsls	r2, r0
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_dadd+0x34a>
 8000d1c:	e083      	b.n	8000e26 <__aeabi_dadd+0x452>
 8000d1e:	1b1b      	subs	r3, r3, r4
 8000d20:	1c58      	adds	r0, r3, #1
 8000d22:	281f      	cmp	r0, #31
 8000d24:	dc00      	bgt.n	8000d28 <__aeabi_dadd+0x354>
 8000d26:	e1b4      	b.n	8001092 <__aeabi_dadd+0x6be>
 8000d28:	0017      	movs	r7, r2
 8000d2a:	3b1f      	subs	r3, #31
 8000d2c:	40df      	lsrs	r7, r3
 8000d2e:	2820      	cmp	r0, #32
 8000d30:	d005      	beq.n	8000d3e <__aeabi_dadd+0x36a>
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	1a1b      	subs	r3, r3, r0
 8000d36:	409a      	lsls	r2, r3
 8000d38:	1e53      	subs	r3, r2, #1
 8000d3a:	419a      	sbcs	r2, r3
 8000d3c:	4317      	orrs	r7, r2
 8000d3e:	2400      	movs	r4, #0
 8000d40:	2f00      	cmp	r7, #0
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_dadd+0x386>
 8000d44:	077b      	lsls	r3, r7, #29
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x376>
 8000d48:	e6c4      	b.n	8000ad4 <__aeabi_dadd+0x100>
 8000d4a:	0026      	movs	r6, r4
 8000d4c:	e79e      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	000c      	movs	r4, r1
 8000d52:	08d8      	lsrs	r0, r3, #3
 8000d54:	e79b      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000d56:	2700      	movs	r7, #0
 8000d58:	4c01      	ldr	r4, [pc, #4]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	e783      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff
 8000d68:	000007fe 	.word	0x000007fe
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	0777      	lsls	r7, r6, #29
 8000d70:	08d8      	lsrs	r0, r3, #3
 8000d72:	4307      	orrs	r7, r0
 8000d74:	08f0      	lsrs	r0, r6, #3
 8000d76:	e791      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000d78:	4fcd      	ldr	r7, [pc, #820]	@ (80010b0 <__aeabi_dadd+0x6dc>)
 8000d7a:	1c61      	adds	r1, r4, #1
 8000d7c:	4239      	tst	r1, r7
 8000d7e:	d16b      	bne.n	8000e58 <__aeabi_dadd+0x484>
 8000d80:	0031      	movs	r1, r6
 8000d82:	4648      	mov	r0, r9
 8000d84:	4301      	orrs	r1, r0
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dadd+0x3b8>
 8000d8a:	e14b      	b.n	8001024 <__aeabi_dadd+0x650>
 8000d8c:	001f      	movs	r7, r3
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	2900      	cmp	r1, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x3c2>
 8000d94:	e181      	b.n	800109a <__aeabi_dadd+0x6c6>
 8000d96:	2f00      	cmp	r7, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x3c8>
 8000d9a:	e74c      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000d9c:	444a      	add	r2, r9
 8000d9e:	454a      	cmp	r2, r9
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	18f6      	adds	r6, r6, r3
 8000da4:	4240      	negs	r0, r0
 8000da6:	1836      	adds	r6, r6, r0
 8000da8:	0233      	lsls	r3, r6, #8
 8000daa:	d500      	bpl.n	8000dae <__aeabi_dadd+0x3da>
 8000dac:	e1b0      	b.n	8001110 <__aeabi_dadd+0x73c>
 8000dae:	0017      	movs	r7, r2
 8000db0:	4691      	mov	r9, r2
 8000db2:	4337      	orrs	r7, r6
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dadd+0x3e4>
 8000db6:	e73e      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e754      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	1a89      	subs	r1, r1, r2
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	45c1      	cmp	r9, r8
 8000dc4:	41bf      	sbcs	r7, r7
 8000dc6:	1af1      	subs	r1, r6, r3
 8000dc8:	427f      	negs	r7, r7
 8000dca:	1bc9      	subs	r1, r1, r7
 8000dcc:	020f      	lsls	r7, r1, #8
 8000dce:	d461      	bmi.n	8000e94 <__aeabi_dadd+0x4c0>
 8000dd0:	4647      	mov	r7, r8
 8000dd2:	430f      	orrs	r7, r1
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x404>
 8000dd6:	e0bd      	b.n	8000f54 <__aeabi_dadd+0x580>
 8000dd8:	000e      	movs	r6, r1
 8000dda:	4647      	mov	r7, r8
 8000ddc:	e651      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000dde:	4cb5      	ldr	r4, [pc, #724]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x412>
 8000de4:	e100      	b.n	8000fe8 <__aeabi_dadd+0x614>
 8000de6:	2701      	movs	r7, #1
 8000de8:	2938      	cmp	r1, #56	@ 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x41a>
 8000dec:	e6b8      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000dee:	2480      	movs	r4, #128	@ 0x80
 8000df0:	0424      	lsls	r4, r4, #16
 8000df2:	4326      	orrs	r6, r4
 8000df4:	e6a3      	b.n	8000b3e <__aeabi_dadd+0x16a>
 8000df6:	4eb0      	ldr	r6, [pc, #704]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000df8:	1ae4      	subs	r4, r4, r3
 8000dfa:	4016      	ands	r6, r2
 8000dfc:	077b      	lsls	r3, r7, #29
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x42e>
 8000e00:	e73f      	b.n	8000c82 <__aeabi_dadd+0x2ae>
 8000e02:	e743      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000e04:	000f      	movs	r7, r1
 8000e06:	0018      	movs	r0, r3
 8000e08:	3f20      	subs	r7, #32
 8000e0a:	40f8      	lsrs	r0, r7
 8000e0c:	4684      	mov	ip, r0
 8000e0e:	2920      	cmp	r1, #32
 8000e10:	d003      	beq.n	8000e1a <__aeabi_dadd+0x446>
 8000e12:	2740      	movs	r7, #64	@ 0x40
 8000e14:	1a79      	subs	r1, r7, r1
 8000e16:	408b      	lsls	r3, r1
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	1e53      	subs	r3, r2, #1
 8000e1c:	419a      	sbcs	r2, r3
 8000e1e:	4663      	mov	r3, ip
 8000e20:	0017      	movs	r7, r2
 8000e22:	431f      	orrs	r7, r3
 8000e24:	e622      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000e26:	48a4      	ldr	r0, [pc, #656]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000e28:	1ae1      	subs	r1, r4, r3
 8000e2a:	4010      	ands	r0, r2
 8000e2c:	0747      	lsls	r7, r0, #29
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	e707      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e32:	0034      	movs	r4, r6
 8000e34:	4648      	mov	r0, r9
 8000e36:	4304      	orrs	r4, r0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x468>
 8000e3a:	e0fa      	b.n	8001032 <__aeabi_dadd+0x65e>
 8000e3c:	1e4c      	subs	r4, r1, #1
 8000e3e:	2901      	cmp	r1, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x470>
 8000e42:	e0d7      	b.n	8000ff4 <__aeabi_dadd+0x620>
 8000e44:	4f9b      	ldr	r7, [pc, #620]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x478>
 8000e4a:	e0e2      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000e4c:	2701      	movs	r7, #1
 8000e4e:	2c38      	cmp	r4, #56	@ 0x38
 8000e50:	dd00      	ble.n	8000e54 <__aeabi_dadd+0x480>
 8000e52:	e74f      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8000e54:	0021      	movs	r1, r4
 8000e56:	e73c      	b.n	8000cd2 <__aeabi_dadd+0x2fe>
 8000e58:	4c96      	ldr	r4, [pc, #600]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x48c>
 8000e5e:	e0dd      	b.n	800101c <__aeabi_dadd+0x648>
 8000e60:	444a      	add	r2, r9
 8000e62:	454a      	cmp	r2, r9
 8000e64:	4180      	sbcs	r0, r0
 8000e66:	18f3      	adds	r3, r6, r3
 8000e68:	4240      	negs	r0, r0
 8000e6a:	1818      	adds	r0, r3, r0
 8000e6c:	07c7      	lsls	r7, r0, #31
 8000e6e:	0852      	lsrs	r2, r2, #1
 8000e70:	4317      	orrs	r7, r2
 8000e72:	0846      	lsrs	r6, r0, #1
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	d005      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e78:	220f      	movs	r2, #15
 8000e7a:	000c      	movs	r4, r1
 8000e7c:	403a      	ands	r2, r7
 8000e7e:	2a04      	cmp	r2, #4
 8000e80:	d000      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e82:	e62c      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000e84:	0776      	lsls	r6, r6, #29
 8000e86:	08ff      	lsrs	r7, r7, #3
 8000e88:	4337      	orrs	r7, r6
 8000e8a:	0900      	lsrs	r0, r0, #4
 8000e8c:	e6d9      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e8e:	2700      	movs	r7, #0
 8000e90:	2600      	movs	r6, #0
 8000e92:	e6e8      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000e94:	4649      	mov	r1, r9
 8000e96:	1a57      	subs	r7, r2, r1
 8000e98:	42ba      	cmp	r2, r7
 8000e9a:	4192      	sbcs	r2, r2
 8000e9c:	1b9e      	subs	r6, r3, r6
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	4665      	mov	r5, ip
 8000ea2:	1ab6      	subs	r6, r6, r2
 8000ea4:	e5ed      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d000      	beq.n	8000eac <__aeabi_dadd+0x4d8>
 8000eaa:	e0c6      	b.n	800103a <__aeabi_dadd+0x666>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	d167      	bne.n	8000f80 <__aeabi_dadd+0x5ac>
 8000eb0:	2680      	movs	r6, #128	@ 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4c7f      	ldr	r4, [pc, #508]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000eb6:	0336      	lsls	r6, r6, #12
 8000eb8:	e6d5      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000eba:	4665      	mov	r5, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	001e      	movs	r6, r3
 8000ec0:	08d0      	lsrs	r0, r2, #3
 8000ec2:	e6e4      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000ec4:	444a      	add	r2, r9
 8000ec6:	454a      	cmp	r2, r9
 8000ec8:	4180      	sbcs	r0, r0
 8000eca:	18f3      	adds	r3, r6, r3
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1818      	adds	r0, r3, r0
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0203      	lsls	r3, r0, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x504>
 8000ed6:	e096      	b.n	8001006 <__aeabi_dadd+0x632>
 8000ed8:	4b77      	ldr	r3, [pc, #476]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000eda:	0849      	lsrs	r1, r1, #1
 8000edc:	4018      	ands	r0, r3
 8000ede:	07c3      	lsls	r3, r0, #31
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	0844      	lsrs	r4, r0, #1
 8000ee4:	0749      	lsls	r1, r1, #29
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x516>
 8000ee8:	e129      	b.n	800113e <__aeabi_dadd+0x76a>
 8000eea:	220f      	movs	r2, #15
 8000eec:	401a      	ands	r2, r3
 8000eee:	2a04      	cmp	r2, #4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x520>
 8000ef2:	e0ea      	b.n	80010ca <__aeabi_dadd+0x6f6>
 8000ef4:	1d1f      	adds	r7, r3, #4
 8000ef6:	429f      	cmp	r7, r3
 8000ef8:	41b6      	sbcs	r6, r6
 8000efa:	4276      	negs	r6, r6
 8000efc:	1936      	adds	r6, r6, r4
 8000efe:	2402      	movs	r4, #2
 8000f00:	e6c4      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000f02:	4649      	mov	r1, r9
 8000f04:	1a8f      	subs	r7, r1, r2
 8000f06:	45b9      	cmp	r9, r7
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	1af6      	subs	r6, r6, r3
 8000f0c:	4240      	negs	r0, r0
 8000f0e:	1a36      	subs	r6, r6, r0
 8000f10:	0233      	lsls	r3, r6, #8
 8000f12:	d406      	bmi.n	8000f22 <__aeabi_dadd+0x54e>
 8000f14:	0773      	lsls	r3, r6, #29
 8000f16:	08ff      	lsrs	r7, r7, #3
 8000f18:	2101      	movs	r1, #1
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	08f0      	lsrs	r0, r6, #3
 8000f1e:	e690      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000f20:	4665      	mov	r5, ip
 8000f22:	2401      	movs	r4, #1
 8000f24:	e5ab      	b.n	8000a7e <__aeabi_dadd+0xaa>
 8000f26:	464b      	mov	r3, r9
 8000f28:	0777      	lsls	r7, r6, #29
 8000f2a:	08d8      	lsrs	r0, r3, #3
 8000f2c:	4307      	orrs	r7, r0
 8000f2e:	08f0      	lsrs	r0, r6, #3
 8000f30:	e6b4      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f32:	000f      	movs	r7, r1
 8000f34:	0018      	movs	r0, r3
 8000f36:	3f20      	subs	r7, #32
 8000f38:	40f8      	lsrs	r0, r7
 8000f3a:	4684      	mov	ip, r0
 8000f3c:	2920      	cmp	r1, #32
 8000f3e:	d003      	beq.n	8000f48 <__aeabi_dadd+0x574>
 8000f40:	2740      	movs	r7, #64	@ 0x40
 8000f42:	1a79      	subs	r1, r7, r1
 8000f44:	408b      	lsls	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	1e53      	subs	r3, r2, #1
 8000f4a:	419a      	sbcs	r2, r3
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	0017      	movs	r7, r2
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e635      	b.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000f54:	2500      	movs	r5, #0
 8000f56:	2400      	movs	r4, #0
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e684      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	0035      	movs	r5, r6
 8000f60:	3c20      	subs	r4, #32
 8000f62:	40e5      	lsrs	r5, r4
 8000f64:	2920      	cmp	r1, #32
 8000f66:	d005      	beq.n	8000f74 <__aeabi_dadd+0x5a0>
 8000f68:	2440      	movs	r4, #64	@ 0x40
 8000f6a:	1a61      	subs	r1, r4, r1
 8000f6c:	408e      	lsls	r6, r1
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4331      	orrs	r1, r6
 8000f72:	4689      	mov	r9, r1
 8000f74:	4648      	mov	r0, r9
 8000f76:	1e41      	subs	r1, r0, #1
 8000f78:	4188      	sbcs	r0, r1
 8000f7a:	0007      	movs	r7, r0
 8000f7c:	432f      	orrs	r7, r5
 8000f7e:	e5ef      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000f80:	08d2      	lsrs	r2, r2, #3
 8000f82:	075f      	lsls	r7, r3, #29
 8000f84:	4665      	mov	r5, ip
 8000f86:	4317      	orrs	r7, r2
 8000f88:	08d8      	lsrs	r0, r3, #3
 8000f8a:	e687      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f8c:	1a17      	subs	r7, r2, r0
 8000f8e:	42ba      	cmp	r2, r7
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	1b9e      	subs	r6, r3, r6
 8000f94:	4252      	negs	r2, r2
 8000f96:	1ab6      	subs	r6, r6, r2
 8000f98:	0233      	lsls	r3, r6, #8
 8000f9a:	d4c1      	bmi.n	8000f20 <__aeabi_dadd+0x54c>
 8000f9c:	0773      	lsls	r3, r6, #29
 8000f9e:	08ff      	lsrs	r7, r7, #3
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	08f0      	lsrs	r0, r6, #3
 8000fa8:	e64b      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d07b      	beq.n	80010a6 <__aeabi_dadd+0x6d2>
 8000fae:	4665      	mov	r5, ip
 8000fb0:	001e      	movs	r6, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	e63f      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000fb6:	1a81      	subs	r1, r0, r2
 8000fb8:	4688      	mov	r8, r1
 8000fba:	45c1      	cmp	r9, r8
 8000fbc:	41a4      	sbcs	r4, r4
 8000fbe:	1af1      	subs	r1, r6, r3
 8000fc0:	4264      	negs	r4, r4
 8000fc2:	1b09      	subs	r1, r1, r4
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	0424      	lsls	r4, r4, #16
 8000fc8:	4221      	tst	r1, r4
 8000fca:	d077      	beq.n	80010bc <__aeabi_dadd+0x6e8>
 8000fcc:	1a10      	subs	r0, r2, r0
 8000fce:	4282      	cmp	r2, r0
 8000fd0:	4192      	sbcs	r2, r2
 8000fd2:	0007      	movs	r7, r0
 8000fd4:	1b9e      	subs	r6, r3, r6
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1ab6      	subs	r6, r6, r2
 8000fda:	4337      	orrs	r7, r6
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x60c>
 8000fde:	e0a0      	b.n	8001122 <__aeabi_dadd+0x74e>
 8000fe0:	4665      	mov	r5, ip
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e63e      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000fe8:	075f      	lsls	r7, r3, #29
 8000fea:	08d2      	lsrs	r2, r2, #3
 8000fec:	4665      	mov	r5, ip
 8000fee:	4317      	orrs	r7, r2
 8000ff0:	08d8      	lsrs	r0, r3, #3
 8000ff2:	e653      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000ff4:	1881      	adds	r1, r0, r2
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	4192      	sbcs	r2, r2
 8000ffa:	18f0      	adds	r0, r6, r3
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	1880      	adds	r0, r0, r2
 8001000:	0203      	lsls	r3, r0, #8
 8001002:	d500      	bpl.n	8001006 <__aeabi_dadd+0x632>
 8001004:	e768      	b.n	8000ed8 <__aeabi_dadd+0x504>
 8001006:	0747      	lsls	r7, r0, #29
 8001008:	08c9      	lsrs	r1, r1, #3
 800100a:	430f      	orrs	r7, r1
 800100c:	08c0      	lsrs	r0, r0, #3
 800100e:	2101      	movs	r1, #1
 8001010:	e617      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001012:	08d2      	lsrs	r2, r2, #3
 8001014:	075f      	lsls	r7, r3, #29
 8001016:	4317      	orrs	r7, r2
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	e63f      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800101c:	000c      	movs	r4, r1
 800101e:	2600      	movs	r6, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e620      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001024:	2900      	cmp	r1, #0
 8001026:	d156      	bne.n	80010d6 <__aeabi_dadd+0x702>
 8001028:	075f      	lsls	r7, r3, #29
 800102a:	08d2      	lsrs	r2, r2, #3
 800102c:	4317      	orrs	r7, r2
 800102e:	08d8      	lsrs	r0, r3, #3
 8001030:	e634      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001032:	000c      	movs	r4, r1
 8001034:	001e      	movs	r6, r3
 8001036:	08d0      	lsrs	r0, r2, #3
 8001038:	e629      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 800103a:	08c1      	lsrs	r1, r0, #3
 800103c:	0770      	lsls	r0, r6, #29
 800103e:	4301      	orrs	r1, r0
 8001040:	08f0      	lsrs	r0, r6, #3
 8001042:	2f00      	cmp	r7, #0
 8001044:	d062      	beq.n	800110c <__aeabi_dadd+0x738>
 8001046:	2480      	movs	r4, #128	@ 0x80
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	4220      	tst	r0, r4
 800104c:	d007      	beq.n	800105e <__aeabi_dadd+0x68a>
 800104e:	08de      	lsrs	r6, r3, #3
 8001050:	4226      	tst	r6, r4
 8001052:	d104      	bne.n	800105e <__aeabi_dadd+0x68a>
 8001054:	4665      	mov	r5, ip
 8001056:	0030      	movs	r0, r6
 8001058:	08d1      	lsrs	r1, r2, #3
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4319      	orrs	r1, r3
 800105e:	0f4f      	lsrs	r7, r1, #29
 8001060:	00c9      	lsls	r1, r1, #3
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	077f      	lsls	r7, r7, #29
 8001066:	430f      	orrs	r7, r1
 8001068:	e618      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800106a:	000c      	movs	r4, r1
 800106c:	0030      	movs	r0, r6
 800106e:	3c20      	subs	r4, #32
 8001070:	40e0      	lsrs	r0, r4
 8001072:	4684      	mov	ip, r0
 8001074:	2920      	cmp	r1, #32
 8001076:	d005      	beq.n	8001084 <__aeabi_dadd+0x6b0>
 8001078:	2440      	movs	r4, #64	@ 0x40
 800107a:	1a61      	subs	r1, r4, r1
 800107c:	408e      	lsls	r6, r1
 800107e:	4649      	mov	r1, r9
 8001080:	4331      	orrs	r1, r6
 8001082:	4689      	mov	r9, r1
 8001084:	4648      	mov	r0, r9
 8001086:	1e41      	subs	r1, r0, #1
 8001088:	4188      	sbcs	r0, r1
 800108a:	4661      	mov	r1, ip
 800108c:	0007      	movs	r7, r0
 800108e:	430f      	orrs	r7, r1
 8001090:	e630      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8001092:	2120      	movs	r1, #32
 8001094:	2700      	movs	r7, #0
 8001096:	1a09      	subs	r1, r1, r0
 8001098:	e50e      	b.n	8000ab8 <__aeabi_dadd+0xe4>
 800109a:	001e      	movs	r6, r3
 800109c:	2f00      	cmp	r7, #0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x6ce>
 80010a0:	e522      	b.n	8000ae8 <__aeabi_dadd+0x114>
 80010a2:	2400      	movs	r4, #0
 80010a4:	e758      	b.n	8000f58 <__aeabi_dadd+0x584>
 80010a6:	2500      	movs	r5, #0
 80010a8:	2400      	movs	r4, #0
 80010aa:	2600      	movs	r6, #0
 80010ac:	e5db      	b.n	8000c66 <__aeabi_dadd+0x292>
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	000007fe 	.word	0x000007fe
 80010b4:	000007ff 	.word	0x000007ff
 80010b8:	ff7fffff 	.word	0xff7fffff
 80010bc:	4647      	mov	r7, r8
 80010be:	430f      	orrs	r7, r1
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x6f0>
 80010c2:	e747      	b.n	8000f54 <__aeabi_dadd+0x580>
 80010c4:	000e      	movs	r6, r1
 80010c6:	46c1      	mov	r9, r8
 80010c8:	e5b5      	b.n	8000c36 <__aeabi_dadd+0x262>
 80010ca:	08df      	lsrs	r7, r3, #3
 80010cc:	0764      	lsls	r4, r4, #29
 80010ce:	2102      	movs	r1, #2
 80010d0:	4327      	orrs	r7, r4
 80010d2:	0900      	lsrs	r0, r0, #4
 80010d4:	e5b5      	b.n	8000c42 <__aeabi_dadd+0x26e>
 80010d6:	0019      	movs	r1, r3
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	0777      	lsls	r7, r6, #29
 80010dc:	4307      	orrs	r7, r0
 80010de:	4311      	orrs	r1, r2
 80010e0:	08f0      	lsrs	r0, r6, #3
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x714>
 80010e6:	e5d9      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	0309      	lsls	r1, r1, #12
 80010ec:	4208      	tst	r0, r1
 80010ee:	d007      	beq.n	8001100 <__aeabi_dadd+0x72c>
 80010f0:	08dc      	lsrs	r4, r3, #3
 80010f2:	420c      	tst	r4, r1
 80010f4:	d104      	bne.n	8001100 <__aeabi_dadd+0x72c>
 80010f6:	08d2      	lsrs	r2, r2, #3
 80010f8:	075b      	lsls	r3, r3, #29
 80010fa:	431a      	orrs	r2, r3
 80010fc:	0017      	movs	r7, r2
 80010fe:	0020      	movs	r0, r4
 8001100:	0f7b      	lsrs	r3, r7, #29
 8001102:	00ff      	lsls	r7, r7, #3
 8001104:	08ff      	lsrs	r7, r7, #3
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	431f      	orrs	r7, r3
 800110a:	e5c7      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800110c:	000f      	movs	r7, r1
 800110e:	e5c5      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <__aeabi_dadd+0x788>)
 8001112:	08d2      	lsrs	r2, r2, #3
 8001114:	4033      	ands	r3, r6
 8001116:	075f      	lsls	r7, r3, #29
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	2401      	movs	r4, #1
 800111c:	4317      	orrs	r7, r2
 800111e:	0b1e      	lsrs	r6, r3, #12
 8001120:	e5a1      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001122:	4226      	tst	r6, r4
 8001124:	d012      	beq.n	800114c <__aeabi_dadd+0x778>
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_dadd+0x788>)
 8001128:	4665      	mov	r5, ip
 800112a:	0002      	movs	r2, r0
 800112c:	2401      	movs	r4, #1
 800112e:	401e      	ands	r6, r3
 8001130:	e4e6      	b.n	8000b00 <__aeabi_dadd+0x12c>
 8001132:	0021      	movs	r1, r4
 8001134:	e585      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001136:	0017      	movs	r7, r2
 8001138:	e5a8      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 800113a:	003a      	movs	r2, r7
 800113c:	e4d4      	b.n	8000ae8 <__aeabi_dadd+0x114>
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	0764      	lsls	r4, r4, #29
 8001142:	431c      	orrs	r4, r3
 8001144:	0027      	movs	r7, r4
 8001146:	2102      	movs	r1, #2
 8001148:	0900      	lsrs	r0, r0, #4
 800114a:	e57a      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800114c:	08c0      	lsrs	r0, r0, #3
 800114e:	0777      	lsls	r7, r6, #29
 8001150:	4307      	orrs	r7, r0
 8001152:	4665      	mov	r5, ip
 8001154:	2100      	movs	r1, #0
 8001156:	08f0      	lsrs	r0, r6, #3
 8001158:	e573      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	ff7fffff 	.word	0xff7fffff

08001160 <__aeabi_ddiv>:
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	46de      	mov	lr, fp
 8001164:	4645      	mov	r5, r8
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	b5e0      	push	{r5, r6, r7, lr}
 800116c:	b087      	sub	sp, #28
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	030b      	lsls	r3, r1, #12
 8001174:	0b1b      	lsrs	r3, r3, #12
 8001176:	469b      	mov	fp, r3
 8001178:	0fca      	lsrs	r2, r1, #31
 800117a:	004b      	lsls	r3, r1, #1
 800117c:	0004      	movs	r4, r0
 800117e:	4680      	mov	r8, r0
 8001180:	0d5b      	lsrs	r3, r3, #21
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x28>
 8001186:	e098      	b.n	80012ba <__aeabi_ddiv+0x15a>
 8001188:	4a7c      	ldr	r2, [pc, #496]	@ (800137c <__aeabi_ddiv+0x21c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d037      	beq.n	80011fe <__aeabi_ddiv+0x9e>
 800118e:	4659      	mov	r1, fp
 8001190:	0f42      	lsrs	r2, r0, #29
 8001192:	00c9      	lsls	r1, r1, #3
 8001194:	430a      	orrs	r2, r1
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	0409      	lsls	r1, r1, #16
 800119a:	4311      	orrs	r1, r2
 800119c:	00c2      	lsls	r2, r0, #3
 800119e:	4690      	mov	r8, r2
 80011a0:	4a77      	ldr	r2, [pc, #476]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011a2:	4689      	mov	r9, r1
 80011a4:	4692      	mov	sl, r2
 80011a6:	449a      	add	sl, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	2400      	movs	r4, #0
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	9e00      	ldr	r6, [sp, #0]
 80011b0:	9f01      	ldr	r7, [sp, #4]
 80011b2:	033b      	lsls	r3, r7, #12
 80011b4:	0b1b      	lsrs	r3, r3, #12
 80011b6:	469b      	mov	fp, r3
 80011b8:	007b      	lsls	r3, r7, #1
 80011ba:	0030      	movs	r0, r6
 80011bc:	0d5b      	lsrs	r3, r3, #21
 80011be:	0ffd      	lsrs	r5, r7, #31
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d059      	beq.n	8001278 <__aeabi_ddiv+0x118>
 80011c4:	4a6d      	ldr	r2, [pc, #436]	@ (800137c <__aeabi_ddiv+0x21c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d048      	beq.n	800125c <__aeabi_ddiv+0xfc>
 80011ca:	4659      	mov	r1, fp
 80011cc:	0f72      	lsrs	r2, r6, #29
 80011ce:	00c9      	lsls	r1, r1, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0409      	lsls	r1, r1, #16
 80011d6:	4311      	orrs	r1, r2
 80011d8:	468b      	mov	fp, r1
 80011da:	4969      	ldr	r1, [pc, #420]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011dc:	00f2      	lsls	r2, r6, #3
 80011de:	468c      	mov	ip, r1
 80011e0:	4651      	mov	r1, sl
 80011e2:	4463      	add	r3, ip
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	469a      	mov	sl, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	9e02      	ldr	r6, [sp, #8]
 80011ec:	406e      	eors	r6, r5
 80011ee:	b2f6      	uxtb	r6, r6
 80011f0:	2c0f      	cmp	r4, #15
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x96>
 80011f4:	e0ce      	b.n	8001394 <__aeabi_ddiv+0x234>
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <__aeabi_ddiv+0x224>)
 80011f8:	00a4      	lsls	r4, r4, #2
 80011fa:	591b      	ldr	r3, [r3, r4]
 80011fc:	469f      	mov	pc, r3
 80011fe:	465a      	mov	r2, fp
 8001200:	4302      	orrs	r2, r0
 8001202:	4691      	mov	r9, r2
 8001204:	d000      	beq.n	8001208 <__aeabi_ddiv+0xa8>
 8001206:	e090      	b.n	800132a <__aeabi_ddiv+0x1ca>
 8001208:	469a      	mov	sl, r3
 800120a:	2302      	movs	r3, #2
 800120c:	4690      	mov	r8, r2
 800120e:	2408      	movs	r4, #8
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	e7cc      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001214:	46cb      	mov	fp, r9
 8001216:	4642      	mov	r2, r8
 8001218:	9d02      	ldr	r5, [sp, #8]
 800121a:	9903      	ldr	r1, [sp, #12]
 800121c:	2902      	cmp	r1, #2
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0xc2>
 8001220:	e1de      	b.n	80015e0 <__aeabi_ddiv+0x480>
 8001222:	2903      	cmp	r1, #3
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0xc8>
 8001226:	e08d      	b.n	8001344 <__aeabi_ddiv+0x1e4>
 8001228:	2901      	cmp	r1, #1
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0xce>
 800122c:	e179      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 800122e:	002e      	movs	r6, r5
 8001230:	2200      	movs	r2, #0
 8001232:	2300      	movs	r3, #0
 8001234:	2400      	movs	r4, #0
 8001236:	4690      	mov	r8, r2
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	4323      	orrs	r3, r4
 800123c:	07f6      	lsls	r6, r6, #31
 800123e:	4333      	orrs	r3, r6
 8001240:	4640      	mov	r0, r8
 8001242:	0019      	movs	r1, r3
 8001244:	b007      	add	sp, #28
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	2200      	movs	r2, #0
 8001254:	2400      	movs	r4, #0
 8001256:	4690      	mov	r8, r2
 8001258:	4b48      	ldr	r3, [pc, #288]	@ (800137c <__aeabi_ddiv+0x21c>)
 800125a:	e7ed      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800125c:	465a      	mov	r2, fp
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	431a      	orrs	r2, r3
 8001262:	4b49      	ldr	r3, [pc, #292]	@ (8001388 <__aeabi_ddiv+0x228>)
 8001264:	469c      	mov	ip, r3
 8001266:	44e2      	add	sl, ip
 8001268:	2a00      	cmp	r2, #0
 800126a:	d159      	bne.n	8001320 <__aeabi_ddiv+0x1c0>
 800126c:	2302      	movs	r3, #2
 800126e:	431c      	orrs	r4, r3
 8001270:	2300      	movs	r3, #0
 8001272:	2102      	movs	r1, #2
 8001274:	469b      	mov	fp, r3
 8001276:	e7b8      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001278:	465a      	mov	r2, fp
 800127a:	9b00      	ldr	r3, [sp, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	d049      	beq.n	8001314 <__aeabi_ddiv+0x1b4>
 8001280:	465b      	mov	r3, fp
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x128>
 8001286:	e19c      	b.n	80015c2 <__aeabi_ddiv+0x462>
 8001288:	4658      	mov	r0, fp
 800128a:	f001 fb8b 	bl	80029a4 <__clzsi2>
 800128e:	0002      	movs	r2, r0
 8001290:	0003      	movs	r3, r0
 8001292:	3a0b      	subs	r2, #11
 8001294:	271d      	movs	r7, #29
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	1aba      	subs	r2, r7, r2
 800129a:	0019      	movs	r1, r3
 800129c:	4658      	mov	r0, fp
 800129e:	40d6      	lsrs	r6, r2
 80012a0:	3908      	subs	r1, #8
 80012a2:	4088      	lsls	r0, r1
 80012a4:	0032      	movs	r2, r6
 80012a6:	4302      	orrs	r2, r0
 80012a8:	4693      	mov	fp, r2
 80012aa:	9a00      	ldr	r2, [sp, #0]
 80012ac:	408a      	lsls	r2, r1
 80012ae:	4937      	ldr	r1, [pc, #220]	@ (800138c <__aeabi_ddiv+0x22c>)
 80012b0:	4453      	add	r3, sl
 80012b2:	468a      	mov	sl, r1
 80012b4:	2100      	movs	r1, #0
 80012b6:	449a      	add	sl, r3
 80012b8:	e797      	b.n	80011ea <__aeabi_ddiv+0x8a>
 80012ba:	465b      	mov	r3, fp
 80012bc:	4303      	orrs	r3, r0
 80012be:	4699      	mov	r9, r3
 80012c0:	d021      	beq.n	8001306 <__aeabi_ddiv+0x1a6>
 80012c2:	465b      	mov	r3, fp
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x16a>
 80012c8:	e169      	b.n	800159e <__aeabi_ddiv+0x43e>
 80012ca:	4658      	mov	r0, fp
 80012cc:	f001 fb6a 	bl	80029a4 <__clzsi2>
 80012d0:	230b      	movs	r3, #11
 80012d2:	425b      	negs	r3, r3
 80012d4:	469c      	mov	ip, r3
 80012d6:	0002      	movs	r2, r0
 80012d8:	4484      	add	ip, r0
 80012da:	4666      	mov	r6, ip
 80012dc:	231d      	movs	r3, #29
 80012de:	1b9b      	subs	r3, r3, r6
 80012e0:	0026      	movs	r6, r4
 80012e2:	0011      	movs	r1, r2
 80012e4:	4658      	mov	r0, fp
 80012e6:	40de      	lsrs	r6, r3
 80012e8:	3908      	subs	r1, #8
 80012ea:	4088      	lsls	r0, r1
 80012ec:	0033      	movs	r3, r6
 80012ee:	4303      	orrs	r3, r0
 80012f0:	4699      	mov	r9, r3
 80012f2:	0023      	movs	r3, r4
 80012f4:	408b      	lsls	r3, r1
 80012f6:	4698      	mov	r8, r3
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <__aeabi_ddiv+0x230>)
 80012fa:	2400      	movs	r4, #0
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	469a      	mov	sl, r3
 8001300:	2300      	movs	r3, #0
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	e753      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001306:	2300      	movs	r3, #0
 8001308:	4698      	mov	r8, r3
 800130a:	469a      	mov	sl, r3
 800130c:	3301      	adds	r3, #1
 800130e:	2404      	movs	r4, #4
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	e74c      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001314:	2301      	movs	r3, #1
 8001316:	431c      	orrs	r4, r3
 8001318:	2300      	movs	r3, #0
 800131a:	2101      	movs	r1, #1
 800131c:	469b      	mov	fp, r3
 800131e:	e764      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001320:	2303      	movs	r3, #3
 8001322:	0032      	movs	r2, r6
 8001324:	2103      	movs	r1, #3
 8001326:	431c      	orrs	r4, r3
 8001328:	e75f      	b.n	80011ea <__aeabi_ddiv+0x8a>
 800132a:	469a      	mov	sl, r3
 800132c:	2303      	movs	r3, #3
 800132e:	46d9      	mov	r9, fp
 8001330:	240c      	movs	r4, #12
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	e73b      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001336:	2300      	movs	r3, #0
 8001338:	2480      	movs	r4, #128	@ 0x80
 800133a:	4698      	mov	r8, r3
 800133c:	2600      	movs	r6, #0
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	e779      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001344:	2480      	movs	r4, #128	@ 0x80
 8001346:	465b      	mov	r3, fp
 8001348:	0324      	lsls	r4, r4, #12
 800134a:	431c      	orrs	r4, r3
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	002e      	movs	r6, r5
 8001350:	4690      	mov	r8, r2
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001354:	0b24      	lsrs	r4, r4, #12
 8001356:	e76f      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001358:	2480      	movs	r4, #128	@ 0x80
 800135a:	464b      	mov	r3, r9
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	4223      	tst	r3, r4
 8001360:	d002      	beq.n	8001368 <__aeabi_ddiv+0x208>
 8001362:	465b      	mov	r3, fp
 8001364:	4223      	tst	r3, r4
 8001366:	d0f0      	beq.n	800134a <__aeabi_ddiv+0x1ea>
 8001368:	2480      	movs	r4, #128	@ 0x80
 800136a:	464b      	mov	r3, r9
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	431c      	orrs	r4, r3
 8001370:	0324      	lsls	r4, r4, #12
 8001372:	9e02      	ldr	r6, [sp, #8]
 8001374:	4b01      	ldr	r3, [pc, #4]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	e75e      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	000007ff 	.word	0x000007ff
 8001380:	fffffc01 	.word	0xfffffc01
 8001384:	08008ae4 	.word	0x08008ae4
 8001388:	fffff801 	.word	0xfffff801
 800138c:	000003f3 	.word	0x000003f3
 8001390:	fffffc0d 	.word	0xfffffc0d
 8001394:	45cb      	cmp	fp, r9
 8001396:	d200      	bcs.n	800139a <__aeabi_ddiv+0x23a>
 8001398:	e0f8      	b.n	800158c <__aeabi_ddiv+0x42c>
 800139a:	d100      	bne.n	800139e <__aeabi_ddiv+0x23e>
 800139c:	e0f3      	b.n	8001586 <__aeabi_ddiv+0x426>
 800139e:	2301      	movs	r3, #1
 80013a0:	425b      	negs	r3, r3
 80013a2:	469c      	mov	ip, r3
 80013a4:	4644      	mov	r4, r8
 80013a6:	4648      	mov	r0, r9
 80013a8:	2500      	movs	r5, #0
 80013aa:	44e2      	add	sl, ip
 80013ac:	465b      	mov	r3, fp
 80013ae:	0e17      	lsrs	r7, r2, #24
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	431f      	orrs	r7, r3
 80013b4:	0c19      	lsrs	r1, r3, #16
 80013b6:	043b      	lsls	r3, r7, #16
 80013b8:	0212      	lsls	r2, r2, #8
 80013ba:	9700      	str	r7, [sp, #0]
 80013bc:	0c1f      	lsrs	r7, r3, #16
 80013be:	4691      	mov	r9, r2
 80013c0:	9102      	str	r1, [sp, #8]
 80013c2:	9703      	str	r7, [sp, #12]
 80013c4:	f7fe ff42 	bl	800024c <__aeabi_uidivmod>
 80013c8:	0002      	movs	r2, r0
 80013ca:	437a      	muls	r2, r7
 80013cc:	040b      	lsls	r3, r1, #16
 80013ce:	0c21      	lsrs	r1, r4, #16
 80013d0:	4680      	mov	r8, r0
 80013d2:	4319      	orrs	r1, r3
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d909      	bls.n	80013ec <__aeabi_ddiv+0x28c>
 80013d8:	9f00      	ldr	r7, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	46bc      	mov	ip, r7
 80013de:	425b      	negs	r3, r3
 80013e0:	4461      	add	r1, ip
 80013e2:	469c      	mov	ip, r3
 80013e4:	44e0      	add	r8, ip
 80013e6:	428f      	cmp	r7, r1
 80013e8:	d800      	bhi.n	80013ec <__aeabi_ddiv+0x28c>
 80013ea:	e15c      	b.n	80016a6 <__aeabi_ddiv+0x546>
 80013ec:	1a88      	subs	r0, r1, r2
 80013ee:	9902      	ldr	r1, [sp, #8]
 80013f0:	f7fe ff2c 	bl	800024c <__aeabi_uidivmod>
 80013f4:	9a03      	ldr	r2, [sp, #12]
 80013f6:	0424      	lsls	r4, r4, #16
 80013f8:	4342      	muls	r2, r0
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	0c24      	lsrs	r4, r4, #16
 80013fe:	0003      	movs	r3, r0
 8001400:	430c      	orrs	r4, r1
 8001402:	42a2      	cmp	r2, r4
 8001404:	d906      	bls.n	8001414 <__aeabi_ddiv+0x2b4>
 8001406:	9900      	ldr	r1, [sp, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	468c      	mov	ip, r1
 800140c:	4464      	add	r4, ip
 800140e:	42a1      	cmp	r1, r4
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x2b4>
 8001412:	e142      	b.n	800169a <__aeabi_ddiv+0x53a>
 8001414:	1aa0      	subs	r0, r4, r2
 8001416:	4642      	mov	r2, r8
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	4693      	mov	fp, r2
 800141e:	464b      	mov	r3, r9
 8001420:	4659      	mov	r1, fp
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	001f      	movs	r7, r3
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	040b      	lsls	r3, r1, #16
 800142a:	4649      	mov	r1, r9
 800142c:	0409      	lsls	r1, r1, #16
 800142e:	0c09      	lsrs	r1, r1, #16
 8001430:	000c      	movs	r4, r1
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	435c      	muls	r4, r3
 8001436:	0c12      	lsrs	r2, r2, #16
 8001438:	437b      	muls	r3, r7
 800143a:	4688      	mov	r8, r1
 800143c:	4351      	muls	r1, r2
 800143e:	437a      	muls	r2, r7
 8001440:	0c27      	lsrs	r7, r4, #16
 8001442:	46bc      	mov	ip, r7
 8001444:	185b      	adds	r3, r3, r1
 8001446:	4463      	add	r3, ip
 8001448:	4299      	cmp	r1, r3
 800144a:	d903      	bls.n	8001454 <__aeabi_ddiv+0x2f4>
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	0249      	lsls	r1, r1, #9
 8001450:	468c      	mov	ip, r1
 8001452:	4462      	add	r2, ip
 8001454:	0c19      	lsrs	r1, r3, #16
 8001456:	0424      	lsls	r4, r4, #16
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c24      	lsrs	r4, r4, #16
 800145c:	188a      	adds	r2, r1, r2
 800145e:	191c      	adds	r4, r3, r4
 8001460:	4290      	cmp	r0, r2
 8001462:	d302      	bcc.n	800146a <__aeabi_ddiv+0x30a>
 8001464:	d116      	bne.n	8001494 <__aeabi_ddiv+0x334>
 8001466:	42a5      	cmp	r5, r4
 8001468:	d214      	bcs.n	8001494 <__aeabi_ddiv+0x334>
 800146a:	465b      	mov	r3, fp
 800146c:	9f00      	ldr	r7, [sp, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	444d      	add	r5, r9
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	454d      	cmp	r5, r9
 8001476:	419b      	sbcs	r3, r3
 8001478:	46bc      	mov	ip, r7
 800147a:	425b      	negs	r3, r3
 800147c:	4463      	add	r3, ip
 800147e:	18c0      	adds	r0, r0, r3
 8001480:	4287      	cmp	r7, r0
 8001482:	d300      	bcc.n	8001486 <__aeabi_ddiv+0x326>
 8001484:	e102      	b.n	800168c <__aeabi_ddiv+0x52c>
 8001486:	4282      	cmp	r2, r0
 8001488:	d900      	bls.n	800148c <__aeabi_ddiv+0x32c>
 800148a:	e129      	b.n	80016e0 <__aeabi_ddiv+0x580>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x330>
 800148e:	e124      	b.n	80016da <__aeabi_ddiv+0x57a>
 8001490:	9b05      	ldr	r3, [sp, #20]
 8001492:	469b      	mov	fp, r3
 8001494:	1b2c      	subs	r4, r5, r4
 8001496:	42a5      	cmp	r5, r4
 8001498:	41ad      	sbcs	r5, r5
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	1a80      	subs	r0, r0, r2
 800149e:	426d      	negs	r5, r5
 80014a0:	1b40      	subs	r0, r0, r5
 80014a2:	4283      	cmp	r3, r0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x348>
 80014a6:	e10f      	b.n	80016c8 <__aeabi_ddiv+0x568>
 80014a8:	9902      	ldr	r1, [sp, #8]
 80014aa:	f7fe fecf 	bl	800024c <__aeabi_uidivmod>
 80014ae:	9a03      	ldr	r2, [sp, #12]
 80014b0:	040b      	lsls	r3, r1, #16
 80014b2:	4342      	muls	r2, r0
 80014b4:	0c21      	lsrs	r1, r4, #16
 80014b6:	0005      	movs	r5, r0
 80014b8:	4319      	orrs	r1, r3
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d900      	bls.n	80014c0 <__aeabi_ddiv+0x360>
 80014be:	e0cb      	b.n	8001658 <__aeabi_ddiv+0x4f8>
 80014c0:	1a88      	subs	r0, r1, r2
 80014c2:	9902      	ldr	r1, [sp, #8]
 80014c4:	f7fe fec2 	bl	800024c <__aeabi_uidivmod>
 80014c8:	9a03      	ldr	r2, [sp, #12]
 80014ca:	0424      	lsls	r4, r4, #16
 80014cc:	4342      	muls	r2, r0
 80014ce:	0409      	lsls	r1, r1, #16
 80014d0:	0c24      	lsrs	r4, r4, #16
 80014d2:	0003      	movs	r3, r0
 80014d4:	430c      	orrs	r4, r1
 80014d6:	42a2      	cmp	r2, r4
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x37c>
 80014da:	e0ca      	b.n	8001672 <__aeabi_ddiv+0x512>
 80014dc:	4641      	mov	r1, r8
 80014de:	1aa4      	subs	r4, r4, r2
 80014e0:	042a      	lsls	r2, r5, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	9f04      	ldr	r7, [sp, #16]
 80014e6:	0413      	lsls	r3, r2, #16
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	4359      	muls	r1, r3
 80014ec:	4640      	mov	r0, r8
 80014ee:	437b      	muls	r3, r7
 80014f0:	469c      	mov	ip, r3
 80014f2:	0c15      	lsrs	r5, r2, #16
 80014f4:	4368      	muls	r0, r5
 80014f6:	0c0b      	lsrs	r3, r1, #16
 80014f8:	4484      	add	ip, r0
 80014fa:	4463      	add	r3, ip
 80014fc:	437d      	muls	r5, r7
 80014fe:	4298      	cmp	r0, r3
 8001500:	d903      	bls.n	800150a <__aeabi_ddiv+0x3aa>
 8001502:	2080      	movs	r0, #128	@ 0x80
 8001504:	0240      	lsls	r0, r0, #9
 8001506:	4684      	mov	ip, r0
 8001508:	4465      	add	r5, ip
 800150a:	0c18      	lsrs	r0, r3, #16
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	0c09      	lsrs	r1, r1, #16
 8001512:	1940      	adds	r0, r0, r5
 8001514:	185b      	adds	r3, r3, r1
 8001516:	4284      	cmp	r4, r0
 8001518:	d327      	bcc.n	800156a <__aeabi_ddiv+0x40a>
 800151a:	d023      	beq.n	8001564 <__aeabi_ddiv+0x404>
 800151c:	2301      	movs	r3, #1
 800151e:	0035      	movs	r5, r6
 8001520:	431a      	orrs	r2, r3
 8001522:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <__aeabi_ddiv+0x614>)
 8001524:	4453      	add	r3, sl
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd60      	ble.n	80015ec <__aeabi_ddiv+0x48c>
 800152a:	0751      	lsls	r1, r2, #29
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x3d0>
 800152e:	e086      	b.n	800163e <__aeabi_ddiv+0x4de>
 8001530:	002e      	movs	r6, r5
 8001532:	08d1      	lsrs	r1, r2, #3
 8001534:	465a      	mov	r2, fp
 8001536:	01d2      	lsls	r2, r2, #7
 8001538:	d506      	bpl.n	8001548 <__aeabi_ddiv+0x3e8>
 800153a:	465a      	mov	r2, fp
 800153c:	4b8e      	ldr	r3, [pc, #568]	@ (8001778 <__aeabi_ddiv+0x618>)
 800153e:	401a      	ands	r2, r3
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	4693      	mov	fp, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4453      	add	r3, sl
 8001548:	4a8c      	ldr	r2, [pc, #560]	@ (800177c <__aeabi_ddiv+0x61c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	dd00      	ble.n	8001550 <__aeabi_ddiv+0x3f0>
 800154e:	e680      	b.n	8001252 <__aeabi_ddiv+0xf2>
 8001550:	465a      	mov	r2, fp
 8001552:	0752      	lsls	r2, r2, #29
 8001554:	430a      	orrs	r2, r1
 8001556:	4690      	mov	r8, r2
 8001558:	465a      	mov	r2, fp
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	0254      	lsls	r4, r2, #9
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	e669      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001564:	0035      	movs	r5, r6
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0db      	beq.n	8001522 <__aeabi_ddiv+0x3c2>
 800156a:	9d00      	ldr	r5, [sp, #0]
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	46ac      	mov	ip, r5
 8001570:	4464      	add	r4, ip
 8001572:	42ac      	cmp	r4, r5
 8001574:	d200      	bcs.n	8001578 <__aeabi_ddiv+0x418>
 8001576:	e09e      	b.n	80016b6 <__aeabi_ddiv+0x556>
 8001578:	4284      	cmp	r4, r0
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0x41e>
 800157c:	e0e1      	b.n	8001742 <__aeabi_ddiv+0x5e2>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x422>
 8001580:	e0ee      	b.n	8001760 <__aeabi_ddiv+0x600>
 8001582:	000a      	movs	r2, r1
 8001584:	e7ca      	b.n	800151c <__aeabi_ddiv+0x3bc>
 8001586:	4542      	cmp	r2, r8
 8001588:	d900      	bls.n	800158c <__aeabi_ddiv+0x42c>
 800158a:	e708      	b.n	800139e <__aeabi_ddiv+0x23e>
 800158c:	464b      	mov	r3, r9
 800158e:	07dc      	lsls	r4, r3, #31
 8001590:	0858      	lsrs	r0, r3, #1
 8001592:	4643      	mov	r3, r8
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	431c      	orrs	r4, r3
 8001598:	4643      	mov	r3, r8
 800159a:	07dd      	lsls	r5, r3, #31
 800159c:	e706      	b.n	80013ac <__aeabi_ddiv+0x24c>
 800159e:	f001 fa01 	bl	80029a4 <__clzsi2>
 80015a2:	2315      	movs	r3, #21
 80015a4:	469c      	mov	ip, r3
 80015a6:	4484      	add	ip, r0
 80015a8:	0002      	movs	r2, r0
 80015aa:	4663      	mov	r3, ip
 80015ac:	3220      	adds	r2, #32
 80015ae:	2b1c      	cmp	r3, #28
 80015b0:	dc00      	bgt.n	80015b4 <__aeabi_ddiv+0x454>
 80015b2:	e692      	b.n	80012da <__aeabi_ddiv+0x17a>
 80015b4:	0023      	movs	r3, r4
 80015b6:	3808      	subs	r0, #8
 80015b8:	4083      	lsls	r3, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	4698      	mov	r8, r3
 80015c0:	e69a      	b.n	80012f8 <__aeabi_ddiv+0x198>
 80015c2:	f001 f9ef 	bl	80029a4 <__clzsi2>
 80015c6:	0002      	movs	r2, r0
 80015c8:	0003      	movs	r3, r0
 80015ca:	3215      	adds	r2, #21
 80015cc:	3320      	adds	r3, #32
 80015ce:	2a1c      	cmp	r2, #28
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_ddiv+0x474>
 80015d2:	e65f      	b.n	8001294 <__aeabi_ddiv+0x134>
 80015d4:	9900      	ldr	r1, [sp, #0]
 80015d6:	3808      	subs	r0, #8
 80015d8:	4081      	lsls	r1, r0
 80015da:	2200      	movs	r2, #0
 80015dc:	468b      	mov	fp, r1
 80015de:	e666      	b.n	80012ae <__aeabi_ddiv+0x14e>
 80015e0:	2200      	movs	r2, #0
 80015e2:	002e      	movs	r6, r5
 80015e4:	2400      	movs	r4, #0
 80015e6:	4690      	mov	r8, r2
 80015e8:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <__aeabi_ddiv+0x620>)
 80015ea:	e625      	b.n	8001238 <__aeabi_ddiv+0xd8>
 80015ec:	002e      	movs	r6, r5
 80015ee:	2101      	movs	r1, #1
 80015f0:	1ac9      	subs	r1, r1, r3
 80015f2:	2938      	cmp	r1, #56	@ 0x38
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_ddiv+0x498>
 80015f6:	e61b      	b.n	8001230 <__aeabi_ddiv+0xd0>
 80015f8:	291f      	cmp	r1, #31
 80015fa:	dc7e      	bgt.n	80016fa <__aeabi_ddiv+0x59a>
 80015fc:	4861      	ldr	r0, [pc, #388]	@ (8001784 <__aeabi_ddiv+0x624>)
 80015fe:	0014      	movs	r4, r2
 8001600:	4450      	add	r0, sl
 8001602:	465b      	mov	r3, fp
 8001604:	4082      	lsls	r2, r0
 8001606:	4083      	lsls	r3, r0
 8001608:	40cc      	lsrs	r4, r1
 800160a:	1e50      	subs	r0, r2, #1
 800160c:	4182      	sbcs	r2, r0
 800160e:	4323      	orrs	r3, r4
 8001610:	431a      	orrs	r2, r3
 8001612:	465b      	mov	r3, fp
 8001614:	40cb      	lsrs	r3, r1
 8001616:	0751      	lsls	r1, r2, #29
 8001618:	d009      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 800161a:	210f      	movs	r1, #15
 800161c:	4011      	ands	r1, r2
 800161e:	2904      	cmp	r1, #4
 8001620:	d005      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 8001622:	1d11      	adds	r1, r2, #4
 8001624:	4291      	cmp	r1, r2
 8001626:	4192      	sbcs	r2, r2
 8001628:	4252      	negs	r2, r2
 800162a:	189b      	adds	r3, r3, r2
 800162c:	000a      	movs	r2, r1
 800162e:	0219      	lsls	r1, r3, #8
 8001630:	d400      	bmi.n	8001634 <__aeabi_ddiv+0x4d4>
 8001632:	e09b      	b.n	800176c <__aeabi_ddiv+0x60c>
 8001634:	2200      	movs	r2, #0
 8001636:	2301      	movs	r3, #1
 8001638:	2400      	movs	r4, #0
 800163a:	4690      	mov	r8, r2
 800163c:	e5fc      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800163e:	210f      	movs	r1, #15
 8001640:	4011      	ands	r1, r2
 8001642:	2904      	cmp	r1, #4
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x4e8>
 8001646:	e773      	b.n	8001530 <__aeabi_ddiv+0x3d0>
 8001648:	1d11      	adds	r1, r2, #4
 800164a:	4291      	cmp	r1, r2
 800164c:	4192      	sbcs	r2, r2
 800164e:	4252      	negs	r2, r2
 8001650:	002e      	movs	r6, r5
 8001652:	08c9      	lsrs	r1, r1, #3
 8001654:	4493      	add	fp, r2
 8001656:	e76d      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 8001658:	9b00      	ldr	r3, [sp, #0]
 800165a:	3d01      	subs	r5, #1
 800165c:	469c      	mov	ip, r3
 800165e:	4461      	add	r1, ip
 8001660:	428b      	cmp	r3, r1
 8001662:	d900      	bls.n	8001666 <__aeabi_ddiv+0x506>
 8001664:	e72c      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001666:	428a      	cmp	r2, r1
 8001668:	d800      	bhi.n	800166c <__aeabi_ddiv+0x50c>
 800166a:	e729      	b.n	80014c0 <__aeabi_ddiv+0x360>
 800166c:	1e85      	subs	r5, r0, #2
 800166e:	4461      	add	r1, ip
 8001670:	e726      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001672:	9900      	ldr	r1, [sp, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	468c      	mov	ip, r1
 8001678:	4464      	add	r4, ip
 800167a:	42a1      	cmp	r1, r4
 800167c:	d900      	bls.n	8001680 <__aeabi_ddiv+0x520>
 800167e:	e72d      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001680:	42a2      	cmp	r2, r4
 8001682:	d800      	bhi.n	8001686 <__aeabi_ddiv+0x526>
 8001684:	e72a      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001686:	1e83      	subs	r3, r0, #2
 8001688:	4464      	add	r4, ip
 800168a:	e727      	b.n	80014dc <__aeabi_ddiv+0x37c>
 800168c:	4287      	cmp	r7, r0
 800168e:	d000      	beq.n	8001692 <__aeabi_ddiv+0x532>
 8001690:	e6fe      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001692:	45a9      	cmp	r9, r5
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x538>
 8001696:	e6fb      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001698:	e6f5      	b.n	8001486 <__aeabi_ddiv+0x326>
 800169a:	42a2      	cmp	r2, r4
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x540>
 800169e:	e6b9      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a0:	1e83      	subs	r3, r0, #2
 80016a2:	4464      	add	r4, ip
 80016a4:	e6b6      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a6:	428a      	cmp	r2, r1
 80016a8:	d800      	bhi.n	80016ac <__aeabi_ddiv+0x54c>
 80016aa:	e69f      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016ac:	46bc      	mov	ip, r7
 80016ae:	1e83      	subs	r3, r0, #2
 80016b0:	4698      	mov	r8, r3
 80016b2:	4461      	add	r1, ip
 80016b4:	e69a      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016b6:	000a      	movs	r2, r1
 80016b8:	4284      	cmp	r4, r0
 80016ba:	d000      	beq.n	80016be <__aeabi_ddiv+0x55e>
 80016bc:	e72e      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016be:	454b      	cmp	r3, r9
 80016c0:	d000      	beq.n	80016c4 <__aeabi_ddiv+0x564>
 80016c2:	e72b      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016c4:	0035      	movs	r5, r6
 80016c6:	e72c      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <__aeabi_ddiv+0x614>)
 80016ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001788 <__aeabi_ddiv+0x628>)
 80016cc:	4453      	add	r3, sl
 80016ce:	4592      	cmp	sl, r2
 80016d0:	db43      	blt.n	800175a <__aeabi_ddiv+0x5fa>
 80016d2:	2201      	movs	r2, #1
 80016d4:	2100      	movs	r1, #0
 80016d6:	4493      	add	fp, r2
 80016d8:	e72c      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 80016da:	42ac      	cmp	r4, r5
 80016dc:	d800      	bhi.n	80016e0 <__aeabi_ddiv+0x580>
 80016de:	e6d7      	b.n	8001490 <__aeabi_ddiv+0x330>
 80016e0:	2302      	movs	r3, #2
 80016e2:	425b      	negs	r3, r3
 80016e4:	469c      	mov	ip, r3
 80016e6:	9900      	ldr	r1, [sp, #0]
 80016e8:	444d      	add	r5, r9
 80016ea:	454d      	cmp	r5, r9
 80016ec:	419b      	sbcs	r3, r3
 80016ee:	44e3      	add	fp, ip
 80016f0:	468c      	mov	ip, r1
 80016f2:	425b      	negs	r3, r3
 80016f4:	4463      	add	r3, ip
 80016f6:	18c0      	adds	r0, r0, r3
 80016f8:	e6cc      	b.n	8001494 <__aeabi_ddiv+0x334>
 80016fa:	201f      	movs	r0, #31
 80016fc:	4240      	negs	r0, r0
 80016fe:	1ac3      	subs	r3, r0, r3
 8001700:	4658      	mov	r0, fp
 8001702:	40d8      	lsrs	r0, r3
 8001704:	2920      	cmp	r1, #32
 8001706:	d004      	beq.n	8001712 <__aeabi_ddiv+0x5b2>
 8001708:	4659      	mov	r1, fp
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <__aeabi_ddiv+0x62c>)
 800170c:	4453      	add	r3, sl
 800170e:	4099      	lsls	r1, r3
 8001710:	430a      	orrs	r2, r1
 8001712:	1e53      	subs	r3, r2, #1
 8001714:	419a      	sbcs	r2, r3
 8001716:	2307      	movs	r3, #7
 8001718:	0019      	movs	r1, r3
 800171a:	4302      	orrs	r2, r0
 800171c:	2400      	movs	r4, #0
 800171e:	4011      	ands	r1, r2
 8001720:	4213      	tst	r3, r2
 8001722:	d009      	beq.n	8001738 <__aeabi_ddiv+0x5d8>
 8001724:	3308      	adds	r3, #8
 8001726:	4013      	ands	r3, r2
 8001728:	2b04      	cmp	r3, #4
 800172a:	d01d      	beq.n	8001768 <__aeabi_ddiv+0x608>
 800172c:	1d13      	adds	r3, r2, #4
 800172e:	4293      	cmp	r3, r2
 8001730:	4189      	sbcs	r1, r1
 8001732:	001a      	movs	r2, r3
 8001734:	4249      	negs	r1, r1
 8001736:	0749      	lsls	r1, r1, #29
 8001738:	08d2      	lsrs	r2, r2, #3
 800173a:	430a      	orrs	r2, r1
 800173c:	4690      	mov	r8, r2
 800173e:	2300      	movs	r3, #0
 8001740:	e57a      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001742:	4649      	mov	r1, r9
 8001744:	9f00      	ldr	r7, [sp, #0]
 8001746:	004d      	lsls	r5, r1, #1
 8001748:	454d      	cmp	r5, r9
 800174a:	4189      	sbcs	r1, r1
 800174c:	46bc      	mov	ip, r7
 800174e:	4249      	negs	r1, r1
 8001750:	4461      	add	r1, ip
 8001752:	46a9      	mov	r9, r5
 8001754:	3a02      	subs	r2, #2
 8001756:	1864      	adds	r4, r4, r1
 8001758:	e7ae      	b.n	80016b8 <__aeabi_ddiv+0x558>
 800175a:	2201      	movs	r2, #1
 800175c:	4252      	negs	r2, r2
 800175e:	e746      	b.n	80015ee <__aeabi_ddiv+0x48e>
 8001760:	4599      	cmp	r9, r3
 8001762:	d3ee      	bcc.n	8001742 <__aeabi_ddiv+0x5e2>
 8001764:	000a      	movs	r2, r1
 8001766:	e7aa      	b.n	80016be <__aeabi_ddiv+0x55e>
 8001768:	2100      	movs	r1, #0
 800176a:	e7e5      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 800176c:	0759      	lsls	r1, r3, #29
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	0b1c      	lsrs	r4, r3, #12
 8001772:	e7e1      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 8001774:	000003ff 	.word	0x000003ff
 8001778:	feffffff 	.word	0xfeffffff
 800177c:	000007fe 	.word	0x000007fe
 8001780:	000007ff 	.word	0x000007ff
 8001784:	0000041e 	.word	0x0000041e
 8001788:	fffffc02 	.word	0xfffffc02
 800178c:	0000043e 	.word	0x0000043e

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	000d      	movs	r5, r1
 800179e:	0004      	movs	r4, r0
 80017a0:	0fe8      	lsrs	r0, r5, #31
 80017a2:	4683      	mov	fp, r0
 80017a4:	0309      	lsls	r1, r1, #12
 80017a6:	0fd8      	lsrs	r0, r3, #31
 80017a8:	0b09      	lsrs	r1, r1, #12
 80017aa:	4682      	mov	sl, r0
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <__eqdf2+0x84>)
 80017ae:	468c      	mov	ip, r1
 80017b0:	031f      	lsls	r7, r3, #12
 80017b2:	0069      	lsls	r1, r5, #1
 80017b4:	005e      	lsls	r6, r3, #1
 80017b6:	0d49      	lsrs	r1, r1, #21
 80017b8:	0b3f      	lsrs	r7, r7, #12
 80017ba:	0d76      	lsrs	r6, r6, #21
 80017bc:	4281      	cmp	r1, r0
 80017be:	d018      	beq.n	80017f2 <__eqdf2+0x62>
 80017c0:	4286      	cmp	r6, r0
 80017c2:	d00f      	beq.n	80017e4 <__eqdf2+0x54>
 80017c4:	2001      	movs	r0, #1
 80017c6:	42b1      	cmp	r1, r6
 80017c8:	d10d      	bne.n	80017e6 <__eqdf2+0x56>
 80017ca:	45bc      	cmp	ip, r7
 80017cc:	d10b      	bne.n	80017e6 <__eqdf2+0x56>
 80017ce:	4294      	cmp	r4, r2
 80017d0:	d109      	bne.n	80017e6 <__eqdf2+0x56>
 80017d2:	45d3      	cmp	fp, sl
 80017d4:	d01c      	beq.n	8001810 <__eqdf2+0x80>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d105      	bne.n	80017e6 <__eqdf2+0x56>
 80017da:	4660      	mov	r0, ip
 80017dc:	4320      	orrs	r0, r4
 80017de:	1e43      	subs	r3, r0, #1
 80017e0:	4198      	sbcs	r0, r3
 80017e2:	e000      	b.n	80017e6 <__eqdf2+0x56>
 80017e4:	2001      	movs	r0, #1
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	2001      	movs	r0, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d1f6      	bne.n	80017e6 <__eqdf2+0x56>
 80017f8:	4661      	mov	r1, ip
 80017fa:	4339      	orrs	r1, r7
 80017fc:	000f      	movs	r7, r1
 80017fe:	4317      	orrs	r7, r2
 8001800:	4327      	orrs	r7, r4
 8001802:	d1f0      	bne.n	80017e6 <__eqdf2+0x56>
 8001804:	465b      	mov	r3, fp
 8001806:	4652      	mov	r2, sl
 8001808:	1a98      	subs	r0, r3, r2
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e7ea      	b.n	80017e6 <__eqdf2+0x56>
 8001810:	2000      	movs	r0, #0
 8001812:	e7e8      	b.n	80017e6 <__eqdf2+0x56>
 8001814:	000007ff 	.word	0x000007ff

08001818 <__gedf2>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	000d      	movs	r5, r1
 8001826:	030e      	lsls	r6, r1, #12
 8001828:	0049      	lsls	r1, r1, #1
 800182a:	0d49      	lsrs	r1, r1, #21
 800182c:	468a      	mov	sl, r1
 800182e:	0fdf      	lsrs	r7, r3, #31
 8001830:	0fe9      	lsrs	r1, r5, #31
 8001832:	46bc      	mov	ip, r7
 8001834:	b083      	sub	sp, #12
 8001836:	4f2f      	ldr	r7, [pc, #188]	@ (80018f4 <__gedf2+0xdc>)
 8001838:	0004      	movs	r4, r0
 800183a:	4680      	mov	r8, r0
 800183c:	9101      	str	r1, [sp, #4]
 800183e:	0058      	lsls	r0, r3, #1
 8001840:	0319      	lsls	r1, r3, #12
 8001842:	4691      	mov	r9, r2
 8001844:	0b36      	lsrs	r6, r6, #12
 8001846:	0b09      	lsrs	r1, r1, #12
 8001848:	0d40      	lsrs	r0, r0, #21
 800184a:	45ba      	cmp	sl, r7
 800184c:	d01d      	beq.n	800188a <__gedf2+0x72>
 800184e:	42b8      	cmp	r0, r7
 8001850:	d00d      	beq.n	800186e <__gedf2+0x56>
 8001852:	4657      	mov	r7, sl
 8001854:	2f00      	cmp	r7, #0
 8001856:	d12a      	bne.n	80018ae <__gedf2+0x96>
 8001858:	4334      	orrs	r4, r6
 800185a:	2800      	cmp	r0, #0
 800185c:	d124      	bne.n	80018a8 <__gedf2+0x90>
 800185e:	430a      	orrs	r2, r1
 8001860:	d036      	beq.n	80018d0 <__gedf2+0xb8>
 8001862:	2c00      	cmp	r4, #0
 8001864:	d141      	bne.n	80018ea <__gedf2+0xd2>
 8001866:	4663      	mov	r3, ip
 8001868:	0058      	lsls	r0, r3, #1
 800186a:	3801      	subs	r0, #1
 800186c:	e015      	b.n	800189a <__gedf2+0x82>
 800186e:	4311      	orrs	r1, r2
 8001870:	d138      	bne.n	80018e4 <__gedf2+0xcc>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <__gedf2+0x64>
 8001878:	4326      	orrs	r6, r4
 800187a:	d0f4      	beq.n	8001866 <__gedf2+0x4e>
 800187c:	9b01      	ldr	r3, [sp, #4]
 800187e:	4563      	cmp	r3, ip
 8001880:	d107      	bne.n	8001892 <__gedf2+0x7a>
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	0058      	lsls	r0, r3, #1
 8001886:	3801      	subs	r0, #1
 8001888:	e007      	b.n	800189a <__gedf2+0x82>
 800188a:	4326      	orrs	r6, r4
 800188c:	d12a      	bne.n	80018e4 <__gedf2+0xcc>
 800188e:	4550      	cmp	r0, sl
 8001890:	d021      	beq.n	80018d6 <__gedf2+0xbe>
 8001892:	2001      	movs	r0, #1
 8001894:	9b01      	ldr	r3, [sp, #4]
 8001896:	425f      	negs	r7, r3
 8001898:	4338      	orrs	r0, r7
 800189a:	b003      	add	sp, #12
 800189c:	bcf0      	pop	{r4, r5, r6, r7}
 800189e:	46bb      	mov	fp, r7
 80018a0:	46b2      	mov	sl, r6
 80018a2:	46a9      	mov	r9, r5
 80018a4:	46a0      	mov	r8, r4
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a8:	2c00      	cmp	r4, #0
 80018aa:	d0dc      	beq.n	8001866 <__gedf2+0x4e>
 80018ac:	e7e6      	b.n	800187c <__gedf2+0x64>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d0ef      	beq.n	8001892 <__gedf2+0x7a>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	4563      	cmp	r3, ip
 80018b6:	d1ec      	bne.n	8001892 <__gedf2+0x7a>
 80018b8:	4582      	cmp	sl, r0
 80018ba:	dcea      	bgt.n	8001892 <__gedf2+0x7a>
 80018bc:	dbe1      	blt.n	8001882 <__gedf2+0x6a>
 80018be:	428e      	cmp	r6, r1
 80018c0:	d8e7      	bhi.n	8001892 <__gedf2+0x7a>
 80018c2:	d1de      	bne.n	8001882 <__gedf2+0x6a>
 80018c4:	45c8      	cmp	r8, r9
 80018c6:	d8e4      	bhi.n	8001892 <__gedf2+0x7a>
 80018c8:	2000      	movs	r0, #0
 80018ca:	45c8      	cmp	r8, r9
 80018cc:	d2e5      	bcs.n	800189a <__gedf2+0x82>
 80018ce:	e7d8      	b.n	8001882 <__gedf2+0x6a>
 80018d0:	2c00      	cmp	r4, #0
 80018d2:	d0e2      	beq.n	800189a <__gedf2+0x82>
 80018d4:	e7dd      	b.n	8001892 <__gedf2+0x7a>
 80018d6:	4311      	orrs	r1, r2
 80018d8:	d104      	bne.n	80018e4 <__gedf2+0xcc>
 80018da:	9b01      	ldr	r3, [sp, #4]
 80018dc:	4563      	cmp	r3, ip
 80018de:	d1d8      	bne.n	8001892 <__gedf2+0x7a>
 80018e0:	2000      	movs	r0, #0
 80018e2:	e7da      	b.n	800189a <__gedf2+0x82>
 80018e4:	2002      	movs	r0, #2
 80018e6:	4240      	negs	r0, r0
 80018e8:	e7d7      	b.n	800189a <__gedf2+0x82>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	4563      	cmp	r3, ip
 80018ee:	d0e6      	beq.n	80018be <__gedf2+0xa6>
 80018f0:	e7cf      	b.n	8001892 <__gedf2+0x7a>
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__ledf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4657      	mov	r7, sl
 80018fc:	464e      	mov	r6, r9
 80018fe:	4645      	mov	r5, r8
 8001900:	46de      	mov	lr, fp
 8001902:	b5e0      	push	{r5, r6, r7, lr}
 8001904:	000d      	movs	r5, r1
 8001906:	030e      	lsls	r6, r1, #12
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	0d49      	lsrs	r1, r1, #21
 800190c:	468a      	mov	sl, r1
 800190e:	0fdf      	lsrs	r7, r3, #31
 8001910:	0fe9      	lsrs	r1, r5, #31
 8001912:	46bc      	mov	ip, r7
 8001914:	b083      	sub	sp, #12
 8001916:	4f2e      	ldr	r7, [pc, #184]	@ (80019d0 <__ledf2+0xd8>)
 8001918:	0004      	movs	r4, r0
 800191a:	4680      	mov	r8, r0
 800191c:	9101      	str	r1, [sp, #4]
 800191e:	0058      	lsls	r0, r3, #1
 8001920:	0319      	lsls	r1, r3, #12
 8001922:	4691      	mov	r9, r2
 8001924:	0b36      	lsrs	r6, r6, #12
 8001926:	0b09      	lsrs	r1, r1, #12
 8001928:	0d40      	lsrs	r0, r0, #21
 800192a:	45ba      	cmp	sl, r7
 800192c:	d01e      	beq.n	800196c <__ledf2+0x74>
 800192e:	42b8      	cmp	r0, r7
 8001930:	d00d      	beq.n	800194e <__ledf2+0x56>
 8001932:	4657      	mov	r7, sl
 8001934:	2f00      	cmp	r7, #0
 8001936:	d127      	bne.n	8001988 <__ledf2+0x90>
 8001938:	4334      	orrs	r4, r6
 800193a:	2800      	cmp	r0, #0
 800193c:	d133      	bne.n	80019a6 <__ledf2+0xae>
 800193e:	430a      	orrs	r2, r1
 8001940:	d034      	beq.n	80019ac <__ledf2+0xb4>
 8001942:	2c00      	cmp	r4, #0
 8001944:	d140      	bne.n	80019c8 <__ledf2+0xd0>
 8001946:	4663      	mov	r3, ip
 8001948:	0058      	lsls	r0, r3, #1
 800194a:	3801      	subs	r0, #1
 800194c:	e015      	b.n	800197a <__ledf2+0x82>
 800194e:	4311      	orrs	r1, r2
 8001950:	d112      	bne.n	8001978 <__ledf2+0x80>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <__ledf2+0x64>
 8001958:	4326      	orrs	r6, r4
 800195a:	d0f4      	beq.n	8001946 <__ledf2+0x4e>
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	4563      	cmp	r3, ip
 8001960:	d01d      	beq.n	800199e <__ledf2+0xa6>
 8001962:	2001      	movs	r0, #1
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	425f      	negs	r7, r3
 8001968:	4338      	orrs	r0, r7
 800196a:	e006      	b.n	800197a <__ledf2+0x82>
 800196c:	4326      	orrs	r6, r4
 800196e:	d103      	bne.n	8001978 <__ledf2+0x80>
 8001970:	4550      	cmp	r0, sl
 8001972:	d1f6      	bne.n	8001962 <__ledf2+0x6a>
 8001974:	4311      	orrs	r1, r2
 8001976:	d01c      	beq.n	80019b2 <__ledf2+0xba>
 8001978:	2002      	movs	r0, #2
 800197a:	b003      	add	sp, #12
 800197c:	bcf0      	pop	{r4, r5, r6, r7}
 800197e:	46bb      	mov	fp, r7
 8001980:	46b2      	mov	sl, r6
 8001982:	46a9      	mov	r9, r5
 8001984:	46a0      	mov	r8, r4
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	2800      	cmp	r0, #0
 800198a:	d0ea      	beq.n	8001962 <__ledf2+0x6a>
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	4563      	cmp	r3, ip
 8001990:	d1e7      	bne.n	8001962 <__ledf2+0x6a>
 8001992:	4582      	cmp	sl, r0
 8001994:	dce5      	bgt.n	8001962 <__ledf2+0x6a>
 8001996:	db02      	blt.n	800199e <__ledf2+0xa6>
 8001998:	428e      	cmp	r6, r1
 800199a:	d8e2      	bhi.n	8001962 <__ledf2+0x6a>
 800199c:	d00e      	beq.n	80019bc <__ledf2+0xc4>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	0058      	lsls	r0, r3, #1
 80019a2:	3801      	subs	r0, #1
 80019a4:	e7e9      	b.n	800197a <__ledf2+0x82>
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	d0cd      	beq.n	8001946 <__ledf2+0x4e>
 80019aa:	e7d7      	b.n	800195c <__ledf2+0x64>
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d0e4      	beq.n	800197a <__ledf2+0x82>
 80019b0:	e7d7      	b.n	8001962 <__ledf2+0x6a>
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	2000      	movs	r0, #0
 80019b6:	4563      	cmp	r3, ip
 80019b8:	d0df      	beq.n	800197a <__ledf2+0x82>
 80019ba:	e7d2      	b.n	8001962 <__ledf2+0x6a>
 80019bc:	45c8      	cmp	r8, r9
 80019be:	d8d0      	bhi.n	8001962 <__ledf2+0x6a>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c8      	cmp	r8, r9
 80019c4:	d2d9      	bcs.n	800197a <__ledf2+0x82>
 80019c6:	e7ea      	b.n	800199e <__ledf2+0xa6>
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	4563      	cmp	r3, ip
 80019cc:	d0e4      	beq.n	8001998 <__ledf2+0xa0>
 80019ce:	e7c8      	b.n	8001962 <__ledf2+0x6a>
 80019d0:	000007ff 	.word	0x000007ff

080019d4 <__aeabi_dmul>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	46de      	mov	lr, fp
 80019dc:	4645      	mov	r5, r8
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	001f      	movs	r7, r3
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0b1b      	lsrs	r3, r3, #12
 80019e6:	0016      	movs	r6, r2
 80019e8:	469a      	mov	sl, r3
 80019ea:	0fca      	lsrs	r2, r1, #31
 80019ec:	004b      	lsls	r3, r1, #1
 80019ee:	0004      	movs	r4, r0
 80019f0:	4691      	mov	r9, r2
 80019f2:	b085      	sub	sp, #20
 80019f4:	0d5b      	lsrs	r3, r3, #21
 80019f6:	d100      	bne.n	80019fa <__aeabi_dmul+0x26>
 80019f8:	e1cf      	b.n	8001d9a <__aeabi_dmul+0x3c6>
 80019fa:	4acd      	ldr	r2, [pc, #820]	@ (8001d30 <__aeabi_dmul+0x35c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d055      	beq.n	8001aac <__aeabi_dmul+0xd8>
 8001a00:	4651      	mov	r1, sl
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	430a      	orrs	r2, r1
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	00c2      	lsls	r2, r0, #3
 8001a10:	4690      	mov	r8, r2
 8001a12:	4ac8      	ldr	r2, [pc, #800]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a14:	468a      	mov	sl, r1
 8001a16:	4693      	mov	fp, r2
 8001a18:	449b      	add	fp, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	033c      	lsls	r4, r7, #12
 8001a22:	007b      	lsls	r3, r7, #1
 8001a24:	0ffa      	lsrs	r2, r7, #31
 8001a26:	9601      	str	r6, [sp, #4]
 8001a28:	0b24      	lsrs	r4, r4, #12
 8001a2a:	0d5b      	lsrs	r3, r3, #21
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dmul+0x5e>
 8001a30:	e188      	b.n	8001d44 <__aeabi_dmul+0x370>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x66>
 8001a38:	e092      	b.n	8001b60 <__aeabi_dmul+0x18c>
 8001a3a:	4abe      	ldr	r2, [pc, #760]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a3c:	4694      	mov	ip, r2
 8001a3e:	4463      	add	r3, ip
 8001a40:	449b      	add	fp, r3
 8001a42:	2d0a      	cmp	r5, #10
 8001a44:	dc42      	bgt.n	8001acc <__aeabi_dmul+0xf8>
 8001a46:	00e4      	lsls	r4, r4, #3
 8001a48:	0f73      	lsrs	r3, r6, #29
 8001a4a:	4323      	orrs	r3, r4
 8001a4c:	2480      	movs	r4, #128	@ 0x80
 8001a4e:	4649      	mov	r1, r9
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	431c      	orrs	r4, r3
 8001a54:	00f3      	lsls	r3, r6, #3
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4059      	eors	r1, r3
 8001a5e:	b2cb      	uxtb	r3, r1
 8001a60:	9303      	str	r3, [sp, #12]
 8001a62:	2d02      	cmp	r5, #2
 8001a64:	dc00      	bgt.n	8001a68 <__aeabi_dmul+0x94>
 8001a66:	e094      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	40ab      	lsls	r3, r5
 8001a6c:	001d      	movs	r5, r3
 8001a6e:	23a6      	movs	r3, #166	@ 0xa6
 8001a70:	002a      	movs	r2, r5
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	401a      	ands	r2, r3
 8001a76:	421d      	tst	r5, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0xa8>
 8001a7a:	e229      	b.n	8001ed0 <__aeabi_dmul+0x4fc>
 8001a7c:	2390      	movs	r3, #144	@ 0x90
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	421d      	tst	r5, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xb2>
 8001a84:	e24d      	b.n	8001f22 <__aeabi_dmul+0x54e>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2480      	movs	r4, #128	@ 0x80
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a90:	0010      	movs	r0, r2
 8001a92:	464a      	mov	r2, r9
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	b005      	add	sp, #20
 8001aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa2:	46bb      	mov	fp, r7
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	46a9      	mov	r9, r5
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	4652      	mov	r2, sl
 8001aae:	4302      	orrs	r2, r0
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dmul+0xe2>
 8001ab4:	e1ac      	b.n	8001e10 <__aeabi_dmul+0x43c>
 8001ab6:	469b      	mov	fp, r3
 8001ab8:	2302      	movs	r3, #2
 8001aba:	4692      	mov	sl, r2
 8001abc:	2508      	movs	r5, #8
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e7ae      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	46a2      	mov	sl, r4
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	4698      	mov	r8, r3
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dmul+0x100>
 8001ad2:	e1ca      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x106>
 8001ad8:	e192      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d110      	bne.n	8001b00 <__aeabi_dmul+0x12c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	e7d4      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	403a      	ands	r2, r7
 8001aec:	4313      	orrs	r3, r2
 8001aee:	4652      	mov	r2, sl
 8001af0:	07d2      	lsls	r2, r2, #31
 8001af2:	4313      	orrs	r3, r2
 8001af4:	4698      	mov	r8, r3
 8001af6:	4653      	mov	r3, sl
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	469a      	mov	sl, r3
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	4699      	mov	r9, r3
 8001b00:	465b      	mov	r3, fp
 8001b02:	1c58      	adds	r0, r3, #1
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	445b      	add	r3, fp
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dmul+0x13c>
 8001b0e:	e1b1      	b.n	8001e74 <__aeabi_dmul+0x4a0>
 8001b10:	4642      	mov	r2, r8
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	d00b      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b16:	220f      	movs	r2, #15
 8001b18:	4641      	mov	r1, r8
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	2a04      	cmp	r2, #4
 8001b1e:	d006      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b20:	4642      	mov	r2, r8
 8001b22:	1d11      	adds	r1, r2, #4
 8001b24:	4541      	cmp	r1, r8
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	4688      	mov	r8, r1
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	4492      	add	sl, r2
 8001b2e:	4652      	mov	r2, sl
 8001b30:	01d2      	lsls	r2, r2, #7
 8001b32:	d506      	bpl.n	8001b42 <__aeabi_dmul+0x16e>
 8001b34:	4652      	mov	r2, sl
 8001b36:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <__aeabi_dmul+0x364>)
 8001b38:	401a      	ands	r2, r3
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	4692      	mov	sl, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	18c3      	adds	r3, r0, r3
 8001b42:	4a7e      	ldr	r2, [pc, #504]	@ (8001d3c <__aeabi_dmul+0x368>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dmul+0x176>
 8001b48:	e18f      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	08d1      	lsrs	r1, r2, #3
 8001b4e:	4652      	mov	r2, sl
 8001b50:	0752      	lsls	r2, r2, #29
 8001b52:	430a      	orrs	r2, r1
 8001b54:	4651      	mov	r1, sl
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	024c      	lsls	r4, r1, #9
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	0d5b      	lsrs	r3, r3, #21
 8001b5e:	e797      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001b60:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001b62:	4326      	orrs	r6, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	44e3      	add	fp, ip
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0x19a>
 8001b6c:	e16f      	b.n	8001e4e <__aeabi_dmul+0x47a>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	4649      	mov	r1, r9
 8001b72:	431d      	orrs	r5, r3
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	4059      	eors	r1, r3
 8001b78:	b2cb      	uxtb	r3, r1
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	2d0a      	cmp	r5, #10
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dmul+0x1ae>
 8001b80:	e133      	b.n	8001dea <__aeabi_dmul+0x416>
 8001b82:	2301      	movs	r3, #1
 8001b84:	40ab      	lsls	r3, r5
 8001b86:	001d      	movs	r5, r3
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2288      	movs	r2, #136	@ 0x88
 8001b8e:	422a      	tst	r2, r5
 8001b90:	d197      	bne.n	8001ac2 <__aeabi_dmul+0xee>
 8001b92:	4642      	mov	r2, r8
 8001b94:	4643      	mov	r3, r8
 8001b96:	0412      	lsls	r2, r2, #16
 8001b98:	0c12      	lsrs	r2, r2, #16
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	9801      	ldr	r0, [sp, #4]
 8001b9e:	0c1d      	lsrs	r5, r3, #16
 8001ba0:	0c03      	lsrs	r3, r0, #16
 8001ba2:	0400      	lsls	r0, r0, #16
 8001ba4:	0c00      	lsrs	r0, r0, #16
 8001ba6:	4346      	muls	r6, r0
 8001ba8:	46b4      	mov	ip, r6
 8001baa:	001e      	movs	r6, r3
 8001bac:	436e      	muls	r6, r5
 8001bae:	9600      	str	r6, [sp, #0]
 8001bb0:	0016      	movs	r6, r2
 8001bb2:	0007      	movs	r7, r0
 8001bb4:	435e      	muls	r6, r3
 8001bb6:	4661      	mov	r1, ip
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	436f      	muls	r7, r5
 8001bbc:	0c0e      	lsrs	r6, r1, #16
 8001bbe:	44b8      	add	r8, r7
 8001bc0:	4446      	add	r6, r8
 8001bc2:	42b7      	cmp	r7, r6
 8001bc4:	d905      	bls.n	8001bd2 <__aeabi_dmul+0x1fe>
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	4688      	mov	r8, r1
 8001bcc:	9f00      	ldr	r7, [sp, #0]
 8001bce:	4447      	add	r7, r8
 8001bd0:	9700      	str	r7, [sp, #0]
 8001bd2:	4661      	mov	r1, ip
 8001bd4:	0409      	lsls	r1, r1, #16
 8001bd6:	0c09      	lsrs	r1, r1, #16
 8001bd8:	0c37      	lsrs	r7, r6, #16
 8001bda:	0436      	lsls	r6, r6, #16
 8001bdc:	468c      	mov	ip, r1
 8001bde:	0031      	movs	r1, r6
 8001be0:	4461      	add	r1, ip
 8001be2:	9101      	str	r1, [sp, #4]
 8001be4:	0011      	movs	r1, r2
 8001be6:	0c26      	lsrs	r6, r4, #16
 8001be8:	0424      	lsls	r4, r4, #16
 8001bea:	0c24      	lsrs	r4, r4, #16
 8001bec:	4361      	muls	r1, r4
 8001bee:	468c      	mov	ip, r1
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	4369      	muls	r1, r5
 8001bf4:	4689      	mov	r9, r1
 8001bf6:	4661      	mov	r1, ip
 8001bf8:	0c09      	lsrs	r1, r1, #16
 8001bfa:	4688      	mov	r8, r1
 8001bfc:	4372      	muls	r2, r6
 8001bfe:	444a      	add	r2, r9
 8001c00:	4442      	add	r2, r8
 8001c02:	4375      	muls	r5, r6
 8001c04:	4591      	cmp	r9, r2
 8001c06:	d903      	bls.n	8001c10 <__aeabi_dmul+0x23c>
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0249      	lsls	r1, r1, #9
 8001c0c:	4688      	mov	r8, r1
 8001c0e:	4445      	add	r5, r8
 8001c10:	0c11      	lsrs	r1, r2, #16
 8001c12:	4688      	mov	r8, r1
 8001c14:	4661      	mov	r1, ip
 8001c16:	0409      	lsls	r1, r1, #16
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	468c      	mov	ip, r1
 8001c1c:	0412      	lsls	r2, r2, #16
 8001c1e:	4462      	add	r2, ip
 8001c20:	18b9      	adds	r1, r7, r2
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	4651      	mov	r1, sl
 8001c26:	0c09      	lsrs	r1, r1, #16
 8001c28:	468c      	mov	ip, r1
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	040f      	lsls	r7, r1, #16
 8001c2e:	0c3f      	lsrs	r7, r7, #16
 8001c30:	0039      	movs	r1, r7
 8001c32:	4341      	muls	r1, r0
 8001c34:	4445      	add	r5, r8
 8001c36:	4688      	mov	r8, r1
 8001c38:	4661      	mov	r1, ip
 8001c3a:	4341      	muls	r1, r0
 8001c3c:	468a      	mov	sl, r1
 8001c3e:	4641      	mov	r1, r8
 8001c40:	4660      	mov	r0, ip
 8001c42:	0c09      	lsrs	r1, r1, #16
 8001c44:	4689      	mov	r9, r1
 8001c46:	4358      	muls	r0, r3
 8001c48:	437b      	muls	r3, r7
 8001c4a:	4453      	add	r3, sl
 8001c4c:	444b      	add	r3, r9
 8001c4e:	459a      	cmp	sl, r3
 8001c50:	d903      	bls.n	8001c5a <__aeabi_dmul+0x286>
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	4689      	mov	r9, r1
 8001c58:	4448      	add	r0, r9
 8001c5a:	0c19      	lsrs	r1, r3, #16
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	4641      	mov	r1, r8
 8001c60:	0409      	lsls	r1, r1, #16
 8001c62:	0c09      	lsrs	r1, r1, #16
 8001c64:	4688      	mov	r8, r1
 8001c66:	0039      	movs	r1, r7
 8001c68:	4361      	muls	r1, r4
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	4443      	add	r3, r8
 8001c6e:	4688      	mov	r8, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	434c      	muls	r4, r1
 8001c74:	4371      	muls	r1, r6
 8001c76:	468c      	mov	ip, r1
 8001c78:	4641      	mov	r1, r8
 8001c7a:	4377      	muls	r7, r6
 8001c7c:	0c0e      	lsrs	r6, r1, #16
 8001c7e:	193f      	adds	r7, r7, r4
 8001c80:	19f6      	adds	r6, r6, r7
 8001c82:	4448      	add	r0, r9
 8001c84:	42b4      	cmp	r4, r6
 8001c86:	d903      	bls.n	8001c90 <__aeabi_dmul+0x2bc>
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	44cc      	add	ip, r9
 8001c90:	9902      	ldr	r1, [sp, #8]
 8001c92:	9f00      	ldr	r7, [sp, #0]
 8001c94:	4689      	mov	r9, r1
 8001c96:	0431      	lsls	r1, r6, #16
 8001c98:	444f      	add	r7, r9
 8001c9a:	4689      	mov	r9, r1
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	4297      	cmp	r7, r2
 8001ca0:	4192      	sbcs	r2, r2
 8001ca2:	040c      	lsls	r4, r1, #16
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	444c      	add	r4, r9
 8001ca8:	18ff      	adds	r7, r7, r3
 8001caa:	4252      	negs	r2, r2
 8001cac:	1964      	adds	r4, r4, r5
 8001cae:	18a1      	adds	r1, r4, r2
 8001cb0:	429f      	cmp	r7, r3
 8001cb2:	419b      	sbcs	r3, r3
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	425b      	negs	r3, r3
 8001cba:	4699      	mov	r9, r3
 8001cbc:	4590      	cmp	r8, r2
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	42ac      	cmp	r4, r5
 8001cc2:	41a4      	sbcs	r4, r4
 8001cc4:	44c2      	add	sl, r8
 8001cc6:	44d1      	add	r9, sl
 8001cc8:	4252      	negs	r2, r2
 8001cca:	4264      	negs	r4, r4
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	4599      	cmp	r9, r3
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	4582      	cmp	sl, r0
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	4252      	negs	r2, r2
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	464a      	mov	r2, r9
 8001cde:	0c36      	lsrs	r6, r6, #16
 8001ce0:	19a4      	adds	r4, r4, r6
 8001ce2:	18e3      	adds	r3, r4, r3
 8001ce4:	4463      	add	r3, ip
 8001ce6:	025b      	lsls	r3, r3, #9
 8001ce8:	0dd2      	lsrs	r2, r2, #23
 8001cea:	431a      	orrs	r2, r3
 8001cec:	9901      	ldr	r1, [sp, #4]
 8001cee:	4692      	mov	sl, r2
 8001cf0:	027a      	lsls	r2, r7, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	1e50      	subs	r0, r2, #1
 8001cf6:	4182      	sbcs	r2, r0
 8001cf8:	0dff      	lsrs	r7, r7, #23
 8001cfa:	4317      	orrs	r7, r2
 8001cfc:	464a      	mov	r2, r9
 8001cfe:	0252      	lsls	r2, r2, #9
 8001d00:	4317      	orrs	r7, r2
 8001d02:	46b8      	mov	r8, r7
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	d500      	bpl.n	8001d0a <__aeabi_dmul+0x336>
 8001d08:	e6ed      	b.n	8001ae6 <__aeabi_dmul+0x112>
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <__aeabi_dmul+0x36c>)
 8001d0c:	9a03      	ldr	r2, [sp, #12]
 8001d0e:	445b      	add	r3, fp
 8001d10:	4691      	mov	r9, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dc00      	bgt.n	8001d18 <__aeabi_dmul+0x344>
 8001d16:	e0ac      	b.n	8001e72 <__aeabi_dmul+0x49e>
 8001d18:	003a      	movs	r2, r7
 8001d1a:	0752      	lsls	r2, r2, #29
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dmul+0x34c>
 8001d1e:	e710      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d20:	220f      	movs	r2, #15
 8001d22:	4658      	mov	r0, fp
 8001d24:	403a      	ands	r2, r7
 8001d26:	2a04      	cmp	r2, #4
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dmul+0x358>
 8001d2a:	e6f9      	b.n	8001b20 <__aeabi_dmul+0x14c>
 8001d2c:	e709      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	fffffc01 	.word	0xfffffc01
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	000003ff 	.word	0x000003ff
 8001d44:	0022      	movs	r2, r4
 8001d46:	4332      	orrs	r2, r6
 8001d48:	d06f      	beq.n	8001e2a <__aeabi_dmul+0x456>
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dmul+0x37c>
 8001d4e:	e0c2      	b.n	8001ed6 <__aeabi_dmul+0x502>
 8001d50:	0020      	movs	r0, r4
 8001d52:	f000 fe27 	bl	80029a4 <__clzsi2>
 8001d56:	0002      	movs	r2, r0
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3a0b      	subs	r2, #11
 8001d5c:	201d      	movs	r0, #29
 8001d5e:	1a82      	subs	r2, r0, r2
 8001d60:	0030      	movs	r0, r6
 8001d62:	0019      	movs	r1, r3
 8001d64:	40d0      	lsrs	r0, r2
 8001d66:	3908      	subs	r1, #8
 8001d68:	408c      	lsls	r4, r1
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	0034      	movs	r4, r6
 8001d70:	408c      	lsls	r4, r1
 8001d72:	4659      	mov	r1, fp
 8001d74:	1acb      	subs	r3, r1, r3
 8001d76:	4986      	ldr	r1, [pc, #536]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001d78:	468b      	mov	fp, r1
 8001d7a:	449b      	add	fp, r3
 8001d7c:	2d0a      	cmp	r5, #10
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x3ae>
 8001d80:	e6a4      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001d82:	4649      	mov	r1, r9
 8001d84:	9b00      	ldr	r3, [sp, #0]
 8001d86:	9401      	str	r4, [sp, #4]
 8001d88:	4059      	eors	r1, r3
 8001d8a:	b2cb      	uxtb	r3, r1
 8001d8c:	0014      	movs	r4, r2
 8001d8e:	2000      	movs	r0, #0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2d02      	cmp	r5, #2
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3c4>
 8001d96:	e667      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001d98:	e6fb      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	d03c      	beq.n	8001e1c <__aeabi_dmul+0x448>
 8001da2:	4653      	mov	r3, sl
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x3d6>
 8001da8:	e0a3      	b.n	8001ef2 <__aeabi_dmul+0x51e>
 8001daa:	4650      	mov	r0, sl
 8001dac:	f000 fdfa 	bl	80029a4 <__clzsi2>
 8001db0:	230b      	movs	r3, #11
 8001db2:	425b      	negs	r3, r3
 8001db4:	469c      	mov	ip, r3
 8001db6:	0002      	movs	r2, r0
 8001db8:	4484      	add	ip, r0
 8001dba:	0011      	movs	r1, r2
 8001dbc:	4650      	mov	r0, sl
 8001dbe:	3908      	subs	r1, #8
 8001dc0:	4088      	lsls	r0, r1
 8001dc2:	231d      	movs	r3, #29
 8001dc4:	4680      	mov	r8, r0
 8001dc6:	4660      	mov	r0, ip
 8001dc8:	1a1b      	subs	r3, r3, r0
 8001dca:	0020      	movs	r0, r4
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	0003      	movs	r3, r0
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	408b      	lsls	r3, r1
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001dde:	2500      	movs	r5, #0
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	e61a      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001dea:	2d0f      	cmp	r5, #15
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dmul+0x41c>
 8001dee:	e0c9      	b.n	8001f84 <__aeabi_dmul+0x5b0>
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	4652      	mov	r2, sl
 8001df4:	031b      	lsls	r3, r3, #12
 8001df6:	421a      	tst	r2, r3
 8001df8:	d002      	beq.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfa:	421c      	tst	r4, r3
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfe:	e092      	b.n	8001f26 <__aeabi_dmul+0x552>
 8001e00:	2480      	movs	r4, #128	@ 0x80
 8001e02:	4653      	mov	r3, sl
 8001e04:	0324      	lsls	r4, r4, #12
 8001e06:	431c      	orrs	r4, r3
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	4642      	mov	r2, r8
 8001e0c:	0b24      	lsrs	r4, r4, #12
 8001e0e:	e63e      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001e10:	469b      	mov	fp, r3
 8001e12:	2303      	movs	r3, #3
 8001e14:	4680      	mov	r8, r0
 8001e16:	250c      	movs	r5, #12
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	e601      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	469a      	mov	sl, r3
 8001e20:	469b      	mov	fp, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	2504      	movs	r5, #4
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	e5fa      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430d      	orrs	r5, r1
 8001e2e:	2d0a      	cmp	r5, #10
 8001e30:	dd00      	ble.n	8001e34 <__aeabi_dmul+0x460>
 8001e32:	e64b      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e34:	4649      	mov	r1, r9
 8001e36:	9800      	ldr	r0, [sp, #0]
 8001e38:	4041      	eors	r1, r0
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	9103      	str	r1, [sp, #12]
 8001e3e:	2d02      	cmp	r5, #2
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x470>
 8001e42:	e096      	b.n	8001f72 <__aeabi_dmul+0x59e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2400      	movs	r4, #0
 8001e48:	2001      	movs	r0, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	e60c      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001e4e:	4649      	mov	r1, r9
 8001e50:	2302      	movs	r3, #2
 8001e52:	9a00      	ldr	r2, [sp, #0]
 8001e54:	432b      	orrs	r3, r5
 8001e56:	4051      	eors	r1, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	9203      	str	r2, [sp, #12]
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dmul+0x48e>
 8001e60:	e634      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d157      	bne.n	8001f16 <__aeabi_dmul+0x542>
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	4699      	mov	r9, r3
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <__aeabi_dmul+0x5c0>)
 8001e70:	e60e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001e72:	4658      	mov	r0, fp
 8001e74:	2101      	movs	r1, #1
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	2938      	cmp	r1, #56	@ 0x38
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dmul+0x4aa>
 8001e7c:	e62f      	b.n	8001ade <__aeabi_dmul+0x10a>
 8001e7e:	291f      	cmp	r1, #31
 8001e80:	dd56      	ble.n	8001f30 <__aeabi_dmul+0x55c>
 8001e82:	221f      	movs	r2, #31
 8001e84:	4654      	mov	r4, sl
 8001e86:	4252      	negs	r2, r2
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	40dc      	lsrs	r4, r3
 8001e8c:	2920      	cmp	r1, #32
 8001e8e:	d007      	beq.n	8001ea0 <__aeabi_dmul+0x4cc>
 8001e90:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <__aeabi_dmul+0x5c4>)
 8001e92:	4642      	mov	r2, r8
 8001e94:	469c      	mov	ip, r3
 8001e96:	4653      	mov	r3, sl
 8001e98:	4460      	add	r0, ip
 8001e9a:	4083      	lsls	r3, r0
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	2107      	movs	r1, #7
 8001ea4:	1e53      	subs	r3, r2, #1
 8001ea6:	419a      	sbcs	r2, r3
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4013      	ands	r3, r2
 8001eae:	2400      	movs	r4, #0
 8001eb0:	4211      	tst	r1, r2
 8001eb2:	d009      	beq.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d05d      	beq.n	8001f78 <__aeabi_dmul+0x5a4>
 8001ebc:	1d11      	adds	r1, r2, #4
 8001ebe:	4291      	cmp	r1, r2
 8001ec0:	419b      	sbcs	r3, r3
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	075b      	lsls	r3, r3, #29
 8001ec8:	08d2      	lsrs	r2, r2, #3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e5df      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	e5fa      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001ed6:	9801      	ldr	r0, [sp, #4]
 8001ed8:	f000 fd64 	bl	80029a4 <__clzsi2>
 8001edc:	0002      	movs	r2, r0
 8001ede:	0003      	movs	r3, r0
 8001ee0:	3215      	adds	r2, #21
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2a1c      	cmp	r2, #28
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dmul+0x516>
 8001ee8:	e738      	b.n	8001d5c <__aeabi_dmul+0x388>
 8001eea:	9a01      	ldr	r2, [sp, #4]
 8001eec:	3808      	subs	r0, #8
 8001eee:	4082      	lsls	r2, r0
 8001ef0:	e73f      	b.n	8001d72 <__aeabi_dmul+0x39e>
 8001ef2:	f000 fd57 	bl	80029a4 <__clzsi2>
 8001ef6:	2315      	movs	r3, #21
 8001ef8:	469c      	mov	ip, r3
 8001efa:	4484      	add	ip, r0
 8001efc:	0002      	movs	r2, r0
 8001efe:	4663      	mov	r3, ip
 8001f00:	3220      	adds	r2, #32
 8001f02:	2b1c      	cmp	r3, #28
 8001f04:	dc00      	bgt.n	8001f08 <__aeabi_dmul+0x534>
 8001f06:	e758      	b.n	8001dba <__aeabi_dmul+0x3e6>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	0023      	movs	r3, r4
 8001f0e:	3808      	subs	r0, #8
 8001f10:	4083      	lsls	r3, r0
 8001f12:	469a      	mov	sl, r3
 8001f14:	e762      	b.n	8001ddc <__aeabi_dmul+0x408>
 8001f16:	001d      	movs	r5, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	e5a2      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001f22:	9002      	str	r0, [sp, #8]
 8001f24:	e632      	b.n	8001b8c <__aeabi_dmul+0x1b8>
 8001f26:	431c      	orrs	r4, r3
 8001f28:	9b00      	ldr	r3, [sp, #0]
 8001f2a:	9a01      	ldr	r2, [sp, #4]
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	e5ae      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <__aeabi_dmul+0x5c8>)
 8001f32:	4652      	mov	r2, sl
 8001f34:	18c3      	adds	r3, r0, r3
 8001f36:	4640      	mov	r0, r8
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	40c8      	lsrs	r0, r1
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4098      	lsls	r0, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	4183      	sbcs	r3, r0
 8001f48:	4654      	mov	r4, sl
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	40cc      	lsrs	r4, r1
 8001f4e:	0753      	lsls	r3, r2, #29
 8001f50:	d009      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f52:	230f      	movs	r3, #15
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d005      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f5a:	1d13      	adds	r3, r2, #4
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	4192      	sbcs	r2, r2
 8001f60:	4252      	negs	r2, r2
 8001f62:	18a4      	adds	r4, r4, r2
 8001f64:	001a      	movs	r2, r3
 8001f66:	0223      	lsls	r3, r4, #8
 8001f68:	d508      	bpl.n	8001f7c <__aeabi_dmul+0x5a8>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	e58e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f72:	4689      	mov	r9, r1
 8001f74:	2400      	movs	r4, #0
 8001f76:	e58b      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e7a5      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f7c:	0763      	lsls	r3, r4, #29
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e7a1      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f84:	9b00      	ldr	r3, [sp, #0]
 8001f86:	46a2      	mov	sl, r4
 8001f88:	4699      	mov	r9, r3
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	e737      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001f90:	fffffc0d 	.word	0xfffffc0d
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000043e 	.word	0x0000043e
 8001f9c:	0000041e 	.word	0x0000041e

08001fa0 <__aeabi_dsub>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	464e      	mov	r6, r9
 8001fa6:	4645      	mov	r5, r8
 8001fa8:	46de      	mov	lr, fp
 8001faa:	b5e0      	push	{r5, r6, r7, lr}
 8001fac:	b083      	sub	sp, #12
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	9101      	str	r1, [sp, #4]
 8001fb2:	030c      	lsls	r4, r1, #12
 8001fb4:	004d      	lsls	r5, r1, #1
 8001fb6:	0fce      	lsrs	r6, r1, #31
 8001fb8:	0a61      	lsrs	r1, r4, #9
 8001fba:	9c00      	ldr	r4, [sp, #0]
 8001fbc:	005f      	lsls	r7, r3, #1
 8001fbe:	0f64      	lsrs	r4, r4, #29
 8001fc0:	430c      	orrs	r4, r1
 8001fc2:	9900      	ldr	r1, [sp, #0]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	00c8      	lsls	r0, r1, #3
 8001fca:	0319      	lsls	r1, r3, #12
 8001fcc:	0d7b      	lsrs	r3, r7, #21
 8001fce:	4699      	mov	r9, r3
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	4fcc      	ldr	r7, [pc, #816]	@ (8002304 <__aeabi_dsub+0x364>)
 8001fd4:	0fdb      	lsrs	r3, r3, #31
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	0a4b      	lsrs	r3, r1, #9
 8001fda:	9900      	ldr	r1, [sp, #0]
 8001fdc:	4680      	mov	r8, r0
 8001fde:	0f49      	lsrs	r1, r1, #29
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	9b00      	ldr	r3, [sp, #0]
 8001fe4:	468b      	mov	fp, r1
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	4692      	mov	sl, r2
 8001fea:	0d6d      	lsrs	r5, r5, #21
 8001fec:	45b9      	cmp	r9, r7
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x52>
 8001ff0:	e0bf      	b.n	8002172 <__aeabi_dsub+0x1d2>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4661      	mov	r1, ip
 8001ff6:	4059      	eors	r1, r3
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	1aeb      	subs	r3, r5, r3
 8001ffe:	428e      	cmp	r6, r1
 8002000:	d075      	beq.n	80020ee <__aeabi_dsub+0x14e>
 8002002:	2b00      	cmp	r3, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x68>
 8002006:	e2a3      	b.n	8002550 <__aeabi_dsub+0x5b0>
 8002008:	4649      	mov	r1, r9
 800200a:	2900      	cmp	r1, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x70>
 800200e:	e0ce      	b.n	80021ae <__aeabi_dsub+0x20e>
 8002010:	42bd      	cmp	r5, r7
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x76>
 8002014:	e200      	b.n	8002418 <__aeabi_dsub+0x478>
 8002016:	2701      	movs	r7, #1
 8002018:	2b38      	cmp	r3, #56	@ 0x38
 800201a:	dc19      	bgt.n	8002050 <__aeabi_dsub+0xb0>
 800201c:	2780      	movs	r7, #128	@ 0x80
 800201e:	4659      	mov	r1, fp
 8002020:	043f      	lsls	r7, r7, #16
 8002022:	4339      	orrs	r1, r7
 8002024:	468b      	mov	fp, r1
 8002026:	2b1f      	cmp	r3, #31
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x8c>
 800202a:	e1fa      	b.n	8002422 <__aeabi_dsub+0x482>
 800202c:	2720      	movs	r7, #32
 800202e:	1af9      	subs	r1, r7, r3
 8002030:	468c      	mov	ip, r1
 8002032:	4659      	mov	r1, fp
 8002034:	4667      	mov	r7, ip
 8002036:	40b9      	lsls	r1, r7
 8002038:	000f      	movs	r7, r1
 800203a:	0011      	movs	r1, r2
 800203c:	40d9      	lsrs	r1, r3
 800203e:	430f      	orrs	r7, r1
 8002040:	4661      	mov	r1, ip
 8002042:	408a      	lsls	r2, r1
 8002044:	1e51      	subs	r1, r2, #1
 8002046:	418a      	sbcs	r2, r1
 8002048:	4659      	mov	r1, fp
 800204a:	40d9      	lsrs	r1, r3
 800204c:	4317      	orrs	r7, r2
 800204e:	1a64      	subs	r4, r4, r1
 8002050:	1bc7      	subs	r7, r0, r7
 8002052:	42b8      	cmp	r0, r7
 8002054:	4180      	sbcs	r0, r0
 8002056:	4240      	negs	r0, r0
 8002058:	1a24      	subs	r4, r4, r0
 800205a:	0223      	lsls	r3, r4, #8
 800205c:	d400      	bmi.n	8002060 <__aeabi_dsub+0xc0>
 800205e:	e140      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002060:	0264      	lsls	r4, r4, #9
 8002062:	0a64      	lsrs	r4, r4, #9
 8002064:	2c00      	cmp	r4, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0xca>
 8002068:	e154      	b.n	8002314 <__aeabi_dsub+0x374>
 800206a:	0020      	movs	r0, r4
 800206c:	f000 fc9a 	bl	80029a4 <__clzsi2>
 8002070:	0003      	movs	r3, r0
 8002072:	3b08      	subs	r3, #8
 8002074:	2120      	movs	r1, #32
 8002076:	0038      	movs	r0, r7
 8002078:	1aca      	subs	r2, r1, r3
 800207a:	40d0      	lsrs	r0, r2
 800207c:	409c      	lsls	r4, r3
 800207e:	0002      	movs	r2, r0
 8002080:	409f      	lsls	r7, r3
 8002082:	4322      	orrs	r2, r4
 8002084:	429d      	cmp	r5, r3
 8002086:	dd00      	ble.n	800208a <__aeabi_dsub+0xea>
 8002088:	e1a6      	b.n	80023d8 <__aeabi_dsub+0x438>
 800208a:	1b58      	subs	r0, r3, r5
 800208c:	3001      	adds	r0, #1
 800208e:	1a09      	subs	r1, r1, r0
 8002090:	003c      	movs	r4, r7
 8002092:	408f      	lsls	r7, r1
 8002094:	40c4      	lsrs	r4, r0
 8002096:	1e7b      	subs	r3, r7, #1
 8002098:	419f      	sbcs	r7, r3
 800209a:	0013      	movs	r3, r2
 800209c:	408b      	lsls	r3, r1
 800209e:	4327      	orrs	r7, r4
 80020a0:	431f      	orrs	r7, r3
 80020a2:	40c2      	lsrs	r2, r0
 80020a4:	003b      	movs	r3, r7
 80020a6:	0014      	movs	r4, r2
 80020a8:	2500      	movs	r5, #0
 80020aa:	4313      	orrs	r3, r2
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x110>
 80020ae:	e1f7      	b.n	80024a0 <__aeabi_dsub+0x500>
 80020b0:	077b      	lsls	r3, r7, #29
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x116>
 80020b4:	e377      	b.n	80027a6 <__aeabi_dsub+0x806>
 80020b6:	230f      	movs	r3, #15
 80020b8:	0038      	movs	r0, r7
 80020ba:	403b      	ands	r3, r7
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d004      	beq.n	80020ca <__aeabi_dsub+0x12a>
 80020c0:	1d38      	adds	r0, r7, #4
 80020c2:	42b8      	cmp	r0, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	427f      	negs	r7, r7
 80020c8:	19e4      	adds	r4, r4, r7
 80020ca:	0223      	lsls	r3, r4, #8
 80020cc:	d400      	bmi.n	80020d0 <__aeabi_dsub+0x130>
 80020ce:	e368      	b.n	80027a2 <__aeabi_dsub+0x802>
 80020d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002304 <__aeabi_dsub+0x364>)
 80020d2:	3501      	adds	r5, #1
 80020d4:	429d      	cmp	r5, r3
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x13a>
 80020d8:	e0f4      	b.n	80022c4 <__aeabi_dsub+0x324>
 80020da:	4b8b      	ldr	r3, [pc, #556]	@ (8002308 <__aeabi_dsub+0x368>)
 80020dc:	056d      	lsls	r5, r5, #21
 80020de:	401c      	ands	r4, r3
 80020e0:	0d6d      	lsrs	r5, r5, #21
 80020e2:	0767      	lsls	r7, r4, #29
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	0264      	lsls	r4, r4, #9
 80020e8:	4307      	orrs	r7, r0
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	e0ec      	b.n	80022c8 <__aeabi_dsub+0x328>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dc00      	bgt.n	80020f4 <__aeabi_dsub+0x154>
 80020f2:	e329      	b.n	8002748 <__aeabi_dsub+0x7a8>
 80020f4:	4649      	mov	r1, r9
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d000      	beq.n	80020fc <__aeabi_dsub+0x15c>
 80020fa:	e0d6      	b.n	80022aa <__aeabi_dsub+0x30a>
 80020fc:	4659      	mov	r1, fp
 80020fe:	4311      	orrs	r1, r2
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x164>
 8002102:	e12e      	b.n	8002362 <__aeabi_dsub+0x3c2>
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x16c>
 800210a:	e1e6      	b.n	80024da <__aeabi_dsub+0x53a>
 800210c:	42bb      	cmp	r3, r7
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x172>
 8002110:	e182      	b.n	8002418 <__aeabi_dsub+0x478>
 8002112:	2701      	movs	r7, #1
 8002114:	000b      	movs	r3, r1
 8002116:	2938      	cmp	r1, #56	@ 0x38
 8002118:	dc14      	bgt.n	8002144 <__aeabi_dsub+0x1a4>
 800211a:	2b1f      	cmp	r3, #31
 800211c:	dd00      	ble.n	8002120 <__aeabi_dsub+0x180>
 800211e:	e23c      	b.n	800259a <__aeabi_dsub+0x5fa>
 8002120:	2720      	movs	r7, #32
 8002122:	1af9      	subs	r1, r7, r3
 8002124:	468c      	mov	ip, r1
 8002126:	4659      	mov	r1, fp
 8002128:	4667      	mov	r7, ip
 800212a:	40b9      	lsls	r1, r7
 800212c:	000f      	movs	r7, r1
 800212e:	0011      	movs	r1, r2
 8002130:	40d9      	lsrs	r1, r3
 8002132:	430f      	orrs	r7, r1
 8002134:	4661      	mov	r1, ip
 8002136:	408a      	lsls	r2, r1
 8002138:	1e51      	subs	r1, r2, #1
 800213a:	418a      	sbcs	r2, r1
 800213c:	4659      	mov	r1, fp
 800213e:	40d9      	lsrs	r1, r3
 8002140:	4317      	orrs	r7, r2
 8002142:	1864      	adds	r4, r4, r1
 8002144:	183f      	adds	r7, r7, r0
 8002146:	4287      	cmp	r7, r0
 8002148:	4180      	sbcs	r0, r0
 800214a:	4240      	negs	r0, r0
 800214c:	1824      	adds	r4, r4, r0
 800214e:	0223      	lsls	r3, r4, #8
 8002150:	d400      	bmi.n	8002154 <__aeabi_dsub+0x1b4>
 8002152:	e0c6      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <__aeabi_dsub+0x364>)
 8002156:	3501      	adds	r5, #1
 8002158:	429d      	cmp	r5, r3
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x1be>
 800215c:	e0b2      	b.n	80022c4 <__aeabi_dsub+0x324>
 800215e:	2101      	movs	r1, #1
 8002160:	4b69      	ldr	r3, [pc, #420]	@ (8002308 <__aeabi_dsub+0x368>)
 8002162:	087a      	lsrs	r2, r7, #1
 8002164:	401c      	ands	r4, r3
 8002166:	4039      	ands	r1, r7
 8002168:	430a      	orrs	r2, r1
 800216a:	07e7      	lsls	r7, r4, #31
 800216c:	4317      	orrs	r7, r2
 800216e:	0864      	lsrs	r4, r4, #1
 8002170:	e79e      	b.n	80020b0 <__aeabi_dsub+0x110>
 8002172:	4b66      	ldr	r3, [pc, #408]	@ (800230c <__aeabi_dsub+0x36c>)
 8002174:	4311      	orrs	r1, r2
 8002176:	468a      	mov	sl, r1
 8002178:	18eb      	adds	r3, r5, r3
 800217a:	2900      	cmp	r1, #0
 800217c:	d028      	beq.n	80021d0 <__aeabi_dsub+0x230>
 800217e:	4566      	cmp	r6, ip
 8002180:	d02c      	beq.n	80021dc <__aeabi_dsub+0x23c>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d05b      	beq.n	800223e <__aeabi_dsub+0x29e>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x1ec>
 800218a:	e12c      	b.n	80023e6 <__aeabi_dsub+0x446>
 800218c:	465b      	mov	r3, fp
 800218e:	4666      	mov	r6, ip
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	003b      	movs	r3, r7
 800219a:	432b      	orrs	r3, r5
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x200>
 800219e:	e0e2      	b.n	8002366 <__aeabi_dsub+0x3c6>
 80021a0:	2480      	movs	r4, #128	@ 0x80
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	432c      	orrs	r4, r5
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	4d56      	ldr	r5, [pc, #344]	@ (8002304 <__aeabi_dsub+0x364>)
 80021aa:	0b24      	lsrs	r4, r4, #12
 80021ac:	e08c      	b.n	80022c8 <__aeabi_dsub+0x328>
 80021ae:	4659      	mov	r1, fp
 80021b0:	4311      	orrs	r1, r2
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x216>
 80021b4:	e0d5      	b.n	8002362 <__aeabi_dsub+0x3c2>
 80021b6:	1e59      	subs	r1, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x21e>
 80021bc:	e1b9      	b.n	8002532 <__aeabi_dsub+0x592>
 80021be:	42bb      	cmp	r3, r7
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x224>
 80021c2:	e1b1      	b.n	8002528 <__aeabi_dsub+0x588>
 80021c4:	2701      	movs	r7, #1
 80021c6:	000b      	movs	r3, r1
 80021c8:	2938      	cmp	r1, #56	@ 0x38
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x22e>
 80021cc:	e740      	b.n	8002050 <__aeabi_dsub+0xb0>
 80021ce:	e72a      	b.n	8002026 <__aeabi_dsub+0x86>
 80021d0:	4661      	mov	r1, ip
 80021d2:	2701      	movs	r7, #1
 80021d4:	4079      	eors	r1, r7
 80021d6:	468c      	mov	ip, r1
 80021d8:	4566      	cmp	r6, ip
 80021da:	d1d2      	bne.n	8002182 <__aeabi_dsub+0x1e2>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x242>
 80021e0:	e0c5      	b.n	800236e <__aeabi_dsub+0x3ce>
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x248>
 80021e6:	e155      	b.n	8002494 <__aeabi_dsub+0x4f4>
 80021e8:	464b      	mov	r3, r9
 80021ea:	0025      	movs	r5, r4
 80021ec:	4305      	orrs	r5, r0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x252>
 80021f0:	e212      	b.n	8002618 <__aeabi_dsub+0x678>
 80021f2:	1e59      	subs	r1, r3, #1
 80021f4:	468c      	mov	ip, r1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x25c>
 80021fa:	e249      	b.n	8002690 <__aeabi_dsub+0x6f0>
 80021fc:	4d41      	ldr	r5, [pc, #260]	@ (8002304 <__aeabi_dsub+0x364>)
 80021fe:	42ab      	cmp	r3, r5
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x264>
 8002202:	e28f      	b.n	8002724 <__aeabi_dsub+0x784>
 8002204:	2701      	movs	r7, #1
 8002206:	2938      	cmp	r1, #56	@ 0x38
 8002208:	dc11      	bgt.n	800222e <__aeabi_dsub+0x28e>
 800220a:	4663      	mov	r3, ip
 800220c:	2b1f      	cmp	r3, #31
 800220e:	dd00      	ble.n	8002212 <__aeabi_dsub+0x272>
 8002210:	e25b      	b.n	80026ca <__aeabi_dsub+0x72a>
 8002212:	4661      	mov	r1, ip
 8002214:	2320      	movs	r3, #32
 8002216:	0027      	movs	r7, r4
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	0005      	movs	r5, r0
 800221c:	4098      	lsls	r0, r3
 800221e:	409f      	lsls	r7, r3
 8002220:	40cd      	lsrs	r5, r1
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	4198      	sbcs	r0, r3
 8002226:	40cc      	lsrs	r4, r1
 8002228:	432f      	orrs	r7, r5
 800222a:	4307      	orrs	r7, r0
 800222c:	44a3      	add	fp, r4
 800222e:	18bf      	adds	r7, r7, r2
 8002230:	4297      	cmp	r7, r2
 8002232:	4192      	sbcs	r2, r2
 8002234:	4252      	negs	r2, r2
 8002236:	445a      	add	r2, fp
 8002238:	0014      	movs	r4, r2
 800223a:	464d      	mov	r5, r9
 800223c:	e787      	b.n	800214e <__aeabi_dsub+0x1ae>
 800223e:	4f34      	ldr	r7, [pc, #208]	@ (8002310 <__aeabi_dsub+0x370>)
 8002240:	1c6b      	adds	r3, r5, #1
 8002242:	423b      	tst	r3, r7
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x2a8>
 8002246:	e0b6      	b.n	80023b6 <__aeabi_dsub+0x416>
 8002248:	4659      	mov	r1, fp
 800224a:	0023      	movs	r3, r4
 800224c:	4311      	orrs	r1, r2
 800224e:	000f      	movs	r7, r1
 8002250:	4303      	orrs	r3, r0
 8002252:	2d00      	cmp	r5, #0
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x2b8>
 8002256:	e126      	b.n	80024a6 <__aeabi_dsub+0x506>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x2be>
 800225c:	e1c0      	b.n	80025e0 <__aeabi_dsub+0x640>
 800225e:	2900      	cmp	r1, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x2c4>
 8002262:	e0a1      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002264:	1a83      	subs	r3, r0, r2
 8002266:	4698      	mov	r8, r3
 8002268:	465b      	mov	r3, fp
 800226a:	4540      	cmp	r0, r8
 800226c:	41ad      	sbcs	r5, r5
 800226e:	1ae3      	subs	r3, r4, r3
 8002270:	426d      	negs	r5, r5
 8002272:	1b5b      	subs	r3, r3, r5
 8002274:	2580      	movs	r5, #128	@ 0x80
 8002276:	042d      	lsls	r5, r5, #16
 8002278:	422b      	tst	r3, r5
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x2de>
 800227c:	e14b      	b.n	8002516 <__aeabi_dsub+0x576>
 800227e:	465b      	mov	r3, fp
 8002280:	1a10      	subs	r0, r2, r0
 8002282:	4282      	cmp	r2, r0
 8002284:	4192      	sbcs	r2, r2
 8002286:	1b1c      	subs	r4, r3, r4
 8002288:	0007      	movs	r7, r0
 800228a:	2601      	movs	r6, #1
 800228c:	4663      	mov	r3, ip
 800228e:	4252      	negs	r2, r2
 8002290:	1aa4      	subs	r4, r4, r2
 8002292:	4327      	orrs	r7, r4
 8002294:	401e      	ands	r6, r3
 8002296:	2f00      	cmp	r7, #0
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x2fc>
 800229a:	e142      	b.n	8002522 <__aeabi_dsub+0x582>
 800229c:	422c      	tst	r4, r5
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x302>
 80022a0:	e26d      	b.n	800277e <__aeabi_dsub+0x7de>
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <__aeabi_dsub+0x368>)
 80022a4:	2501      	movs	r5, #1
 80022a6:	401c      	ands	r4, r3
 80022a8:	e71b      	b.n	80020e2 <__aeabi_dsub+0x142>
 80022aa:	42bd      	cmp	r5, r7
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x310>
 80022ae:	e13b      	b.n	8002528 <__aeabi_dsub+0x588>
 80022b0:	2701      	movs	r7, #1
 80022b2:	2b38      	cmp	r3, #56	@ 0x38
 80022b4:	dd00      	ble.n	80022b8 <__aeabi_dsub+0x318>
 80022b6:	e745      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80022b8:	2780      	movs	r7, #128	@ 0x80
 80022ba:	4659      	mov	r1, fp
 80022bc:	043f      	lsls	r7, r7, #16
 80022be:	4339      	orrs	r1, r7
 80022c0:	468b      	mov	fp, r1
 80022c2:	e72a      	b.n	800211a <__aeabi_dsub+0x17a>
 80022c4:	2400      	movs	r4, #0
 80022c6:	2700      	movs	r7, #0
 80022c8:	052d      	lsls	r5, r5, #20
 80022ca:	4325      	orrs	r5, r4
 80022cc:	07f6      	lsls	r6, r6, #31
 80022ce:	4335      	orrs	r5, r6
 80022d0:	0038      	movs	r0, r7
 80022d2:	0029      	movs	r1, r5
 80022d4:	b003      	add	sp, #12
 80022d6:	bcf0      	pop	{r4, r5, r6, r7}
 80022d8:	46bb      	mov	fp, r7
 80022da:	46b2      	mov	sl, r6
 80022dc:	46a9      	mov	r9, r5
 80022de:	46a0      	mov	r8, r4
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	077b      	lsls	r3, r7, #29
 80022e4:	d004      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022e6:	230f      	movs	r3, #15
 80022e8:	403b      	ands	r3, r7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d000      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022ee:	e6e7      	b.n	80020c0 <__aeabi_dsub+0x120>
 80022f0:	002b      	movs	r3, r5
 80022f2:	08f8      	lsrs	r0, r7, #3
 80022f4:	4a03      	ldr	r2, [pc, #12]	@ (8002304 <__aeabi_dsub+0x364>)
 80022f6:	0767      	lsls	r7, r4, #29
 80022f8:	4307      	orrs	r7, r0
 80022fa:	08e5      	lsrs	r5, r4, #3
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x362>
 8002300:	e74a      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002302:	e0a5      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002304:	000007ff 	.word	0x000007ff
 8002308:	ff7fffff 	.word	0xff7fffff
 800230c:	fffff801 	.word	0xfffff801
 8002310:	000007fe 	.word	0x000007fe
 8002314:	0038      	movs	r0, r7
 8002316:	f000 fb45 	bl	80029a4 <__clzsi2>
 800231a:	0003      	movs	r3, r0
 800231c:	3318      	adds	r3, #24
 800231e:	2b1f      	cmp	r3, #31
 8002320:	dc00      	bgt.n	8002324 <__aeabi_dsub+0x384>
 8002322:	e6a7      	b.n	8002074 <__aeabi_dsub+0xd4>
 8002324:	003a      	movs	r2, r7
 8002326:	3808      	subs	r0, #8
 8002328:	4082      	lsls	r2, r0
 800232a:	429d      	cmp	r5, r3
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x390>
 800232e:	e08a      	b.n	8002446 <__aeabi_dsub+0x4a6>
 8002330:	1b5b      	subs	r3, r3, r5
 8002332:	1c58      	adds	r0, r3, #1
 8002334:	281f      	cmp	r0, #31
 8002336:	dc00      	bgt.n	800233a <__aeabi_dsub+0x39a>
 8002338:	e1d8      	b.n	80026ec <__aeabi_dsub+0x74c>
 800233a:	0017      	movs	r7, r2
 800233c:	3b1f      	subs	r3, #31
 800233e:	40df      	lsrs	r7, r3
 8002340:	2820      	cmp	r0, #32
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x3b0>
 8002344:	2340      	movs	r3, #64	@ 0x40
 8002346:	1a1b      	subs	r3, r3, r0
 8002348:	409a      	lsls	r2, r3
 800234a:	1e53      	subs	r3, r2, #1
 800234c:	419a      	sbcs	r2, r3
 800234e:	4317      	orrs	r7, r2
 8002350:	2500      	movs	r5, #0
 8002352:	2f00      	cmp	r7, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x3b8>
 8002356:	e0e5      	b.n	8002524 <__aeabi_dsub+0x584>
 8002358:	077b      	lsls	r3, r7, #29
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x3be>
 800235c:	e6ab      	b.n	80020b6 <__aeabi_dsub+0x116>
 800235e:	002c      	movs	r4, r5
 8002360:	e7c6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002362:	08c0      	lsrs	r0, r0, #3
 8002364:	e7c6      	b.n	80022f4 <__aeabi_dsub+0x354>
 8002366:	2700      	movs	r7, #0
 8002368:	2400      	movs	r4, #0
 800236a:	4dd1      	ldr	r5, [pc, #836]	@ (80026b0 <__aeabi_dsub+0x710>)
 800236c:	e7ac      	b.n	80022c8 <__aeabi_dsub+0x328>
 800236e:	4fd1      	ldr	r7, [pc, #836]	@ (80026b4 <__aeabi_dsub+0x714>)
 8002370:	1c6b      	adds	r3, r5, #1
 8002372:	423b      	tst	r3, r7
 8002374:	d171      	bne.n	800245a <__aeabi_dsub+0x4ba>
 8002376:	0023      	movs	r3, r4
 8002378:	4303      	orrs	r3, r0
 800237a:	2d00      	cmp	r5, #0
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x3e0>
 800237e:	e14e      	b.n	800261e <__aeabi_dsub+0x67e>
 8002380:	4657      	mov	r7, sl
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x3e8>
 8002386:	e1b5      	b.n	80026f4 <__aeabi_dsub+0x754>
 8002388:	2f00      	cmp	r7, #0
 800238a:	d00d      	beq.n	80023a8 <__aeabi_dsub+0x408>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4283      	cmp	r3, r0
 8002390:	4180      	sbcs	r0, r0
 8002392:	445c      	add	r4, fp
 8002394:	4240      	negs	r0, r0
 8002396:	1824      	adds	r4, r4, r0
 8002398:	0222      	lsls	r2, r4, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x3fe>
 800239c:	e1c8      	b.n	8002730 <__aeabi_dsub+0x790>
 800239e:	001f      	movs	r7, r3
 80023a0:	4698      	mov	r8, r3
 80023a2:	4327      	orrs	r7, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x408>
 80023a6:	e0bc      	b.n	8002522 <__aeabi_dsub+0x582>
 80023a8:	4643      	mov	r3, r8
 80023aa:	0767      	lsls	r7, r4, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	431f      	orrs	r7, r3
 80023b0:	08e5      	lsrs	r5, r4, #3
 80023b2:	2300      	movs	r3, #0
 80023b4:	e04c      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80023b6:	1a83      	subs	r3, r0, r2
 80023b8:	4698      	mov	r8, r3
 80023ba:	465b      	mov	r3, fp
 80023bc:	4540      	cmp	r0, r8
 80023be:	41bf      	sbcs	r7, r7
 80023c0:	1ae3      	subs	r3, r4, r3
 80023c2:	427f      	negs	r7, r7
 80023c4:	1bdb      	subs	r3, r3, r7
 80023c6:	021f      	lsls	r7, r3, #8
 80023c8:	d47c      	bmi.n	80024c4 <__aeabi_dsub+0x524>
 80023ca:	4647      	mov	r7, r8
 80023cc:	431f      	orrs	r7, r3
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x432>
 80023d0:	e0a6      	b.n	8002520 <__aeabi_dsub+0x580>
 80023d2:	001c      	movs	r4, r3
 80023d4:	4647      	mov	r7, r8
 80023d6:	e645      	b.n	8002064 <__aeabi_dsub+0xc4>
 80023d8:	4cb7      	ldr	r4, [pc, #732]	@ (80026b8 <__aeabi_dsub+0x718>)
 80023da:	1aed      	subs	r5, r5, r3
 80023dc:	4014      	ands	r4, r2
 80023de:	077b      	lsls	r3, r7, #29
 80023e0:	d000      	beq.n	80023e4 <__aeabi_dsub+0x444>
 80023e2:	e780      	b.n	80022e6 <__aeabi_dsub+0x346>
 80023e4:	e784      	b.n	80022f0 <__aeabi_dsub+0x350>
 80023e6:	464b      	mov	r3, r9
 80023e8:	0025      	movs	r5, r4
 80023ea:	4305      	orrs	r5, r0
 80023ec:	d066      	beq.n	80024bc <__aeabi_dsub+0x51c>
 80023ee:	1e5f      	subs	r7, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x456>
 80023f4:	e0fc      	b.n	80025f0 <__aeabi_dsub+0x650>
 80023f6:	4dae      	ldr	r5, [pc, #696]	@ (80026b0 <__aeabi_dsub+0x710>)
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x45e>
 80023fc:	e15e      	b.n	80026bc <__aeabi_dsub+0x71c>
 80023fe:	4666      	mov	r6, ip
 8002400:	2f38      	cmp	r7, #56	@ 0x38
 8002402:	dc00      	bgt.n	8002406 <__aeabi_dsub+0x466>
 8002404:	e0b4      	b.n	8002570 <__aeabi_dsub+0x5d0>
 8002406:	2001      	movs	r0, #1
 8002408:	1a17      	subs	r7, r2, r0
 800240a:	42ba      	cmp	r2, r7
 800240c:	4192      	sbcs	r2, r2
 800240e:	465b      	mov	r3, fp
 8002410:	4252      	negs	r2, r2
 8002412:	464d      	mov	r5, r9
 8002414:	1a9c      	subs	r4, r3, r2
 8002416:	e620      	b.n	800205a <__aeabi_dsub+0xba>
 8002418:	0767      	lsls	r7, r4, #29
 800241a:	08c0      	lsrs	r0, r0, #3
 800241c:	4307      	orrs	r7, r0
 800241e:	08e5      	lsrs	r5, r4, #3
 8002420:	e6ba      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002422:	001f      	movs	r7, r3
 8002424:	4659      	mov	r1, fp
 8002426:	3f20      	subs	r7, #32
 8002428:	40f9      	lsrs	r1, r7
 800242a:	000f      	movs	r7, r1
 800242c:	2b20      	cmp	r3, #32
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0x49c>
 8002430:	2140      	movs	r1, #64	@ 0x40
 8002432:	1acb      	subs	r3, r1, r3
 8002434:	4659      	mov	r1, fp
 8002436:	4099      	lsls	r1, r3
 8002438:	430a      	orrs	r2, r1
 800243a:	4692      	mov	sl, r2
 800243c:	4653      	mov	r3, sl
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	4193      	sbcs	r3, r2
 8002442:	431f      	orrs	r7, r3
 8002444:	e604      	b.n	8002050 <__aeabi_dsub+0xb0>
 8002446:	1aeb      	subs	r3, r5, r3
 8002448:	4d9b      	ldr	r5, [pc, #620]	@ (80026b8 <__aeabi_dsub+0x718>)
 800244a:	4015      	ands	r5, r2
 800244c:	076f      	lsls	r7, r5, #29
 800244e:	08ed      	lsrs	r5, r5, #3
 8002450:	032c      	lsls	r4, r5, #12
 8002452:	055d      	lsls	r5, r3, #21
 8002454:	0b24      	lsrs	r4, r4, #12
 8002456:	0d6d      	lsrs	r5, r5, #21
 8002458:	e736      	b.n	80022c8 <__aeabi_dsub+0x328>
 800245a:	4d95      	ldr	r5, [pc, #596]	@ (80026b0 <__aeabi_dsub+0x710>)
 800245c:	42ab      	cmp	r3, r5
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x4c2>
 8002460:	e0d6      	b.n	8002610 <__aeabi_dsub+0x670>
 8002462:	1882      	adds	r2, r0, r2
 8002464:	0021      	movs	r1, r4
 8002466:	4282      	cmp	r2, r0
 8002468:	4180      	sbcs	r0, r0
 800246a:	4459      	add	r1, fp
 800246c:	4240      	negs	r0, r0
 800246e:	1808      	adds	r0, r1, r0
 8002470:	07c7      	lsls	r7, r0, #31
 8002472:	0852      	lsrs	r2, r2, #1
 8002474:	4317      	orrs	r7, r2
 8002476:	0844      	lsrs	r4, r0, #1
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	d400      	bmi.n	800247e <__aeabi_dsub+0x4de>
 800247c:	e185      	b.n	800278a <__aeabi_dsub+0x7ea>
 800247e:	220f      	movs	r2, #15
 8002480:	001d      	movs	r5, r3
 8002482:	403a      	ands	r2, r7
 8002484:	2a04      	cmp	r2, #4
 8002486:	d000      	beq.n	800248a <__aeabi_dsub+0x4ea>
 8002488:	e61a      	b.n	80020c0 <__aeabi_dsub+0x120>
 800248a:	08ff      	lsrs	r7, r7, #3
 800248c:	0764      	lsls	r4, r4, #29
 800248e:	4327      	orrs	r7, r4
 8002490:	0905      	lsrs	r5, r0, #4
 8002492:	e7dd      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002494:	465b      	mov	r3, fp
 8002496:	08d2      	lsrs	r2, r2, #3
 8002498:	075f      	lsls	r7, r3, #29
 800249a:	4317      	orrs	r7, r2
 800249c:	08dd      	lsrs	r5, r3, #3
 800249e:	e67b      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80024a0:	2700      	movs	r7, #0
 80024a2:	2400      	movs	r4, #0
 80024a4:	e710      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d000      	beq.n	80024ac <__aeabi_dsub+0x50c>
 80024aa:	e0d6      	b.n	800265a <__aeabi_dsub+0x6ba>
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d000      	beq.n	80024b2 <__aeabi_dsub+0x512>
 80024b0:	e12f      	b.n	8002712 <__aeabi_dsub+0x772>
 80024b2:	2480      	movs	r4, #128	@ 0x80
 80024b4:	2600      	movs	r6, #0
 80024b6:	4d7e      	ldr	r5, [pc, #504]	@ (80026b0 <__aeabi_dsub+0x710>)
 80024b8:	0324      	lsls	r4, r4, #12
 80024ba:	e705      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024bc:	4666      	mov	r6, ip
 80024be:	465c      	mov	r4, fp
 80024c0:	08d0      	lsrs	r0, r2, #3
 80024c2:	e717      	b.n	80022f4 <__aeabi_dsub+0x354>
 80024c4:	465b      	mov	r3, fp
 80024c6:	1a17      	subs	r7, r2, r0
 80024c8:	42ba      	cmp	r2, r7
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	1b1c      	subs	r4, r3, r4
 80024ce:	2601      	movs	r6, #1
 80024d0:	4663      	mov	r3, ip
 80024d2:	4252      	negs	r2, r2
 80024d4:	1aa4      	subs	r4, r4, r2
 80024d6:	401e      	ands	r6, r3
 80024d8:	e5c4      	b.n	8002064 <__aeabi_dsub+0xc4>
 80024da:	1883      	adds	r3, r0, r2
 80024dc:	4283      	cmp	r3, r0
 80024de:	4180      	sbcs	r0, r0
 80024e0:	445c      	add	r4, fp
 80024e2:	4240      	negs	r0, r0
 80024e4:	1825      	adds	r5, r4, r0
 80024e6:	022a      	lsls	r2, r5, #8
 80024e8:	d400      	bmi.n	80024ec <__aeabi_dsub+0x54c>
 80024ea:	e0da      	b.n	80026a2 <__aeabi_dsub+0x702>
 80024ec:	4a72      	ldr	r2, [pc, #456]	@ (80026b8 <__aeabi_dsub+0x718>)
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	4015      	ands	r5, r2
 80024f2:	07ea      	lsls	r2, r5, #31
 80024f4:	431a      	orrs	r2, r3
 80024f6:	0869      	lsrs	r1, r5, #1
 80024f8:	075b      	lsls	r3, r3, #29
 80024fa:	d400      	bmi.n	80024fe <__aeabi_dsub+0x55e>
 80024fc:	e14a      	b.n	8002794 <__aeabi_dsub+0x7f4>
 80024fe:	230f      	movs	r3, #15
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x568>
 8002506:	e0fc      	b.n	8002702 <__aeabi_dsub+0x762>
 8002508:	1d17      	adds	r7, r2, #4
 800250a:	4297      	cmp	r7, r2
 800250c:	41a4      	sbcs	r4, r4
 800250e:	4264      	negs	r4, r4
 8002510:	2502      	movs	r5, #2
 8002512:	1864      	adds	r4, r4, r1
 8002514:	e6ec      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002516:	4647      	mov	r7, r8
 8002518:	001c      	movs	r4, r3
 800251a:	431f      	orrs	r7, r3
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x580>
 800251e:	e743      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002520:	2600      	movs	r6, #0
 8002522:	2500      	movs	r5, #0
 8002524:	2400      	movs	r4, #0
 8002526:	e6cf      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	0767      	lsls	r7, r4, #29
 800252c:	4307      	orrs	r7, r0
 800252e:	08e5      	lsrs	r5, r4, #3
 8002530:	e632      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002532:	1a87      	subs	r7, r0, r2
 8002534:	465b      	mov	r3, fp
 8002536:	42b8      	cmp	r0, r7
 8002538:	4180      	sbcs	r0, r0
 800253a:	1ae4      	subs	r4, r4, r3
 800253c:	4240      	negs	r0, r0
 800253e:	1a24      	subs	r4, r4, r0
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d428      	bmi.n	8002596 <__aeabi_dsub+0x5f6>
 8002544:	0763      	lsls	r3, r4, #29
 8002546:	08ff      	lsrs	r7, r7, #3
 8002548:	431f      	orrs	r7, r3
 800254a:	08e5      	lsrs	r5, r4, #3
 800254c:	2301      	movs	r3, #1
 800254e:	e77f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x5b6>
 8002554:	e673      	b.n	800223e <__aeabi_dsub+0x29e>
 8002556:	464b      	mov	r3, r9
 8002558:	1b5f      	subs	r7, r3, r5
 800255a:	003b      	movs	r3, r7
 800255c:	2d00      	cmp	r5, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x5c2>
 8002560:	e742      	b.n	80023e8 <__aeabi_dsub+0x448>
 8002562:	2f38      	cmp	r7, #56	@ 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_dsub+0x5c8>
 8002566:	e0ec      	b.n	8002742 <__aeabi_dsub+0x7a2>
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	000e      	movs	r6, r1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431c      	orrs	r4, r3
 8002570:	2f1f      	cmp	r7, #31
 8002572:	dc25      	bgt.n	80025c0 <__aeabi_dsub+0x620>
 8002574:	2520      	movs	r5, #32
 8002576:	0023      	movs	r3, r4
 8002578:	1bed      	subs	r5, r5, r7
 800257a:	0001      	movs	r1, r0
 800257c:	40a8      	lsls	r0, r5
 800257e:	40ab      	lsls	r3, r5
 8002580:	40f9      	lsrs	r1, r7
 8002582:	1e45      	subs	r5, r0, #1
 8002584:	41a8      	sbcs	r0, r5
 8002586:	430b      	orrs	r3, r1
 8002588:	40fc      	lsrs	r4, r7
 800258a:	4318      	orrs	r0, r3
 800258c:	465b      	mov	r3, fp
 800258e:	1b1b      	subs	r3, r3, r4
 8002590:	469b      	mov	fp, r3
 8002592:	e739      	b.n	8002408 <__aeabi_dsub+0x468>
 8002594:	4666      	mov	r6, ip
 8002596:	2501      	movs	r5, #1
 8002598:	e562      	b.n	8002060 <__aeabi_dsub+0xc0>
 800259a:	001f      	movs	r7, r3
 800259c:	4659      	mov	r1, fp
 800259e:	3f20      	subs	r7, #32
 80025a0:	40f9      	lsrs	r1, r7
 80025a2:	468c      	mov	ip, r1
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d005      	beq.n	80025b4 <__aeabi_dsub+0x614>
 80025a8:	2740      	movs	r7, #64	@ 0x40
 80025aa:	4659      	mov	r1, fp
 80025ac:	1afb      	subs	r3, r7, r3
 80025ae:	4099      	lsls	r1, r3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4692      	mov	sl, r2
 80025b4:	4657      	mov	r7, sl
 80025b6:	1e7b      	subs	r3, r7, #1
 80025b8:	419f      	sbcs	r7, r3
 80025ba:	4663      	mov	r3, ip
 80025bc:	431f      	orrs	r7, r3
 80025be:	e5c1      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80025c0:	003b      	movs	r3, r7
 80025c2:	0025      	movs	r5, r4
 80025c4:	3b20      	subs	r3, #32
 80025c6:	40dd      	lsrs	r5, r3
 80025c8:	2f20      	cmp	r7, #32
 80025ca:	d004      	beq.n	80025d6 <__aeabi_dsub+0x636>
 80025cc:	2340      	movs	r3, #64	@ 0x40
 80025ce:	1bdb      	subs	r3, r3, r7
 80025d0:	409c      	lsls	r4, r3
 80025d2:	4320      	orrs	r0, r4
 80025d4:	4680      	mov	r8, r0
 80025d6:	4640      	mov	r0, r8
 80025d8:	1e43      	subs	r3, r0, #1
 80025da:	4198      	sbcs	r0, r3
 80025dc:	4328      	orrs	r0, r5
 80025de:	e713      	b.n	8002408 <__aeabi_dsub+0x468>
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d09d      	beq.n	8002520 <__aeabi_dsub+0x580>
 80025e4:	2601      	movs	r6, #1
 80025e6:	4663      	mov	r3, ip
 80025e8:	465c      	mov	r4, fp
 80025ea:	4690      	mov	r8, r2
 80025ec:	401e      	ands	r6, r3
 80025ee:	e6db      	b.n	80023a8 <__aeabi_dsub+0x408>
 80025f0:	1a17      	subs	r7, r2, r0
 80025f2:	465b      	mov	r3, fp
 80025f4:	42ba      	cmp	r2, r7
 80025f6:	4192      	sbcs	r2, r2
 80025f8:	1b1c      	subs	r4, r3, r4
 80025fa:	4252      	negs	r2, r2
 80025fc:	1aa4      	subs	r4, r4, r2
 80025fe:	0223      	lsls	r3, r4, #8
 8002600:	d4c8      	bmi.n	8002594 <__aeabi_dsub+0x5f4>
 8002602:	0763      	lsls	r3, r4, #29
 8002604:	08ff      	lsrs	r7, r7, #3
 8002606:	431f      	orrs	r7, r3
 8002608:	4666      	mov	r6, ip
 800260a:	2301      	movs	r3, #1
 800260c:	08e5      	lsrs	r5, r4, #3
 800260e:	e71f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002610:	001d      	movs	r5, r3
 8002612:	2400      	movs	r4, #0
 8002614:	2700      	movs	r7, #0
 8002616:	e657      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002618:	465c      	mov	r4, fp
 800261a:	08d0      	lsrs	r0, r2, #3
 800261c:	e66a      	b.n	80022f4 <__aeabi_dsub+0x354>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x684>
 8002622:	e737      	b.n	8002494 <__aeabi_dsub+0x4f4>
 8002624:	4653      	mov	r3, sl
 8002626:	08c0      	lsrs	r0, r0, #3
 8002628:	0767      	lsls	r7, r4, #29
 800262a:	4307      	orrs	r7, r0
 800262c:	08e5      	lsrs	r5, r4, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x694>
 8002632:	e5b1      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	421d      	tst	r5, r3
 800263a:	d008      	beq.n	800264e <__aeabi_dsub+0x6ae>
 800263c:	4659      	mov	r1, fp
 800263e:	08c8      	lsrs	r0, r1, #3
 8002640:	4218      	tst	r0, r3
 8002642:	d104      	bne.n	800264e <__aeabi_dsub+0x6ae>
 8002644:	08d2      	lsrs	r2, r2, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430a      	orrs	r2, r1
 800264a:	0017      	movs	r7, r2
 800264c:	0005      	movs	r5, r0
 800264e:	0f7b      	lsrs	r3, r7, #29
 8002650:	00ff      	lsls	r7, r7, #3
 8002652:	08ff      	lsrs	r7, r7, #3
 8002654:	075b      	lsls	r3, r3, #29
 8002656:	431f      	orrs	r7, r3
 8002658:	e59e      	b.n	8002198 <__aeabi_dsub+0x1f8>
 800265a:	08c0      	lsrs	r0, r0, #3
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	4318      	orrs	r0, r3
 8002660:	08e5      	lsrs	r5, r4, #3
 8002662:	2900      	cmp	r1, #0
 8002664:	d053      	beq.n	800270e <__aeabi_dsub+0x76e>
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	421d      	tst	r5, r3
 800266c:	d00a      	beq.n	8002684 <__aeabi_dsub+0x6e4>
 800266e:	4659      	mov	r1, fp
 8002670:	08cc      	lsrs	r4, r1, #3
 8002672:	421c      	tst	r4, r3
 8002674:	d106      	bne.n	8002684 <__aeabi_dsub+0x6e4>
 8002676:	2601      	movs	r6, #1
 8002678:	4663      	mov	r3, ip
 800267a:	0025      	movs	r5, r4
 800267c:	08d0      	lsrs	r0, r2, #3
 800267e:	0749      	lsls	r1, r1, #29
 8002680:	4308      	orrs	r0, r1
 8002682:	401e      	ands	r6, r3
 8002684:	0f47      	lsrs	r7, r0, #29
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	08c0      	lsrs	r0, r0, #3
 800268a:	077f      	lsls	r7, r7, #29
 800268c:	4307      	orrs	r7, r0
 800268e:	e583      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002690:	1883      	adds	r3, r0, r2
 8002692:	4293      	cmp	r3, r2
 8002694:	4192      	sbcs	r2, r2
 8002696:	445c      	add	r4, fp
 8002698:	4252      	negs	r2, r2
 800269a:	18a5      	adds	r5, r4, r2
 800269c:	022a      	lsls	r2, r5, #8
 800269e:	d500      	bpl.n	80026a2 <__aeabi_dsub+0x702>
 80026a0:	e724      	b.n	80024ec <__aeabi_dsub+0x54c>
 80026a2:	076f      	lsls	r7, r5, #29
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	431f      	orrs	r7, r3
 80026a8:	08ed      	lsrs	r5, r5, #3
 80026aa:	2301      	movs	r3, #1
 80026ac:	e6d0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	000007ff 	.word	0x000007ff
 80026b4:	000007fe 	.word	0x000007fe
 80026b8:	ff7fffff 	.word	0xff7fffff
 80026bc:	465b      	mov	r3, fp
 80026be:	08d2      	lsrs	r2, r2, #3
 80026c0:	075f      	lsls	r7, r3, #29
 80026c2:	4666      	mov	r6, ip
 80026c4:	4317      	orrs	r7, r2
 80026c6:	08dd      	lsrs	r5, r3, #3
 80026c8:	e566      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80026ca:	0025      	movs	r5, r4
 80026cc:	3b20      	subs	r3, #32
 80026ce:	40dd      	lsrs	r5, r3
 80026d0:	4663      	mov	r3, ip
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d005      	beq.n	80026e2 <__aeabi_dsub+0x742>
 80026d6:	2340      	movs	r3, #64	@ 0x40
 80026d8:	4661      	mov	r1, ip
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	409c      	lsls	r4, r3
 80026de:	4320      	orrs	r0, r4
 80026e0:	4680      	mov	r8, r0
 80026e2:	4647      	mov	r7, r8
 80026e4:	1e7b      	subs	r3, r7, #1
 80026e6:	419f      	sbcs	r7, r3
 80026e8:	432f      	orrs	r7, r5
 80026ea:	e5a0      	b.n	800222e <__aeabi_dsub+0x28e>
 80026ec:	2120      	movs	r1, #32
 80026ee:	2700      	movs	r7, #0
 80026f0:	1a09      	subs	r1, r1, r0
 80026f2:	e4d2      	b.n	800209a <__aeabi_dsub+0xfa>
 80026f4:	2f00      	cmp	r7, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x75a>
 80026f8:	e713      	b.n	8002522 <__aeabi_dsub+0x582>
 80026fa:	465c      	mov	r4, fp
 80026fc:	0017      	movs	r7, r2
 80026fe:	2500      	movs	r5, #0
 8002700:	e5f6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002702:	08d7      	lsrs	r7, r2, #3
 8002704:	0749      	lsls	r1, r1, #29
 8002706:	2302      	movs	r3, #2
 8002708:	430f      	orrs	r7, r1
 800270a:	092d      	lsrs	r5, r5, #4
 800270c:	e6a0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800270e:	0007      	movs	r7, r0
 8002710:	e542      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002712:	465b      	mov	r3, fp
 8002714:	2601      	movs	r6, #1
 8002716:	075f      	lsls	r7, r3, #29
 8002718:	08dd      	lsrs	r5, r3, #3
 800271a:	4663      	mov	r3, ip
 800271c:	08d2      	lsrs	r2, r2, #3
 800271e:	4317      	orrs	r7, r2
 8002720:	401e      	ands	r6, r3
 8002722:	e539      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002724:	465b      	mov	r3, fp
 8002726:	08d2      	lsrs	r2, r2, #3
 8002728:	075f      	lsls	r7, r3, #29
 800272a:	4317      	orrs	r7, r2
 800272c:	08dd      	lsrs	r5, r3, #3
 800272e:	e533      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002730:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <__aeabi_dsub+0x80c>)
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	4022      	ands	r2, r4
 8002736:	0757      	lsls	r7, r2, #29
 8002738:	0252      	lsls	r2, r2, #9
 800273a:	2501      	movs	r5, #1
 800273c:	431f      	orrs	r7, r3
 800273e:	0b14      	lsrs	r4, r2, #12
 8002740:	e5c2      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002742:	000e      	movs	r6, r1
 8002744:	2001      	movs	r0, #1
 8002746:	e65f      	b.n	8002408 <__aeabi_dsub+0x468>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <__aeabi_dsub+0x7c8>
 800274c:	464b      	mov	r3, r9
 800274e:	1b5b      	subs	r3, r3, r5
 8002750:	469c      	mov	ip, r3
 8002752:	2d00      	cmp	r5, #0
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x7b8>
 8002756:	e548      	b.n	80021ea <__aeabi_dsub+0x24a>
 8002758:	2701      	movs	r7, #1
 800275a:	2b38      	cmp	r3, #56	@ 0x38
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0x7c0>
 800275e:	e566      	b.n	800222e <__aeabi_dsub+0x28e>
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431c      	orrs	r4, r3
 8002766:	e550      	b.n	800220a <__aeabi_dsub+0x26a>
 8002768:	1c6b      	adds	r3, r5, #1
 800276a:	4d11      	ldr	r5, [pc, #68]	@ (80027b0 <__aeabi_dsub+0x810>)
 800276c:	422b      	tst	r3, r5
 800276e:	d000      	beq.n	8002772 <__aeabi_dsub+0x7d2>
 8002770:	e673      	b.n	800245a <__aeabi_dsub+0x4ba>
 8002772:	4659      	mov	r1, fp
 8002774:	0023      	movs	r3, r4
 8002776:	4311      	orrs	r1, r2
 8002778:	468a      	mov	sl, r1
 800277a:	4303      	orrs	r3, r0
 800277c:	e600      	b.n	8002380 <__aeabi_dsub+0x3e0>
 800277e:	0767      	lsls	r7, r4, #29
 8002780:	08c0      	lsrs	r0, r0, #3
 8002782:	2300      	movs	r3, #0
 8002784:	4307      	orrs	r7, r0
 8002786:	08e5      	lsrs	r5, r4, #3
 8002788:	e662      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800278a:	0764      	lsls	r4, r4, #29
 800278c:	08ff      	lsrs	r7, r7, #3
 800278e:	4327      	orrs	r7, r4
 8002790:	0905      	lsrs	r5, r0, #4
 8002792:	e65d      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	0749      	lsls	r1, r1, #29
 8002798:	4311      	orrs	r1, r2
 800279a:	000f      	movs	r7, r1
 800279c:	2302      	movs	r3, #2
 800279e:	092d      	lsrs	r5, r5, #4
 80027a0:	e656      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80027a2:	0007      	movs	r7, r0
 80027a4:	e5a4      	b.n	80022f0 <__aeabi_dsub+0x350>
 80027a6:	0038      	movs	r0, r7
 80027a8:	e48f      	b.n	80020ca <__aeabi_dsub+0x12a>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	ff7fffff 	.word	0xff7fffff
 80027b0:	000007fe 	.word	0x000007fe

080027b4 <__aeabi_dcmpun>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	46c6      	mov	lr, r8
 80027b8:	031e      	lsls	r6, r3, #12
 80027ba:	0b36      	lsrs	r6, r6, #12
 80027bc:	46b0      	mov	r8, r6
 80027be:	4e0d      	ldr	r6, [pc, #52]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027c0:	030c      	lsls	r4, r1, #12
 80027c2:	004d      	lsls	r5, r1, #1
 80027c4:	005f      	lsls	r7, r3, #1
 80027c6:	b500      	push	{lr}
 80027c8:	0b24      	lsrs	r4, r4, #12
 80027ca:	0d6d      	lsrs	r5, r5, #21
 80027cc:	0d7f      	lsrs	r7, r7, #21
 80027ce:	42b5      	cmp	r5, r6
 80027d0:	d00b      	beq.n	80027ea <__aeabi_dcmpun+0x36>
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	428f      	cmp	r7, r1
 80027d8:	d104      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027da:	4646      	mov	r6, r8
 80027dc:	4316      	orrs	r6, r2
 80027de:	0030      	movs	r0, r6
 80027e0:	1e43      	subs	r3, r0, #1
 80027e2:	4198      	sbcs	r0, r3
 80027e4:	bc80      	pop	{r7}
 80027e6:	46b8      	mov	r8, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	4304      	orrs	r4, r0
 80027ec:	2001      	movs	r0, #1
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d1f8      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027f2:	e7ee      	b.n	80027d2 <__aeabi_dcmpun+0x1e>
 80027f4:	000007ff 	.word	0x000007ff

080027f8 <__aeabi_d2iz>:
 80027f8:	000b      	movs	r3, r1
 80027fa:	0002      	movs	r2, r0
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4d16      	ldr	r5, [pc, #88]	@ (8002858 <__aeabi_d2iz+0x60>)
 8002800:	030c      	lsls	r4, r1, #12
 8002802:	b082      	sub	sp, #8
 8002804:	0049      	lsls	r1, r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	0b24      	lsrs	r4, r4, #12
 800280e:	0d49      	lsrs	r1, r1, #21
 8002810:	0fde      	lsrs	r6, r3, #31
 8002812:	42a9      	cmp	r1, r5
 8002814:	dd04      	ble.n	8002820 <__aeabi_d2iz+0x28>
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <__aeabi_d2iz+0x64>)
 8002818:	4281      	cmp	r1, r0
 800281a:	dd03      	ble.n	8002824 <__aeabi_d2iz+0x2c>
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <__aeabi_d2iz+0x68>)
 800281e:	18f0      	adds	r0, r6, r3
 8002820:	b002      	add	sp, #8
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	2080      	movs	r0, #128	@ 0x80
 8002826:	0340      	lsls	r0, r0, #13
 8002828:	4320      	orrs	r0, r4
 800282a:	4c0e      	ldr	r4, [pc, #56]	@ (8002864 <__aeabi_d2iz+0x6c>)
 800282c:	1a64      	subs	r4, r4, r1
 800282e:	2c1f      	cmp	r4, #31
 8002830:	dd08      	ble.n	8002844 <__aeabi_d2iz+0x4c>
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <__aeabi_d2iz+0x70>)
 8002834:	1a5b      	subs	r3, r3, r1
 8002836:	40d8      	lsrs	r0, r3
 8002838:	0003      	movs	r3, r0
 800283a:	4258      	negs	r0, r3
 800283c:	2e00      	cmp	r6, #0
 800283e:	d1ef      	bne.n	8002820 <__aeabi_d2iz+0x28>
 8002840:	0018      	movs	r0, r3
 8002842:	e7ed      	b.n	8002820 <__aeabi_d2iz+0x28>
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <__aeabi_d2iz+0x74>)
 8002846:	9a00      	ldr	r2, [sp, #0]
 8002848:	469c      	mov	ip, r3
 800284a:	0003      	movs	r3, r0
 800284c:	4461      	add	r1, ip
 800284e:	408b      	lsls	r3, r1
 8002850:	40e2      	lsrs	r2, r4
 8002852:	4313      	orrs	r3, r2
 8002854:	e7f1      	b.n	800283a <__aeabi_d2iz+0x42>
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	000003fe 	.word	0x000003fe
 800285c:	0000041d 	.word	0x0000041d
 8002860:	7fffffff 	.word	0x7fffffff
 8002864:	00000433 	.word	0x00000433
 8002868:	00000413 	.word	0x00000413
 800286c:	fffffbed 	.word	0xfffffbed

08002870 <__aeabi_i2d>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	2800      	cmp	r0, #0
 8002874:	d016      	beq.n	80028a4 <__aeabi_i2d+0x34>
 8002876:	17c3      	asrs	r3, r0, #31
 8002878:	18c5      	adds	r5, r0, r3
 800287a:	405d      	eors	r5, r3
 800287c:	0fc4      	lsrs	r4, r0, #31
 800287e:	0028      	movs	r0, r5
 8002880:	f000 f890 	bl	80029a4 <__clzsi2>
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <__aeabi_i2d+0x58>)
 8002886:	1a1b      	subs	r3, r3, r0
 8002888:	055b      	lsls	r3, r3, #21
 800288a:	0d5b      	lsrs	r3, r3, #21
 800288c:	280a      	cmp	r0, #10
 800288e:	dc14      	bgt.n	80028ba <__aeabi_i2d+0x4a>
 8002890:	0002      	movs	r2, r0
 8002892:	002e      	movs	r6, r5
 8002894:	3215      	adds	r2, #21
 8002896:	4096      	lsls	r6, r2
 8002898:	220b      	movs	r2, #11
 800289a:	1a12      	subs	r2, r2, r0
 800289c:	40d5      	lsrs	r5, r2
 800289e:	032d      	lsls	r5, r5, #12
 80028a0:	0b2d      	lsrs	r5, r5, #12
 80028a2:	e003      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028a4:	2400      	movs	r4, #0
 80028a6:	2300      	movs	r3, #0
 80028a8:	2500      	movs	r5, #0
 80028aa:	2600      	movs	r6, #0
 80028ac:	051b      	lsls	r3, r3, #20
 80028ae:	432b      	orrs	r3, r5
 80028b0:	07e4      	lsls	r4, r4, #31
 80028b2:	4323      	orrs	r3, r4
 80028b4:	0030      	movs	r0, r6
 80028b6:	0019      	movs	r1, r3
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	380b      	subs	r0, #11
 80028bc:	4085      	lsls	r5, r0
 80028be:	032d      	lsls	r5, r5, #12
 80028c0:	2600      	movs	r6, #0
 80028c2:	0b2d      	lsrs	r5, r5, #12
 80028c4:	e7f2      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	0000041e 	.word	0x0000041e

080028cc <__aeabi_ui2d>:
 80028cc:	b510      	push	{r4, lr}
 80028ce:	1e04      	subs	r4, r0, #0
 80028d0:	d010      	beq.n	80028f4 <__aeabi_ui2d+0x28>
 80028d2:	f000 f867 	bl	80029a4 <__clzsi2>
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <__aeabi_ui2d+0x44>)
 80028d8:	1a1b      	subs	r3, r3, r0
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	0d5b      	lsrs	r3, r3, #21
 80028de:	280a      	cmp	r0, #10
 80028e0:	dc0f      	bgt.n	8002902 <__aeabi_ui2d+0x36>
 80028e2:	220b      	movs	r2, #11
 80028e4:	0021      	movs	r1, r4
 80028e6:	1a12      	subs	r2, r2, r0
 80028e8:	40d1      	lsrs	r1, r2
 80028ea:	3015      	adds	r0, #21
 80028ec:	030a      	lsls	r2, r1, #12
 80028ee:	4084      	lsls	r4, r0
 80028f0:	0b12      	lsrs	r2, r2, #12
 80028f2:	e001      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2200      	movs	r2, #0
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	4313      	orrs	r3, r2
 80028fc:	0020      	movs	r0, r4
 80028fe:	0019      	movs	r1, r3
 8002900:	bd10      	pop	{r4, pc}
 8002902:	0022      	movs	r2, r4
 8002904:	380b      	subs	r0, #11
 8002906:	4082      	lsls	r2, r0
 8002908:	0312      	lsls	r2, r2, #12
 800290a:	2400      	movs	r4, #0
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	e7f3      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 8002910:	0000041e 	.word	0x0000041e

08002914 <__aeabi_f2d>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	0242      	lsls	r2, r0, #9
 8002918:	0043      	lsls	r3, r0, #1
 800291a:	0fc4      	lsrs	r4, r0, #31
 800291c:	20fe      	movs	r0, #254	@ 0xfe
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	0a55      	lsrs	r5, r2, #9
 8002924:	4208      	tst	r0, r1
 8002926:	d00c      	beq.n	8002942 <__aeabi_f2d+0x2e>
 8002928:	21e0      	movs	r1, #224	@ 0xe0
 800292a:	0089      	lsls	r1, r1, #2
 800292c:	468c      	mov	ip, r1
 800292e:	076d      	lsls	r5, r5, #29
 8002930:	0b12      	lsrs	r2, r2, #12
 8002932:	4463      	add	r3, ip
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	4313      	orrs	r3, r2
 8002938:	07e4      	lsls	r4, r4, #31
 800293a:	4323      	orrs	r3, r4
 800293c:	0028      	movs	r0, r5
 800293e:	0019      	movs	r1, r3
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	2b00      	cmp	r3, #0
 8002944:	d114      	bne.n	8002970 <__aeabi_f2d+0x5c>
 8002946:	2d00      	cmp	r5, #0
 8002948:	d01b      	beq.n	8002982 <__aeabi_f2d+0x6e>
 800294a:	0028      	movs	r0, r5
 800294c:	f000 f82a 	bl	80029a4 <__clzsi2>
 8002950:	280a      	cmp	r0, #10
 8002952:	dc1c      	bgt.n	800298e <__aeabi_f2d+0x7a>
 8002954:	230b      	movs	r3, #11
 8002956:	002a      	movs	r2, r5
 8002958:	1a1b      	subs	r3, r3, r0
 800295a:	40da      	lsrs	r2, r3
 800295c:	0003      	movs	r3, r0
 800295e:	3315      	adds	r3, #21
 8002960:	409d      	lsls	r5, r3
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <__aeabi_f2d+0x88>)
 8002964:	0312      	lsls	r2, r2, #12
 8002966:	1a1b      	subs	r3, r3, r0
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e7e1      	b.n	8002934 <__aeabi_f2d+0x20>
 8002970:	2d00      	cmp	r5, #0
 8002972:	d009      	beq.n	8002988 <__aeabi_f2d+0x74>
 8002974:	0b13      	lsrs	r3, r2, #12
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	0312      	lsls	r2, r2, #12
 800297a:	431a      	orrs	r2, r3
 800297c:	076d      	lsls	r5, r5, #29
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <__aeabi_f2d+0x8c>)
 8002980:	e7d8      	b.n	8002934 <__aeabi_f2d+0x20>
 8002982:	2300      	movs	r3, #0
 8002984:	2200      	movs	r2, #0
 8002986:	e7d5      	b.n	8002934 <__aeabi_f2d+0x20>
 8002988:	2200      	movs	r2, #0
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <__aeabi_f2d+0x8c>)
 800298c:	e7d2      	b.n	8002934 <__aeabi_f2d+0x20>
 800298e:	0003      	movs	r3, r0
 8002990:	002a      	movs	r2, r5
 8002992:	3b0b      	subs	r3, #11
 8002994:	409a      	lsls	r2, r3
 8002996:	2500      	movs	r5, #0
 8002998:	e7e3      	b.n	8002962 <__aeabi_f2d+0x4e>
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	00000389 	.word	0x00000389
 80029a0:	000007ff 	.word	0x000007ff

080029a4 <__clzsi2>:
 80029a4:	211c      	movs	r1, #28
 80029a6:	2301      	movs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	4298      	cmp	r0, r3
 80029ac:	d301      	bcc.n	80029b2 <__clzsi2+0xe>
 80029ae:	0c00      	lsrs	r0, r0, #16
 80029b0:	3910      	subs	r1, #16
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	4298      	cmp	r0, r3
 80029b6:	d301      	bcc.n	80029bc <__clzsi2+0x18>
 80029b8:	0a00      	lsrs	r0, r0, #8
 80029ba:	3908      	subs	r1, #8
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	4298      	cmp	r0, r3
 80029c0:	d301      	bcc.n	80029c6 <__clzsi2+0x22>
 80029c2:	0900      	lsrs	r0, r0, #4
 80029c4:	3904      	subs	r1, #4
 80029c6:	a202      	add	r2, pc, #8	@ (adr r2, 80029d0 <__clzsi2+0x2c>)
 80029c8:	5c10      	ldrb	r0, [r2, r0]
 80029ca:	1840      	adds	r0, r0, r1
 80029cc:	4770      	bx	lr
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	02020304 	.word	0x02020304
 80029d4:	01010101 	.word	0x01010101
	...

080029e0 <__clzdi2>:
 80029e0:	b510      	push	{r4, lr}
 80029e2:	2900      	cmp	r1, #0
 80029e4:	d103      	bne.n	80029ee <__clzdi2+0xe>
 80029e6:	f7ff ffdd 	bl	80029a4 <__clzsi2>
 80029ea:	3020      	adds	r0, #32
 80029ec:	e002      	b.n	80029f4 <__clzdi2+0x14>
 80029ee:	0008      	movs	r0, r1
 80029f0:	f7ff ffd8 	bl	80029a4 <__clzsi2>
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)

080029f8 <LIS3DH_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Write one register
void LIS3DH_WriteRegister(uint8_t reg, uint8_t value) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	0002      	movs	r2, r0
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	1c0a      	adds	r2, r1, #0
 8002a08:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, LIS3DH_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4807      	ldr	r0, [pc, #28]	@ (8002a30 <LIS3DH_WriteRegister+0x38>)
 8002a12:	2301      	movs	r3, #1
 8002a14:	425b      	negs	r3, r3
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	1dbb      	adds	r3, r7, #6
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2301      	movs	r3, #1
 8002a22:	2132      	movs	r1, #50	@ 0x32
 8002a24:	f000 ff2c 	bl	8003880 <HAL_I2C_Mem_Write>
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200001f0 	.word	0x200001f0

08002a34 <LIS3DH_ReadRegister>:

// Read one register
uint8_t LIS3DH_ReadRegister(uint8_t reg) {
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, LIS3DH_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4809      	ldr	r0, [pc, #36]	@ (8002a6c <LIS3DH_ReadRegister+0x38>)
 8002a48:	2301      	movs	r3, #1
 8002a4a:	425b      	negs	r3, r3
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	240f      	movs	r4, #15
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2301      	movs	r3, #1
 8002a5a:	2132      	movs	r1, #50	@ 0x32
 8002a5c:	f001 f83e 	bl	8003adc <HAL_I2C_Mem_Read>
    return value;
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	781b      	ldrb	r3, [r3, #0]
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b005      	add	sp, #20
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	200001f0 	.word	0x200001f0

08002a70 <LIS3DH_Init>:

// Initialize LIS3DH
void LIS3DH_Init(void) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
    // Enable X, Y, Z axes and set data rate to 10Hz
    LIS3DH_WriteRegister(LIS3DH_CTRL_REG1, 0x27);
 8002a74:	2127      	movs	r1, #39	@ 0x27
 8002a76:	2020      	movs	r0, #32
 8002a78:	f7ff ffbe 	bl	80029f8 <LIS3DH_WriteRegister>

    // High-resolution mode, +/- 2g scale
    LIS3DH_WriteRegister(LIS3DH_CTRL_REG4, 0x08);
 8002a7c:	2108      	movs	r1, #8
 8002a7e:	2023      	movs	r0, #35	@ 0x23
 8002a80:	f7ff ffba 	bl	80029f8 <LIS3DH_WriteRegister>
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <LIS3DH_ReadAxis>:

// Read raw 16-bit acceleration for one axis
int16_t LIS3DH_ReadAxis(uint8_t regL, uint8_t regH) {
 8002a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	0002      	movs	r2, r0
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	1dbb      	adds	r3, r7, #6
 8002a98:	1c0a      	adds	r2, r1, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    uint8_t lsb = LIS3DH_ReadRegister(regL);
 8002a9c:	250f      	movs	r5, #15
 8002a9e:	197c      	adds	r4, r7, r5
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff ffc5 	bl	8002a34 <LIS3DH_ReadRegister>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	7023      	strb	r3, [r4, #0]
    uint8_t msb = LIS3DH_ReadRegister(regH);
 8002aae:	260e      	movs	r6, #14
 8002ab0:	19bc      	adds	r4, r7, r6
 8002ab2:	1dbb      	adds	r3, r7, #6
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7ff ffbc 	bl	8002a34 <LIS3DH_ReadRegister>
 8002abc:	0003      	movs	r3, r0
 8002abe:	7023      	strb	r3, [r4, #0]
    return (int16_t)((msb << 8) | lsb);
 8002ac0:	19bb      	adds	r3, r7, r6
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b21b      	sxth	r3, r3
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b005      	add	sp, #20
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002adc <LIS3DH_Print_Acceleration>:

// Print accelerometer values
void LIS3DH_Print_Acceleration(void) {
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b0af      	sub	sp, #188	@ 0xbc
 8002ae0:	af06      	add	r7, sp, #24
    char msg[128];

    int16_t x_raw = LIS3DH_ReadAxis(LIS3DH_OUT_X_L, LIS3DH_OUT_X_H);
 8002ae2:	2596      	movs	r5, #150	@ 0x96
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	18a9      	adds	r1, r5, r2
 8002ae8:	19cc      	adds	r4, r1, r7
 8002aea:	2129      	movs	r1, #41	@ 0x29
 8002aec:	2028      	movs	r0, #40	@ 0x28
 8002aee:	f7ff ffcc 	bl	8002a8a <LIS3DH_ReadAxis>
 8002af2:	0003      	movs	r3, r0
 8002af4:	8023      	strh	r3, [r4, #0]
    int16_t y_raw = LIS3DH_ReadAxis(LIS3DH_OUT_Y_L, LIS3DH_OUT_Y_H);
 8002af6:	2694      	movs	r6, #148	@ 0x94
 8002af8:	2208      	movs	r2, #8
 8002afa:	18b1      	adds	r1, r6, r2
 8002afc:	19cc      	adds	r4, r1, r7
 8002afe:	212b      	movs	r1, #43	@ 0x2b
 8002b00:	202a      	movs	r0, #42	@ 0x2a
 8002b02:	f7ff ffc2 	bl	8002a8a <LIS3DH_ReadAxis>
 8002b06:	0003      	movs	r3, r0
 8002b08:	8023      	strh	r3, [r4, #0]
    int16_t z_raw = LIS3DH_ReadAxis(LIS3DH_OUT_Z_L, LIS3DH_OUT_Z_H);
 8002b0a:	2392      	movs	r3, #146	@ 0x92
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	1899      	adds	r1, r3, r2
 8002b10:	19cc      	adds	r4, r1, r7
 8002b12:	212d      	movs	r1, #45	@ 0x2d
 8002b14:	202c      	movs	r0, #44	@ 0x2c
 8002b16:	f7ff ffb8 	bl	8002a8a <LIS3DH_ReadAxis>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	8023      	strh	r3, [r4, #0]

    // In High-Resolution mode, sensitivity is 1 mg/LSB (for ±2g range)
    float x = x_raw * 0.001f;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	18ea      	adds	r2, r5, r3
 8002b22:	19d3      	adds	r3, r2, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	5e9b      	ldrsh	r3, [r3, r2]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fd ff03 	bl	8000934 <__aeabi_i2f>
 8002b2e:	1c03      	adds	r3, r0, #0
 8002b30:	4933      	ldr	r1, [pc, #204]	@ (8002c00 <LIS3DH_Print_Acceleration+0x124>)
 8002b32:	1c18      	adds	r0, r3, #0
 8002b34:	f7fd fda4 	bl	8000680 <__aeabi_fmul>
 8002b38:	1c03      	adds	r3, r0, #0
 8002b3a:	248c      	movs	r4, #140	@ 0x8c
 8002b3c:	2508      	movs	r5, #8
 8002b3e:	1962      	adds	r2, r4, r5
 8002b40:	19d2      	adds	r2, r2, r7
 8002b42:	6013      	str	r3, [r2, #0]
    float y = y_raw * 0.001f;
 8002b44:	1973      	adds	r3, r6, r5
 8002b46:	19db      	adds	r3, r3, r7
 8002b48:	2200      	movs	r2, #0
 8002b4a:	5e9b      	ldrsh	r3, [r3, r2]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fd fef1 	bl	8000934 <__aeabi_i2f>
 8002b52:	1c03      	adds	r3, r0, #0
 8002b54:	492a      	ldr	r1, [pc, #168]	@ (8002c00 <LIS3DH_Print_Acceleration+0x124>)
 8002b56:	1c18      	adds	r0, r3, #0
 8002b58:	f7fd fd92 	bl	8000680 <__aeabi_fmul>
 8002b5c:	1c03      	adds	r3, r0, #0
 8002b5e:	2688      	movs	r6, #136	@ 0x88
 8002b60:	1972      	adds	r2, r6, r5
 8002b62:	19d2      	adds	r2, r2, r7
 8002b64:	6013      	str	r3, [r2, #0]
    float z = z_raw * 0.001f;
 8002b66:	2392      	movs	r3, #146	@ 0x92
 8002b68:	195b      	adds	r3, r3, r5
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7fd fedf 	bl	8000934 <__aeabi_i2f>
 8002b76:	1c03      	adds	r3, r0, #0
 8002b78:	4921      	ldr	r1, [pc, #132]	@ (8002c00 <LIS3DH_Print_Acceleration+0x124>)
 8002b7a:	1c18      	adds	r0, r3, #0
 8002b7c:	f7fd fd80 	bl	8000680 <__aeabi_fmul>
 8002b80:	1c03      	adds	r3, r0, #0
 8002b82:	2284      	movs	r2, #132	@ 0x84
 8002b84:	1952      	adds	r2, r2, r5
 8002b86:	19d1      	adds	r1, r2, r7
 8002b88:	600b      	str	r3, [r1, #0]

    int len = snprintf(msg, sizeof(msg), "X: %.3f g, Y: %.3f g, Z: %.3f g\r\n", x, y, z);
 8002b8a:	1962      	adds	r2, r4, r5
 8002b8c:	19d1      	adds	r1, r2, r7
 8002b8e:	6808      	ldr	r0, [r1, #0]
 8002b90:	f7ff fec0 	bl	8002914 <__aeabi_f2d>
 8002b94:	0004      	movs	r4, r0
 8002b96:	000d      	movs	r5, r1
 8002b98:	2308      	movs	r3, #8
 8002b9a:	18f2      	adds	r2, r6, r3
 8002b9c:	19d1      	adds	r1, r2, r7
 8002b9e:	6808      	ldr	r0, [r1, #0]
 8002ba0:	f7ff feb8 	bl	8002914 <__aeabi_f2d>
 8002ba4:	6038      	str	r0, [r7, #0]
 8002ba6:	6079      	str	r1, [r7, #4]
 8002ba8:	2384      	movs	r3, #132	@ 0x84
 8002baa:	2608      	movs	r6, #8
 8002bac:	199b      	adds	r3, r3, r6
 8002bae:	19db      	adds	r3, r3, r7
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	f7ff feaf 	bl	8002914 <__aeabi_f2d>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	000b      	movs	r3, r1
 8002bba:	4912      	ldr	r1, [pc, #72]	@ (8002c04 <LIS3DH_Print_Acceleration+0x128>)
 8002bbc:	19b8      	adds	r0, r7, r6
 8002bbe:	9204      	str	r2, [sp, #16]
 8002bc0:	9305      	str	r3, [sp, #20]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	9202      	str	r2, [sp, #8]
 8002bc8:	9303      	str	r3, [sp, #12]
 8002bca:	9400      	str	r4, [sp, #0]
 8002bcc:	9501      	str	r5, [sp, #4]
 8002bce:	000a      	movs	r2, r1
 8002bd0:	2180      	movs	r1, #128	@ 0x80
 8002bd2:	f003 fd89 	bl	80066e8 <sniprintf>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	0030      	movs	r0, r6
 8002bdc:	1811      	adds	r1, r2, r0
 8002bde:	19c9      	adds	r1, r1, r7
 8002be0:	600b      	str	r3, [r1, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8002be2:	0001      	movs	r1, r0
 8002be4:	1853      	adds	r3, r2, r1
 8002be6:	19db      	adds	r3, r3, r7
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	2301      	movs	r3, #1
 8002bee:	425b      	negs	r3, r3
 8002bf0:	1879      	adds	r1, r7, r1
 8002bf2:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <LIS3DH_Print_Acceleration+0x12c>)
 8002bf4:	f002 fb3a 	bl	800526c <HAL_UART_Transmit>
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b029      	add	sp, #164	@ 0xa4
 8002bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c00:	3a83126f 	.word	0x3a83126f
 8002c04:	08008ac0 	.word	0x08008ac0
 8002c08:	20000244 	.word	0x20000244

08002c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c10:	f000 faca 	bl	80031a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c14:	f000 f812 	bl	8002c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c18:	f000 f8ee 	bl	8002df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c1c:	f000 f87c 	bl	8002d18 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002c20:	f000 f8ba 	bl	8002d98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LIS3DH_Init(); // Initialize accelerometer
 8002c24:	f7ff ff24 	bl	8002a70 <LIS3DH_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIS3DH_Print_Acceleration();
 8002c28:	f7ff ff58 	bl	8002adc <LIS3DH_Print_Acceleration>
	      HAL_Delay(1000);
 8002c2c:	23fa      	movs	r3, #250	@ 0xfa
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fb29 	bl	8003288 <HAL_Delay>
	  LIS3DH_Print_Acceleration();
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	e7f6      	b.n	8002c28 <main+0x1c>
	...

08002c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b099      	sub	sp, #100	@ 0x64
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	242c      	movs	r4, #44	@ 0x2c
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	0018      	movs	r0, r3
 8002c48:	2334      	movs	r3, #52	@ 0x34
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f003 fdcd 	bl	80067ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c52:	2318      	movs	r3, #24
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	0018      	movs	r0, r3
 8002c58:	2314      	movs	r3, #20
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f003 fdc5 	bl	80067ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c62:	003b      	movs	r3, r7
 8002c64:	0018      	movs	r0, r3
 8002c66:	2318      	movs	r3, #24
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f003 fdbe 	bl	80067ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c70:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <SystemClock_Config+0xd4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a27      	ldr	r2, [pc, #156]	@ (8002d14 <SystemClock_Config+0xd8>)
 8002c76:	401a      	ands	r2, r3
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <SystemClock_Config+0xd4>)
 8002c7a:	2180      	movs	r1, #128	@ 0x80
 8002c7c:	0109      	lsls	r1, r1, #4
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c82:	0021      	movs	r1, r4
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	2210      	movs	r2, #16
 8002c88:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	22a0      	movs	r2, #160	@ 0xa0
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 fbe0 	bl	800446c <HAL_RCC_OscConfig>
 8002cac:	1e03      	subs	r3, r0, #0
 8002cae:	d001      	beq.n	8002cb4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002cb0:	f000 f8b8 	bl	8002e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cb4:	2118      	movs	r1, #24
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	220f      	movs	r2, #15
 8002cba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 ff43 	bl	8004b64 <HAL_RCC_ClockConfig>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002ce2:	f000 f89f 	bl	8002e24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002ce6:	003b      	movs	r3, r7
 8002ce8:	220a      	movs	r2, #10
 8002cea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cec:	003b      	movs	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cf2:	003b      	movs	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf8:	003b      	movs	r3, r7
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f002 f936 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8002d00:	1e03      	subs	r3, r0, #0
 8002d02:	d001      	beq.n	8002d08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002d04:	f000 f88e 	bl	8002e24 <Error_Handler>
  }
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b019      	add	sp, #100	@ 0x64
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	40007000 	.word	0x40007000
 8002d14:	ffffe7ff 	.word	0xffffe7ff

08002d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <MX_I2C1_Init+0x7c>)
 8002d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d24:	22c1      	movs	r2, #193	@ 0xc1
 8002d26:	00d2      	lsls	r2, r2, #3
 8002d28:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d42:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 fcec 	bl	8003734 <HAL_I2C_Init>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d60:	f000 f860 	bl	8002e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d66:	2100      	movs	r1, #0
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 fae7 	bl	800433c <HAL_I2CEx_ConfigAnalogFilter>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002d72:	f000 f857 	bl	8002e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <MX_I2C1_Init+0x78>)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f001 fb2a 	bl	80043d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002d84:	f000 f84e 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	200001f0 	.word	0x200001f0
 8002d94:	40005400 	.word	0x40005400

08002d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002d9e:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <MX_USART2_UART_Init+0x5c>)
 8002da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002da2:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002da4:	22e1      	movs	r2, #225	@ 0xe1
 8002da6:	0252      	lsls	r2, r2, #9
 8002da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dda:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <MX_USART2_UART_Init+0x58>)
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f002 f9f1 	bl	80051c4 <HAL_UART_Init>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002de6:	f000 f81d 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000244 	.word	0x20000244
 8002df4:	40004400 	.word	0x40004400

08002df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <MX_GPIO_Init+0x28>)
 8002e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <MX_GPIO_Init+0x28>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <MX_GPIO_Init+0x28>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b002      	add	sp, #8
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	40021000 	.word	0x40021000

08002e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e28:	b672      	cpsid	i
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	e7fd      	b.n	8002e2c <Error_Handler+0x8>

08002e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <HAL_MspInit+0x24>)
 8002e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_MspInit+0x24>)
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <HAL_MspInit+0x24>)
 8002e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_MspInit+0x24>)
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	0549      	lsls	r1, r1, #21
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	240c      	movs	r4, #12
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	0018      	movs	r0, r3
 8002e66:	2314      	movs	r3, #20
 8002e68:	001a      	movs	r2, r3
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f003 fcbe 	bl	80067ec <memset>
  if(hi2c->Instance==I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <HAL_I2C_MspInit+0x80>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d12a      	bne.n	8002ed0 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <HAL_I2C_MspInit+0x84>)
 8002e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_I2C_MspInit+0x84>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_I2C_MspInit+0x84>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e92:	193b      	adds	r3, r7, r4
 8002e94:	22c0      	movs	r2, #192	@ 0xc0
 8002e96:	00d2      	lsls	r2, r2, #3
 8002e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9a:	0021      	movs	r1, r4
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	2212      	movs	r2, #18
 8002ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	187a      	adds	r2, r7, r1
 8002eb6:	23a0      	movs	r3, #160	@ 0xa0
 8002eb8:	05db      	lsls	r3, r3, #23
 8002eba:	0011      	movs	r1, r2
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 fabb 	bl	8003438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_I2C_MspInit+0x84>)
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_I2C_MspInit+0x84>)
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	0389      	lsls	r1, r1, #14
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b009      	add	sp, #36	@ 0x24
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	240c      	movs	r4, #12
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	0018      	movs	r0, r3
 8002eee:	2314      	movs	r3, #20
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f003 fc7a 	bl	80067ec <memset>
  if(huart->Instance==USART2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <HAL_UART_MspInit+0x80>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d129      	bne.n	8002f56 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f02:	4b18      	ldr	r3, [pc, #96]	@ (8002f64 <HAL_UART_MspInit+0x84>)
 8002f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f06:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_UART_MspInit+0x84>)
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	0289      	lsls	r1, r1, #10
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <HAL_UART_MspInit+0x84>)
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_UART_MspInit+0x84>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_UART_MspInit+0x84>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f28:	0021      	movs	r1, r4
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2202      	movs	r2, #2
 8002f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	2204      	movs	r2, #4
 8002f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	187a      	adds	r2, r7, r1
 8002f4a:	23a0      	movs	r3, #160	@ 0xa0
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fa71 	bl	8003438 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b009      	add	sp, #36	@ 0x24
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40021000 	.word	0x40021000

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	e7fd      	b.n	8002f6c <NMI_Handler+0x4>

08002f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	e7fd      	b.n	8002f74 <HardFault_Handler+0x4>

08002f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f90:	f000 f95e 	bl	8003250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
  return 1;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_kill>:

int _kill(int pid, int sig)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb0:	f003 fc76 	bl	80068a0 <__errno>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	2216      	movs	r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]
  return -1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	425b      	negs	r3, r3
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_exit>:

void _exit (int status)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fce:	2301      	movs	r3, #1
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff ffe5 	bl	8002fa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	e7fd      	b.n	8002fdc <_exit+0x16>

08002fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e00a      	b.n	8003008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ff2:	e000      	b.n	8002ff6 <_read+0x16>
 8002ff4:	bf00      	nop
 8002ff6:	0001      	movs	r1, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	60ba      	str	r2, [r7, #8]
 8002ffe:	b2ca      	uxtb	r2, r1
 8003000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	dbf0      	blt.n	8002ff2 <_read+0x12>
  }

  return len;
 8003010:	687b      	ldr	r3, [r7, #4]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b006      	add	sp, #24
 8003018:	bd80      	pop	{r7, pc}

0800301a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e009      	b.n	8003040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	60ba      	str	r2, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	0018      	movs	r0, r3
 8003036:	e000      	b.n	800303a <_write+0x20>
 8003038:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbf1      	blt.n	800302c <_write+0x12>
  }
  return len;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b006      	add	sp, #24
 8003050:	bd80      	pop	{r7, pc}

08003052 <_close>:

int _close(int file)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800305a:	2301      	movs	r3, #1
 800305c:	425b      	negs	r3, r3
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}

08003066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	0192      	lsls	r2, r2, #6
 8003076:	605a      	str	r2, [r3, #4]
  return 0;
 8003078:	2300      	movs	r3, #0
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b002      	add	sp, #8
 8003080:	bd80      	pop	{r7, pc}

08003082 <_isatty>:

int _isatty(int file)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800308a:	2301      	movs	r3, #1
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f003 fbe0 	bl	80068a0 <__errno>
 80030e0:	0003      	movs	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	425b      	negs	r3, r3
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	18d2      	adds	r2, r2, r3
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <_sbrk+0x64>)
 80030fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20005000 	.word	0x20005000
 800310c:	00000400 	.word	0x00000400
 8003110:	200002cc 	.word	0x200002cc
 8003114:	20000420 	.word	0x20000420

08003118 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003124:	4813      	ldr	r0, [pc, #76]	@ (8003174 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003126:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003128:	f7ff fff6 	bl	8003118 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800312c:	4812      	ldr	r0, [pc, #72]	@ (8003178 <LoopForever+0x6>)
    LDR R1, [R0]
 800312e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003130:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <LoopForever+0xa>)
    CMP R1, R2
 8003134:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003136:	d105      	bne.n	8003144 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003138:	4811      	ldr	r0, [pc, #68]	@ (8003180 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800313a:	4912      	ldr	r1, [pc, #72]	@ (8003184 <LoopForever+0x12>)
    STR R1, [R0]
 800313c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800313e:	4812      	ldr	r0, [pc, #72]	@ (8003188 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003140:	4912      	ldr	r1, [pc, #72]	@ (800318c <LoopForever+0x1a>)
    STR R1, [R0]
 8003142:	6001      	str	r1, [r0, #0]

08003144 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003144:	4812      	ldr	r0, [pc, #72]	@ (8003190 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003146:	4913      	ldr	r1, [pc, #76]	@ (8003194 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003148:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <LoopForever+0x26>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a10      	ldr	r2, [pc, #64]	@ (800319c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800315c:	4c10      	ldr	r4, [pc, #64]	@ (80031a0 <LoopForever+0x2e>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800316a:	f003 fb9f 	bl	80068ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7ff fd4d 	bl	8002c0c <main>

08003172 <LoopForever>:

LoopForever:
    b LoopForever
 8003172:	e7fe      	b.n	8003172 <LoopForever>
   ldr   r0, =_estack
 8003174:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8003178:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800317c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003180:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003184:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003188:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800318c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003194:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003198:	08008f14 	.word	0x08008f14
  ldr r2, =_sbss
 800319c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80031a0:	20000420 	.word	0x20000420

080031a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC1_IRQHandler>
	...

080031a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <HAL_Init+0x3c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_Init+0x3c>)
 80031ba:	2140      	movs	r1, #64	@ 0x40
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031c0:	2003      	movs	r0, #3
 80031c2:	f000 f811 	bl	80031e8 <HAL_InitTick>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e001      	b.n	80031d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031d2:	f7ff fe2d 	bl	8002e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	40022000 	.word	0x40022000

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_InitTick+0x5c>)
 80031f2:	681c      	ldr	r4, [r3, #0]
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <HAL_InitTick+0x60>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	0019      	movs	r1, r3
 80031fa:	23fa      	movs	r3, #250	@ 0xfa
 80031fc:	0098      	lsls	r0, r3, #2
 80031fe:	f7fc ff9f 	bl	8000140 <__udivsi3>
 8003202:	0003      	movs	r3, r0
 8003204:	0019      	movs	r1, r3
 8003206:	0020      	movs	r0, r4
 8003208:	f7fc ff9a 	bl	8000140 <__udivsi3>
 800320c:	0003      	movs	r3, r0
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f905 	bl	800341e <HAL_SYSTICK_Config>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e00f      	b.n	800323c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d80b      	bhi.n	800323a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	2301      	movs	r3, #1
 8003226:	425b      	negs	r3, r3
 8003228:	2200      	movs	r2, #0
 800322a:	0018      	movs	r0, r3
 800322c:	f000 f8e2 	bl	80033f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_InitTick+0x64>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b003      	add	sp, #12
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	20000000 	.word	0x20000000
 8003248:	20000008 	.word	0x20000008
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_IncTick+0x1c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	001a      	movs	r2, r3
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_IncTick+0x20>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	18d2      	adds	r2, r2, r3
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_IncTick+0x20>)
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	46c0      	nop			@ (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000008 	.word	0x20000008
 8003270:	200002d0 	.word	0x200002d0

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <HAL_GetTick+0x10>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	200002d0 	.word	0x200002d0

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff fff0 	bl	8003274 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	001a      	movs	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	f7ff ffe0 	bl	8003274 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	20000008 	.word	0x20000008

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80032e4:	d828      	bhi.n	8003338 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e6:	4a2f      	ldr	r2, [pc, #188]	@ (80033a4 <__NVIC_SetPriority+0xd4>)
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	33c0      	adds	r3, #192	@ 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	589b      	ldr	r3, [r3, r2]
 80032f6:	1dfa      	adds	r2, r7, #7
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	0011      	movs	r1, r2
 80032fc:	2203      	movs	r2, #3
 80032fe:	400a      	ands	r2, r1
 8003300:	00d2      	lsls	r2, r2, #3
 8003302:	21ff      	movs	r1, #255	@ 0xff
 8003304:	4091      	lsls	r1, r2
 8003306:	000a      	movs	r2, r1
 8003308:	43d2      	mvns	r2, r2
 800330a:	401a      	ands	r2, r3
 800330c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	22ff      	movs	r2, #255	@ 0xff
 8003314:	401a      	ands	r2, r3
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	0018      	movs	r0, r3
 800331c:	2303      	movs	r3, #3
 800331e:	4003      	ands	r3, r0
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003324:	481f      	ldr	r0, [pc, #124]	@ (80033a4 <__NVIC_SetPriority+0xd4>)
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25b      	sxtb	r3, r3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	430a      	orrs	r2, r1
 8003330:	33c0      	adds	r3, #192	@ 0xc0
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003336:	e031      	b.n	800339c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <__NVIC_SetPriority+0xd8>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0019      	movs	r1, r3
 8003340:	230f      	movs	r3, #15
 8003342:	400b      	ands	r3, r1
 8003344:	3b08      	subs	r3, #8
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3306      	adds	r3, #6
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	3304      	adds	r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	@ 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	@ 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	4809      	ldr	r0, [pc, #36]	@ (80033a8 <__NVIC_SetPriority+0xd8>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001c      	movs	r4, r3
 8003388:	230f      	movs	r3, #15
 800338a:	4023      	ands	r3, r4
 800338c:	3b08      	subs	r3, #8
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	430a      	orrs	r2, r1
 8003392:	3306      	adds	r3, #6
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18c3      	adds	r3, r0, r3
 8003398:	3304      	adds	r3, #4
 800339a:	601a      	str	r2, [r3, #0]
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b003      	add	sp, #12
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	045b      	lsls	r3, r3, #17
 80033bc:	429a      	cmp	r2, r3
 80033be:	d301      	bcc.n	80033c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c0:	2301      	movs	r3, #1
 80033c2:	e010      	b.n	80033e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c4:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <SysTick_Config+0x44>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	3a01      	subs	r2, #1
 80033ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033cc:	2301      	movs	r3, #1
 80033ce:	425b      	negs	r3, r3
 80033d0:	2103      	movs	r1, #3
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff ff7c 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <SysTick_Config+0x44>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <SysTick_Config+0x44>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	210f      	movs	r1, #15
 8003400:	187b      	adds	r3, r7, r1
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff ffbf 	bl	80033ac <SysTick_Config>
 800342e:	0003      	movs	r3, r0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800344e:	e155      	b.n	80036fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4091      	lsls	r1, r2
 800345a:	000a      	movs	r2, r1
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d100      	bne.n	8003468 <HAL_GPIO_Init+0x30>
 8003466:	e146      	b.n	80036f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	4013      	ands	r3, r2
 8003470:	2b01      	cmp	r3, #1
 8003472:	d005      	beq.n	8003480 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800347c:	2b02      	cmp	r3, #2
 800347e:	d130      	bne.n	80034e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	409a      	lsls	r2, r3
 800348e:	0013      	movs	r3, r2
 8003490:	43da      	mvns	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	0013      	movs	r3, r2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b6:	2201      	movs	r2, #1
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
 80034bc:	0013      	movs	r3, r2
 80034be:	43da      	mvns	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	2201      	movs	r2, #1
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
 80034d4:	0013      	movs	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d017      	beq.n	800351e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	0013      	movs	r3, r2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2203      	movs	r2, #3
 8003524:	4013      	ands	r3, r2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d123      	bne.n	8003572 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	58d3      	ldr	r3, [r2, r3]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2207      	movs	r2, #7
 800353c:	4013      	ands	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	409a      	lsls	r2, r3
 8003544:	0013      	movs	r3, r2
 8003546:	43da      	mvns	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2107      	movs	r1, #7
 8003556:	400b      	ands	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	6939      	ldr	r1, [r7, #16]
 8003570:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	43da      	mvns	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	401a      	ands	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	0013      	movs	r3, r2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	23c0      	movs	r3, #192	@ 0xc0
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	4013      	ands	r3, r2
 80035b0:	d100      	bne.n	80035b4 <HAL_GPIO_Init+0x17c>
 80035b2:	e0a0      	b.n	80036f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b4:	4b57      	ldr	r3, [pc, #348]	@ (8003714 <HAL_GPIO_Init+0x2dc>)
 80035b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b8:	4b56      	ldr	r3, [pc, #344]	@ (8003714 <HAL_GPIO_Init+0x2dc>)
 80035ba:	2101      	movs	r1, #1
 80035bc:	430a      	orrs	r2, r1
 80035be:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c0:	4a55      	ldr	r2, [pc, #340]	@ (8003718 <HAL_GPIO_Init+0x2e0>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	589b      	ldr	r3, [r3, r2]
 80035cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2203      	movs	r2, #3
 80035d2:	4013      	ands	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	409a      	lsls	r2, r3
 80035da:	0013      	movs	r3, r2
 80035dc:	43da      	mvns	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	23a0      	movs	r3, #160	@ 0xa0
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x1f6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4a      	ldr	r2, [pc, #296]	@ (800371c <HAL_GPIO_Init+0x2e4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x1f2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a49      	ldr	r2, [pc, #292]	@ (8003720 <HAL_GPIO_Init+0x2e8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x1ee>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a48      	ldr	r2, [pc, #288]	@ (8003724 <HAL_GPIO_Init+0x2ec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x1ea>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <HAL_GPIO_Init+0x2f0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x1e6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a46      	ldr	r2, [pc, #280]	@ (800372c <HAL_GPIO_Init+0x2f4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x1e2>
 8003616:	2305      	movs	r3, #5
 8003618:	e00a      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 800361a:	2306      	movs	r3, #6
 800361c:	e008      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 800361e:	2304      	movs	r3, #4
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 8003622:	2303      	movs	r3, #3
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x1f8>
 800362e:	2300      	movs	r3, #0
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	2103      	movs	r1, #3
 8003634:	400a      	ands	r2, r1
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003640:	4935      	ldr	r1, [pc, #212]	@ (8003718 <HAL_GPIO_Init+0x2e0>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	035b      	lsls	r3, r3, #13
 8003666:	4013      	ands	r3, r2
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003672:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003678:	4b2d      	ldr	r3, [pc, #180]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43da      	mvns	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2380      	movs	r3, #128	@ 0x80
 800368e:	039b      	lsls	r3, r3, #14
 8003690:	4013      	ands	r3, r2
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800369c:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80036a2:	4b23      	ldr	r3, [pc, #140]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	4013      	ands	r3, r2
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036cc:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	025b      	lsls	r3, r3, #9
 80036e4:	4013      	ands	r3, r2
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <HAL_GPIO_Init+0x2f8>)
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	40da      	lsrs	r2, r3
 8003704:	1e13      	subs	r3, r2, #0
 8003706:	d000      	beq.n	800370a <HAL_GPIO_Init+0x2d2>
 8003708:	e6a2      	b.n	8003450 <HAL_GPIO_Init+0x18>
  }
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46c0      	nop			@ (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b006      	add	sp, #24
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	40010000 	.word	0x40010000
 800371c:	50000400 	.word	0x50000400
 8003720:	50000800 	.word	0x50000800
 8003724:	50000c00 	.word	0x50000c00
 8003728:	50001000 	.word	0x50001000
 800372c:	50001c00 	.word	0x50001c00
 8003730:	40010400 	.word	0x40010400

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08f      	b.n	8003866 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2241      	movs	r2, #65	@ 0x41
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2240      	movs	r2, #64	@ 0x40
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fb7b 	bl	8002e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2241      	movs	r2, #65	@ 0x41
 8003766:	2124      	movs	r1, #36	@ 0x24
 8003768:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	493b      	ldr	r1, [pc, #236]	@ (8003870 <HAL_I2C_Init+0x13c>)
 8003784:	400a      	ands	r2, r1
 8003786:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4938      	ldr	r1, [pc, #224]	@ (8003874 <HAL_I2C_Init+0x140>)
 8003794:	400a      	ands	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2180      	movs	r1, #128	@ 0x80
 80037aa:	0209      	lsls	r1, r1, #8
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e007      	b.n	80037c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2184      	movs	r1, #132	@ 0x84
 80037bc:	0209      	lsls	r1, r1, #8
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d109      	bne.n	80037de <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2180      	movs	r1, #128	@ 0x80
 80037d6:	0109      	lsls	r1, r1, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e007      	b.n	80037ee <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4923      	ldr	r1, [pc, #140]	@ (8003878 <HAL_I2C_Init+0x144>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4920      	ldr	r1, [pc, #128]	@ (800387c <HAL_I2C_Init+0x148>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	491a      	ldr	r1, [pc, #104]	@ (8003874 <HAL_I2C_Init+0x140>)
 800380a:	400a      	ands	r2, r1
 800380c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2101      	movs	r1, #1
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2241      	movs	r2, #65	@ 0x41
 8003852:	2120      	movs	r1, #32
 8003854:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2242      	movs	r2, #66	@ 0x42
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	f0ffffff 	.word	0xf0ffffff
 8003874:	ffff7fff 	.word	0xffff7fff
 8003878:	fffff7ff 	.word	0xfffff7ff
 800387c:	02008000 	.word	0x02008000

08003880 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	000c      	movs	r4, r1
 800388a:	0010      	movs	r0, r2
 800388c:	0019      	movs	r1, r3
 800388e:	230a      	movs	r3, #10
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	1c22      	adds	r2, r4, #0
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	2308      	movs	r3, #8
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	1c02      	adds	r2, r0, #0
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	1c0a      	adds	r2, r1, #0
 80038a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2241      	movs	r2, #65	@ 0x41
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d000      	beq.n	80038b2 <HAL_I2C_Mem_Write+0x32>
 80038b0:	e10c      	b.n	8003acc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_I2C_Mem_Write+0x42>
 80038b8:	232c      	movs	r3, #44	@ 0x2c
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2280      	movs	r2, #128	@ 0x80
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0ff      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	5c9b      	ldrb	r3, [r3, r2]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_I2C_Mem_Write+0x5c>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0f8      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2240      	movs	r2, #64	@ 0x40
 80038e0:	2101      	movs	r1, #1
 80038e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e4:	f7ff fcc6 	bl	8003274 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	0219      	lsls	r1, r3, #8
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2319      	movs	r3, #25
 80038f8:	2201      	movs	r2, #1
 80038fa:	f000 fb0b 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0e3      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2241      	movs	r2, #65	@ 0x41
 800390a:	2121      	movs	r1, #33	@ 0x21
 800390c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2242      	movs	r2, #66	@ 0x42
 8003912:	2140      	movs	r1, #64	@ 0x40
 8003914:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	222c      	movs	r2, #44	@ 0x2c
 8003926:	18ba      	adds	r2, r7, r2
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003932:	1dbb      	adds	r3, r7, #6
 8003934:	881c      	ldrh	r4, [r3, #0]
 8003936:	2308      	movs	r3, #8
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	230a      	movs	r3, #10
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	8819      	ldrh	r1, [r3, #0]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	0023      	movs	r3, r4
 800394e:	f000 f9f9 	bl	8003d44 <I2C_RequestMemoryWrite>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d005      	beq.n	8003962 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2240      	movs	r2, #64	@ 0x40
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0b5      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2bff      	cmp	r3, #255	@ 0xff
 800396a:	d911      	bls.n	8003990 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	@ 0xff
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	045c      	lsls	r4, r3, #17
 800397c:	230a      	movs	r3, #10
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	8819      	ldrh	r1, [r3, #0]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	2300      	movs	r3, #0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	0023      	movs	r3, r4
 800398a:	f000 fc9d 	bl	80042c8 <I2C_TransferConfig>
 800398e:	e012      	b.n	80039b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	049c      	lsls	r4, r3, #18
 80039a4:	230a      	movs	r3, #10
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	8819      	ldrh	r1, [r3, #0]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	0023      	movs	r3, r4
 80039b2:	f000 fc89 	bl	80042c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 fb01 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e081      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03a      	beq.n	8003a7a <HAL_I2C_Mem_Write+0x1fa>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d136      	bne.n	8003a7a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	0013      	movs	r3, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	f000 fa7b 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e053      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2bff      	cmp	r3, #255	@ 0xff
 8003a2e:	d911      	bls.n	8003a54 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	@ 0xff
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	2380      	movs	r3, #128	@ 0x80
 8003a3e:	045c      	lsls	r4, r3, #17
 8003a40:	230a      	movs	r3, #10
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	8819      	ldrh	r1, [r3, #0]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	f000 fc3b 	bl	80042c8 <I2C_TransferConfig>
 8003a52:	e012      	b.n	8003a7a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	2380      	movs	r3, #128	@ 0x80
 8003a66:	049c      	lsls	r4, r3, #18
 8003a68:	230a      	movs	r3, #10
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	8819      	ldrh	r1, [r3, #0]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	0023      	movs	r3, r4
 8003a76:	f000 fc27 	bl	80042c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d198      	bne.n	80039b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 fae0 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e01a      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	490b      	ldr	r1, [pc, #44]	@ (8003ad8 <HAL_I2C_Mem_Write+0x258>)
 8003aac:	400a      	ands	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2241      	movs	r2, #65	@ 0x41
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2242      	movs	r2, #66	@ 0x42
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b007      	add	sp, #28
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	fe00e800 	.word	0xfe00e800

08003adc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	230a      	movs	r3, #10
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	2308      	movs	r3, #8
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2241      	movs	r2, #65	@ 0x41
 8003b04:	5c9b      	ldrb	r3, [r3, r2]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d000      	beq.n	8003b0e <HAL_I2C_Mem_Read+0x32>
 8003b0c:	e110      	b.n	8003d30 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <HAL_I2C_Mem_Read+0x42>
 8003b14:	232c      	movs	r3, #44	@ 0x2c
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e103      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2240      	movs	r2, #64	@ 0x40
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_Mem_Read+0x5c>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0fc      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b40:	f7ff fb98 	bl	8003274 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	0219      	lsls	r1, r3, #8
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2319      	movs	r3, #25
 8003b54:	2201      	movs	r2, #1
 8003b56:	f000 f9dd 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	1e03      	subs	r3, r0, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0e7      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2241      	movs	r2, #65	@ 0x41
 8003b66:	2122      	movs	r1, #34	@ 0x22
 8003b68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2242      	movs	r2, #66	@ 0x42
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	222c      	movs	r2, #44	@ 0x2c
 8003b82:	18ba      	adds	r2, r7, r2
 8003b84:	8812      	ldrh	r2, [r2, #0]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	881c      	ldrh	r4, [r3, #0]
 8003b92:	2308      	movs	r3, #8
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	230a      	movs	r3, #10
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	8819      	ldrh	r1, [r3, #0]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 f92f 	bl	8003e0c <I2C_RequestMemoryRead>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2240      	movs	r2, #64	@ 0x40
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0b9      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2bff      	cmp	r3, #255	@ 0xff
 8003bc6:	d911      	bls.n	8003bec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	045c      	lsls	r4, r3, #17
 8003bd8:	230a      	movs	r3, #10
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	8819      	ldrh	r1, [r3, #0]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	4b56      	ldr	r3, [pc, #344]	@ (8003d3c <HAL_I2C_Mem_Read+0x260>)
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	0023      	movs	r3, r4
 8003be6:	f000 fb6f 	bl	80042c8 <I2C_TransferConfig>
 8003bea:	e012      	b.n	8003c12 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	049c      	lsls	r4, r3, #18
 8003c00:	230a      	movs	r3, #10
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	8819      	ldrh	r1, [r3, #0]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4b4c      	ldr	r3, [pc, #304]	@ (8003d3c <HAL_I2C_Mem_Read+0x260>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0023      	movs	r3, r4
 8003c0e:	f000 fb5b 	bl	80042c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2104      	movs	r1, #4
 8003c20:	f000 f978 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e082      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03a      	beq.n	8003cde <HAL_I2C_Mem_Read+0x202>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d136      	bne.n	8003cde <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	0013      	movs	r3, r2
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	f000 f949 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e053      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2bff      	cmp	r3, #255	@ 0xff
 8003c92:	d911      	bls.n	8003cb8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	045c      	lsls	r4, r3, #17
 8003ca4:	230a      	movs	r3, #10
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	8819      	ldrh	r1, [r3, #0]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	0023      	movs	r3, r4
 8003cb2:	f000 fb09 	bl	80042c8 <I2C_TransferConfig>
 8003cb6:	e012      	b.n	8003cde <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	049c      	lsls	r4, r3, #18
 8003ccc:	230a      	movs	r3, #10
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	8819      	ldrh	r1, [r3, #0]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	0023      	movs	r3, r4
 8003cda:	f000 faf5 	bl	80042c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d194      	bne.n	8003c12 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f9ae 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e01a      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2220      	movs	r2, #32
 8003d02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	490c      	ldr	r1, [pc, #48]	@ (8003d40 <HAL_I2C_Mem_Read+0x264>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2241      	movs	r2, #65	@ 0x41
 8003d18:	2120      	movs	r1, #32
 8003d1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2242      	movs	r2, #66	@ 0x42
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2240      	movs	r2, #64	@ 0x40
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b007      	add	sp, #28
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	80002400 	.word	0x80002400
 8003d40:	fe00e800 	.word	0xfe00e800

08003d44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	000c      	movs	r4, r1
 8003d4e:	0010      	movs	r0, r2
 8003d50:	0019      	movs	r1, r3
 8003d52:	250a      	movs	r5, #10
 8003d54:	197b      	adds	r3, r7, r5
 8003d56:	1c22      	adds	r2, r4, #0
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	1c02      	adds	r2, r0, #0
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	1dbb      	adds	r3, r7, #6
 8003d64:	1c0a      	adds	r2, r1, #0
 8003d66:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d68:	1dbb      	adds	r3, r7, #6
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	045c      	lsls	r4, r3, #17
 8003d72:	197b      	adds	r3, r7, r5
 8003d74:	8819      	ldrh	r1, [r3, #0]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	4b23      	ldr	r3, [pc, #140]	@ (8003e08 <I2C_RequestMemoryWrite+0xc4>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	0023      	movs	r3, r4
 8003d7e:	f000 faa3 	bl	80042c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 f91b 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e033      	b.n	8003dfe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	2308      	movs	r3, #8
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dac:	e019      	b.n	8003de2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dae:	2308      	movs	r3, #8
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc2:	6a39      	ldr	r1, [r7, #32]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f000 f8fc 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e014      	b.n	8003dfe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	0013      	movs	r3, r2
 8003dec:	2200      	movs	r2, #0
 8003dee:	2180      	movs	r1, #128	@ 0x80
 8003df0:	f000 f890 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	80002000 	.word	0x80002000

08003e0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e0c:	b5b0      	push	{r4, r5, r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	000c      	movs	r4, r1
 8003e16:	0010      	movs	r0, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	250a      	movs	r5, #10
 8003e1c:	197b      	adds	r3, r7, r5
 8003e1e:	1c22      	adds	r2, r4, #0
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	2308      	movs	r3, #8
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	1c02      	adds	r2, r0, #0
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	1dbb      	adds	r3, r7, #6
 8003e2c:	1c0a      	adds	r2, r1, #0
 8003e2e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	197b      	adds	r3, r7, r5
 8003e38:	8819      	ldrh	r1, [r3, #0]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <I2C_RequestMemoryRead+0xc0>)
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	f000 fa41 	bl	80042c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 f8b9 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e033      	b.n	8003ec2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e62:	2308      	movs	r3, #8
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e70:	e019      	b.n	8003ea6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e72:	2308      	movs	r3, #8
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 f89a 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e014      	b.n	8003ec2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e98:	2308      	movs	r3, #8
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	0013      	movs	r3, r2
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	@ 0x40
 8003eb4:	f000 f82e 	bl	8003f14 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	80002000 	.word	0x80002000

08003ed0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d103      	bne.n	8003eee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d007      	beq.n	8003f0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]
  }
}
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f24:	e03a      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 f8d3 	bl	80040d8 <I2C_IsErrorOccurred>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e040      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	d02d      	beq.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7ff f998 	bl	8003274 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d122      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	425a      	negs	r2, r3
 8003f66:	4153      	adcs	r3, r2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	1dfb      	adds	r3, r7, #7
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d113      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	2220      	movs	r2, #32
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2241      	movs	r2, #65	@ 0x41
 8003f84:	2120      	movs	r1, #32
 8003f86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2242      	movs	r2, #66	@ 0x42
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2240      	movs	r2, #64	@ 0x40
 8003f94:	2100      	movs	r1, #0
 8003f96:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e00f      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	425a      	negs	r2, r3
 8003fac:	4153      	adcs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d0b5      	beq.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd0:	e032      	b.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 f87d 	bl	80040d8 <I2C_IsErrorOccurred>
 8003fde:	1e03      	subs	r3, r0, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e030      	b.n	8004048 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	d025      	beq.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fec:	f7ff f942 	bl	8003274 <HAL_GetTick>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11a      	bne.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2202      	movs	r2, #2
 800400a:	4013      	ands	r3, r2
 800400c:	2b02      	cmp	r3, #2
 800400e:	d013      	beq.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	2220      	movs	r2, #32
 8004016:	431a      	orrs	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2241      	movs	r2, #65	@ 0x41
 8004020:	2120      	movs	r1, #32
 8004022:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2242      	movs	r2, #66	@ 0x42
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e007      	b.n	8004048 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d1c5      	bne.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b004      	add	sp, #16
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	e02f      	b.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f837 	bl	80040d8 <I2C_IsErrorOccurred>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e02d      	b.n	80040ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7ff f8ff 	bl	8003274 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11a      	bne.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2220      	movs	r2, #32
 8004090:	4013      	ands	r3, r2
 8004092:	2b20      	cmp	r3, #32
 8004094:	d013      	beq.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	2220      	movs	r2, #32
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2241      	movs	r2, #65	@ 0x41
 80040a6:	2120      	movs	r1, #32
 80040a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2242      	movs	r2, #66	@ 0x42
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2240      	movs	r2, #64	@ 0x40
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e007      	b.n	80040ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2220      	movs	r2, #32
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d1c8      	bne.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	@ 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2327      	movs	r3, #39	@ 0x27
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2210      	movs	r2, #16
 8004100:	4013      	ands	r3, r2
 8004102:	d100      	bne.n	8004106 <I2C_IsErrorOccurred+0x2e>
 8004104:	e079      	b.n	80041fa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2210      	movs	r2, #16
 800410c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800410e:	e057      	b.n	80041c0 <I2C_IsErrorOccurred+0xe8>
 8004110:	2227      	movs	r2, #39	@ 0x27
 8004112:	18bb      	adds	r3, r7, r2
 8004114:	18ba      	adds	r2, r7, r2
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3301      	adds	r3, #1
 800411e:	d04f      	beq.n	80041c0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7ff f8a8 	bl	8003274 <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_IsErrorOccurred+0x5e>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d144      	bne.n	80041c0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	01db      	lsls	r3, r3, #7
 8004140:	4013      	ands	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004144:	2013      	movs	r0, #19
 8004146:	183b      	adds	r3, r7, r0
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	2142      	movs	r1, #66	@ 0x42
 800414c:	5c52      	ldrb	r2, [r2, r1]
 800414e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	401a      	ands	r2, r3
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	429a      	cmp	r2, r3
 8004162:	d126      	bne.n	80041b2 <I2C_IsErrorOccurred+0xda>
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	01db      	lsls	r3, r3, #7
 800416a:	429a      	cmp	r2, r3
 800416c:	d021      	beq.n	80041b2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800416e:	183b      	adds	r3, r7, r0
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b20      	cmp	r3, #32
 8004174:	d01d      	beq.n	80041b2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2180      	movs	r1, #128	@ 0x80
 8004182:	01c9      	lsls	r1, r1, #7
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004188:	f7ff f874 	bl	8003274 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004190:	e00f      	b.n	80041b2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004192:	f7ff f86f 	bl	8003274 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b19      	cmp	r3, #25
 800419e:	d908      	bls.n	80041b2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2220      	movs	r2, #32
 80041a4:	4313      	orrs	r3, r2
 80041a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041a8:	2327      	movs	r3, #39	@ 0x27
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]

              break;
 80041b0:	e006      	b.n	80041c0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2220      	movs	r2, #32
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d1e8      	bne.n	8004192 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2220      	movs	r2, #32
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d004      	beq.n	80041d8 <I2C_IsErrorOccurred+0x100>
 80041ce:	2327      	movs	r3, #39	@ 0x27
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d09b      	beq.n	8004110 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041d8:	2327      	movs	r3, #39	@ 0x27
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2220      	movs	r2, #32
 80041e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	2204      	movs	r2, #4
 80041ee:	4313      	orrs	r3, r2
 80041f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041f2:	2327      	movs	r3, #39	@ 0x27
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d00c      	beq.n	8004226 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	2201      	movs	r2, #1
 8004210:	4313      	orrs	r3, r2
 8004212:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	0052      	lsls	r2, r2, #1
 800421c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800421e:	2327      	movs	r3, #39	@ 0x27
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4013      	ands	r3, r2
 800422e:	d00c      	beq.n	800424a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2208      	movs	r2, #8
 8004234:	4313      	orrs	r3, r2
 8004236:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	00d2      	lsls	r2, r2, #3
 8004240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004242:	2327      	movs	r3, #39	@ 0x27
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4013      	ands	r3, r2
 8004252:	d00c      	beq.n	800426e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2202      	movs	r2, #2
 8004258:	4313      	orrs	r3, r2
 800425a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2280      	movs	r2, #128	@ 0x80
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004266:	2327      	movs	r3, #39	@ 0x27
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800426e:	2327      	movs	r3, #39	@ 0x27
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01d      	beq.n	80042b4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fe28 	bl	8003ed0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	490e      	ldr	r1, [pc, #56]	@ (80042c4 <I2C_IsErrorOccurred+0x1ec>)
 800428c:	400a      	ands	r2, r1
 800428e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2241      	movs	r2, #65	@ 0x41
 80042a0:	2120      	movs	r1, #32
 80042a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2242      	movs	r2, #66	@ 0x42
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2240      	movs	r2, #64	@ 0x40
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80042b4:	2327      	movs	r3, #39	@ 0x27
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b00a      	add	sp, #40	@ 0x28
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	fe00e800 	.word	0xfe00e800

080042c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	0008      	movs	r0, r1
 80042d2:	0011      	movs	r1, r2
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	240a      	movs	r4, #10
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	1c02      	adds	r2, r0, #0
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	2009      	movs	r0, #9
 80042e0:	183b      	adds	r3, r7, r0
 80042e2:	1c0a      	adds	r2, r1, #0
 80042e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	059b      	lsls	r3, r3, #22
 80042ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0419      	lsls	r1, r3, #16
 80042f4:	23ff      	movs	r3, #255	@ 0xff
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	4313      	orrs	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004312:	0d51      	lsrs	r1, r2, #21
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	00d2      	lsls	r2, r2, #3
 8004318:	400a      	ands	r2, r1
 800431a:	4907      	ldr	r1, [pc, #28]	@ (8004338 <I2C_TransferConfig+0x70>)
 800431c:	430a      	orrs	r2, r1
 800431e:	43d2      	mvns	r2, r2
 8004320:	401a      	ands	r2, r3
 8004322:	0011      	movs	r1, r2
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b007      	add	sp, #28
 8004334:	bd90      	pop	{r4, r7, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	03ff63ff 	.word	0x03ff63ff

0800433c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2241      	movs	r2, #65	@ 0x41
 800434a:	5c9b      	ldrb	r3, [r3, r2]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	d138      	bne.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2240      	movs	r2, #64	@ 0x40
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800435c:	2302      	movs	r3, #2
 800435e:	e032      	b.n	80043c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	2101      	movs	r1, #1
 8004366:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2241      	movs	r2, #65	@ 0x41
 800436c:	2124      	movs	r1, #36	@ 0x24
 800436e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2101      	movs	r1, #1
 800437c:	438a      	bics	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4911      	ldr	r1, [pc, #68]	@ (80043d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800438c:	400a      	ands	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2101      	movs	r1, #1
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2241      	movs	r2, #65	@ 0x41
 80043b4:	2120      	movs	r1, #32
 80043b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b002      	add	sp, #8
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	ffffefff 	.word	0xffffefff

080043d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2241      	movs	r2, #65	@ 0x41
 80043e2:	5c9b      	ldrb	r3, [r3, r2]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d139      	bne.n	800445e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2240      	movs	r2, #64	@ 0x40
 80043ee:	5c9b      	ldrb	r3, [r3, r2]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e033      	b.n	8004460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2240      	movs	r2, #64	@ 0x40
 80043fc:	2101      	movs	r1, #1
 80043fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2241      	movs	r2, #65	@ 0x41
 8004404:	2124      	movs	r1, #36	@ 0x24
 8004406:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	438a      	bics	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a11      	ldr	r2, [pc, #68]	@ (8004468 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004424:	4013      	ands	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2241      	movs	r2, #65	@ 0x41
 800444e:	2120      	movs	r1, #32
 8004450:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2240      	movs	r2, #64	@ 0x40
 8004456:	2100      	movs	r1, #0
 8004458:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b004      	add	sp, #16
 8004466:	bd80      	pop	{r7, pc}
 8004468:	fffff0ff 	.word	0xfffff0ff

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b08a      	sub	sp, #40	@ 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f000 fb6c 	bl	8004b58 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004480:	4bc8      	ldr	r3, [pc, #800]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	220c      	movs	r2, #12
 8004486:	4013      	ands	r3, r2
 8004488:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448a:	4bc6      	ldr	r3, [pc, #792]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d100      	bne.n	80044a2 <HAL_RCC_OscConfig+0x36>
 80044a0:	e07d      	b.n	800459e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d007      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d112      	bne.n	80044d4 <HAL_RCC_OscConfig+0x68>
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	2380      	movs	r3, #128	@ 0x80
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d10d      	bne.n	80044d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4bba      	ldr	r3, [pc, #744]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	4013      	ands	r3, r2
 80044c2:	d100      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5a>
 80044c4:	e06a      	b.n	800459c <HAL_RCC_OscConfig+0x130>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d166      	bne.n	800459c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f000 fb42 	bl	8004b58 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	025b      	lsls	r3, r3, #9
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x84>
 80044e0:	4bb0      	ldr	r3, [pc, #704]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4baf      	ldr	r3, [pc, #700]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80044e6:	2180      	movs	r1, #128	@ 0x80
 80044e8:	0249      	lsls	r1, r1, #9
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e027      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	23a0      	movs	r3, #160	@ 0xa0
 80044f6:	02db      	lsls	r3, r3, #11
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d10e      	bne.n	800451a <HAL_RCC_OscConfig+0xae>
 80044fc:	4ba9      	ldr	r3, [pc, #676]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4ba8      	ldr	r3, [pc, #672]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	02c9      	lsls	r1, r1, #11
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	4ba6      	ldr	r3, [pc, #664]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4ba5      	ldr	r3, [pc, #660]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004510:	2180      	movs	r1, #128	@ 0x80
 8004512:	0249      	lsls	r1, r1, #9
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e012      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 800451a:	4ba2      	ldr	r3, [pc, #648]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4ba1      	ldr	r3, [pc, #644]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004520:	49a1      	ldr	r1, [pc, #644]	@ (80047a8 <HAL_RCC_OscConfig+0x33c>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4b9f      	ldr	r3, [pc, #636]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	025b      	lsls	r3, r3, #9
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4b9b      	ldr	r3, [pc, #620]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b9a      	ldr	r3, [pc, #616]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800453a:	499c      	ldr	r1, [pc, #624]	@ (80047ac <HAL_RCC_OscConfig+0x340>)
 800453c:	400a      	ands	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d014      	beq.n	8004572 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe fe94 	bl	8003274 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004552:	f7fe fe8f 	bl	8003274 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	@ 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e2f9      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004564:	4b8f      	ldr	r3, [pc, #572]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	4013      	ands	r3, r2
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0xe6>
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fe fe7f 	bl	8003274 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457c:	f7fe fe7a 	bl	8003274 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e2e4      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	4013      	ands	r3, r2
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x110>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	d100      	bne.n	80045aa <HAL_RCC_OscConfig+0x13e>
 80045a8:	e099      	b.n	80046de <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	2220      	movs	r2, #32
 80045b4:	4013      	ands	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80045b8:	4b7a      	ldr	r3, [pc, #488]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b79      	ldr	r3, [pc, #484]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80045be:	2120      	movs	r1, #32
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	2220      	movs	r2, #32
 80045c8:	4393      	bics	r3, r2
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d13e      	bne.n	8004656 <HAL_RCC_OscConfig+0x1ea>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13b      	bne.n	8004656 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80045de:	4b71      	ldr	r3, [pc, #452]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_RCC_OscConfig+0x186>
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e2b2      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b6c      	ldr	r3, [pc, #432]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a6e      	ldr	r2, [pc, #440]	@ (80047b0 <HAL_RCC_OscConfig+0x344>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	4b68      	ldr	r3, [pc, #416]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004608:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2209      	movs	r2, #9
 800460e:	4393      	bics	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	4b64      	ldr	r3, [pc, #400]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800461a:	f000 fbeb 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 800461e:	0001      	movs	r1, r0
 8004620:	4b60      	ldr	r3, [pc, #384]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	220f      	movs	r2, #15
 8004628:	4013      	ands	r3, r2
 800462a:	4a62      	ldr	r2, [pc, #392]	@ (80047b4 <HAL_RCC_OscConfig+0x348>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	000a      	movs	r2, r1
 8004630:	40da      	lsrs	r2, r3
 8004632:	4b61      	ldr	r3, [pc, #388]	@ (80047b8 <HAL_RCC_OscConfig+0x34c>)
 8004634:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004636:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <HAL_RCC_OscConfig+0x350>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2513      	movs	r5, #19
 800463c:	197c      	adds	r4, r7, r5
 800463e:	0018      	movs	r0, r3
 8004640:	f7fe fdd2 	bl	80031e8 <HAL_InitTick>
 8004644:	0003      	movs	r3, r0
 8004646:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004648:	197b      	adds	r3, r7, r5
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d046      	beq.n	80046de <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004650:	197b      	adds	r3, r7, r5
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	e280      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d027      	beq.n	80046ac <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800465c:	4b51      	ldr	r3, [pc, #324]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2209      	movs	r2, #9
 8004662:	4393      	bics	r3, r2
 8004664:	0019      	movs	r1, r3
 8004666:	4b4f      	ldr	r3, [pc, #316]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe fe01 	bl	8003274 <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe fdfc 	bl	8003274 <HAL_GetTick>
 800467c:	0002      	movs	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e266      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800468a:	4b46      	ldr	r3, [pc, #280]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2204      	movs	r2, #4
 8004690:	4013      	ands	r3, r2
 8004692:	d0f1      	beq.n	8004678 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b43      	ldr	r3, [pc, #268]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a45      	ldr	r2, [pc, #276]	@ (80047b0 <HAL_RCC_OscConfig+0x344>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	4b3f      	ldr	r3, [pc, #252]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e018      	b.n	80046de <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ac:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b3c      	ldr	r3, [pc, #240]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80046b2:	2101      	movs	r1, #1
 80046b4:	438a      	bics	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe fddc 	bl	8003274 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe fdd7 	bl	8003274 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e241      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046d4:	4b33      	ldr	r3, [pc, #204]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2204      	movs	r2, #4
 80046da:	4013      	ands	r3, r2
 80046dc:	d1f1      	bne.n	80046c2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2210      	movs	r2, #16
 80046e4:	4013      	ands	r3, r2
 80046e6:	d100      	bne.n	80046ea <HAL_RCC_OscConfig+0x27e>
 80046e8:	e0a1      	b.n	800482e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d140      	bne.n	8004772 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f0:	4b2c      	ldr	r3, [pc, #176]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x29c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e227      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004708:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <HAL_RCC_OscConfig+0x354>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471c:	4b21      	ldr	r3, [pc, #132]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	0a19      	lsrs	r1, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	061a      	lsls	r2, r3, #24
 800472a:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	0b5b      	lsrs	r3, r3, #13
 8004736:	3301      	adds	r3, #1
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	0212      	lsls	r2, r2, #8
 800473c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800473e:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	210f      	movs	r1, #15
 8004746:	400b      	ands	r3, r1
 8004748:	491a      	ldr	r1, [pc, #104]	@ (80047b4 <HAL_RCC_OscConfig+0x348>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800474e:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_RCC_OscConfig+0x34c>)
 8004750:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004752:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <HAL_RCC_OscConfig+0x350>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2513      	movs	r5, #19
 8004758:	197c      	adds	r4, r7, r5
 800475a:	0018      	movs	r0, r3
 800475c:	f7fe fd44 	bl	80031e8 <HAL_InitTick>
 8004760:	0003      	movs	r3, r0
 8004762:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004764:	197b      	adds	r3, r7, r5
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d060      	beq.n	800482e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800476c:	197b      	adds	r3, r7, r5
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	e1f2      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d03f      	beq.n	80047fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <HAL_RCC_OscConfig+0x338>)
 8004780:	2180      	movs	r1, #128	@ 0x80
 8004782:	0049      	lsls	r1, r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fd74 	bl	8003274 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004790:	e018      	b.n	80047c4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004792:	f7fe fd6f 	bl	8003274 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d911      	bls.n	80047c4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1d9      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
 80047a4:	40021000 	.word	0x40021000
 80047a8:	fffeffff 	.word	0xfffeffff
 80047ac:	fffbffff 	.word	0xfffbffff
 80047b0:	ffffe0ff 	.word	0xffffe0ff
 80047b4:	08008b24 	.word	0x08008b24
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004
 80047c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047c4:	4bc9      	ldr	r3, [pc, #804]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	d0e0      	beq.n	8004792 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d0:	4bc6      	ldr	r3, [pc, #792]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4ac6      	ldr	r2, [pc, #792]	@ (8004af0 <HAL_RCC_OscConfig+0x684>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	4bc3      	ldr	r3, [pc, #780]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047e4:	4bc1      	ldr	r3, [pc, #772]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	0a19      	lsrs	r1, r3, #8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	061a      	lsls	r2, r3, #24
 80047f2:	4bbe      	ldr	r3, [pc, #760]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e019      	b.n	800482e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047fa:	4bbc      	ldr	r3, [pc, #752]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4bbb      	ldr	r3, [pc, #748]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004800:	49bc      	ldr	r1, [pc, #752]	@ (8004af4 <HAL_RCC_OscConfig+0x688>)
 8004802:	400a      	ands	r2, r1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fe fd35 	bl	8003274 <HAL_GetTick>
 800480a:	0003      	movs	r3, r0
 800480c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004810:	f7fe fd30 	bl	8003274 <HAL_GetTick>
 8004814:	0002      	movs	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e19a      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004822:	4bb2      	ldr	r3, [pc, #712]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4013      	ands	r3, r2
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2208      	movs	r2, #8
 8004834:	4013      	ands	r3, r2
 8004836:	d036      	beq.n	80048a6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d019      	beq.n	8004874 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004840:	4baa      	ldr	r3, [pc, #680]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004844:	4ba9      	ldr	r3, [pc, #676]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004846:	2101      	movs	r1, #1
 8004848:	430a      	orrs	r2, r1
 800484a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484c:	f7fe fd12 	bl	8003274 <HAL_GetTick>
 8004850:	0003      	movs	r3, r0
 8004852:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004856:	f7fe fd0d 	bl	8003274 <HAL_GetTick>
 800485a:	0002      	movs	r2, r0
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e177      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004868:	4ba0      	ldr	r3, [pc, #640]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800486a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486c:	2202      	movs	r2, #2
 800486e:	4013      	ands	r3, r2
 8004870:	d0f1      	beq.n	8004856 <HAL_RCC_OscConfig+0x3ea>
 8004872:	e018      	b.n	80048a6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004874:	4b9d      	ldr	r3, [pc, #628]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004876:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004878:	4b9c      	ldr	r3, [pc, #624]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800487a:	2101      	movs	r1, #1
 800487c:	438a      	bics	r2, r1
 800487e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fe fcf8 	bl	8003274 <HAL_GetTick>
 8004884:	0003      	movs	r3, r0
 8004886:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488a:	f7fe fcf3 	bl	8003274 <HAL_GetTick>
 800488e:	0002      	movs	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e15d      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800489c:	4b93      	ldr	r3, [pc, #588]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800489e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a0:	2202      	movs	r2, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1f1      	bne.n	800488a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2204      	movs	r2, #4
 80048ac:	4013      	ands	r3, r2
 80048ae:	d100      	bne.n	80048b2 <HAL_RCC_OscConfig+0x446>
 80048b0:	e0ae      	b.n	8004a10 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2023      	movs	r0, #35	@ 0x23
 80048b4:	183b      	adds	r3, r7, r0
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ba:	4b8c      	ldr	r3, [pc, #560]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80048bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	055b      	lsls	r3, r3, #21
 80048c2:	4013      	ands	r3, r2
 80048c4:	d109      	bne.n	80048da <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	4b89      	ldr	r3, [pc, #548]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80048c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ca:	4b88      	ldr	r3, [pc, #544]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80048cc:	2180      	movs	r1, #128	@ 0x80
 80048ce:	0549      	lsls	r1, r1, #21
 80048d0:	430a      	orrs	r2, r1
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80048d4:	183b      	adds	r3, r7, r0
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b87      	ldr	r3, [pc, #540]	@ (8004af8 <HAL_RCC_OscConfig+0x68c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	@ 0x80
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	d11a      	bne.n	800491c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b84      	ldr	r3, [pc, #528]	@ (8004af8 <HAL_RCC_OscConfig+0x68c>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b83      	ldr	r3, [pc, #524]	@ (8004af8 <HAL_RCC_OscConfig+0x68c>)
 80048ec:	2180      	movs	r1, #128	@ 0x80
 80048ee:	0049      	lsls	r1, r1, #1
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f4:	f7fe fcbe 	bl	8003274 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fe fcb9 	bl	8003274 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	@ 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e123      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	4b79      	ldr	r3, [pc, #484]	@ (8004af8 <HAL_RCC_OscConfig+0x68c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4013      	ands	r3, r2
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	2380      	movs	r3, #128	@ 0x80
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4cc>
 8004928:	4b70      	ldr	r3, [pc, #448]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800492a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800492c:	4b6f      	ldr	r3, [pc, #444]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800492e:	2180      	movs	r1, #128	@ 0x80
 8004930:	0049      	lsls	r1, r1, #1
 8004932:	430a      	orrs	r2, r1
 8004934:	651a      	str	r2, [r3, #80]	@ 0x50
 8004936:	e031      	b.n	800499c <HAL_RCC_OscConfig+0x530>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <HAL_RCC_OscConfig+0x4ee>
 8004940:	4b6a      	ldr	r3, [pc, #424]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004944:	4b69      	ldr	r3, [pc, #420]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004946:	496b      	ldr	r1, [pc, #428]	@ (8004af4 <HAL_RCC_OscConfig+0x688>)
 8004948:	400a      	ands	r2, r1
 800494a:	651a      	str	r2, [r3, #80]	@ 0x50
 800494c:	4b67      	ldr	r3, [pc, #412]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800494e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004950:	4b66      	ldr	r3, [pc, #408]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004952:	496a      	ldr	r1, [pc, #424]	@ (8004afc <HAL_RCC_OscConfig+0x690>)
 8004954:	400a      	ands	r2, r1
 8004956:	651a      	str	r2, [r3, #80]	@ 0x50
 8004958:	e020      	b.n	800499c <HAL_RCC_OscConfig+0x530>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	23a0      	movs	r3, #160	@ 0xa0
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	429a      	cmp	r2, r3
 8004964:	d10e      	bne.n	8004984 <HAL_RCC_OscConfig+0x518>
 8004966:	4b61      	ldr	r3, [pc, #388]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800496a:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800496c:	2180      	movs	r1, #128	@ 0x80
 800496e:	00c9      	lsls	r1, r1, #3
 8004970:	430a      	orrs	r2, r1
 8004972:	651a      	str	r2, [r3, #80]	@ 0x50
 8004974:	4b5d      	ldr	r3, [pc, #372]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004978:	4b5c      	ldr	r3, [pc, #368]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800497a:	2180      	movs	r1, #128	@ 0x80
 800497c:	0049      	lsls	r1, r1, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	651a      	str	r2, [r3, #80]	@ 0x50
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x530>
 8004984:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004988:	4b58      	ldr	r3, [pc, #352]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 800498a:	495a      	ldr	r1, [pc, #360]	@ (8004af4 <HAL_RCC_OscConfig+0x688>)
 800498c:	400a      	ands	r2, r1
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004990:	4b56      	ldr	r3, [pc, #344]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004992:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004994:	4b55      	ldr	r3, [pc, #340]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004996:	4959      	ldr	r1, [pc, #356]	@ (8004afc <HAL_RCC_OscConfig+0x690>)
 8004998:	400a      	ands	r2, r1
 800499a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a4:	f7fe fc66 	bl	8003274 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049ac:	e009      	b.n	80049c2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fe fc61 	bl	8003274 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	4a51      	ldr	r2, [pc, #324]	@ (8004b00 <HAL_RCC_OscConfig+0x694>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0ca      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049c2:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80049c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d0ef      	beq.n	80049ae <HAL_RCC_OscConfig+0x542>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d0:	f7fe fc50 	bl	8003274 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049d8:	e009      	b.n	80049ee <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fe fc4b 	bl	8003274 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	4a46      	ldr	r2, [pc, #280]	@ (8004b00 <HAL_RCC_OscConfig+0x694>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0b4      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ee:	4b3f      	ldr	r3, [pc, #252]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 80049f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	d1ef      	bne.n	80049da <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049fa:	2323      	movs	r3, #35	@ 0x23
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a08:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a0a:	493e      	ldr	r1, [pc, #248]	@ (8004b04 <HAL_RCC_OscConfig+0x698>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d100      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5ae>
 8004a18:	e09d      	b.n	8004b56 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d100      	bne.n	8004a22 <HAL_RCC_OscConfig+0x5b6>
 8004a20:	e076      	b.n	8004b10 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d145      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b30      	ldr	r3, [pc, #192]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a30:	4935      	ldr	r1, [pc, #212]	@ (8004b08 <HAL_RCC_OscConfig+0x69c>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a36:	f7fe fc1d 	bl	8003274 <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe fc18 	bl	8003274 <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e082      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a52:	4b26      	ldr	r3, [pc, #152]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	049b      	lsls	r3, r3, #18
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5e:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <HAL_RCC_OscConfig+0x6a0>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	431a      	orrs	r2, r3
 8004a78:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004a84:	2180      	movs	r1, #128	@ 0x80
 8004a86:	0449      	lsls	r1, r1, #17
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fbf2 	bl	8003274 <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fe fbed 	bl	8003274 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e057      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aa8:	4b10      	ldr	r3, [pc, #64]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	049b      	lsls	r3, r3, #18
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x62a>
 8004ab4:	e04f      	b.n	8004b56 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004abc:	4912      	ldr	r1, [pc, #72]	@ (8004b08 <HAL_RCC_OscConfig+0x69c>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fe fbd7 	bl	8003274 <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fe fbd2 	bl	8003274 <HAL_GetTick>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e03c      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ade:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <HAL_RCC_OscConfig+0x680>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	049b      	lsls	r3, r3, #18
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x660>
 8004aea:	e034      	b.n	8004b56 <HAL_RCC_OscConfig+0x6ea>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	ffff1fff 	.word	0xffff1fff
 8004af4:	fffffeff 	.word	0xfffffeff
 8004af8:	40007000 	.word	0x40007000
 8004afc:	fffffbff 	.word	0xfffffbff
 8004b00:	00001388 	.word	0x00001388
 8004b04:	efffffff 	.word	0xefffffff
 8004b08:	feffffff 	.word	0xfeffffff
 8004b0c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e01d      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_RCC_OscConfig+0x6f4>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	2380      	movs	r3, #128	@ 0x80
 8004b26:	025b      	lsls	r3, r3, #9
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10f      	bne.n	8004b52 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	23f0      	movs	r3, #240	@ 0xf0
 8004b36:	039b      	lsls	r3, r3, #14
 8004b38:	401a      	ands	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	23c0      	movs	r3, #192	@ 0xc0
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	401a      	ands	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d001      	beq.n	8004b56 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b00a      	add	sp, #40	@ 0x28
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b60:	40021000 	.word	0x40021000

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e128      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b96      	ldr	r3, [pc, #600]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d91e      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b93      	ldr	r3, [pc, #588]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	4b90      	ldr	r3, [pc, #576]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b98:	f7fe fb6c 	bl	8003274 <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba0:	e009      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba2:	f7fe fb67 	bl	8003274 <HAL_GetTick>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	4a8a      	ldr	r2, [pc, #552]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e109      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b87      	ldr	r3, [pc, #540]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bce:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	22f0      	movs	r2, #240	@ 0xf0
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2201      	movs	r2, #1
 8004be8:	4013      	ands	r3, r2
 8004bea:	d100      	bne.n	8004bee <HAL_RCC_ClockConfig+0x8a>
 8004bec:	e089      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf6:	4b79      	ldr	r3, [pc, #484]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d120      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e1      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c0e:	4b73      	ldr	r3, [pc, #460]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	049b      	lsls	r3, r3, #18
 8004c16:	4013      	ands	r3, r2
 8004c18:	d114      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0d5      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0ca      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c34:	4b69      	ldr	r3, [pc, #420]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0c2      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c44:	4b65      	ldr	r3, [pc, #404]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	4393      	bics	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b62      	ldr	r3, [pc, #392]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c58:	f7fe fb0c 	bl	8003274 <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d111      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c68:	e009      	b.n	8004c7e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fe fb03 	bl	8003274 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0a5      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c7e:	4b57      	ldr	r3, [pc, #348]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	220c      	movs	r2, #12
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d1ef      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x106>
 8004c8a:	e03a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d111      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c94:	e009      	b.n	8004caa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c96:	f7fe faed 	bl	8003274 <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e08f      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004caa:	4b4c      	ldr	r3, [pc, #304]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	220c      	movs	r2, #12
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d1ef      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x132>
 8004cb6:	e024      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cc0:	e009      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc2:	f7fe fad7 	bl	8003274 <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	4a42      	ldr	r2, [pc, #264]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e079      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd6:	4b41      	ldr	r3, [pc, #260]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	220c      	movs	r2, #12
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d1ef      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x15e>
 8004ce2:	e00e      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce4:	f7fe fac6 	bl	8003274 <HAL_GetTick>
 8004ce8:	0002      	movs	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e068      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf8:	4b38      	ldr	r3, [pc, #224]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	220c      	movs	r2, #12
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d02:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d21e      	bcs.n	8004d4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d10:	4b30      	ldr	r3, [pc, #192]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	4393      	bics	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d22:	f7fe faa7 	bl	8003274 <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	e009      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7fe faa2 	bl	8003274 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	4a28      	ldr	r2, [pc, #160]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e044      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d1ee      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2204      	movs	r2, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	@ (8004de0 <HAL_RCC_ClockConfig+0x27c>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4013      	ands	r3, r2
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d76:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_RCC_ClockConfig+0x280>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	00da      	lsls	r2, r3, #3
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8c:	f000 f832 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004d90:	0001      	movs	r1, r0
 8004d92:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	220f      	movs	r2, #15
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	4a12      	ldr	r2, [pc, #72]	@ (8004de8 <HAL_RCC_ClockConfig+0x284>)
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	000a      	movs	r2, r1
 8004da2:	40da      	lsrs	r2, r3
 8004da4:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <HAL_RCC_ClockConfig+0x288>)
 8004da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <HAL_RCC_ClockConfig+0x28c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	250b      	movs	r5, #11
 8004dae:	197c      	adds	r4, r7, r5
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fe fa19 	bl	80031e8 <HAL_InitTick>
 8004db6:	0003      	movs	r3, r0
 8004db8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004dc2:	197b      	adds	r3, r7, r5
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	00001388 	.word	0x00001388
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	fffff8ff 	.word	0xfffff8ff
 8004de4:	ffffc7ff 	.word	0xffffc7ff
 8004de8:	08008b24 	.word	0x08008b24
 8004dec:	20000000 	.word	0x20000000
 8004df0:	20000004 	.word	0x20000004

08004df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8004eec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	220c      	movs	r2, #12
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d013      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x3e>
 8004e0a:	d85c      	bhi.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xd2>
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d002      	beq.n	8004e16 <HAL_RCC_GetSysClockFreq+0x22>
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x38>
 8004e14:	e057      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e16:	4b35      	ldr	r3, [pc, #212]	@ (8004eec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d002      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004e20:	4b33      	ldr	r3, [pc, #204]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e22:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004e24:	e05d      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004e26:	4b33      	ldr	r3, [pc, #204]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004e28:	613b      	str	r3, [r7, #16]
      break;
 8004e2a:	e05a      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e2c:	4b32      	ldr	r3, [pc, #200]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e2e:	613b      	str	r3, [r7, #16]
      break;
 8004e30:	e057      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0c9b      	lsrs	r3, r3, #18
 8004e36:	220f      	movs	r2, #15
 8004e38:	4013      	ands	r3, r2
 8004e3a:	4a30      	ldr	r2, [pc, #192]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	0d9b      	lsrs	r3, r3, #22
 8004e44:	2203      	movs	r2, #3
 8004e46:	4013      	ands	r3, r2
 8004e48:	3301      	adds	r3, #1
 8004e4a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e4c:	4b27      	ldr	r3, [pc, #156]	@ (8004eec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	2380      	movs	r3, #128	@ 0x80
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	000a      	movs	r2, r1
 8004e5c:	0152      	lsls	r2, r2, #5
 8004e5e:	1a52      	subs	r2, r2, r1
 8004e60:	0193      	lsls	r3, r2, #6
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	185b      	adds	r3, r3, r1
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fb f967 	bl	8000140 <__udivsi3>
 8004e72:	0003      	movs	r3, r0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e023      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	000a      	movs	r2, r1
 8004e86:	0152      	lsls	r2, r2, #5
 8004e88:	1a52      	subs	r2, r2, r1
 8004e8a:	0193      	lsls	r3, r2, #6
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	185b      	adds	r3, r3, r1
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fb f952 	bl	8000140 <__udivsi3>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e00e      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	000a      	movs	r2, r1
 8004ea6:	0152      	lsls	r2, r2, #5
 8004ea8:	1a52      	subs	r2, r2, r1
 8004eaa:	0193      	lsls	r3, r2, #6
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	185b      	adds	r3, r3, r1
 8004eb2:	029b      	lsls	r3, r3, #10
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fb f942 	bl	8000140 <__udivsi3>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	613b      	str	r3, [r7, #16]
      break;
 8004ec4:	e00d      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ec6:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	0b5b      	lsrs	r3, r3, #13
 8004ecc:	2207      	movs	r2, #7
 8004ece:	4013      	ands	r3, r2
 8004ed0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	0212      	lsls	r2, r2, #8
 8004eda:	409a      	lsls	r2, r3
 8004edc:	0013      	movs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
      break;
 8004ee0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ee2:	693b      	ldr	r3, [r7, #16]
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b006      	add	sp, #24
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	003d0900 	.word	0x003d0900
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	08008b3c 	.word	0x08008b3c

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b02      	ldr	r3, [pc, #8]	@ (8004f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20000000 	.word	0x20000000

08004f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f18:	f7ff fff2 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f1c:	0001      	movs	r1, r0
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	2207      	movs	r2, #7
 8004f26:	4013      	ands	r3, r2
 8004f28:	4a04      	ldr	r2, [pc, #16]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	40d9      	lsrs	r1, r3
 8004f2e:	000b      	movs	r3, r1
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	08008b34 	.word	0x08008b34

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	0001      	movs	r1, r0
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	0adb      	lsrs	r3, r3, #11
 8004f50:	2207      	movs	r2, #7
 8004f52:	4013      	ands	r3, r2
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	40d9      	lsrs	r1, r3
 8004f5a:	000b      	movs	r3, r1
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	40021000 	.word	0x40021000
 8004f68:	08008b34 	.word	0x08008b34

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f74:	2017      	movs	r0, #23
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2220      	movs	r2, #32
 8004f82:	4013      	ands	r3, r2
 8004f84:	d100      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f86:	e0c7      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f88:	4b84      	ldr	r3, [pc, #528]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	055b      	lsls	r3, r3, #21
 8004f90:	4013      	ands	r3, r2
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b81      	ldr	r3, [pc, #516]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f98:	4b80      	ldr	r3, [pc, #512]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f9a:	2180      	movs	r1, #128	@ 0x80
 8004f9c:	0549      	lsls	r1, r1, #21
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d11a      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb4:	4b7a      	ldr	r3, [pc, #488]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b79      	ldr	r3, [pc, #484]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004fba:	2180      	movs	r1, #128	@ 0x80
 8004fbc:	0049      	lsls	r1, r1, #1
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fe f957 	bl	8003274 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	e008      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fe f952 	bl	8003274 <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0d9      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	4b70      	ldr	r3, [pc, #448]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2380      	movs	r3, #128	@ 0x80
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004fea:	4b6c      	ldr	r3, [pc, #432]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	23c0      	movs	r3, #192	@ 0xc0
 8004ff0:	039b      	lsls	r3, r3, #14
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	23c0      	movs	r3, #192	@ 0xc0
 8004ffc:	039b      	lsls	r3, r3, #14
 8004ffe:	4013      	ands	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d013      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	23c0      	movs	r3, #192	@ 0xc0
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	401a      	ands	r2, r3
 8005010:	23c0      	movs	r3, #192	@ 0xc0
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	429a      	cmp	r2, r3
 8005016:	d10a      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005018:	4b60      	ldr	r3, [pc, #384]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	029b      	lsls	r3, r3, #10
 8005020:	401a      	ands	r2, r3
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	429a      	cmp	r2, r3
 8005028:	d101      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0b1      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800502e:	4b5b      	ldr	r3, [pc, #364]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005032:	23c0      	movs	r3, #192	@ 0xc0
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	4013      	ands	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d03b      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	23c0      	movs	r3, #192	@ 0xc0
 8005046:	029b      	lsls	r3, r3, #10
 8005048:	4013      	ands	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	429a      	cmp	r2, r3
 800504e:	d033      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2220      	movs	r2, #32
 8005056:	4013      	ands	r3, r2
 8005058:	d02e      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800505a:	4b50      	ldr	r3, [pc, #320]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800505c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505e:	4a51      	ldr	r2, [pc, #324]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005064:	4b4d      	ldr	r3, [pc, #308]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005068:	4b4c      	ldr	r3, [pc, #304]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	0309      	lsls	r1, r1, #12
 800506e:	430a      	orrs	r2, r1
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005072:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005076:	4b49      	ldr	r3, [pc, #292]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005078:	494b      	ldr	r1, [pc, #300]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800507a:	400a      	ands	r2, r1
 800507c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800507e:	4b47      	ldr	r3, [pc, #284]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4013      	ands	r3, r2
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fe f8f1 	bl	8003274 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005096:	e009      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fe f8ec 	bl	8003274 <HAL_GetTick>
 800509c:	0002      	movs	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	4a42      	ldr	r2, [pc, #264]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e072      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ac:	4b3b      	ldr	r3, [pc, #236]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2220      	movs	r2, #32
 80050be:	4013      	ands	r3, r2
 80050c0:	d01f      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	23c0      	movs	r3, #192	@ 0xc0
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	401a      	ands	r2, r3
 80050cc:	23c0      	movs	r3, #192	@ 0xc0
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d10c      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050d4:	4b31      	ldr	r3, [pc, #196]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a35      	ldr	r2, [pc, #212]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	23c0      	movs	r3, #192	@ 0xc0
 80050e4:	039b      	lsls	r3, r3, #14
 80050e6:	401a      	ands	r2, r3
 80050e8:	4b2c      	ldr	r3, [pc, #176]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	4b2b      	ldr	r3, [pc, #172]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	23c0      	movs	r3, #192	@ 0xc0
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	401a      	ands	r2, r3
 80050fc:	4b27      	ldr	r3, [pc, #156]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005102:	2317      	movs	r3, #23
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510c:	4b23      	ldr	r3, [pc, #140]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800510e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005110:	4b22      	ldr	r3, [pc, #136]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005112:	4928      	ldr	r1, [pc, #160]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005114:	400a      	ands	r2, r1
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2202      	movs	r2, #2
 800511e:	4013      	ands	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005122:	4b1e      	ldr	r3, [pc, #120]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005126:	220c      	movs	r2, #12
 8005128:	4393      	bics	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b1a      	ldr	r3, [pc, #104]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005132:	430a      	orrs	r2, r1
 8005134:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005140:	4b16      	ldr	r3, [pc, #88]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005146:	4013      	ands	r3, r2
 8005148:	0019      	movs	r1, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	4b13      	ldr	r3, [pc, #76]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005150:	430a      	orrs	r2, r1
 8005152:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2208      	movs	r2, #8
 800515a:	4013      	ands	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800515e:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005162:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	4b0b      	ldr	r3, [pc, #44]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800516e:	430a      	orrs	r2, r1
 8005170:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2280      	movs	r2, #128	@ 0x80
 8005178:	4013      	ands	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	4a0f      	ldr	r2, [pc, #60]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005182:	4013      	ands	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	4b04      	ldr	r3, [pc, #16]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800518c:	430a      	orrs	r2, r1
 800518e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b006      	add	sp, #24
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	40021000 	.word	0x40021000
 80051a0:	40007000 	.word	0x40007000
 80051a4:	fffcffff 	.word	0xfffcffff
 80051a8:	fff7ffff 	.word	0xfff7ffff
 80051ac:	00001388 	.word	0x00001388
 80051b0:	ffcfffff 	.word	0xffcfffff
 80051b4:	efffffff 	.word	0xefffffff
 80051b8:	fffff3ff 	.word	0xfffff3ff
 80051bc:	ffffcfff 	.word	0xffffcfff
 80051c0:	fff3ffff 	.word	0xfff3ffff

080051c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e044      	b.n	8005260 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2278      	movs	r2, #120	@ 0x78
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7fd fe79 	bl	8002ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	@ 0x24
 80051f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2101      	movs	r1, #1
 8005200:	438a      	bics	r2, r1
 8005202:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 fb16 	bl	8005840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f000 f8c8 	bl	80053ac <UART_SetConfig>
 800521c:	0003      	movs	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e01c      	b.n	8005260 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	490d      	ldr	r1, [pc, #52]	@ (8005268 <HAL_UART_Init+0xa4>)
 8005232:	400a      	ands	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	212a      	movs	r1, #42	@ 0x2a
 8005242:	438a      	bics	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 fba5 	bl	80059a8 <UART_CheckIdleState>
 800525e:	0003      	movs	r3, r0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}
 8005268:	ffffb7ff 	.word	0xffffb7ff

0800526c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	1dbb      	adds	r3, r7, #6
 800527a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005280:	2b20      	cmp	r3, #32
 8005282:	d000      	beq.n	8005286 <HAL_UART_Transmit+0x1a>
 8005284:	e08c      	b.n	80053a0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_UART_Transmit+0x28>
 800528c:	1dbb      	adds	r3, r7, #6
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e084      	b.n	80053a2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	015b      	lsls	r3, r3, #5
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d109      	bne.n	80052b8 <HAL_UART_Transmit+0x4c>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d001      	beq.n	80052b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e074      	b.n	80053a2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2284      	movs	r2, #132	@ 0x84
 80052bc:	2100      	movs	r1, #0
 80052be:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2221      	movs	r2, #33	@ 0x21
 80052c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c6:	f7fd ffd5 	bl	8003274 <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1dba      	adds	r2, r7, #6
 80052d2:	2150      	movs	r1, #80	@ 0x50
 80052d4:	8812      	ldrh	r2, [r2, #0]
 80052d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1dba      	adds	r2, r7, #6
 80052dc:	2152      	movs	r1, #82	@ 0x52
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	2380      	movs	r3, #128	@ 0x80
 80052e8:	015b      	lsls	r3, r3, #5
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d108      	bne.n	8005300 <HAL_UART_Transmit+0x94>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e003      	b.n	8005308 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005308:	e02f      	b.n	800536a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	0013      	movs	r3, r2
 8005314:	2200      	movs	r2, #0
 8005316:	2180      	movs	r1, #128	@ 0x80
 8005318:	f000 fbee 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d004      	beq.n	800532a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e03b      	b.n	80053a2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	001a      	movs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	05d2      	lsls	r2, r2, #23
 800533c:	0dd2      	lsrs	r2, r2, #23
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	3302      	adds	r3, #2
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e007      	b.n	8005358 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3301      	adds	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2252      	movs	r2, #82	@ 0x52
 800535c:	5a9b      	ldrh	r3, [r3, r2]
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b299      	uxth	r1, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2252      	movs	r2, #82	@ 0x52
 8005368:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2252      	movs	r2, #82	@ 0x52
 800536e:	5a9b      	ldrh	r3, [r3, r2]
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1c9      	bne.n	800530a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	0013      	movs	r3, r2
 8005380:	2200      	movs	r2, #0
 8005382:	2140      	movs	r1, #64	@ 0x40
 8005384:	f000 fbb8 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d004      	beq.n	8005396 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e005      	b.n	80053a2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b008      	add	sp, #32
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	b5b0      	push	{r4, r5, r7, lr}
 80053ae:	b08e      	sub	sp, #56	@ 0x38
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b4:	231a      	movs	r3, #26
 80053b6:	2218      	movs	r2, #24
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	19db      	adds	r3, r3, r7
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4ab4      	ldr	r2, [pc, #720]	@ (80056b0 <UART_SetConfig+0x304>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053ea:	430a      	orrs	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4aaf      	ldr	r2, [pc, #700]	@ (80056b4 <UART_SetConfig+0x308>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4aa9      	ldr	r2, [pc, #676]	@ (80056b8 <UART_SetConfig+0x30c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800541c:	4313      	orrs	r3, r2
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4aa5      	ldr	r2, [pc, #660]	@ (80056bc <UART_SetConfig+0x310>)
 8005428:	4013      	ands	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005432:	430a      	orrs	r2, r1
 8005434:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4aa1      	ldr	r2, [pc, #644]	@ (80056c0 <UART_SetConfig+0x314>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d131      	bne.n	80054a4 <UART_SetConfig+0xf8>
 8005440:	4ba0      	ldr	r3, [pc, #640]	@ (80056c4 <UART_SetConfig+0x318>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005444:	220c      	movs	r2, #12
 8005446:	4013      	ands	r3, r2
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d01d      	beq.n	8005488 <UART_SetConfig+0xdc>
 800544c:	d823      	bhi.n	8005496 <UART_SetConfig+0xea>
 800544e:	2b08      	cmp	r3, #8
 8005450:	d00c      	beq.n	800546c <UART_SetConfig+0xc0>
 8005452:	d820      	bhi.n	8005496 <UART_SetConfig+0xea>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <UART_SetConfig+0xb2>
 8005458:	2b04      	cmp	r3, #4
 800545a:	d00e      	beq.n	800547a <UART_SetConfig+0xce>
 800545c:	e01b      	b.n	8005496 <UART_SetConfig+0xea>
 800545e:	231b      	movs	r3, #27
 8005460:	2218      	movs	r2, #24
 8005462:	189b      	adds	r3, r3, r2
 8005464:	19db      	adds	r3, r3, r7
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e065      	b.n	8005538 <UART_SetConfig+0x18c>
 800546c:	231b      	movs	r3, #27
 800546e:	2218      	movs	r2, #24
 8005470:	189b      	adds	r3, r3, r2
 8005472:	19db      	adds	r3, r3, r7
 8005474:	2202      	movs	r2, #2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e05e      	b.n	8005538 <UART_SetConfig+0x18c>
 800547a:	231b      	movs	r3, #27
 800547c:	2218      	movs	r2, #24
 800547e:	189b      	adds	r3, r3, r2
 8005480:	19db      	adds	r3, r3, r7
 8005482:	2204      	movs	r2, #4
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e057      	b.n	8005538 <UART_SetConfig+0x18c>
 8005488:	231b      	movs	r3, #27
 800548a:	2218      	movs	r2, #24
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	2208      	movs	r2, #8
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e050      	b.n	8005538 <UART_SetConfig+0x18c>
 8005496:	231b      	movs	r3, #27
 8005498:	2218      	movs	r2, #24
 800549a:	189b      	adds	r3, r3, r2
 800549c:	19db      	adds	r3, r3, r7
 800549e:	2210      	movs	r2, #16
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e049      	b.n	8005538 <UART_SetConfig+0x18c>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a83      	ldr	r2, [pc, #524]	@ (80056b8 <UART_SetConfig+0x30c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d13e      	bne.n	800552c <UART_SetConfig+0x180>
 80054ae:	4b85      	ldr	r3, [pc, #532]	@ (80056c4 <UART_SetConfig+0x318>)
 80054b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054b2:	23c0      	movs	r3, #192	@ 0xc0
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4013      	ands	r3, r2
 80054b8:	22c0      	movs	r2, #192	@ 0xc0
 80054ba:	0112      	lsls	r2, r2, #4
 80054bc:	4293      	cmp	r3, r2
 80054be:	d027      	beq.n	8005510 <UART_SetConfig+0x164>
 80054c0:	22c0      	movs	r2, #192	@ 0xc0
 80054c2:	0112      	lsls	r2, r2, #4
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d82a      	bhi.n	800551e <UART_SetConfig+0x172>
 80054c8:	2280      	movs	r2, #128	@ 0x80
 80054ca:	0112      	lsls	r2, r2, #4
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d011      	beq.n	80054f4 <UART_SetConfig+0x148>
 80054d0:	2280      	movs	r2, #128	@ 0x80
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d822      	bhi.n	800551e <UART_SetConfig+0x172>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <UART_SetConfig+0x13a>
 80054dc:	2280      	movs	r2, #128	@ 0x80
 80054de:	00d2      	lsls	r2, r2, #3
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00e      	beq.n	8005502 <UART_SetConfig+0x156>
 80054e4:	e01b      	b.n	800551e <UART_SetConfig+0x172>
 80054e6:	231b      	movs	r3, #27
 80054e8:	2218      	movs	r2, #24
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	19db      	adds	r3, r3, r7
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e021      	b.n	8005538 <UART_SetConfig+0x18c>
 80054f4:	231b      	movs	r3, #27
 80054f6:	2218      	movs	r2, #24
 80054f8:	189b      	adds	r3, r3, r2
 80054fa:	19db      	adds	r3, r3, r7
 80054fc:	2202      	movs	r2, #2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e01a      	b.n	8005538 <UART_SetConfig+0x18c>
 8005502:	231b      	movs	r3, #27
 8005504:	2218      	movs	r2, #24
 8005506:	189b      	adds	r3, r3, r2
 8005508:	19db      	adds	r3, r3, r7
 800550a:	2204      	movs	r2, #4
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e013      	b.n	8005538 <UART_SetConfig+0x18c>
 8005510:	231b      	movs	r3, #27
 8005512:	2218      	movs	r2, #24
 8005514:	189b      	adds	r3, r3, r2
 8005516:	19db      	adds	r3, r3, r7
 8005518:	2208      	movs	r2, #8
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e00c      	b.n	8005538 <UART_SetConfig+0x18c>
 800551e:	231b      	movs	r3, #27
 8005520:	2218      	movs	r2, #24
 8005522:	189b      	adds	r3, r3, r2
 8005524:	19db      	adds	r3, r3, r7
 8005526:	2210      	movs	r2, #16
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e005      	b.n	8005538 <UART_SetConfig+0x18c>
 800552c:	231b      	movs	r3, #27
 800552e:	2218      	movs	r2, #24
 8005530:	189b      	adds	r3, r3, r2
 8005532:	19db      	adds	r3, r3, r7
 8005534:	2210      	movs	r2, #16
 8005536:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a5e      	ldr	r2, [pc, #376]	@ (80056b8 <UART_SetConfig+0x30c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d000      	beq.n	8005544 <UART_SetConfig+0x198>
 8005542:	e084      	b.n	800564e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005544:	231b      	movs	r3, #27
 8005546:	2218      	movs	r2, #24
 8005548:	189b      	adds	r3, r3, r2
 800554a:	19db      	adds	r3, r3, r7
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b08      	cmp	r3, #8
 8005550:	d01d      	beq.n	800558e <UART_SetConfig+0x1e2>
 8005552:	dc20      	bgt.n	8005596 <UART_SetConfig+0x1ea>
 8005554:	2b04      	cmp	r3, #4
 8005556:	d015      	beq.n	8005584 <UART_SetConfig+0x1d8>
 8005558:	dc1d      	bgt.n	8005596 <UART_SetConfig+0x1ea>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <UART_SetConfig+0x1b8>
 800555e:	2b02      	cmp	r3, #2
 8005560:	d005      	beq.n	800556e <UART_SetConfig+0x1c2>
 8005562:	e018      	b.n	8005596 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7ff fcd6 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 8005568:	0003      	movs	r3, r0
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800556c:	e01c      	b.n	80055a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556e:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <UART_SetConfig+0x318>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2210      	movs	r2, #16
 8005574:	4013      	ands	r3, r2
 8005576:	d002      	beq.n	800557e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <UART_SetConfig+0x31c>)
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800557c:	e014      	b.n	80055a8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800557e:	4b53      	ldr	r3, [pc, #332]	@ (80056cc <UART_SetConfig+0x320>)
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005582:	e011      	b.n	80055a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005584:	f7ff fc36 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8005588:	0003      	movs	r3, r0
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800558c:	e00c      	b.n	80055a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005594:	e008      	b.n	80055a8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800559a:	231a      	movs	r3, #26
 800559c:	2218      	movs	r2, #24
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	19db      	adds	r3, r3, r7
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
        break;
 80055a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d100      	bne.n	80055b0 <UART_SetConfig+0x204>
 80055ae:	e12f      	b.n	8005810 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	0013      	movs	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d305      	bcc.n	80055cc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d906      	bls.n	80055da <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80055cc:	231a      	movs	r3, #26
 80055ce:	2218      	movs	r2, #24
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	19db      	adds	r3, r3, r7
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e11a      	b.n	8005810 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	000b      	movs	r3, r1
 80055e8:	0e1b      	lsrs	r3, r3, #24
 80055ea:	0010      	movs	r0, r2
 80055ec:	0205      	lsls	r5, r0, #8
 80055ee:	431d      	orrs	r5, r3
 80055f0:	000b      	movs	r3, r1
 80055f2:	021c      	lsls	r4, r3, #8
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68b8      	ldr	r0, [r7, #8]
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	1900      	adds	r0, r0, r4
 8005606:	4169      	adcs	r1, r5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f7fa ff47 	bl	80004a8 <__aeabi_uldivmod>
 800561a:	0002      	movs	r2, r0
 800561c:	000b      	movs	r3, r1
 800561e:	0013      	movs	r3, r2
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005624:	23c0      	movs	r3, #192	@ 0xc0
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d309      	bcc.n	8005640 <UART_SetConfig+0x294>
 800562c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	035b      	lsls	r3, r3, #13
 8005632:	429a      	cmp	r2, r3
 8005634:	d204      	bcs.n	8005640 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e0e7      	b.n	8005810 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005640:	231a      	movs	r3, #26
 8005642:	2218      	movs	r2, #24
 8005644:	189b      	adds	r3, r3, r2
 8005646:	19db      	adds	r3, r3, r7
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e0e0      	b.n	8005810 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	2380      	movs	r3, #128	@ 0x80
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	429a      	cmp	r2, r3
 8005658:	d000      	beq.n	800565c <UART_SetConfig+0x2b0>
 800565a:	e082      	b.n	8005762 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800565c:	231b      	movs	r3, #27
 800565e:	2218      	movs	r2, #24
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d834      	bhi.n	80056d4 <UART_SetConfig+0x328>
 800566a:	009a      	lsls	r2, r3, #2
 800566c:	4b18      	ldr	r3, [pc, #96]	@ (80056d0 <UART_SetConfig+0x324>)
 800566e:	18d3      	adds	r3, r2, r3
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7ff fc4e 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 8005678:	0003      	movs	r3, r0
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800567c:	e033      	b.n	80056e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567e:	f7ff fc5f 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 8005682:	0003      	movs	r3, r0
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005686:	e02e      	b.n	80056e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005688:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <UART_SetConfig+0x318>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2210      	movs	r2, #16
 800568e:	4013      	ands	r3, r2
 8005690:	d002      	beq.n	8005698 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <UART_SetConfig+0x31c>)
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005696:	e026      	b.n	80056e6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005698:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <UART_SetConfig+0x320>)
 800569a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800569c:	e023      	b.n	80056e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800569e:	f7ff fba9 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 80056a2:	0003      	movs	r3, r0
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056a6:	e01e      	b.n	80056e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ae:	e01a      	b.n	80056e6 <UART_SetConfig+0x33a>
 80056b0:	efff69f3 	.word	0xefff69f3
 80056b4:	ffffcfff 	.word	0xffffcfff
 80056b8:	40004800 	.word	0x40004800
 80056bc:	fffff4ff 	.word	0xfffff4ff
 80056c0:	40004400 	.word	0x40004400
 80056c4:	40021000 	.word	0x40021000
 80056c8:	003d0900 	.word	0x003d0900
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	08008b48 	.word	0x08008b48
      default:
        pclk = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80056d8:	231a      	movs	r3, #26
 80056da:	2218      	movs	r2, #24
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	19db      	adds	r3, r3, r7
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
        break;
 80056e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d100      	bne.n	80056ee <UART_SetConfig+0x342>
 80056ec:	e090      	b.n	8005810 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	005a      	lsls	r2, r3, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	18d2      	adds	r2, r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	0019      	movs	r1, r3
 8005700:	0010      	movs	r0, r2
 8005702:	f7fa fd1d 	bl	8000140 <__udivsi3>
 8005706:	0003      	movs	r3, r0
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	2b0f      	cmp	r3, #15
 800570e:	d921      	bls.n	8005754 <UART_SetConfig+0x3a8>
 8005710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	025b      	lsls	r3, r3, #9
 8005716:	429a      	cmp	r2, r3
 8005718:	d21c      	bcs.n	8005754 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	b29a      	uxth	r2, r3
 800571e:	200e      	movs	r0, #14
 8005720:	2418      	movs	r4, #24
 8005722:	1903      	adds	r3, r0, r4
 8005724:	19db      	adds	r3, r3, r7
 8005726:	210f      	movs	r1, #15
 8005728:	438a      	bics	r2, r1
 800572a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	b29b      	uxth	r3, r3
 8005732:	2207      	movs	r2, #7
 8005734:	4013      	ands	r3, r2
 8005736:	b299      	uxth	r1, r3
 8005738:	1903      	adds	r3, r0, r4
 800573a:	19db      	adds	r3, r3, r7
 800573c:	1902      	adds	r2, r0, r4
 800573e:	19d2      	adds	r2, r2, r7
 8005740:	8812      	ldrh	r2, [r2, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1902      	adds	r2, r0, r4
 800574c:	19d2      	adds	r2, r2, r7
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e05d      	b.n	8005810 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	231a      	movs	r3, #26
 8005756:	2218      	movs	r2, #24
 8005758:	189b      	adds	r3, r3, r2
 800575a:	19db      	adds	r3, r3, r7
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e056      	b.n	8005810 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005762:	231b      	movs	r3, #27
 8005764:	2218      	movs	r2, #24
 8005766:	189b      	adds	r3, r3, r2
 8005768:	19db      	adds	r3, r3, r7
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d822      	bhi.n	80057b6 <UART_SetConfig+0x40a>
 8005770:	009a      	lsls	r2, r3, #2
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <UART_SetConfig+0x484>)
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577a:	f7ff fbcb 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 800577e:	0003      	movs	r3, r0
 8005780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005782:	e021      	b.n	80057c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7ff fbdc 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 8005788:	0003      	movs	r3, r0
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800578c:	e01c      	b.n	80057c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578e:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <UART_SetConfig+0x488>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2210      	movs	r2, #16
 8005794:	4013      	ands	r3, r2
 8005796:	d002      	beq.n	800579e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <UART_SetConfig+0x48c>)
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800579c:	e014      	b.n	80057c8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <UART_SetConfig+0x490>)
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057a2:	e011      	b.n	80057c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a4:	f7ff fb26 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 80057a8:	0003      	movs	r3, r0
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057ac:	e00c      	b.n	80057c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	2380      	movs	r3, #128	@ 0x80
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057b4:	e008      	b.n	80057c8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80057ba:	231a      	movs	r3, #26
 80057bc:	2218      	movs	r2, #24
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	2201      	movs	r2, #1
 80057c4:	701a      	strb	r2, [r3, #0]
        break;
 80057c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	085a      	lsrs	r2, r3, #1
 80057d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d6:	18d2      	adds	r2, r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	0019      	movs	r1, r3
 80057de:	0010      	movs	r0, r2
 80057e0:	f7fa fcae 	bl	8000140 <__udivsi3>
 80057e4:	0003      	movs	r3, r0
 80057e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	d90a      	bls.n	8005804 <UART_SetConfig+0x458>
 80057ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	025b      	lsls	r3, r3, #9
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d205      	bcs.n	8005804 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	e005      	b.n	8005810 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005804:	231a      	movs	r3, #26
 8005806:	2218      	movs	r2, #24
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2200      	movs	r2, #0
 8005814:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800581c:	231a      	movs	r3, #26
 800581e:	2218      	movs	r2, #24
 8005820:	189b      	adds	r3, r3, r2
 8005822:	19db      	adds	r3, r3, r7
 8005824:	781b      	ldrb	r3, [r3, #0]
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b00e      	add	sp, #56	@ 0x38
 800582c:	bdb0      	pop	{r4, r5, r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	08008b6c 	.word	0x08008b6c
 8005834:	40021000 	.word	0x40021000
 8005838:	003d0900 	.word	0x003d0900
 800583c:	00f42400 	.word	0x00f42400

08005840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	2208      	movs	r2, #8
 800584e:	4013      	ands	r3, r2
 8005850:	d00b      	beq.n	800586a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a4a      	ldr	r2, [pc, #296]	@ (8005984 <UART_AdvFeatureConfig+0x144>)
 800585a:	4013      	ands	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	2201      	movs	r2, #1
 8005870:	4013      	ands	r3, r2
 8005872:	d00b      	beq.n	800588c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4a43      	ldr	r2, [pc, #268]	@ (8005988 <UART_AdvFeatureConfig+0x148>)
 800587c:	4013      	ands	r3, r2
 800587e:	0019      	movs	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	2202      	movs	r2, #2
 8005892:	4013      	ands	r3, r2
 8005894:	d00b      	beq.n	80058ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4a3b      	ldr	r2, [pc, #236]	@ (800598c <UART_AdvFeatureConfig+0x14c>)
 800589e:	4013      	ands	r3, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	2204      	movs	r2, #4
 80058b4:	4013      	ands	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4a34      	ldr	r2, [pc, #208]	@ (8005990 <UART_AdvFeatureConfig+0x150>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	0019      	movs	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	2210      	movs	r2, #16
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <UART_AdvFeatureConfig+0x154>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	2220      	movs	r2, #32
 80058f8:	4013      	ands	r3, r2
 80058fa:	d00b      	beq.n	8005914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	4a25      	ldr	r2, [pc, #148]	@ (8005998 <UART_AdvFeatureConfig+0x158>)
 8005904:	4013      	ands	r3, r2
 8005906:	0019      	movs	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	2240      	movs	r2, #64	@ 0x40
 800591a:	4013      	ands	r3, r2
 800591c:	d01d      	beq.n	800595a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a1d      	ldr	r2, [pc, #116]	@ (800599c <UART_AdvFeatureConfig+0x15c>)
 8005926:	4013      	ands	r3, r2
 8005928:	0019      	movs	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	035b      	lsls	r3, r3, #13
 800593e:	429a      	cmp	r2, r3
 8005940:	d10b      	bne.n	800595a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a15      	ldr	r2, [pc, #84]	@ (80059a0 <UART_AdvFeatureConfig+0x160>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	2280      	movs	r2, #128	@ 0x80
 8005960:	4013      	ands	r3, r2
 8005962:	d00b      	beq.n	800597c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <UART_AdvFeatureConfig+0x164>)
 800596c:	4013      	ands	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }
}
 800597c:	46c0      	nop			@ (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}
 8005984:	ffff7fff 	.word	0xffff7fff
 8005988:	fffdffff 	.word	0xfffdffff
 800598c:	fffeffff 	.word	0xfffeffff
 8005990:	fffbffff 	.word	0xfffbffff
 8005994:	ffffefff 	.word	0xffffefff
 8005998:	ffffdfff 	.word	0xffffdfff
 800599c:	ffefffff 	.word	0xffefffff
 80059a0:	ff9fffff 	.word	0xff9fffff
 80059a4:	fff7ffff 	.word	0xfff7ffff

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b092      	sub	sp, #72	@ 0x48
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2284      	movs	r2, #132	@ 0x84
 80059b4:	2100      	movs	r1, #0
 80059b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b8:	f7fd fc5c 	bl	8003274 <HAL_GetTick>
 80059bc:	0003      	movs	r3, r0
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2208      	movs	r2, #8
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d12c      	bne.n	8005a28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d0:	2280      	movs	r2, #128	@ 0x80
 80059d2:	0391      	lsls	r1, r2, #14
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4a46      	ldr	r2, [pc, #280]	@ (8005af0 <UART_CheckIdleState+0x148>)
 80059d8:	9200      	str	r2, [sp, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	f000 f88c 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d021      	beq.n	8005a28 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ee:	2301      	movs	r3, #1
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2180      	movs	r1, #128	@ 0x80
 8005a06:	438a      	bics	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2278      	movs	r2, #120	@ 0x78
 8005a20:	2100      	movs	r1, #0
 8005a22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e05f      	b.n	8005ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d146      	bne.n	8005ac4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a38:	2280      	movs	r2, #128	@ 0x80
 8005a3a:	03d1      	lsls	r1, r2, #15
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <UART_CheckIdleState+0x148>)
 8005a40:	9200      	str	r2, [sp, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f000 f858 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d03b      	beq.n	8005ac4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a56:	2301      	movs	r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f383 8810 	msr	PRIMASK, r3
}
 8005a60:	46c0      	nop			@ (mov r8, r8)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4921      	ldr	r1, [pc, #132]	@ (8005af4 <UART_CheckIdleState+0x14c>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a82:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	438a      	bics	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2280      	movs	r2, #128	@ 0x80
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2278      	movs	r2, #120	@ 0x78
 8005abc:	2100      	movs	r1, #0
 8005abe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e011      	b.n	8005ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2280      	movs	r2, #128	@ 0x80
 8005ace:	2120      	movs	r1, #32
 8005ad0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2278      	movs	r2, #120	@ 0x78
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	0018      	movs	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b010      	add	sp, #64	@ 0x40
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	01ffffff 	.word	0x01ffffff
 8005af4:	fffffedf 	.word	0xfffffedf

08005af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	1dfb      	adds	r3, r7, #7
 8005b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b08:	e051      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	d04e      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b10:	f7fd fbb0 	bl	8003274 <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d302      	bcc.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e051      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2204      	movs	r2, #4
 8005b32:	4013      	ands	r3, r2
 8005b34:	d03b      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b80      	cmp	r3, #128	@ 0x80
 8005b3a:	d038      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d035      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d111      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f83c 	bl	8005bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2284      	movs	r2, #132	@ 0x84
 8005b64:	2108      	movs	r1, #8
 8005b66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2278      	movs	r2, #120	@ 0x78
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e02c      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	401a      	ands	r2, r3
 8005b80:	2380      	movs	r3, #128	@ 0x80
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d112      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2280      	movs	r2, #128	@ 0x80
 8005b8e:	0112      	lsls	r2, r2, #4
 8005b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 f81f 	bl	8005bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2284      	movs	r2, #132	@ 0x84
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2278      	movs	r2, #120	@ 0x78
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e00f      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	425a      	negs	r2, r3
 8005bbe:	4153      	adcs	r3, r2
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	001a      	movs	r2, r3
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d09e      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b004      	add	sp, #16
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08e      	sub	sp, #56	@ 0x38
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be0:	f3ef 8310 	mrs	r3, PRIMASK
 8005be4:	617b      	str	r3, [r7, #20]
  return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bea:	2301      	movs	r3, #1
 8005bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f383 8810 	msr	PRIMASK, r3
}
 8005bf4:	46c0      	nop			@ (mov r8, r8)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4926      	ldr	r1, [pc, #152]	@ (8005c9c <UART_EndRxTransfer+0xc4>)
 8005c02:	400a      	ands	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f383 8810 	msr	PRIMASK, r3
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c12:	f3ef 8310 	mrs	r3, PRIMASK
 8005c16:	623b      	str	r3, [r7, #32]
  return(result);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2101      	movs	r1, #1
 8005c34:	438a      	bics	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d118      	bne.n	8005c7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c56:	2301      	movs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2110      	movs	r1, #16
 8005c6e:	438a      	bics	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f383 8810 	msr	PRIMASK, r3
}
 8005c7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2280      	movs	r2, #128	@ 0x80
 8005c82:	2120      	movs	r1, #32
 8005c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b00e      	add	sp, #56	@ 0x38
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	fffffedf 	.word	0xfffffedf

08005ca0 <__cvt>:
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	001f      	movs	r7, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	0016      	movs	r6, r2
 8005ca8:	b08b      	sub	sp, #44	@ 0x2c
 8005caa:	429f      	cmp	r7, r3
 8005cac:	da04      	bge.n	8005cb8 <__cvt+0x18>
 8005cae:	2180      	movs	r1, #128	@ 0x80
 8005cb0:	0609      	lsls	r1, r1, #24
 8005cb2:	187b      	adds	r3, r7, r1
 8005cb4:	001f      	movs	r7, r3
 8005cb6:	232d      	movs	r3, #45	@ 0x2d
 8005cb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005cbc:	7013      	strb	r3, [r2, #0]
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	439d      	bics	r5, r3
 8005cc4:	2d46      	cmp	r5, #70	@ 0x46
 8005cc6:	d007      	beq.n	8005cd8 <__cvt+0x38>
 8005cc8:	002b      	movs	r3, r5
 8005cca:	3b45      	subs	r3, #69	@ 0x45
 8005ccc:	4259      	negs	r1, r3
 8005cce:	414b      	adcs	r3, r1
 8005cd0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005cd2:	3a01      	subs	r2, #1
 8005cd4:	18cb      	adds	r3, r1, r3
 8005cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005cd8:	ab09      	add	r3, sp, #36	@ 0x24
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	ab08      	add	r3, sp, #32
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ce2:	9200      	str	r2, [sp, #0]
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ce8:	0032      	movs	r2, r6
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	003b      	movs	r3, r7
 8005cee:	f000 fe95 	bl	8006a1c <_dtoa_r>
 8005cf2:	0004      	movs	r4, r0
 8005cf4:	2d47      	cmp	r5, #71	@ 0x47
 8005cf6:	d11b      	bne.n	8005d30 <__cvt+0x90>
 8005cf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d511      	bpl.n	8005d22 <__cvt+0x82>
 8005cfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d00:	18c3      	adds	r3, r0, r3
 8005d02:	9307      	str	r3, [sp, #28]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2300      	movs	r3, #0
 8005d08:	0030      	movs	r0, r6
 8005d0a:	0039      	movs	r1, r7
 8005d0c:	f7fa fb9e 	bl	800044c <__aeabi_dcmpeq>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d001      	beq.n	8005d18 <__cvt+0x78>
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d18:	2230      	movs	r2, #48	@ 0x30
 8005d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1c:	9907      	ldr	r1, [sp, #28]
 8005d1e:	428b      	cmp	r3, r1
 8005d20:	d320      	bcc.n	8005d64 <__cvt+0xc4>
 8005d22:	0020      	movs	r0, r4
 8005d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d28:	1b1b      	subs	r3, r3, r4
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	b00b      	add	sp, #44	@ 0x2c
 8005d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d32:	18c3      	adds	r3, r0, r3
 8005d34:	9307      	str	r3, [sp, #28]
 8005d36:	2d46      	cmp	r5, #70	@ 0x46
 8005d38:	d1e4      	bne.n	8005d04 <__cvt+0x64>
 8005d3a:	7803      	ldrb	r3, [r0, #0]
 8005d3c:	2b30      	cmp	r3, #48	@ 0x30
 8005d3e:	d10c      	bne.n	8005d5a <__cvt+0xba>
 8005d40:	2200      	movs	r2, #0
 8005d42:	2300      	movs	r3, #0
 8005d44:	0030      	movs	r0, r6
 8005d46:	0039      	movs	r1, r7
 8005d48:	f7fa fb80 	bl	800044c <__aeabi_dcmpeq>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d104      	bne.n	8005d5a <__cvt+0xba>
 8005d50:	2301      	movs	r3, #1
 8005d52:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d5c:	9a07      	ldr	r2, [sp, #28]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	18d3      	adds	r3, r2, r3
 8005d62:	e7ce      	b.n	8005d02 <__cvt+0x62>
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e7d6      	b.n	8005d1a <__cvt+0x7a>

08005d6c <__exponent>:
 8005d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6e:	232b      	movs	r3, #43	@ 0x2b
 8005d70:	b085      	sub	sp, #20
 8005d72:	0005      	movs	r5, r0
 8005d74:	1e0c      	subs	r4, r1, #0
 8005d76:	7002      	strb	r2, [r0, #0]
 8005d78:	da01      	bge.n	8005d7e <__exponent+0x12>
 8005d7a:	424c      	negs	r4, r1
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	706b      	strb	r3, [r5, #1]
 8005d80:	2c09      	cmp	r4, #9
 8005d82:	dd2c      	ble.n	8005dde <__exponent+0x72>
 8005d84:	ab02      	add	r3, sp, #8
 8005d86:	1dde      	adds	r6, r3, #7
 8005d88:	0020      	movs	r0, r4
 8005d8a:	210a      	movs	r1, #10
 8005d8c:	f7fa fb48 	bl	8000420 <__aeabi_idivmod>
 8005d90:	0037      	movs	r7, r6
 8005d92:	3130      	adds	r1, #48	@ 0x30
 8005d94:	3e01      	subs	r6, #1
 8005d96:	0020      	movs	r0, r4
 8005d98:	7031      	strb	r1, [r6, #0]
 8005d9a:	210a      	movs	r1, #10
 8005d9c:	9401      	str	r4, [sp, #4]
 8005d9e:	f7fa fa59 	bl	8000254 <__divsi3>
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	0004      	movs	r4, r0
 8005da6:	2b63      	cmp	r3, #99	@ 0x63
 8005da8:	dcee      	bgt.n	8005d88 <__exponent+0x1c>
 8005daa:	1eba      	subs	r2, r7, #2
 8005dac:	1ca8      	adds	r0, r5, #2
 8005dae:	0001      	movs	r1, r0
 8005db0:	0013      	movs	r3, r2
 8005db2:	3430      	adds	r4, #48	@ 0x30
 8005db4:	7014      	strb	r4, [r2, #0]
 8005db6:	ac02      	add	r4, sp, #8
 8005db8:	3407      	adds	r4, #7
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d80a      	bhi.n	8005dd4 <__exponent+0x68>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4294      	cmp	r4, r2
 8005dc2:	d303      	bcc.n	8005dcc <__exponent+0x60>
 8005dc4:	3309      	adds	r3, #9
 8005dc6:	aa02      	add	r2, sp, #8
 8005dc8:	189b      	adds	r3, r3, r2
 8005dca:	1bdb      	subs	r3, r3, r7
 8005dcc:	18c0      	adds	r0, r0, r3
 8005dce:	1b40      	subs	r0, r0, r5
 8005dd0:	b005      	add	sp, #20
 8005dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd4:	781c      	ldrb	r4, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	700c      	strb	r4, [r1, #0]
 8005dda:	3101      	adds	r1, #1
 8005ddc:	e7eb      	b.n	8005db6 <__exponent+0x4a>
 8005dde:	2330      	movs	r3, #48	@ 0x30
 8005de0:	18e4      	adds	r4, r4, r3
 8005de2:	70ab      	strb	r3, [r5, #2]
 8005de4:	1d28      	adds	r0, r5, #4
 8005de6:	70ec      	strb	r4, [r5, #3]
 8005de8:	e7f1      	b.n	8005dce <__exponent+0x62>
	...

08005dec <_printf_float>:
 8005dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dee:	b097      	sub	sp, #92	@ 0x5c
 8005df0:	000d      	movs	r5, r1
 8005df2:	920a      	str	r2, [sp, #40]	@ 0x28
 8005df4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005dfa:	f000 fcff 	bl	80067fc <_localeconv_r>
 8005dfe:	6803      	ldr	r3, [r0, #0]
 8005e00:	0018      	movs	r0, r3
 8005e02:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e04:	f7fa f980 	bl	8000108 <strlen>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e0c:	9314      	str	r3, [sp, #80]	@ 0x50
 8005e0e:	7e2b      	ldrb	r3, [r5, #24]
 8005e10:	2207      	movs	r2, #7
 8005e12:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	05c9      	lsls	r1, r1, #23
 8005e1e:	d545      	bpl.n	8005eac <_printf_float+0xc0>
 8005e20:	189b      	adds	r3, r3, r2
 8005e22:	4393      	bics	r3, r2
 8005e24:	001a      	movs	r2, r3
 8005e26:	3208      	adds	r2, #8
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	681e      	ldr	r6, [r3, #0]
 8005e2e:	685f      	ldr	r7, [r3, #4]
 8005e30:	007b      	lsls	r3, r7, #1
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e36:	9610      	str	r6, [sp, #64]	@ 0x40
 8005e38:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005e3a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005e3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e40:	4ba7      	ldr	r3, [pc, #668]	@ (80060e0 <_printf_float+0x2f4>)
 8005e42:	4252      	negs	r2, r2
 8005e44:	f7fc fcb6 	bl	80027b4 <__aeabi_dcmpun>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d131      	bne.n	8005eb0 <_printf_float+0xc4>
 8005e4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e4e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e50:	2201      	movs	r2, #1
 8005e52:	4ba3      	ldr	r3, [pc, #652]	@ (80060e0 <_printf_float+0x2f4>)
 8005e54:	4252      	negs	r2, r2
 8005e56:	f7fa fb09 	bl	800046c <__aeabi_dcmple>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d128      	bne.n	8005eb0 <_printf_float+0xc4>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2300      	movs	r3, #0
 8005e62:	0030      	movs	r0, r6
 8005e64:	0039      	movs	r1, r7
 8005e66:	f7fa faf7 	bl	8000458 <__aeabi_dcmplt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d003      	beq.n	8005e76 <_printf_float+0x8a>
 8005e6e:	002b      	movs	r3, r5
 8005e70:	222d      	movs	r2, #45	@ 0x2d
 8005e72:	3343      	adds	r3, #67	@ 0x43
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e78:	4f9a      	ldr	r7, [pc, #616]	@ (80060e4 <_printf_float+0x2f8>)
 8005e7a:	2b47      	cmp	r3, #71	@ 0x47
 8005e7c:	d800      	bhi.n	8005e80 <_printf_float+0x94>
 8005e7e:	4f9a      	ldr	r7, [pc, #616]	@ (80060e8 <_printf_float+0x2fc>)
 8005e80:	2303      	movs	r3, #3
 8005e82:	2400      	movs	r4, #0
 8005e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e86:	612b      	str	r3, [r5, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	439a      	bics	r2, r3
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e90:	0029      	movs	r1, r5
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e98:	aa15      	add	r2, sp, #84	@ 0x54
 8005e9a:	f000 f9e5 	bl	8006268 <_printf_common>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d000      	beq.n	8005ea4 <_printf_float+0xb8>
 8005ea2:	e09e      	b.n	8005fe2 <_printf_float+0x1f6>
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	4240      	negs	r0, r0
 8005ea8:	b017      	add	sp, #92	@ 0x5c
 8005eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eac:	3307      	adds	r3, #7
 8005eae:	e7b8      	b.n	8005e22 <_printf_float+0x36>
 8005eb0:	0032      	movs	r2, r6
 8005eb2:	003b      	movs	r3, r7
 8005eb4:	0030      	movs	r0, r6
 8005eb6:	0039      	movs	r1, r7
 8005eb8:	f7fc fc7c 	bl	80027b4 <__aeabi_dcmpun>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d00b      	beq.n	8005ed8 <_printf_float+0xec>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	da03      	bge.n	8005ecc <_printf_float+0xe0>
 8005ec4:	002b      	movs	r3, r5
 8005ec6:	222d      	movs	r2, #45	@ 0x2d
 8005ec8:	3343      	adds	r3, #67	@ 0x43
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ece:	4f87      	ldr	r7, [pc, #540]	@ (80060ec <_printf_float+0x300>)
 8005ed0:	2b47      	cmp	r3, #71	@ 0x47
 8005ed2:	d8d5      	bhi.n	8005e80 <_printf_float+0x94>
 8005ed4:	4f86      	ldr	r7, [pc, #536]	@ (80060f0 <_printf_float+0x304>)
 8005ed6:	e7d3      	b.n	8005e80 <_printf_float+0x94>
 8005ed8:	2220      	movs	r2, #32
 8005eda:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005edc:	686b      	ldr	r3, [r5, #4]
 8005ede:	4394      	bics	r4, r2
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	d146      	bne.n	8005f72 <_printf_float+0x186>
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	606b      	str	r3, [r5, #4]
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	9206      	str	r2, [sp, #24]
 8005ef6:	aa14      	add	r2, sp, #80	@ 0x50
 8005ef8:	9205      	str	r2, [sp, #20]
 8005efa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005efc:	a90a      	add	r1, sp, #40	@ 0x28
 8005efe:	9204      	str	r2, [sp, #16]
 8005f00:	aa13      	add	r2, sp, #76	@ 0x4c
 8005f02:	9203      	str	r2, [sp, #12]
 8005f04:	2223      	movs	r2, #35	@ 0x23
 8005f06:	1852      	adds	r2, r2, r1
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	686b      	ldr	r3, [r5, #4]
 8005f0e:	0032      	movs	r2, r6
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f14:	003b      	movs	r3, r7
 8005f16:	f7ff fec3 	bl	8005ca0 <__cvt>
 8005f1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f1c:	0007      	movs	r7, r0
 8005f1e:	2c47      	cmp	r4, #71	@ 0x47
 8005f20:	d12d      	bne.n	8005f7e <_printf_float+0x192>
 8005f22:	1cd3      	adds	r3, r2, #3
 8005f24:	db02      	blt.n	8005f2c <_printf_float+0x140>
 8005f26:	686b      	ldr	r3, [r5, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	dd47      	ble.n	8005fbc <_printf_float+0x1d0>
 8005f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f2e:	3b02      	subs	r3, #2
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f34:	0028      	movs	r0, r5
 8005f36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f3a:	3901      	subs	r1, #1
 8005f3c:	3050      	adds	r0, #80	@ 0x50
 8005f3e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f40:	f7ff ff14 	bl	8005d6c <__exponent>
 8005f44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f46:	0004      	movs	r4, r0
 8005f48:	1813      	adds	r3, r2, r0
 8005f4a:	612b      	str	r3, [r5, #16]
 8005f4c:	2a01      	cmp	r2, #1
 8005f4e:	dc02      	bgt.n	8005f56 <_printf_float+0x16a>
 8005f50:	682a      	ldr	r2, [r5, #0]
 8005f52:	07d2      	lsls	r2, r2, #31
 8005f54:	d501      	bpl.n	8005f5a <_printf_float+0x16e>
 8005f56:	3301      	adds	r3, #1
 8005f58:	612b      	str	r3, [r5, #16]
 8005f5a:	2323      	movs	r3, #35	@ 0x23
 8005f5c:	aa0a      	add	r2, sp, #40	@ 0x28
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d100      	bne.n	8005f68 <_printf_float+0x17c>
 8005f66:	e792      	b.n	8005e8e <_printf_float+0xa2>
 8005f68:	002b      	movs	r3, r5
 8005f6a:	222d      	movs	r2, #45	@ 0x2d
 8005f6c:	3343      	adds	r3, #67	@ 0x43
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e78d      	b.n	8005e8e <_printf_float+0xa2>
 8005f72:	2c47      	cmp	r4, #71	@ 0x47
 8005f74:	d1b8      	bne.n	8005ee8 <_printf_float+0xfc>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1b6      	bne.n	8005ee8 <_printf_float+0xfc>
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7b3      	b.n	8005ee6 <_printf_float+0xfa>
 8005f7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f80:	2b65      	cmp	r3, #101	@ 0x65
 8005f82:	d9d7      	bls.n	8005f34 <_printf_float+0x148>
 8005f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f86:	2b66      	cmp	r3, #102	@ 0x66
 8005f88:	d11a      	bne.n	8005fc0 <_printf_float+0x1d4>
 8005f8a:	686b      	ldr	r3, [r5, #4]
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	dd09      	ble.n	8005fa4 <_printf_float+0x1b8>
 8005f90:	612a      	str	r2, [r5, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <_printf_float+0x1b0>
 8005f96:	6829      	ldr	r1, [r5, #0]
 8005f98:	07c9      	lsls	r1, r1, #31
 8005f9a:	d50b      	bpl.n	8005fb4 <_printf_float+0x1c8>
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	612b      	str	r3, [r5, #16]
 8005fa2:	e007      	b.n	8005fb4 <_printf_float+0x1c8>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <_printf_float+0x1c4>
 8005fa8:	2201      	movs	r2, #1
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	4211      	tst	r1, r2
 8005fae:	d000      	beq.n	8005fb2 <_printf_float+0x1c6>
 8005fb0:	1c9a      	adds	r2, r3, #2
 8005fb2:	612a      	str	r2, [r5, #16]
 8005fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fb6:	2400      	movs	r4, #0
 8005fb8:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005fba:	e7ce      	b.n	8005f5a <_printf_float+0x16e>
 8005fbc:	2367      	movs	r3, #103	@ 0x67
 8005fbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8005fc0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005fc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	db06      	blt.n	8005fd6 <_printf_float+0x1ea>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	6129      	str	r1, [r5, #16]
 8005fcc:	07db      	lsls	r3, r3, #31
 8005fce:	d5f1      	bpl.n	8005fb4 <_printf_float+0x1c8>
 8005fd0:	3101      	adds	r1, #1
 8005fd2:	6129      	str	r1, [r5, #16]
 8005fd4:	e7ee      	b.n	8005fb4 <_printf_float+0x1c8>
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	dce0      	bgt.n	8005f9e <_printf_float+0x1b2>
 8005fdc:	1892      	adds	r2, r2, r2
 8005fde:	1a52      	subs	r2, r2, r1
 8005fe0:	e7dd      	b.n	8005f9e <_printf_float+0x1b2>
 8005fe2:	682a      	ldr	r2, [r5, #0]
 8005fe4:	0553      	lsls	r3, r2, #21
 8005fe6:	d408      	bmi.n	8005ffa <_printf_float+0x20e>
 8005fe8:	692b      	ldr	r3, [r5, #16]
 8005fea:	003a      	movs	r2, r7
 8005fec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005ff2:	47a0      	blx	r4
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d129      	bne.n	800604c <_printf_float+0x260>
 8005ff8:	e754      	b.n	8005ea4 <_printf_float+0xb8>
 8005ffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ffc:	2b65      	cmp	r3, #101	@ 0x65
 8005ffe:	d800      	bhi.n	8006002 <_printf_float+0x216>
 8006000:	e0db      	b.n	80061ba <_printf_float+0x3ce>
 8006002:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006004:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006006:	2200      	movs	r2, #0
 8006008:	2300      	movs	r3, #0
 800600a:	f7fa fa1f 	bl	800044c <__aeabi_dcmpeq>
 800600e:	2800      	cmp	r0, #0
 8006010:	d033      	beq.n	800607a <_printf_float+0x28e>
 8006012:	2301      	movs	r3, #1
 8006014:	4a37      	ldr	r2, [pc, #220]	@ (80060f4 <_printf_float+0x308>)
 8006016:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006018:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800601a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800601c:	47a0      	blx	r4
 800601e:	3001      	adds	r0, #1
 8006020:	d100      	bne.n	8006024 <_printf_float+0x238>
 8006022:	e73f      	b.n	8005ea4 <_printf_float+0xb8>
 8006024:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006026:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006028:	42b3      	cmp	r3, r6
 800602a:	db02      	blt.n	8006032 <_printf_float+0x246>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d50c      	bpl.n	800604c <_printf_float+0x260>
 8006032:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006036:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800603a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800603c:	47a0      	blx	r4
 800603e:	2400      	movs	r4, #0
 8006040:	3001      	adds	r0, #1
 8006042:	d100      	bne.n	8006046 <_printf_float+0x25a>
 8006044:	e72e      	b.n	8005ea4 <_printf_float+0xb8>
 8006046:	1e73      	subs	r3, r6, #1
 8006048:	42a3      	cmp	r3, r4
 800604a:	dc0a      	bgt.n	8006062 <_printf_float+0x276>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	d500      	bpl.n	8006054 <_printf_float+0x268>
 8006052:	e106      	b.n	8006262 <_printf_float+0x476>
 8006054:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006056:	68e8      	ldr	r0, [r5, #12]
 8006058:	4298      	cmp	r0, r3
 800605a:	db00      	blt.n	800605e <_printf_float+0x272>
 800605c:	e724      	b.n	8005ea8 <_printf_float+0xbc>
 800605e:	0018      	movs	r0, r3
 8006060:	e722      	b.n	8005ea8 <_printf_float+0xbc>
 8006062:	002a      	movs	r2, r5
 8006064:	2301      	movs	r3, #1
 8006066:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006068:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800606a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800606c:	321a      	adds	r2, #26
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	d100      	bne.n	8006076 <_printf_float+0x28a>
 8006074:	e716      	b.n	8005ea4 <_printf_float+0xb8>
 8006076:	3401      	adds	r4, #1
 8006078:	e7e5      	b.n	8006046 <_printf_float+0x25a>
 800607a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800607c:	2b00      	cmp	r3, #0
 800607e:	dc3b      	bgt.n	80060f8 <_printf_float+0x30c>
 8006080:	2301      	movs	r3, #1
 8006082:	4a1c      	ldr	r2, [pc, #112]	@ (80060f4 <_printf_float+0x308>)
 8006084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006088:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800608a:	47a0      	blx	r4
 800608c:	3001      	adds	r0, #1
 800608e:	d100      	bne.n	8006092 <_printf_float+0x2a6>
 8006090:	e708      	b.n	8005ea4 <_printf_float+0xb8>
 8006092:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006096:	4333      	orrs	r3, r6
 8006098:	d102      	bne.n	80060a0 <_printf_float+0x2b4>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	07db      	lsls	r3, r3, #31
 800609e:	d5d5      	bpl.n	800604c <_printf_float+0x260>
 80060a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80060a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060aa:	47a0      	blx	r4
 80060ac:	2300      	movs	r3, #0
 80060ae:	3001      	adds	r0, #1
 80060b0:	d100      	bne.n	80060b4 <_printf_float+0x2c8>
 80060b2:	e6f7      	b.n	8005ea4 <_printf_float+0xb8>
 80060b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80060b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060ba:	425b      	negs	r3, r3
 80060bc:	4293      	cmp	r3, r2
 80060be:	dc01      	bgt.n	80060c4 <_printf_float+0x2d8>
 80060c0:	0033      	movs	r3, r6
 80060c2:	e792      	b.n	8005fea <_printf_float+0x1fe>
 80060c4:	002a      	movs	r2, r5
 80060c6:	2301      	movs	r3, #1
 80060c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060ce:	321a      	adds	r2, #26
 80060d0:	47a0      	blx	r4
 80060d2:	3001      	adds	r0, #1
 80060d4:	d100      	bne.n	80060d8 <_printf_float+0x2ec>
 80060d6:	e6e5      	b.n	8005ea4 <_printf_float+0xb8>
 80060d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060da:	3301      	adds	r3, #1
 80060dc:	e7ea      	b.n	80060b4 <_printf_float+0x2c8>
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	7fefffff 	.word	0x7fefffff
 80060e4:	08008b94 	.word	0x08008b94
 80060e8:	08008b90 	.word	0x08008b90
 80060ec:	08008b9c 	.word	0x08008b9c
 80060f0:	08008b98 	.word	0x08008b98
 80060f4:	08008ba0 	.word	0x08008ba0
 80060f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80060fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80060fe:	429e      	cmp	r6, r3
 8006100:	dd00      	ble.n	8006104 <_printf_float+0x318>
 8006102:	001e      	movs	r6, r3
 8006104:	2e00      	cmp	r6, #0
 8006106:	dc31      	bgt.n	800616c <_printf_float+0x380>
 8006108:	43f3      	mvns	r3, r6
 800610a:	2400      	movs	r4, #0
 800610c:	17db      	asrs	r3, r3, #31
 800610e:	4033      	ands	r3, r6
 8006110:	930e      	str	r3, [sp, #56]	@ 0x38
 8006112:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006116:	1af3      	subs	r3, r6, r3
 8006118:	42a3      	cmp	r3, r4
 800611a:	dc30      	bgt.n	800617e <_printf_float+0x392>
 800611c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800611e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006120:	429a      	cmp	r2, r3
 8006122:	dc38      	bgt.n	8006196 <_printf_float+0x3aa>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d435      	bmi.n	8006196 <_printf_float+0x3aa>
 800612a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800612c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800612e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006130:	1b9b      	subs	r3, r3, r6
 8006132:	1b14      	subs	r4, r2, r4
 8006134:	429c      	cmp	r4, r3
 8006136:	dd00      	ble.n	800613a <_printf_float+0x34e>
 8006138:	001c      	movs	r4, r3
 800613a:	2c00      	cmp	r4, #0
 800613c:	dc34      	bgt.n	80061a8 <_printf_float+0x3bc>
 800613e:	43e3      	mvns	r3, r4
 8006140:	2600      	movs	r6, #0
 8006142:	17db      	asrs	r3, r3, #31
 8006144:	401c      	ands	r4, r3
 8006146:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006148:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	1b1b      	subs	r3, r3, r4
 800614e:	42b3      	cmp	r3, r6
 8006150:	dc00      	bgt.n	8006154 <_printf_float+0x368>
 8006152:	e77b      	b.n	800604c <_printf_float+0x260>
 8006154:	002a      	movs	r2, r5
 8006156:	2301      	movs	r3, #1
 8006158:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800615a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800615c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800615e:	321a      	adds	r2, #26
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	d100      	bne.n	8006168 <_printf_float+0x37c>
 8006166:	e69d      	b.n	8005ea4 <_printf_float+0xb8>
 8006168:	3601      	adds	r6, #1
 800616a:	e7ec      	b.n	8006146 <_printf_float+0x35a>
 800616c:	0033      	movs	r3, r6
 800616e:	003a      	movs	r2, r7
 8006170:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006174:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006176:	47a0      	blx	r4
 8006178:	3001      	adds	r0, #1
 800617a:	d1c5      	bne.n	8006108 <_printf_float+0x31c>
 800617c:	e692      	b.n	8005ea4 <_printf_float+0xb8>
 800617e:	002a      	movs	r2, r5
 8006180:	2301      	movs	r3, #1
 8006182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006184:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006186:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006188:	321a      	adds	r2, #26
 800618a:	47b0      	blx	r6
 800618c:	3001      	adds	r0, #1
 800618e:	d100      	bne.n	8006192 <_printf_float+0x3a6>
 8006190:	e688      	b.n	8005ea4 <_printf_float+0xb8>
 8006192:	3401      	adds	r4, #1
 8006194:	e7bd      	b.n	8006112 <_printf_float+0x326>
 8006196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800619a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800619c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800619e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80061a0:	47a0      	blx	r4
 80061a2:	3001      	adds	r0, #1
 80061a4:	d1c1      	bne.n	800612a <_printf_float+0x33e>
 80061a6:	e67d      	b.n	8005ea4 <_printf_float+0xb8>
 80061a8:	19ba      	adds	r2, r7, r6
 80061aa:	0023      	movs	r3, r4
 80061ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061b2:	47b0      	blx	r6
 80061b4:	3001      	adds	r0, #1
 80061b6:	d1c2      	bne.n	800613e <_printf_float+0x352>
 80061b8:	e674      	b.n	8005ea4 <_printf_float+0xb8>
 80061ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80061be:	2b01      	cmp	r3, #1
 80061c0:	dc02      	bgt.n	80061c8 <_printf_float+0x3dc>
 80061c2:	2301      	movs	r3, #1
 80061c4:	421a      	tst	r2, r3
 80061c6:	d039      	beq.n	800623c <_printf_float+0x450>
 80061c8:	2301      	movs	r3, #1
 80061ca:	003a      	movs	r2, r7
 80061cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061d2:	47b0      	blx	r6
 80061d4:	3001      	adds	r0, #1
 80061d6:	d100      	bne.n	80061da <_printf_float+0x3ee>
 80061d8:	e664      	b.n	8005ea4 <_printf_float+0xb8>
 80061da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061e4:	47b0      	blx	r6
 80061e6:	3001      	adds	r0, #1
 80061e8:	d100      	bne.n	80061ec <_printf_float+0x400>
 80061ea:	e65b      	b.n	8005ea4 <_printf_float+0xb8>
 80061ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80061ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80061f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061f2:	2200      	movs	r2, #0
 80061f4:	3b01      	subs	r3, #1
 80061f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80061f8:	2300      	movs	r3, #0
 80061fa:	f7fa f927 	bl	800044c <__aeabi_dcmpeq>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d11a      	bne.n	8006238 <_printf_float+0x44c>
 8006202:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006204:	1c7a      	adds	r2, r7, #1
 8006206:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006208:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800620a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800620c:	47b0      	blx	r6
 800620e:	3001      	adds	r0, #1
 8006210:	d10e      	bne.n	8006230 <_printf_float+0x444>
 8006212:	e647      	b.n	8005ea4 <_printf_float+0xb8>
 8006214:	002a      	movs	r2, r5
 8006216:	2301      	movs	r3, #1
 8006218:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800621a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800621c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800621e:	321a      	adds	r2, #26
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	d100      	bne.n	8006228 <_printf_float+0x43c>
 8006226:	e63d      	b.n	8005ea4 <_printf_float+0xb8>
 8006228:	3601      	adds	r6, #1
 800622a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800622c:	429e      	cmp	r6, r3
 800622e:	dbf1      	blt.n	8006214 <_printf_float+0x428>
 8006230:	002a      	movs	r2, r5
 8006232:	0023      	movs	r3, r4
 8006234:	3250      	adds	r2, #80	@ 0x50
 8006236:	e6d9      	b.n	8005fec <_printf_float+0x200>
 8006238:	2600      	movs	r6, #0
 800623a:	e7f6      	b.n	800622a <_printf_float+0x43e>
 800623c:	003a      	movs	r2, r7
 800623e:	e7e2      	b.n	8006206 <_printf_float+0x41a>
 8006240:	002a      	movs	r2, r5
 8006242:	2301      	movs	r3, #1
 8006244:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006248:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800624a:	3219      	adds	r2, #25
 800624c:	47b0      	blx	r6
 800624e:	3001      	adds	r0, #1
 8006250:	d100      	bne.n	8006254 <_printf_float+0x468>
 8006252:	e627      	b.n	8005ea4 <_printf_float+0xb8>
 8006254:	3401      	adds	r4, #1
 8006256:	68eb      	ldr	r3, [r5, #12]
 8006258:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42a3      	cmp	r3, r4
 800625e:	dcef      	bgt.n	8006240 <_printf_float+0x454>
 8006260:	e6f8      	b.n	8006054 <_printf_float+0x268>
 8006262:	2400      	movs	r4, #0
 8006264:	e7f7      	b.n	8006256 <_printf_float+0x46a>
 8006266:	46c0      	nop			@ (mov r8, r8)

08006268 <_printf_common>:
 8006268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626a:	0016      	movs	r6, r2
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	688a      	ldr	r2, [r1, #8]
 8006270:	690b      	ldr	r3, [r1, #16]
 8006272:	000c      	movs	r4, r1
 8006274:	9000      	str	r0, [sp, #0]
 8006276:	4293      	cmp	r3, r2
 8006278:	da00      	bge.n	800627c <_printf_common+0x14>
 800627a:	0013      	movs	r3, r2
 800627c:	0022      	movs	r2, r4
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	3243      	adds	r2, #67	@ 0x43
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	2a00      	cmp	r2, #0
 8006286:	d001      	beq.n	800628c <_printf_common+0x24>
 8006288:	3301      	adds	r3, #1
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	069b      	lsls	r3, r3, #26
 8006290:	d502      	bpl.n	8006298 <_printf_common+0x30>
 8006292:	6833      	ldr	r3, [r6, #0]
 8006294:	3302      	adds	r3, #2
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	2306      	movs	r3, #6
 800629c:	0015      	movs	r5, r2
 800629e:	401d      	ands	r5, r3
 80062a0:	421a      	tst	r2, r3
 80062a2:	d027      	beq.n	80062f4 <_printf_common+0x8c>
 80062a4:	0023      	movs	r3, r4
 80062a6:	3343      	adds	r3, #67	@ 0x43
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	1e5a      	subs	r2, r3, #1
 80062ac:	4193      	sbcs	r3, r2
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	0692      	lsls	r2, r2, #26
 80062b2:	d430      	bmi.n	8006316 <_printf_common+0xae>
 80062b4:	0022      	movs	r2, r4
 80062b6:	9901      	ldr	r1, [sp, #4]
 80062b8:	9800      	ldr	r0, [sp, #0]
 80062ba:	9d08      	ldr	r5, [sp, #32]
 80062bc:	3243      	adds	r2, #67	@ 0x43
 80062be:	47a8      	blx	r5
 80062c0:	3001      	adds	r0, #1
 80062c2:	d025      	beq.n	8006310 <_printf_common+0xa8>
 80062c4:	2206      	movs	r2, #6
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	2500      	movs	r5, #0
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d105      	bne.n	80062dc <_printf_common+0x74>
 80062d0:	6833      	ldr	r3, [r6, #0]
 80062d2:	68e5      	ldr	r5, [r4, #12]
 80062d4:	1aed      	subs	r5, r5, r3
 80062d6:	43eb      	mvns	r3, r5
 80062d8:	17db      	asrs	r3, r3, #31
 80062da:	401d      	ands	r5, r3
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	6922      	ldr	r2, [r4, #16]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	dd01      	ble.n	80062e8 <_printf_common+0x80>
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	18ed      	adds	r5, r5, r3
 80062e8:	2600      	movs	r6, #0
 80062ea:	42b5      	cmp	r5, r6
 80062ec:	d120      	bne.n	8006330 <_printf_common+0xc8>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e010      	b.n	8006314 <_printf_common+0xac>
 80062f2:	3501      	adds	r5, #1
 80062f4:	68e3      	ldr	r3, [r4, #12]
 80062f6:	6832      	ldr	r2, [r6, #0]
 80062f8:	1a9b      	subs	r3, r3, r2
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	ddd2      	ble.n	80062a4 <_printf_common+0x3c>
 80062fe:	0022      	movs	r2, r4
 8006300:	2301      	movs	r3, #1
 8006302:	9901      	ldr	r1, [sp, #4]
 8006304:	9800      	ldr	r0, [sp, #0]
 8006306:	9f08      	ldr	r7, [sp, #32]
 8006308:	3219      	adds	r2, #25
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	d1f0      	bne.n	80062f2 <_printf_common+0x8a>
 8006310:	2001      	movs	r0, #1
 8006312:	4240      	negs	r0, r0
 8006314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006316:	2030      	movs	r0, #48	@ 0x30
 8006318:	18e1      	adds	r1, r4, r3
 800631a:	3143      	adds	r1, #67	@ 0x43
 800631c:	7008      	strb	r0, [r1, #0]
 800631e:	0021      	movs	r1, r4
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	3145      	adds	r1, #69	@ 0x45
 8006324:	7809      	ldrb	r1, [r1, #0]
 8006326:	18a2      	adds	r2, r4, r2
 8006328:	3243      	adds	r2, #67	@ 0x43
 800632a:	3302      	adds	r3, #2
 800632c:	7011      	strb	r1, [r2, #0]
 800632e:	e7c1      	b.n	80062b4 <_printf_common+0x4c>
 8006330:	0022      	movs	r2, r4
 8006332:	2301      	movs	r3, #1
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	9800      	ldr	r0, [sp, #0]
 8006338:	9f08      	ldr	r7, [sp, #32]
 800633a:	321a      	adds	r2, #26
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xa8>
 8006342:	3601      	adds	r6, #1
 8006344:	e7d1      	b.n	80062ea <_printf_common+0x82>
	...

08006348 <_printf_i>:
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b08b      	sub	sp, #44	@ 0x2c
 800634c:	9206      	str	r2, [sp, #24]
 800634e:	000a      	movs	r2, r1
 8006350:	3243      	adds	r2, #67	@ 0x43
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	9005      	str	r0, [sp, #20]
 8006356:	9203      	str	r2, [sp, #12]
 8006358:	7e0a      	ldrb	r2, [r1, #24]
 800635a:	000c      	movs	r4, r1
 800635c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800635e:	2a78      	cmp	r2, #120	@ 0x78
 8006360:	d809      	bhi.n	8006376 <_printf_i+0x2e>
 8006362:	2a62      	cmp	r2, #98	@ 0x62
 8006364:	d80b      	bhi.n	800637e <_printf_i+0x36>
 8006366:	2a00      	cmp	r2, #0
 8006368:	d100      	bne.n	800636c <_printf_i+0x24>
 800636a:	e0ba      	b.n	80064e2 <_printf_i+0x19a>
 800636c:	497a      	ldr	r1, [pc, #488]	@ (8006558 <_printf_i+0x210>)
 800636e:	9104      	str	r1, [sp, #16]
 8006370:	2a58      	cmp	r2, #88	@ 0x58
 8006372:	d100      	bne.n	8006376 <_printf_i+0x2e>
 8006374:	e08e      	b.n	8006494 <_printf_i+0x14c>
 8006376:	0025      	movs	r5, r4
 8006378:	3542      	adds	r5, #66	@ 0x42
 800637a:	702a      	strb	r2, [r5, #0]
 800637c:	e022      	b.n	80063c4 <_printf_i+0x7c>
 800637e:	0010      	movs	r0, r2
 8006380:	3863      	subs	r0, #99	@ 0x63
 8006382:	2815      	cmp	r0, #21
 8006384:	d8f7      	bhi.n	8006376 <_printf_i+0x2e>
 8006386:	f7f9 fed1 	bl	800012c <__gnu_thumb1_case_shi>
 800638a:	0016      	.short	0x0016
 800638c:	fff6001f 	.word	0xfff6001f
 8006390:	fff6fff6 	.word	0xfff6fff6
 8006394:	001ffff6 	.word	0x001ffff6
 8006398:	fff6fff6 	.word	0xfff6fff6
 800639c:	fff6fff6 	.word	0xfff6fff6
 80063a0:	0036009f 	.word	0x0036009f
 80063a4:	fff6007e 	.word	0xfff6007e
 80063a8:	00b0fff6 	.word	0x00b0fff6
 80063ac:	0036fff6 	.word	0x0036fff6
 80063b0:	fff6fff6 	.word	0xfff6fff6
 80063b4:	0082      	.short	0x0082
 80063b6:	0025      	movs	r5, r4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	3542      	adds	r5, #66	@ 0x42
 80063bc:	1d11      	adds	r1, r2, #4
 80063be:	6019      	str	r1, [r3, #0]
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	702b      	strb	r3, [r5, #0]
 80063c4:	2301      	movs	r3, #1
 80063c6:	e09e      	b.n	8006506 <_printf_i+0x1be>
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	6809      	ldr	r1, [r1, #0]
 80063cc:	1d02      	adds	r2, r0, #4
 80063ce:	060d      	lsls	r5, r1, #24
 80063d0:	d50b      	bpl.n	80063ea <_printf_i+0xa2>
 80063d2:	6806      	ldr	r6, [r0, #0]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	da03      	bge.n	80063e2 <_printf_i+0x9a>
 80063da:	232d      	movs	r3, #45	@ 0x2d
 80063dc:	9a03      	ldr	r2, [sp, #12]
 80063de:	4276      	negs	r6, r6
 80063e0:	7013      	strb	r3, [r2, #0]
 80063e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006558 <_printf_i+0x210>)
 80063e4:	270a      	movs	r7, #10
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	e018      	b.n	800641c <_printf_i+0xd4>
 80063ea:	6806      	ldr	r6, [r0, #0]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	0649      	lsls	r1, r1, #25
 80063f0:	d5f1      	bpl.n	80063d6 <_printf_i+0x8e>
 80063f2:	b236      	sxth	r6, r6
 80063f4:	e7ef      	b.n	80063d6 <_printf_i+0x8e>
 80063f6:	6808      	ldr	r0, [r1, #0]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	c940      	ldmia	r1!, {r6}
 80063fc:	0605      	lsls	r5, r0, #24
 80063fe:	d402      	bmi.n	8006406 <_printf_i+0xbe>
 8006400:	0640      	lsls	r0, r0, #25
 8006402:	d500      	bpl.n	8006406 <_printf_i+0xbe>
 8006404:	b2b6      	uxth	r6, r6
 8006406:	6019      	str	r1, [r3, #0]
 8006408:	4b53      	ldr	r3, [pc, #332]	@ (8006558 <_printf_i+0x210>)
 800640a:	270a      	movs	r7, #10
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006410:	d100      	bne.n	8006414 <_printf_i+0xcc>
 8006412:	3f02      	subs	r7, #2
 8006414:	0023      	movs	r3, r4
 8006416:	2200      	movs	r2, #0
 8006418:	3343      	adds	r3, #67	@ 0x43
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	db06      	blt.n	8006432 <_printf_i+0xea>
 8006424:	2104      	movs	r1, #4
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	9d03      	ldr	r5, [sp, #12]
 800642a:	438a      	bics	r2, r1
 800642c:	6022      	str	r2, [r4, #0]
 800642e:	4333      	orrs	r3, r6
 8006430:	d00c      	beq.n	800644c <_printf_i+0x104>
 8006432:	9d03      	ldr	r5, [sp, #12]
 8006434:	0030      	movs	r0, r6
 8006436:	0039      	movs	r1, r7
 8006438:	f7f9 ff08 	bl	800024c <__aeabi_uidivmod>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	3d01      	subs	r5, #1
 8006440:	5c5b      	ldrb	r3, [r3, r1]
 8006442:	702b      	strb	r3, [r5, #0]
 8006444:	0033      	movs	r3, r6
 8006446:	0006      	movs	r6, r0
 8006448:	429f      	cmp	r7, r3
 800644a:	d9f3      	bls.n	8006434 <_printf_i+0xec>
 800644c:	2f08      	cmp	r7, #8
 800644e:	d109      	bne.n	8006464 <_printf_i+0x11c>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07db      	lsls	r3, r3, #31
 8006454:	d506      	bpl.n	8006464 <_printf_i+0x11c>
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	dc02      	bgt.n	8006464 <_printf_i+0x11c>
 800645e:	2330      	movs	r3, #48	@ 0x30
 8006460:	3d01      	subs	r5, #1
 8006462:	702b      	strb	r3, [r5, #0]
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	1b5b      	subs	r3, r3, r5
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	9b07      	ldr	r3, [sp, #28]
 800646c:	0021      	movs	r1, r4
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	9805      	ldr	r0, [sp, #20]
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	aa09      	add	r2, sp, #36	@ 0x24
 8006476:	f7ff fef7 	bl	8006268 <_printf_common>
 800647a:	3001      	adds	r0, #1
 800647c:	d148      	bne.n	8006510 <_printf_i+0x1c8>
 800647e:	2001      	movs	r0, #1
 8006480:	4240      	negs	r0, r0
 8006482:	b00b      	add	sp, #44	@ 0x2c
 8006484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006486:	2220      	movs	r2, #32
 8006488:	6809      	ldr	r1, [r1, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	6022      	str	r2, [r4, #0]
 800648e:	2278      	movs	r2, #120	@ 0x78
 8006490:	4932      	ldr	r1, [pc, #200]	@ (800655c <_printf_i+0x214>)
 8006492:	9104      	str	r1, [sp, #16]
 8006494:	0021      	movs	r1, r4
 8006496:	3145      	adds	r1, #69	@ 0x45
 8006498:	700a      	strb	r2, [r1, #0]
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	c940      	ldmia	r1!, {r6}
 80064a0:	0610      	lsls	r0, r2, #24
 80064a2:	d402      	bmi.n	80064aa <_printf_i+0x162>
 80064a4:	0650      	lsls	r0, r2, #25
 80064a6:	d500      	bpl.n	80064aa <_printf_i+0x162>
 80064a8:	b2b6      	uxth	r6, r6
 80064aa:	6019      	str	r1, [r3, #0]
 80064ac:	07d3      	lsls	r3, r2, #31
 80064ae:	d502      	bpl.n	80064b6 <_printf_i+0x16e>
 80064b0:	2320      	movs	r3, #32
 80064b2:	4313      	orrs	r3, r2
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d001      	beq.n	80064be <_printf_i+0x176>
 80064ba:	2710      	movs	r7, #16
 80064bc:	e7aa      	b.n	8006414 <_printf_i+0xcc>
 80064be:	2220      	movs	r2, #32
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	4393      	bics	r3, r2
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	e7f8      	b.n	80064ba <_printf_i+0x172>
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	680d      	ldr	r5, [r1, #0]
 80064cc:	1d10      	adds	r0, r2, #4
 80064ce:	6949      	ldr	r1, [r1, #20]
 80064d0:	6018      	str	r0, [r3, #0]
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	062e      	lsls	r6, r5, #24
 80064d6:	d501      	bpl.n	80064dc <_printf_i+0x194>
 80064d8:	6019      	str	r1, [r3, #0]
 80064da:	e002      	b.n	80064e2 <_printf_i+0x19a>
 80064dc:	066d      	lsls	r5, r5, #25
 80064de:	d5fb      	bpl.n	80064d8 <_printf_i+0x190>
 80064e0:	8019      	strh	r1, [r3, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	9d03      	ldr	r5, [sp, #12]
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	e7bf      	b.n	800646a <_printf_i+0x122>
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	1d11      	adds	r1, r2, #4
 80064ee:	6019      	str	r1, [r3, #0]
 80064f0:	6815      	ldr	r5, [r2, #0]
 80064f2:	2100      	movs	r1, #0
 80064f4:	0028      	movs	r0, r5
 80064f6:	6862      	ldr	r2, [r4, #4]
 80064f8:	f000 f9ff 	bl	80068fa <memchr>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d001      	beq.n	8006504 <_printf_i+0x1bc>
 8006500:	1b40      	subs	r0, r0, r5
 8006502:	6060      	str	r0, [r4, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	2300      	movs	r3, #0
 800650a:	9a03      	ldr	r2, [sp, #12]
 800650c:	7013      	strb	r3, [r2, #0]
 800650e:	e7ac      	b.n	800646a <_printf_i+0x122>
 8006510:	002a      	movs	r2, r5
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	9906      	ldr	r1, [sp, #24]
 8006516:	9805      	ldr	r0, [sp, #20]
 8006518:	9d07      	ldr	r5, [sp, #28]
 800651a:	47a8      	blx	r5
 800651c:	3001      	adds	r0, #1
 800651e:	d0ae      	beq.n	800647e <_printf_i+0x136>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	d415      	bmi.n	8006552 <_printf_i+0x20a>
 8006526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006528:	68e0      	ldr	r0, [r4, #12]
 800652a:	4298      	cmp	r0, r3
 800652c:	daa9      	bge.n	8006482 <_printf_i+0x13a>
 800652e:	0018      	movs	r0, r3
 8006530:	e7a7      	b.n	8006482 <_printf_i+0x13a>
 8006532:	0022      	movs	r2, r4
 8006534:	2301      	movs	r3, #1
 8006536:	9906      	ldr	r1, [sp, #24]
 8006538:	9805      	ldr	r0, [sp, #20]
 800653a:	9e07      	ldr	r6, [sp, #28]
 800653c:	3219      	adds	r2, #25
 800653e:	47b0      	blx	r6
 8006540:	3001      	adds	r0, #1
 8006542:	d09c      	beq.n	800647e <_printf_i+0x136>
 8006544:	3501      	adds	r5, #1
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	42ab      	cmp	r3, r5
 800654e:	dcf0      	bgt.n	8006532 <_printf_i+0x1ea>
 8006550:	e7e9      	b.n	8006526 <_printf_i+0x1de>
 8006552:	2500      	movs	r5, #0
 8006554:	e7f7      	b.n	8006546 <_printf_i+0x1fe>
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	08008ba2 	.word	0x08008ba2
 800655c:	08008bb3 	.word	0x08008bb3

08006560 <std>:
 8006560:	2300      	movs	r3, #0
 8006562:	b510      	push	{r4, lr}
 8006564:	0004      	movs	r4, r0
 8006566:	6003      	str	r3, [r0, #0]
 8006568:	6043      	str	r3, [r0, #4]
 800656a:	6083      	str	r3, [r0, #8]
 800656c:	8181      	strh	r1, [r0, #12]
 800656e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006570:	81c2      	strh	r2, [r0, #14]
 8006572:	6103      	str	r3, [r0, #16]
 8006574:	6143      	str	r3, [r0, #20]
 8006576:	6183      	str	r3, [r0, #24]
 8006578:	0019      	movs	r1, r3
 800657a:	2208      	movs	r2, #8
 800657c:	305c      	adds	r0, #92	@ 0x5c
 800657e:	f000 f935 	bl	80067ec <memset>
 8006582:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <std+0x50>)
 8006584:	6224      	str	r4, [r4, #32]
 8006586:	6263      	str	r3, [r4, #36]	@ 0x24
 8006588:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <std+0x54>)
 800658a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <std+0x58>)
 800658e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006590:	4b0a      	ldr	r3, [pc, #40]	@ (80065bc <std+0x5c>)
 8006592:	6323      	str	r3, [r4, #48]	@ 0x30
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <std+0x60>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d005      	beq.n	80065a6 <std+0x46>
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <std+0x64>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d002      	beq.n	80065a6 <std+0x46>
 80065a0:	4b09      	ldr	r3, [pc, #36]	@ (80065c8 <std+0x68>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d103      	bne.n	80065ae <std+0x4e>
 80065a6:	0020      	movs	r0, r4
 80065a8:	3058      	adds	r0, #88	@ 0x58
 80065aa:	f000 f9a3 	bl	80068f4 <__retarget_lock_init_recursive>
 80065ae:	bd10      	pop	{r4, pc}
 80065b0:	08006755 	.word	0x08006755
 80065b4:	0800677d 	.word	0x0800677d
 80065b8:	080067b5 	.word	0x080067b5
 80065bc:	080067e1 	.word	0x080067e1
 80065c0:	200002d4 	.word	0x200002d4
 80065c4:	2000033c 	.word	0x2000033c
 80065c8:	200003a4 	.word	0x200003a4

080065cc <stdio_exit_handler>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4a03      	ldr	r2, [pc, #12]	@ (80065dc <stdio_exit_handler+0x10>)
 80065d0:	4903      	ldr	r1, [pc, #12]	@ (80065e0 <stdio_exit_handler+0x14>)
 80065d2:	4804      	ldr	r0, [pc, #16]	@ (80065e4 <stdio_exit_handler+0x18>)
 80065d4:	f000 f86c 	bl	80066b0 <_fwalk_sglue>
 80065d8:	bd10      	pop	{r4, pc}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	2000000c 	.word	0x2000000c
 80065e0:	08008309 	.word	0x08008309
 80065e4:	2000001c 	.word	0x2000001c

080065e8 <cleanup_stdio>:
 80065e8:	6841      	ldr	r1, [r0, #4]
 80065ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <cleanup_stdio+0x30>)
 80065ec:	b510      	push	{r4, lr}
 80065ee:	0004      	movs	r4, r0
 80065f0:	4299      	cmp	r1, r3
 80065f2:	d001      	beq.n	80065f8 <cleanup_stdio+0x10>
 80065f4:	f001 fe88 	bl	8008308 <_fflush_r>
 80065f8:	68a1      	ldr	r1, [r4, #8]
 80065fa:	4b08      	ldr	r3, [pc, #32]	@ (800661c <cleanup_stdio+0x34>)
 80065fc:	4299      	cmp	r1, r3
 80065fe:	d002      	beq.n	8006606 <cleanup_stdio+0x1e>
 8006600:	0020      	movs	r0, r4
 8006602:	f001 fe81 	bl	8008308 <_fflush_r>
 8006606:	68e1      	ldr	r1, [r4, #12]
 8006608:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <cleanup_stdio+0x38>)
 800660a:	4299      	cmp	r1, r3
 800660c:	d002      	beq.n	8006614 <cleanup_stdio+0x2c>
 800660e:	0020      	movs	r0, r4
 8006610:	f001 fe7a 	bl	8008308 <_fflush_r>
 8006614:	bd10      	pop	{r4, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	200002d4 	.word	0x200002d4
 800661c:	2000033c 	.word	0x2000033c
 8006620:	200003a4 	.word	0x200003a4

08006624 <global_stdio_init.part.0>:
 8006624:	b510      	push	{r4, lr}
 8006626:	4b09      	ldr	r3, [pc, #36]	@ (800664c <global_stdio_init.part.0+0x28>)
 8006628:	4a09      	ldr	r2, [pc, #36]	@ (8006650 <global_stdio_init.part.0+0x2c>)
 800662a:	2104      	movs	r1, #4
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	4809      	ldr	r0, [pc, #36]	@ (8006654 <global_stdio_init.part.0+0x30>)
 8006630:	2200      	movs	r2, #0
 8006632:	f7ff ff95 	bl	8006560 <std>
 8006636:	2201      	movs	r2, #1
 8006638:	2109      	movs	r1, #9
 800663a:	4807      	ldr	r0, [pc, #28]	@ (8006658 <global_stdio_init.part.0+0x34>)
 800663c:	f7ff ff90 	bl	8006560 <std>
 8006640:	2202      	movs	r2, #2
 8006642:	2112      	movs	r1, #18
 8006644:	4805      	ldr	r0, [pc, #20]	@ (800665c <global_stdio_init.part.0+0x38>)
 8006646:	f7ff ff8b 	bl	8006560 <std>
 800664a:	bd10      	pop	{r4, pc}
 800664c:	2000040c 	.word	0x2000040c
 8006650:	080065cd 	.word	0x080065cd
 8006654:	200002d4 	.word	0x200002d4
 8006658:	2000033c 	.word	0x2000033c
 800665c:	200003a4 	.word	0x200003a4

08006660 <__sfp_lock_acquire>:
 8006660:	b510      	push	{r4, lr}
 8006662:	4802      	ldr	r0, [pc, #8]	@ (800666c <__sfp_lock_acquire+0xc>)
 8006664:	f000 f947 	bl	80068f6 <__retarget_lock_acquire_recursive>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	20000415 	.word	0x20000415

08006670 <__sfp_lock_release>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4802      	ldr	r0, [pc, #8]	@ (800667c <__sfp_lock_release+0xc>)
 8006674:	f000 f940 	bl	80068f8 <__retarget_lock_release_recursive>
 8006678:	bd10      	pop	{r4, pc}
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	20000415 	.word	0x20000415

08006680 <__sinit>:
 8006680:	b510      	push	{r4, lr}
 8006682:	0004      	movs	r4, r0
 8006684:	f7ff ffec 	bl	8006660 <__sfp_lock_acquire>
 8006688:	6a23      	ldr	r3, [r4, #32]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <__sinit+0x14>
 800668e:	f7ff ffef 	bl	8006670 <__sfp_lock_release>
 8006692:	bd10      	pop	{r4, pc}
 8006694:	4b04      	ldr	r3, [pc, #16]	@ (80066a8 <__sinit+0x28>)
 8006696:	6223      	str	r3, [r4, #32]
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__sinit+0x2c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f6      	bne.n	800668e <__sinit+0xe>
 80066a0:	f7ff ffc0 	bl	8006624 <global_stdio_init.part.0>
 80066a4:	e7f3      	b.n	800668e <__sinit+0xe>
 80066a6:	46c0      	nop			@ (mov r8, r8)
 80066a8:	080065e9 	.word	0x080065e9
 80066ac:	2000040c 	.word	0x2000040c

080066b0 <_fwalk_sglue>:
 80066b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066b2:	0014      	movs	r4, r2
 80066b4:	2600      	movs	r6, #0
 80066b6:	9000      	str	r0, [sp, #0]
 80066b8:	9101      	str	r1, [sp, #4]
 80066ba:	68a5      	ldr	r5, [r4, #8]
 80066bc:	6867      	ldr	r7, [r4, #4]
 80066be:	3f01      	subs	r7, #1
 80066c0:	d504      	bpl.n	80066cc <_fwalk_sglue+0x1c>
 80066c2:	6824      	ldr	r4, [r4, #0]
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	d1f8      	bne.n	80066ba <_fwalk_sglue+0xa>
 80066c8:	0030      	movs	r0, r6
 80066ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066cc:	89ab      	ldrh	r3, [r5, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d908      	bls.n	80066e4 <_fwalk_sglue+0x34>
 80066d2:	220e      	movs	r2, #14
 80066d4:	5eab      	ldrsh	r3, [r5, r2]
 80066d6:	3301      	adds	r3, #1
 80066d8:	d004      	beq.n	80066e4 <_fwalk_sglue+0x34>
 80066da:	0029      	movs	r1, r5
 80066dc:	9800      	ldr	r0, [sp, #0]
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	4798      	blx	r3
 80066e2:	4306      	orrs	r6, r0
 80066e4:	3568      	adds	r5, #104	@ 0x68
 80066e6:	e7ea      	b.n	80066be <_fwalk_sglue+0xe>

080066e8 <sniprintf>:
 80066e8:	b40c      	push	{r2, r3}
 80066ea:	b530      	push	{r4, r5, lr}
 80066ec:	4b18      	ldr	r3, [pc, #96]	@ (8006750 <sniprintf+0x68>)
 80066ee:	000c      	movs	r4, r1
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	b09d      	sub	sp, #116	@ 0x74
 80066f4:	2900      	cmp	r1, #0
 80066f6:	da08      	bge.n	800670a <sniprintf+0x22>
 80066f8:	238b      	movs	r3, #139	@ 0x8b
 80066fa:	2001      	movs	r0, #1
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	4240      	negs	r0, r0
 8006700:	b01d      	add	sp, #116	@ 0x74
 8006702:	bc30      	pop	{r4, r5}
 8006704:	bc08      	pop	{r3}
 8006706:	b002      	add	sp, #8
 8006708:	4718      	bx	r3
 800670a:	2382      	movs	r3, #130	@ 0x82
 800670c:	466a      	mov	r2, sp
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	8293      	strh	r3, [r2, #20]
 8006712:	2300      	movs	r3, #0
 8006714:	9002      	str	r0, [sp, #8]
 8006716:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006718:	9006      	str	r0, [sp, #24]
 800671a:	4299      	cmp	r1, r3
 800671c:	d000      	beq.n	8006720 <sniprintf+0x38>
 800671e:	1e4b      	subs	r3, r1, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	2301      	movs	r3, #1
 8006726:	466a      	mov	r2, sp
 8006728:	425b      	negs	r3, r3
 800672a:	82d3      	strh	r3, [r2, #22]
 800672c:	0028      	movs	r0, r5
 800672e:	ab21      	add	r3, sp, #132	@ 0x84
 8006730:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006732:	a902      	add	r1, sp, #8
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	f001 fc63 	bl	8008000 <_svfiprintf_r>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	da01      	bge.n	8006742 <sniprintf+0x5a>
 800673e:	238b      	movs	r3, #139	@ 0x8b
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	2c00      	cmp	r4, #0
 8006744:	d0dc      	beq.n	8006700 <sniprintf+0x18>
 8006746:	2200      	movs	r2, #0
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e7d8      	b.n	8006700 <sniprintf+0x18>
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	20000018 	.word	0x20000018

08006754 <__sread>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	000c      	movs	r4, r1
 8006758:	250e      	movs	r5, #14
 800675a:	5f49      	ldrsh	r1, [r1, r5]
 800675c:	f000 f878 	bl	8006850 <_read_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	db03      	blt.n	800676c <__sread+0x18>
 8006764:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006766:	181b      	adds	r3, r3, r0
 8006768:	6563      	str	r3, [r4, #84]	@ 0x54
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	4a02      	ldr	r2, [pc, #8]	@ (8006778 <__sread+0x24>)
 8006770:	4013      	ands	r3, r2
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	e7f9      	b.n	800676a <__sread+0x16>
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	ffffefff 	.word	0xffffefff

0800677c <__swrite>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	001f      	movs	r7, r3
 8006780:	898b      	ldrh	r3, [r1, #12]
 8006782:	0005      	movs	r5, r0
 8006784:	000c      	movs	r4, r1
 8006786:	0016      	movs	r6, r2
 8006788:	05db      	lsls	r3, r3, #23
 800678a:	d505      	bpl.n	8006798 <__swrite+0x1c>
 800678c:	230e      	movs	r3, #14
 800678e:	5ec9      	ldrsh	r1, [r1, r3]
 8006790:	2200      	movs	r2, #0
 8006792:	2302      	movs	r3, #2
 8006794:	f000 f848 	bl	8006828 <_lseek_r>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	4a05      	ldr	r2, [pc, #20]	@ (80067b0 <__swrite+0x34>)
 800679c:	0028      	movs	r0, r5
 800679e:	4013      	ands	r3, r2
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	0032      	movs	r2, r6
 80067a4:	230e      	movs	r3, #14
 80067a6:	5ee1      	ldrsh	r1, [r4, r3]
 80067a8:	003b      	movs	r3, r7
 80067aa:	f000 f865 	bl	8006878 <_write_r>
 80067ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b0:	ffffefff 	.word	0xffffefff

080067b4 <__sseek>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	000c      	movs	r4, r1
 80067b8:	250e      	movs	r5, #14
 80067ba:	5f49      	ldrsh	r1, [r1, r5]
 80067bc:	f000 f834 	bl	8006828 <_lseek_r>
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	1c42      	adds	r2, r0, #1
 80067c4:	d103      	bne.n	80067ce <__sseek+0x1a>
 80067c6:	4a05      	ldr	r2, [pc, #20]	@ (80067dc <__sseek+0x28>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	2280      	movs	r2, #128	@ 0x80
 80067d0:	0152      	lsls	r2, r2, #5
 80067d2:	4313      	orrs	r3, r2
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80067d8:	e7f8      	b.n	80067cc <__sseek+0x18>
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	ffffefff 	.word	0xffffefff

080067e0 <__sclose>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	230e      	movs	r3, #14
 80067e4:	5ec9      	ldrsh	r1, [r1, r3]
 80067e6:	f000 f80d 	bl	8006804 <_close_r>
 80067ea:	bd10      	pop	{r4, pc}

080067ec <memset>:
 80067ec:	0003      	movs	r3, r0
 80067ee:	1882      	adds	r2, r0, r2
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d100      	bne.n	80067f6 <memset+0xa>
 80067f4:	4770      	bx	lr
 80067f6:	7019      	strb	r1, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	e7f9      	b.n	80067f0 <memset+0x4>

080067fc <_localeconv_r>:
 80067fc:	4800      	ldr	r0, [pc, #0]	@ (8006800 <_localeconv_r+0x4>)
 80067fe:	4770      	bx	lr
 8006800:	20000158 	.word	0x20000158

08006804 <_close_r>:
 8006804:	2300      	movs	r3, #0
 8006806:	b570      	push	{r4, r5, r6, lr}
 8006808:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_close_r+0x20>)
 800680a:	0004      	movs	r4, r0
 800680c:	0008      	movs	r0, r1
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	f7fc fc1f 	bl	8003052 <_close>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d103      	bne.n	8006820 <_close_r+0x1c>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d000      	beq.n	8006820 <_close_r+0x1c>
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	bd70      	pop	{r4, r5, r6, pc}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	20000410 	.word	0x20000410

08006828 <_lseek_r>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	0004      	movs	r4, r0
 800682c:	0008      	movs	r0, r1
 800682e:	0011      	movs	r1, r2
 8006830:	001a      	movs	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	4d05      	ldr	r5, [pc, #20]	@ (800684c <_lseek_r+0x24>)
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fc fc2c 	bl	8003094 <_lseek>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d103      	bne.n	8006848 <_lseek_r+0x20>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d000      	beq.n	8006848 <_lseek_r+0x20>
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	bd70      	pop	{r4, r5, r6, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	20000410 	.word	0x20000410

08006850 <_read_r>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	0004      	movs	r4, r0
 8006854:	0008      	movs	r0, r1
 8006856:	0011      	movs	r1, r2
 8006858:	001a      	movs	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	4d05      	ldr	r5, [pc, #20]	@ (8006874 <_read_r+0x24>)
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fc fbbe 	bl	8002fe0 <_read>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d103      	bne.n	8006870 <_read_r+0x20>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d000      	beq.n	8006870 <_read_r+0x20>
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	20000410 	.word	0x20000410

08006878 <_write_r>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	0004      	movs	r4, r0
 800687c:	0008      	movs	r0, r1
 800687e:	0011      	movs	r1, r2
 8006880:	001a      	movs	r2, r3
 8006882:	2300      	movs	r3, #0
 8006884:	4d05      	ldr	r5, [pc, #20]	@ (800689c <_write_r+0x24>)
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	f7fc fbc7 	bl	800301a <_write>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d103      	bne.n	8006898 <_write_r+0x20>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d000      	beq.n	8006898 <_write_r+0x20>
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	bd70      	pop	{r4, r5, r6, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	20000410 	.word	0x20000410

080068a0 <__errno>:
 80068a0:	4b01      	ldr	r3, [pc, #4]	@ (80068a8 <__errno+0x8>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	4770      	bx	lr
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	20000018 	.word	0x20000018

080068ac <__libc_init_array>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	2600      	movs	r6, #0
 80068b0:	4c0c      	ldr	r4, [pc, #48]	@ (80068e4 <__libc_init_array+0x38>)
 80068b2:	4d0d      	ldr	r5, [pc, #52]	@ (80068e8 <__libc_init_array+0x3c>)
 80068b4:	1b64      	subs	r4, r4, r5
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	d109      	bne.n	80068d0 <__libc_init_array+0x24>
 80068bc:	2600      	movs	r6, #0
 80068be:	f002 f8f3 	bl	8008aa8 <_init>
 80068c2:	4c0a      	ldr	r4, [pc, #40]	@ (80068ec <__libc_init_array+0x40>)
 80068c4:	4d0a      	ldr	r5, [pc, #40]	@ (80068f0 <__libc_init_array+0x44>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	42a6      	cmp	r6, r4
 80068cc:	d105      	bne.n	80068da <__libc_init_array+0x2e>
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	00b3      	lsls	r3, r6, #2
 80068d2:	58eb      	ldr	r3, [r5, r3]
 80068d4:	4798      	blx	r3
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7ee      	b.n	80068b8 <__libc_init_array+0xc>
 80068da:	00b3      	lsls	r3, r6, #2
 80068dc:	58eb      	ldr	r3, [r5, r3]
 80068de:	4798      	blx	r3
 80068e0:	3601      	adds	r6, #1
 80068e2:	e7f2      	b.n	80068ca <__libc_init_array+0x1e>
 80068e4:	08008f0c 	.word	0x08008f0c
 80068e8:	08008f0c 	.word	0x08008f0c
 80068ec:	08008f10 	.word	0x08008f10
 80068f0:	08008f0c 	.word	0x08008f0c

080068f4 <__retarget_lock_init_recursive>:
 80068f4:	4770      	bx	lr

080068f6 <__retarget_lock_acquire_recursive>:
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_release_recursive>:
 80068f8:	4770      	bx	lr

080068fa <memchr>:
 80068fa:	b2c9      	uxtb	r1, r1
 80068fc:	1882      	adds	r2, r0, r2
 80068fe:	4290      	cmp	r0, r2
 8006900:	d101      	bne.n	8006906 <memchr+0xc>
 8006902:	2000      	movs	r0, #0
 8006904:	4770      	bx	lr
 8006906:	7803      	ldrb	r3, [r0, #0]
 8006908:	428b      	cmp	r3, r1
 800690a:	d0fb      	beq.n	8006904 <memchr+0xa>
 800690c:	3001      	adds	r0, #1
 800690e:	e7f6      	b.n	80068fe <memchr+0x4>

08006910 <quorem>:
 8006910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006912:	6903      	ldr	r3, [r0, #16]
 8006914:	690c      	ldr	r4, [r1, #16]
 8006916:	b089      	sub	sp, #36	@ 0x24
 8006918:	9003      	str	r0, [sp, #12]
 800691a:	9106      	str	r1, [sp, #24]
 800691c:	2000      	movs	r0, #0
 800691e:	42a3      	cmp	r3, r4
 8006920:	db63      	blt.n	80069ea <quorem+0xda>
 8006922:	000b      	movs	r3, r1
 8006924:	3c01      	subs	r4, #1
 8006926:	3314      	adds	r3, #20
 8006928:	00a5      	lsls	r5, r4, #2
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	195b      	adds	r3, r3, r5
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	3314      	adds	r3, #20
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	195d      	adds	r5, r3, r5
 8006938:	9b05      	ldr	r3, [sp, #20]
 800693a:	682f      	ldr	r7, [r5, #0]
 800693c:	681e      	ldr	r6, [r3, #0]
 800693e:	0038      	movs	r0, r7
 8006940:	3601      	adds	r6, #1
 8006942:	0031      	movs	r1, r6
 8006944:	f7f9 fbfc 	bl	8000140 <__udivsi3>
 8006948:	9002      	str	r0, [sp, #8]
 800694a:	42b7      	cmp	r7, r6
 800694c:	d327      	bcc.n	800699e <quorem+0x8e>
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	2700      	movs	r7, #0
 8006952:	469c      	mov	ip, r3
 8006954:	9e01      	ldr	r6, [sp, #4]
 8006956:	9707      	str	r7, [sp, #28]
 8006958:	4662      	mov	r2, ip
 800695a:	ca08      	ldmia	r2!, {r3}
 800695c:	6830      	ldr	r0, [r6, #0]
 800695e:	4694      	mov	ip, r2
 8006960:	9a02      	ldr	r2, [sp, #8]
 8006962:	b299      	uxth	r1, r3
 8006964:	4351      	muls	r1, r2
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	4353      	muls	r3, r2
 800696a:	19c9      	adds	r1, r1, r7
 800696c:	0c0a      	lsrs	r2, r1, #16
 800696e:	189b      	adds	r3, r3, r2
 8006970:	b289      	uxth	r1, r1
 8006972:	b282      	uxth	r2, r0
 8006974:	1a52      	subs	r2, r2, r1
 8006976:	9907      	ldr	r1, [sp, #28]
 8006978:	0c1f      	lsrs	r7, r3, #16
 800697a:	1852      	adds	r2, r2, r1
 800697c:	0c00      	lsrs	r0, r0, #16
 800697e:	b29b      	uxth	r3, r3
 8006980:	1411      	asrs	r1, r2, #16
 8006982:	1ac3      	subs	r3, r0, r3
 8006984:	185b      	adds	r3, r3, r1
 8006986:	1419      	asrs	r1, r3, #16
 8006988:	b292      	uxth	r2, r2
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	431a      	orrs	r2, r3
 800698e:	9b05      	ldr	r3, [sp, #20]
 8006990:	9107      	str	r1, [sp, #28]
 8006992:	c604      	stmia	r6!, {r2}
 8006994:	4563      	cmp	r3, ip
 8006996:	d2df      	bcs.n	8006958 <quorem+0x48>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d02b      	beq.n	80069f6 <quorem+0xe6>
 800699e:	9906      	ldr	r1, [sp, #24]
 80069a0:	9803      	ldr	r0, [sp, #12]
 80069a2:	f001 f9b7 	bl	8007d14 <__mcmp>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	db1e      	blt.n	80069e8 <quorem+0xd8>
 80069aa:	2600      	movs	r6, #0
 80069ac:	9d01      	ldr	r5, [sp, #4]
 80069ae:	9904      	ldr	r1, [sp, #16]
 80069b0:	c901      	ldmia	r1!, {r0}
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	b287      	uxth	r7, r0
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	1bd2      	subs	r2, r2, r7
 80069ba:	1992      	adds	r2, r2, r6
 80069bc:	0c00      	lsrs	r0, r0, #16
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	1a1b      	subs	r3, r3, r0
 80069c2:	1410      	asrs	r0, r2, #16
 80069c4:	181b      	adds	r3, r3, r0
 80069c6:	141e      	asrs	r6, r3, #16
 80069c8:	b292      	uxth	r2, r2
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	431a      	orrs	r2, r3
 80069ce:	9b05      	ldr	r3, [sp, #20]
 80069d0:	c504      	stmia	r5!, {r2}
 80069d2:	428b      	cmp	r3, r1
 80069d4:	d2ec      	bcs.n	80069b0 <quorem+0xa0>
 80069d6:	9a01      	ldr	r2, [sp, #4]
 80069d8:	00a3      	lsls	r3, r4, #2
 80069da:	18d3      	adds	r3, r2, r3
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d014      	beq.n	8006a0c <quorem+0xfc>
 80069e2:	9b02      	ldr	r3, [sp, #8]
 80069e4:	3301      	adds	r3, #1
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	9802      	ldr	r0, [sp, #8]
 80069ea:	b009      	add	sp, #36	@ 0x24
 80069ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <quorem+0xee>
 80069f4:	3c01      	subs	r4, #1
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	3d04      	subs	r5, #4
 80069fa:	42ab      	cmp	r3, r5
 80069fc:	d3f7      	bcc.n	80069ee <quorem+0xde>
 80069fe:	9b03      	ldr	r3, [sp, #12]
 8006a00:	611c      	str	r4, [r3, #16]
 8006a02:	e7cc      	b.n	800699e <quorem+0x8e>
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d104      	bne.n	8006a14 <quorem+0x104>
 8006a0a:	3c01      	subs	r4, #1
 8006a0c:	9a01      	ldr	r2, [sp, #4]
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3f7      	bcc.n	8006a04 <quorem+0xf4>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	611c      	str	r4, [r3, #16]
 8006a18:	e7e3      	b.n	80069e2 <quorem+0xd2>
	...

08006a1c <_dtoa_r>:
 8006a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1e:	0014      	movs	r4, r2
 8006a20:	001d      	movs	r5, r3
 8006a22:	69c6      	ldr	r6, [r0, #28]
 8006a24:	b09d      	sub	sp, #116	@ 0x74
 8006a26:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a28:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006a2a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006a2c:	9003      	str	r0, [sp, #12]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d10f      	bne.n	8006a52 <_dtoa_r+0x36>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f000 fe2c 	bl	8007690 <malloc>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	1e02      	subs	r2, r0, #0
 8006a3c:	61d8      	str	r0, [r3, #28]
 8006a3e:	d104      	bne.n	8006a4a <_dtoa_r+0x2e>
 8006a40:	21ef      	movs	r1, #239	@ 0xef
 8006a42:	4bc7      	ldr	r3, [pc, #796]	@ (8006d60 <_dtoa_r+0x344>)
 8006a44:	48c7      	ldr	r0, [pc, #796]	@ (8006d64 <_dtoa_r+0x348>)
 8006a46:	f001 fcb9 	bl	80083bc <__assert_func>
 8006a4a:	6046      	str	r6, [r0, #4]
 8006a4c:	6086      	str	r6, [r0, #8]
 8006a4e:	6006      	str	r6, [r0, #0]
 8006a50:	60c6      	str	r6, [r0, #12]
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	6819      	ldr	r1, [r3, #0]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d00b      	beq.n	8006a74 <_dtoa_r+0x58>
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4093      	lsls	r3, r2
 8006a62:	604a      	str	r2, [r1, #4]
 8006a64:	608b      	str	r3, [r1, #8]
 8006a66:	9803      	ldr	r0, [sp, #12]
 8006a68:	f000 ff12 	bl	8007890 <_Bfree>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	da1e      	bge.n	8006ab6 <_dtoa_r+0x9a>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	006b      	lsls	r3, r5, #1
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a82:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006a84:	4bb8      	ldr	r3, [pc, #736]	@ (8006d68 <_dtoa_r+0x34c>)
 8006a86:	4ab8      	ldr	r2, [pc, #736]	@ (8006d68 <_dtoa_r+0x34c>)
 8006a88:	403b      	ands	r3, r7
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d116      	bne.n	8006abc <_dtoa_r+0xa0>
 8006a8e:	4bb7      	ldr	r3, [pc, #732]	@ (8006d6c <_dtoa_r+0x350>)
 8006a90:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	033b      	lsls	r3, r7, #12
 8006a96:	0b1b      	lsrs	r3, r3, #12
 8006a98:	4323      	orrs	r3, r4
 8006a9a:	d101      	bne.n	8006aa0 <_dtoa_r+0x84>
 8006a9c:	f000 fd80 	bl	80075a0 <_dtoa_r+0xb84>
 8006aa0:	4bb3      	ldr	r3, [pc, #716]	@ (8006d70 <_dtoa_r+0x354>)
 8006aa2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006aa4:	9308      	str	r3, [sp, #32]
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d002      	beq.n	8006ab0 <_dtoa_r+0x94>
 8006aaa:	4bb2      	ldr	r3, [pc, #712]	@ (8006d74 <_dtoa_r+0x358>)
 8006aac:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	9808      	ldr	r0, [sp, #32]
 8006ab2:	b01d      	add	sp, #116	@ 0x74
 8006ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	e7e2      	b.n	8006a82 <_dtoa_r+0x66>
 8006abc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ac0:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ac2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ac4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006ac6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7f9 fcbe 	bl	800044c <__aeabi_dcmpeq>
 8006ad0:	1e06      	subs	r6, r0, #0
 8006ad2:	d00b      	beq.n	8006aec <_dtoa_r+0xd0>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <_dtoa_r+0xca>
 8006ae0:	4ba5      	ldr	r3, [pc, #660]	@ (8006d78 <_dtoa_r+0x35c>)
 8006ae2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4ba5      	ldr	r3, [pc, #660]	@ (8006d7c <_dtoa_r+0x360>)
 8006ae8:	9308      	str	r3, [sp, #32]
 8006aea:	e7e1      	b.n	8006ab0 <_dtoa_r+0x94>
 8006aec:	ab1a      	add	r3, sp, #104	@ 0x68
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	9803      	ldr	r0, [sp, #12]
 8006af6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006af8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006afa:	f001 f9c1 	bl	8007e80 <__d2b>
 8006afe:	007a      	lsls	r2, r7, #1
 8006b00:	9005      	str	r0, [sp, #20]
 8006b02:	0d52      	lsrs	r2, r2, #21
 8006b04:	d100      	bne.n	8006b08 <_dtoa_r+0xec>
 8006b06:	e07b      	b.n	8006c00 <_dtoa_r+0x1e4>
 8006b08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b0a:	9618      	str	r6, [sp, #96]	@ 0x60
 8006b0c:	0319      	lsls	r1, r3, #12
 8006b0e:	4b9c      	ldr	r3, [pc, #624]	@ (8006d80 <_dtoa_r+0x364>)
 8006b10:	0b09      	lsrs	r1, r1, #12
 8006b12:	430b      	orrs	r3, r1
 8006b14:	499b      	ldr	r1, [pc, #620]	@ (8006d84 <_dtoa_r+0x368>)
 8006b16:	1857      	adds	r7, r2, r1
 8006b18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4b99      	ldr	r3, [pc, #612]	@ (8006d88 <_dtoa_r+0x36c>)
 8006b22:	f7fb fa3d 	bl	8001fa0 <__aeabi_dsub>
 8006b26:	4a99      	ldr	r2, [pc, #612]	@ (8006d8c <_dtoa_r+0x370>)
 8006b28:	4b99      	ldr	r3, [pc, #612]	@ (8006d90 <_dtoa_r+0x374>)
 8006b2a:	f7fa ff53 	bl	80019d4 <__aeabi_dmul>
 8006b2e:	4a99      	ldr	r2, [pc, #612]	@ (8006d94 <_dtoa_r+0x378>)
 8006b30:	4b99      	ldr	r3, [pc, #612]	@ (8006d98 <_dtoa_r+0x37c>)
 8006b32:	f7f9 ff4f 	bl	80009d4 <__aeabi_dadd>
 8006b36:	0004      	movs	r4, r0
 8006b38:	0038      	movs	r0, r7
 8006b3a:	000d      	movs	r5, r1
 8006b3c:	f7fb fe98 	bl	8002870 <__aeabi_i2d>
 8006b40:	4a96      	ldr	r2, [pc, #600]	@ (8006d9c <_dtoa_r+0x380>)
 8006b42:	4b97      	ldr	r3, [pc, #604]	@ (8006da0 <_dtoa_r+0x384>)
 8006b44:	f7fa ff46 	bl	80019d4 <__aeabi_dmul>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	000b      	movs	r3, r1
 8006b4c:	0020      	movs	r0, r4
 8006b4e:	0029      	movs	r1, r5
 8006b50:	f7f9 ff40 	bl	80009d4 <__aeabi_dadd>
 8006b54:	0004      	movs	r4, r0
 8006b56:	000d      	movs	r5, r1
 8006b58:	f7fb fe4e 	bl	80027f8 <__aeabi_d2iz>
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	9004      	str	r0, [sp, #16]
 8006b60:	2300      	movs	r3, #0
 8006b62:	0020      	movs	r0, r4
 8006b64:	0029      	movs	r1, r5
 8006b66:	f7f9 fc77 	bl	8000458 <__aeabi_dcmplt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d00b      	beq.n	8006b86 <_dtoa_r+0x16a>
 8006b6e:	9804      	ldr	r0, [sp, #16]
 8006b70:	f7fb fe7e 	bl	8002870 <__aeabi_i2d>
 8006b74:	002b      	movs	r3, r5
 8006b76:	0022      	movs	r2, r4
 8006b78:	f7f9 fc68 	bl	800044c <__aeabi_dcmpeq>
 8006b7c:	4243      	negs	r3, r0
 8006b7e:	4158      	adcs	r0, r3
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	1a1b      	subs	r3, r3, r0
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	2301      	movs	r3, #1
 8006b88:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	2b16      	cmp	r3, #22
 8006b8e:	d810      	bhi.n	8006bb2 <_dtoa_r+0x196>
 8006b90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b94:	9a04      	ldr	r2, [sp, #16]
 8006b96:	4b83      	ldr	r3, [pc, #524]	@ (8006da4 <_dtoa_r+0x388>)
 8006b98:	00d2      	lsls	r2, r2, #3
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f7f9 fc5a 	bl	8000458 <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d047      	beq.n	8006c38 <_dtoa_r+0x21c>
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006bb6:	9206      	str	r2, [sp, #24]
 8006bb8:	1bdb      	subs	r3, r3, r7
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	d53e      	bpl.n	8006c3c <_dtoa_r+0x220>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db38      	blt.n	8006c40 <_dtoa_r+0x224>
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bd2:	4694      	mov	ip, r2
 8006bd4:	4463      	add	r3, ip
 8006bd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9214      	str	r2, [sp, #80]	@ 0x50
 8006bdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bde:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006be0:	2401      	movs	r4, #1
 8006be2:	2b09      	cmp	r3, #9
 8006be4:	d862      	bhi.n	8006cac <_dtoa_r+0x290>
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	dd02      	ble.n	8006bf0 <_dtoa_r+0x1d4>
 8006bea:	2400      	movs	r4, #0
 8006bec:	3b04      	subs	r3, #4
 8006bee:	9322      	str	r3, [sp, #136]	@ 0x88
 8006bf0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bf2:	1e98      	subs	r0, r3, #2
 8006bf4:	2803      	cmp	r0, #3
 8006bf6:	d863      	bhi.n	8006cc0 <_dtoa_r+0x2a4>
 8006bf8:	f7f9 fa8e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006bfc:	2b385654 	.word	0x2b385654
 8006c00:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006c02:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006c04:	18f6      	adds	r6, r6, r3
 8006c06:	4b68      	ldr	r3, [pc, #416]	@ (8006da8 <_dtoa_r+0x38c>)
 8006c08:	18f2      	adds	r2, r6, r3
 8006c0a:	2a20      	cmp	r2, #32
 8006c0c:	dd0f      	ble.n	8006c2e <_dtoa_r+0x212>
 8006c0e:	2340      	movs	r3, #64	@ 0x40
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	409f      	lsls	r7, r3
 8006c14:	4b65      	ldr	r3, [pc, #404]	@ (8006dac <_dtoa_r+0x390>)
 8006c16:	0038      	movs	r0, r7
 8006c18:	18f3      	adds	r3, r6, r3
 8006c1a:	40dc      	lsrs	r4, r3
 8006c1c:	4320      	orrs	r0, r4
 8006c1e:	f7fb fe55 	bl	80028cc <__aeabi_ui2d>
 8006c22:	2201      	movs	r2, #1
 8006c24:	4b62      	ldr	r3, [pc, #392]	@ (8006db0 <_dtoa_r+0x394>)
 8006c26:	1e77      	subs	r7, r6, #1
 8006c28:	18cb      	adds	r3, r1, r3
 8006c2a:	9218      	str	r2, [sp, #96]	@ 0x60
 8006c2c:	e776      	b.n	8006b1c <_dtoa_r+0x100>
 8006c2e:	2320      	movs	r3, #32
 8006c30:	0020      	movs	r0, r4
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	4098      	lsls	r0, r3
 8006c36:	e7f2      	b.n	8006c1e <_dtoa_r+0x202>
 8006c38:	9015      	str	r0, [sp, #84]	@ 0x54
 8006c3a:	e7ba      	b.n	8006bb2 <_dtoa_r+0x196>
 8006c3c:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c3e:	e7c3      	b.n	8006bc8 <_dtoa_r+0x1ac>
 8006c40:	9b06      	ldr	r3, [sp, #24]
 8006c42:	9a04      	ldr	r2, [sp, #16]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	9306      	str	r3, [sp, #24]
 8006c48:	4253      	negs	r3, r2
 8006c4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c50:	e7c5      	b.n	8006bde <_dtoa_r+0x1c2>
 8006c52:	2301      	movs	r3, #1
 8006c54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c56:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c58:	4694      	mov	ip, r2
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	4463      	add	r3, ip
 8006c5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c60:	3301      	adds	r3, #1
 8006c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dc08      	bgt.n	8006c7a <_dtoa_r+0x25e>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e006      	b.n	8006c7a <_dtoa_r+0x25e>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c70:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd28      	ble.n	8006cc8 <_dtoa_r+0x2ac>
 8006c76:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7a:	9a03      	ldr	r2, [sp, #12]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	69d0      	ldr	r0, [r2, #28]
 8006c80:	2204      	movs	r2, #4
 8006c82:	0015      	movs	r5, r2
 8006c84:	3514      	adds	r5, #20
 8006c86:	429d      	cmp	r5, r3
 8006c88:	d923      	bls.n	8006cd2 <_dtoa_r+0x2b6>
 8006c8a:	6041      	str	r1, [r0, #4]
 8006c8c:	9803      	ldr	r0, [sp, #12]
 8006c8e:	f000 fdbb 	bl	8007808 <_Balloc>
 8006c92:	9008      	str	r0, [sp, #32]
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d11f      	bne.n	8006cd8 <_dtoa_r+0x2bc>
 8006c98:	21b0      	movs	r1, #176	@ 0xb0
 8006c9a:	4b46      	ldr	r3, [pc, #280]	@ (8006db4 <_dtoa_r+0x398>)
 8006c9c:	4831      	ldr	r0, [pc, #196]	@ (8006d64 <_dtoa_r+0x348>)
 8006c9e:	9a08      	ldr	r2, [sp, #32]
 8006ca0:	31ff      	adds	r1, #255	@ 0xff
 8006ca2:	e6d0      	b.n	8006a46 <_dtoa_r+0x2a>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e7e2      	b.n	8006c6e <_dtoa_r+0x252>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e7d3      	b.n	8006c54 <_dtoa_r+0x238>
 8006cac:	2300      	movs	r3, #0
 8006cae:	9410      	str	r4, [sp, #64]	@ 0x40
 8006cb0:	9322      	str	r3, [sp, #136]	@ 0x88
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cba:	3313      	adds	r3, #19
 8006cbc:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006cbe:	e7dc      	b.n	8006c7a <_dtoa_r+0x25e>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cc4:	3b02      	subs	r3, #2
 8006cc6:	e7f5      	b.n	8006cb4 <_dtoa_r+0x298>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	001a      	movs	r2, r3
 8006ccc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd0:	e7f4      	b.n	8006cbc <_dtoa_r+0x2a0>
 8006cd2:	3101      	adds	r1, #1
 8006cd4:	0052      	lsls	r2, r2, #1
 8006cd6:	e7d4      	b.n	8006c82 <_dtoa_r+0x266>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	9a08      	ldr	r2, [sp, #32]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce2:	2b0e      	cmp	r3, #14
 8006ce4:	d900      	bls.n	8006ce8 <_dtoa_r+0x2cc>
 8006ce6:	e0d6      	b.n	8006e96 <_dtoa_r+0x47a>
 8006ce8:	2c00      	cmp	r4, #0
 8006cea:	d100      	bne.n	8006cee <_dtoa_r+0x2d2>
 8006cec:	e0d3      	b.n	8006e96 <_dtoa_r+0x47a>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dd63      	ble.n	8006dbc <_dtoa_r+0x3a0>
 8006cf4:	210f      	movs	r1, #15
 8006cf6:	9a04      	ldr	r2, [sp, #16]
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8006da4 <_dtoa_r+0x388>)
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	00d2      	lsls	r2, r2, #3
 8006cfe:	189b      	adds	r3, r3, r2
 8006d00:	681e      	ldr	r6, [r3, #0]
 8006d02:	685f      	ldr	r7, [r3, #4]
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	2402      	movs	r4, #2
 8006d08:	111d      	asrs	r5, r3, #4
 8006d0a:	05db      	lsls	r3, r3, #23
 8006d0c:	d50a      	bpl.n	8006d24 <_dtoa_r+0x308>
 8006d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006db8 <_dtoa_r+0x39c>)
 8006d10:	400d      	ands	r5, r1
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d18:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d1a:	f7fa fa21 	bl	8001160 <__aeabi_ddiv>
 8006d1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d20:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d22:	3401      	adds	r4, #1
 8006d24:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <_dtoa_r+0x39c>)
 8006d26:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	d108      	bne.n	8006d3e <_dtoa_r+0x322>
 8006d2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d30:	0032      	movs	r2, r6
 8006d32:	003b      	movs	r3, r7
 8006d34:	f7fa fa14 	bl	8001160 <__aeabi_ddiv>
 8006d38:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d3a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d3c:	e059      	b.n	8006df2 <_dtoa_r+0x3d6>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	421d      	tst	r5, r3
 8006d42:	d009      	beq.n	8006d58 <_dtoa_r+0x33c>
 8006d44:	18e4      	adds	r4, r4, r3
 8006d46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d48:	0030      	movs	r0, r6
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	0039      	movs	r1, r7
 8006d50:	f7fa fe40 	bl	80019d4 <__aeabi_dmul>
 8006d54:	0006      	movs	r6, r0
 8006d56:	000f      	movs	r7, r1
 8006d58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d5a:	106d      	asrs	r5, r5, #1
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	e7e2      	b.n	8006d26 <_dtoa_r+0x30a>
 8006d60:	08008bd1 	.word	0x08008bd1
 8006d64:	08008be8 	.word	0x08008be8
 8006d68:	7ff00000 	.word	0x7ff00000
 8006d6c:	0000270f 	.word	0x0000270f
 8006d70:	08008bcd 	.word	0x08008bcd
 8006d74:	08008bd0 	.word	0x08008bd0
 8006d78:	08008ba1 	.word	0x08008ba1
 8006d7c:	08008ba0 	.word	0x08008ba0
 8006d80:	3ff00000 	.word	0x3ff00000
 8006d84:	fffffc01 	.word	0xfffffc01
 8006d88:	3ff80000 	.word	0x3ff80000
 8006d8c:	636f4361 	.word	0x636f4361
 8006d90:	3fd287a7 	.word	0x3fd287a7
 8006d94:	8b60c8b3 	.word	0x8b60c8b3
 8006d98:	3fc68a28 	.word	0x3fc68a28
 8006d9c:	509f79fb 	.word	0x509f79fb
 8006da0:	3fd34413 	.word	0x3fd34413
 8006da4:	08008d38 	.word	0x08008d38
 8006da8:	00000432 	.word	0x00000432
 8006dac:	00000412 	.word	0x00000412
 8006db0:	fe100000 	.word	0xfe100000
 8006db4:	08008c40 	.word	0x08008c40
 8006db8:	08008d10 	.word	0x08008d10
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	2402      	movs	r4, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d016      	beq.n	8006df2 <_dtoa_r+0x3d6>
 8006dc4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006dc6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dc8:	220f      	movs	r2, #15
 8006dca:	425d      	negs	r5, r3
 8006dcc:	402a      	ands	r2, r5
 8006dce:	4bd5      	ldr	r3, [pc, #852]	@ (8007124 <_dtoa_r+0x708>)
 8006dd0:	00d2      	lsls	r2, r2, #3
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f7fa fdfc 	bl	80019d4 <__aeabi_dmul>
 8006ddc:	2701      	movs	r7, #1
 8006dde:	2300      	movs	r3, #0
 8006de0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006de2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006de4:	4ed0      	ldr	r6, [pc, #832]	@ (8007128 <_dtoa_r+0x70c>)
 8006de6:	112d      	asrs	r5, r5, #4
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	d000      	beq.n	8006dee <_dtoa_r+0x3d2>
 8006dec:	e095      	b.n	8006f1a <_dtoa_r+0x4fe>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1a2      	bne.n	8006d38 <_dtoa_r+0x31c>
 8006df2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006df4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006df6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d100      	bne.n	8006dfe <_dtoa_r+0x3e2>
 8006dfc:	e098      	b.n	8006f30 <_dtoa_r+0x514>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	0030      	movs	r0, r6
 8006e02:	0039      	movs	r1, r7
 8006e04:	4bc9      	ldr	r3, [pc, #804]	@ (800712c <_dtoa_r+0x710>)
 8006e06:	f7f9 fb27 	bl	8000458 <__aeabi_dcmplt>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d100      	bne.n	8006e10 <_dtoa_r+0x3f4>
 8006e0e:	e08f      	b.n	8006f30 <_dtoa_r+0x514>
 8006e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d100      	bne.n	8006e18 <_dtoa_r+0x3fc>
 8006e16:	e08b      	b.n	8006f30 <_dtoa_r+0x514>
 8006e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd37      	ble.n	8006e8e <_dtoa_r+0x472>
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2200      	movs	r2, #0
 8006e22:	3b01      	subs	r3, #1
 8006e24:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e26:	0030      	movs	r0, r6
 8006e28:	4bc1      	ldr	r3, [pc, #772]	@ (8007130 <_dtoa_r+0x714>)
 8006e2a:	0039      	movs	r1, r7
 8006e2c:	f7fa fdd2 	bl	80019d4 <__aeabi_dmul>
 8006e30:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e32:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e36:	3401      	adds	r4, #1
 8006e38:	0020      	movs	r0, r4
 8006e3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e3c:	f7fb fd18 	bl	8002870 <__aeabi_i2d>
 8006e40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e44:	f7fa fdc6 	bl	80019d4 <__aeabi_dmul>
 8006e48:	4bba      	ldr	r3, [pc, #744]	@ (8007134 <_dtoa_r+0x718>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fdc2 	bl	80009d4 <__aeabi_dadd>
 8006e50:	4bb9      	ldr	r3, [pc, #740]	@ (8007138 <_dtoa_r+0x71c>)
 8006e52:	0006      	movs	r6, r0
 8006e54:	18cf      	adds	r7, r1, r3
 8006e56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16d      	bne.n	8006f38 <_dtoa_r+0x51c>
 8006e5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e60:	2200      	movs	r2, #0
 8006e62:	4bb6      	ldr	r3, [pc, #728]	@ (800713c <_dtoa_r+0x720>)
 8006e64:	f7fb f89c 	bl	8001fa0 <__aeabi_dsub>
 8006e68:	0032      	movs	r2, r6
 8006e6a:	003b      	movs	r3, r7
 8006e6c:	0004      	movs	r4, r0
 8006e6e:	000d      	movs	r5, r1
 8006e70:	f7f9 fb06 	bl	8000480 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d000      	beq.n	8006e7a <_dtoa_r+0x45e>
 8006e78:	e2b6      	b.n	80073e8 <_dtoa_r+0x9cc>
 8006e7a:	2180      	movs	r1, #128	@ 0x80
 8006e7c:	0609      	lsls	r1, r1, #24
 8006e7e:	187b      	adds	r3, r7, r1
 8006e80:	0032      	movs	r2, r6
 8006e82:	0020      	movs	r0, r4
 8006e84:	0029      	movs	r1, r5
 8006e86:	f7f9 fae7 	bl	8000458 <__aeabi_dcmplt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d128      	bne.n	8006ee0 <_dtoa_r+0x4c4>
 8006e8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e90:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e96:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da00      	bge.n	8006e9e <_dtoa_r+0x482>
 8006e9c:	e174      	b.n	8007188 <_dtoa_r+0x76c>
 8006e9e:	9a04      	ldr	r2, [sp, #16]
 8006ea0:	2a0e      	cmp	r2, #14
 8006ea2:	dd00      	ble.n	8006ea6 <_dtoa_r+0x48a>
 8006ea4:	e170      	b.n	8007188 <_dtoa_r+0x76c>
 8006ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8007124 <_dtoa_r+0x708>)
 8006ea8:	00d2      	lsls	r2, r2, #3
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	685c      	ldr	r4, [r3, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	9306      	str	r3, [sp, #24]
 8006eb2:	9407      	str	r4, [sp, #28]
 8006eb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db00      	blt.n	8006ebc <_dtoa_r+0x4a0>
 8006eba:	e0e7      	b.n	800708c <_dtoa_r+0x670>
 8006ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd00      	ble.n	8006ec4 <_dtoa_r+0x4a8>
 8006ec2:	e0e3      	b.n	800708c <_dtoa_r+0x670>
 8006ec4:	d10c      	bne.n	8006ee0 <_dtoa_r+0x4c4>
 8006ec6:	9806      	ldr	r0, [sp, #24]
 8006ec8:	9907      	ldr	r1, [sp, #28]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800713c <_dtoa_r+0x720>)
 8006ece:	f7fa fd81 	bl	80019d4 <__aeabi_dmul>
 8006ed2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed6:	f7f9 fadd 	bl	8000494 <__aeabi_dcmpge>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d100      	bne.n	8006ee0 <_dtoa_r+0x4c4>
 8006ede:	e286      	b.n	80073ee <_dtoa_r+0x9d2>
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	0037      	movs	r7, r6
 8006ee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ee6:	9c08      	ldr	r4, [sp, #32]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	930c      	str	r3, [sp, #48]	@ 0x30
 8006eec:	9704      	str	r7, [sp, #16]
 8006eee:	2700      	movs	r7, #0
 8006ef0:	0031      	movs	r1, r6
 8006ef2:	9803      	ldr	r0, [sp, #12]
 8006ef4:	f000 fccc 	bl	8007890 <_Bfree>
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d100      	bne.n	8006f00 <_dtoa_r+0x4e4>
 8006efe:	e0bb      	b.n	8007078 <_dtoa_r+0x65c>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	d005      	beq.n	8006f10 <_dtoa_r+0x4f4>
 8006f04:	429f      	cmp	r7, r3
 8006f06:	d003      	beq.n	8006f10 <_dtoa_r+0x4f4>
 8006f08:	0039      	movs	r1, r7
 8006f0a:	9803      	ldr	r0, [sp, #12]
 8006f0c:	f000 fcc0 	bl	8007890 <_Bfree>
 8006f10:	9904      	ldr	r1, [sp, #16]
 8006f12:	9803      	ldr	r0, [sp, #12]
 8006f14:	f000 fcbc 	bl	8007890 <_Bfree>
 8006f18:	e0ae      	b.n	8007078 <_dtoa_r+0x65c>
 8006f1a:	423d      	tst	r5, r7
 8006f1c:	d005      	beq.n	8006f2a <_dtoa_r+0x50e>
 8006f1e:	6832      	ldr	r2, [r6, #0]
 8006f20:	6873      	ldr	r3, [r6, #4]
 8006f22:	f7fa fd57 	bl	80019d4 <__aeabi_dmul>
 8006f26:	003b      	movs	r3, r7
 8006f28:	3401      	adds	r4, #1
 8006f2a:	106d      	asrs	r5, r5, #1
 8006f2c:	3608      	adds	r6, #8
 8006f2e:	e75b      	b.n	8006de8 <_dtoa_r+0x3cc>
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f36:	e77f      	b.n	8006e38 <_dtoa_r+0x41c>
 8006f38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007124 <_dtoa_r+0x708>)
 8006f3c:	3a01      	subs	r2, #1
 8006f3e:	00d2      	lsls	r2, r2, #3
 8006f40:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2900      	cmp	r1, #0
 8006f4a:	d04c      	beq.n	8006fe6 <_dtoa_r+0x5ca>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	497c      	ldr	r1, [pc, #496]	@ (8007140 <_dtoa_r+0x724>)
 8006f50:	f7fa f906 	bl	8001160 <__aeabi_ddiv>
 8006f54:	0032      	movs	r2, r6
 8006f56:	003b      	movs	r3, r7
 8006f58:	f7fb f822 	bl	8001fa0 <__aeabi_dsub>
 8006f5c:	9a08      	ldr	r2, [sp, #32]
 8006f5e:	0006      	movs	r6, r0
 8006f60:	4694      	mov	ip, r2
 8006f62:	000f      	movs	r7, r1
 8006f64:	9b08      	ldr	r3, [sp, #32]
 8006f66:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f6a:	4463      	add	r3, ip
 8006f6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f72:	f7fb fc41 	bl	80027f8 <__aeabi_d2iz>
 8006f76:	0005      	movs	r5, r0
 8006f78:	f7fb fc7a 	bl	8002870 <__aeabi_i2d>
 8006f7c:	0002      	movs	r2, r0
 8006f7e:	000b      	movs	r3, r1
 8006f80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f84:	f7fb f80c 	bl	8001fa0 <__aeabi_dsub>
 8006f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f8a:	3530      	adds	r5, #48	@ 0x30
 8006f8c:	1c5c      	adds	r4, r3, #1
 8006f8e:	701d      	strb	r5, [r3, #0]
 8006f90:	0032      	movs	r2, r6
 8006f92:	003b      	movs	r3, r7
 8006f94:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f98:	f7f9 fa5e 	bl	8000458 <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d16b      	bne.n	8007078 <_dtoa_r+0x65c>
 8006fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4961      	ldr	r1, [pc, #388]	@ (800712c <_dtoa_r+0x710>)
 8006fa8:	f7fa fffa 	bl	8001fa0 <__aeabi_dsub>
 8006fac:	0032      	movs	r2, r6
 8006fae:	003b      	movs	r3, r7
 8006fb0:	f7f9 fa52 	bl	8000458 <__aeabi_dcmplt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d000      	beq.n	8006fba <_dtoa_r+0x59e>
 8006fb8:	e0c6      	b.n	8007148 <_dtoa_r+0x72c>
 8006fba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d100      	bne.n	8006fc2 <_dtoa_r+0x5a6>
 8006fc0:	e765      	b.n	8006e8e <_dtoa_r+0x472>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	0030      	movs	r0, r6
 8006fc6:	0039      	movs	r1, r7
 8006fc8:	4b59      	ldr	r3, [pc, #356]	@ (8007130 <_dtoa_r+0x714>)
 8006fca:	f7fa fd03 	bl	80019d4 <__aeabi_dmul>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	0006      	movs	r6, r0
 8006fd2:	000f      	movs	r7, r1
 8006fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fd6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fd8:	4b55      	ldr	r3, [pc, #340]	@ (8007130 <_dtoa_r+0x714>)
 8006fda:	f7fa fcfb 	bl	80019d4 <__aeabi_dmul>
 8006fde:	9416      	str	r4, [sp, #88]	@ 0x58
 8006fe0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fe2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fe4:	e7c3      	b.n	8006f6e <_dtoa_r+0x552>
 8006fe6:	0030      	movs	r0, r6
 8006fe8:	0039      	movs	r1, r7
 8006fea:	f7fa fcf3 	bl	80019d4 <__aeabi_dmul>
 8006fee:	9d08      	ldr	r5, [sp, #32]
 8006ff0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ff2:	002b      	movs	r3, r5
 8006ff4:	4694      	mov	ip, r2
 8006ff6:	9016      	str	r0, [sp, #88]	@ 0x58
 8006ff8:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006ffa:	4463      	add	r3, ip
 8006ffc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ffe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007002:	f7fb fbf9 	bl	80027f8 <__aeabi_d2iz>
 8007006:	0004      	movs	r4, r0
 8007008:	f7fb fc32 	bl	8002870 <__aeabi_i2d>
 800700c:	000b      	movs	r3, r1
 800700e:	0002      	movs	r2, r0
 8007010:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007012:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007014:	f7fa ffc4 	bl	8001fa0 <__aeabi_dsub>
 8007018:	3430      	adds	r4, #48	@ 0x30
 800701a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800701c:	702c      	strb	r4, [r5, #0]
 800701e:	3501      	adds	r5, #1
 8007020:	0006      	movs	r6, r0
 8007022:	000f      	movs	r7, r1
 8007024:	42ab      	cmp	r3, r5
 8007026:	d12a      	bne.n	800707e <_dtoa_r+0x662>
 8007028:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800702a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007030:	469c      	mov	ip, r3
 8007032:	2200      	movs	r2, #0
 8007034:	4b42      	ldr	r3, [pc, #264]	@ (8007140 <_dtoa_r+0x724>)
 8007036:	4464      	add	r4, ip
 8007038:	f7f9 fccc 	bl	80009d4 <__aeabi_dadd>
 800703c:	0002      	movs	r2, r0
 800703e:	000b      	movs	r3, r1
 8007040:	0030      	movs	r0, r6
 8007042:	0039      	movs	r1, r7
 8007044:	f7f9 fa1c 	bl	8000480 <__aeabi_dcmpgt>
 8007048:	2800      	cmp	r0, #0
 800704a:	d000      	beq.n	800704e <_dtoa_r+0x632>
 800704c:	e07c      	b.n	8007148 <_dtoa_r+0x72c>
 800704e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007050:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007052:	2000      	movs	r0, #0
 8007054:	493a      	ldr	r1, [pc, #232]	@ (8007140 <_dtoa_r+0x724>)
 8007056:	f7fa ffa3 	bl	8001fa0 <__aeabi_dsub>
 800705a:	0002      	movs	r2, r0
 800705c:	000b      	movs	r3, r1
 800705e:	0030      	movs	r0, r6
 8007060:	0039      	movs	r1, r7
 8007062:	f7f9 f9f9 	bl	8000458 <__aeabi_dcmplt>
 8007066:	2800      	cmp	r0, #0
 8007068:	d100      	bne.n	800706c <_dtoa_r+0x650>
 800706a:	e710      	b.n	8006e8e <_dtoa_r+0x472>
 800706c:	0023      	movs	r3, r4
 800706e:	3c01      	subs	r4, #1
 8007070:	7822      	ldrb	r2, [r4, #0]
 8007072:	2a30      	cmp	r2, #48	@ 0x30
 8007074:	d0fa      	beq.n	800706c <_dtoa_r+0x650>
 8007076:	001c      	movs	r4, r3
 8007078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	e042      	b.n	8007104 <_dtoa_r+0x6e8>
 800707e:	2200      	movs	r2, #0
 8007080:	4b2b      	ldr	r3, [pc, #172]	@ (8007130 <_dtoa_r+0x714>)
 8007082:	f7fa fca7 	bl	80019d4 <__aeabi_dmul>
 8007086:	900a      	str	r0, [sp, #40]	@ 0x28
 8007088:	910b      	str	r1, [sp, #44]	@ 0x2c
 800708a:	e7b8      	b.n	8006ffe <_dtoa_r+0x5e2>
 800708c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708e:	9d08      	ldr	r5, [sp, #32]
 8007090:	3b01      	subs	r3, #1
 8007092:	195b      	adds	r3, r3, r5
 8007094:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007096:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007098:	930a      	str	r3, [sp, #40]	@ 0x28
 800709a:	9a06      	ldr	r2, [sp, #24]
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	0030      	movs	r0, r6
 80070a0:	0039      	movs	r1, r7
 80070a2:	f7fa f85d 	bl	8001160 <__aeabi_ddiv>
 80070a6:	f7fb fba7 	bl	80027f8 <__aeabi_d2iz>
 80070aa:	9009      	str	r0, [sp, #36]	@ 0x24
 80070ac:	f7fb fbe0 	bl	8002870 <__aeabi_i2d>
 80070b0:	9a06      	ldr	r2, [sp, #24]
 80070b2:	9b07      	ldr	r3, [sp, #28]
 80070b4:	f7fa fc8e 	bl	80019d4 <__aeabi_dmul>
 80070b8:	0002      	movs	r2, r0
 80070ba:	000b      	movs	r3, r1
 80070bc:	0030      	movs	r0, r6
 80070be:	0039      	movs	r1, r7
 80070c0:	f7fa ff6e 	bl	8001fa0 <__aeabi_dsub>
 80070c4:	002b      	movs	r3, r5
 80070c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c8:	3501      	adds	r5, #1
 80070ca:	3230      	adds	r2, #48	@ 0x30
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d0:	002c      	movs	r4, r5
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d14b      	bne.n	800716e <_dtoa_r+0x752>
 80070d6:	0002      	movs	r2, r0
 80070d8:	000b      	movs	r3, r1
 80070da:	f7f9 fc7b 	bl	80009d4 <__aeabi_dadd>
 80070de:	9a06      	ldr	r2, [sp, #24]
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	0006      	movs	r6, r0
 80070e4:	000f      	movs	r7, r1
 80070e6:	f7f9 f9cb 	bl	8000480 <__aeabi_dcmpgt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d12a      	bne.n	8007144 <_dtoa_r+0x728>
 80070ee:	9a06      	ldr	r2, [sp, #24]
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	0030      	movs	r0, r6
 80070f4:	0039      	movs	r1, r7
 80070f6:	f7f9 f9a9 	bl	800044c <__aeabi_dcmpeq>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d002      	beq.n	8007104 <_dtoa_r+0x6e8>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	07dd      	lsls	r5, r3, #31
 8007102:	d41f      	bmi.n	8007144 <_dtoa_r+0x728>
 8007104:	9905      	ldr	r1, [sp, #20]
 8007106:	9803      	ldr	r0, [sp, #12]
 8007108:	f000 fbc2 	bl	8007890 <_Bfree>
 800710c:	2300      	movs	r3, #0
 800710e:	7023      	strb	r3, [r4, #0]
 8007110:	9b04      	ldr	r3, [sp, #16]
 8007112:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007114:	3301      	adds	r3, #1
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800711a:	2b00      	cmp	r3, #0
 800711c:	d100      	bne.n	8007120 <_dtoa_r+0x704>
 800711e:	e4c7      	b.n	8006ab0 <_dtoa_r+0x94>
 8007120:	601c      	str	r4, [r3, #0]
 8007122:	e4c5      	b.n	8006ab0 <_dtoa_r+0x94>
 8007124:	08008d38 	.word	0x08008d38
 8007128:	08008d10 	.word	0x08008d10
 800712c:	3ff00000 	.word	0x3ff00000
 8007130:	40240000 	.word	0x40240000
 8007134:	401c0000 	.word	0x401c0000
 8007138:	fcc00000 	.word	0xfcc00000
 800713c:	40140000 	.word	0x40140000
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	930c      	str	r3, [sp, #48]	@ 0x30
 8007148:	0023      	movs	r3, r4
 800714a:	001c      	movs	r4, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	2a39      	cmp	r2, #57	@ 0x39
 8007152:	d108      	bne.n	8007166 <_dtoa_r+0x74a>
 8007154:	9a08      	ldr	r2, [sp, #32]
 8007156:	429a      	cmp	r2, r3
 8007158:	d1f7      	bne.n	800714a <_dtoa_r+0x72e>
 800715a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800715c:	9908      	ldr	r1, [sp, #32]
 800715e:	3201      	adds	r2, #1
 8007160:	920c      	str	r2, [sp, #48]	@ 0x30
 8007162:	2230      	movs	r2, #48	@ 0x30
 8007164:	700a      	strb	r2, [r1, #0]
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	3201      	adds	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e784      	b.n	8007078 <_dtoa_r+0x65c>
 800716e:	2200      	movs	r2, #0
 8007170:	4bc6      	ldr	r3, [pc, #792]	@ (800748c <_dtoa_r+0xa70>)
 8007172:	f7fa fc2f 	bl	80019d4 <__aeabi_dmul>
 8007176:	2200      	movs	r2, #0
 8007178:	2300      	movs	r3, #0
 800717a:	0006      	movs	r6, r0
 800717c:	000f      	movs	r7, r1
 800717e:	f7f9 f965 	bl	800044c <__aeabi_dcmpeq>
 8007182:	2800      	cmp	r0, #0
 8007184:	d089      	beq.n	800709a <_dtoa_r+0x67e>
 8007186:	e7bd      	b.n	8007104 <_dtoa_r+0x6e8>
 8007188:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800718a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800718c:	9c06      	ldr	r4, [sp, #24]
 800718e:	2f00      	cmp	r7, #0
 8007190:	d014      	beq.n	80071bc <_dtoa_r+0x7a0>
 8007192:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007194:	2a01      	cmp	r2, #1
 8007196:	dd00      	ble.n	800719a <_dtoa_r+0x77e>
 8007198:	e0e4      	b.n	8007364 <_dtoa_r+0x948>
 800719a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800719c:	2a00      	cmp	r2, #0
 800719e:	d100      	bne.n	80071a2 <_dtoa_r+0x786>
 80071a0:	e0da      	b.n	8007358 <_dtoa_r+0x93c>
 80071a2:	4abb      	ldr	r2, [pc, #748]	@ (8007490 <_dtoa_r+0xa74>)
 80071a4:	189b      	adds	r3, r3, r2
 80071a6:	9a06      	ldr	r2, [sp, #24]
 80071a8:	2101      	movs	r1, #1
 80071aa:	18d2      	adds	r2, r2, r3
 80071ac:	9206      	str	r2, [sp, #24]
 80071ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071b0:	9803      	ldr	r0, [sp, #12]
 80071b2:	18d3      	adds	r3, r2, r3
 80071b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80071b6:	f000 fc23 	bl	8007a00 <__i2b>
 80071ba:	0007      	movs	r7, r0
 80071bc:	2c00      	cmp	r4, #0
 80071be:	d00e      	beq.n	80071de <_dtoa_r+0x7c2>
 80071c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd0b      	ble.n	80071de <_dtoa_r+0x7c2>
 80071c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071c8:	0023      	movs	r3, r4
 80071ca:	4294      	cmp	r4, r2
 80071cc:	dd00      	ble.n	80071d0 <_dtoa_r+0x7b4>
 80071ce:	0013      	movs	r3, r2
 80071d0:	9a06      	ldr	r2, [sp, #24]
 80071d2:	1ae4      	subs	r4, r4, r3
 80071d4:	1ad2      	subs	r2, r2, r3
 80071d6:	9206      	str	r2, [sp, #24]
 80071d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80071de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d021      	beq.n	8007228 <_dtoa_r+0x80c>
 80071e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d100      	bne.n	80071ec <_dtoa_r+0x7d0>
 80071ea:	e0d3      	b.n	8007394 <_dtoa_r+0x978>
 80071ec:	9e05      	ldr	r6, [sp, #20]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	d014      	beq.n	800721c <_dtoa_r+0x800>
 80071f2:	0039      	movs	r1, r7
 80071f4:	002a      	movs	r2, r5
 80071f6:	9803      	ldr	r0, [sp, #12]
 80071f8:	f000 fcc4 	bl	8007b84 <__pow5mult>
 80071fc:	9a05      	ldr	r2, [sp, #20]
 80071fe:	0001      	movs	r1, r0
 8007200:	0007      	movs	r7, r0
 8007202:	9803      	ldr	r0, [sp, #12]
 8007204:	f000 fc14 	bl	8007a30 <__multiply>
 8007208:	0006      	movs	r6, r0
 800720a:	9905      	ldr	r1, [sp, #20]
 800720c:	9803      	ldr	r0, [sp, #12]
 800720e:	f000 fb3f 	bl	8007890 <_Bfree>
 8007212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007214:	9605      	str	r6, [sp, #20]
 8007216:	1b5b      	subs	r3, r3, r5
 8007218:	930f      	str	r3, [sp, #60]	@ 0x3c
 800721a:	d005      	beq.n	8007228 <_dtoa_r+0x80c>
 800721c:	0031      	movs	r1, r6
 800721e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007220:	9803      	ldr	r0, [sp, #12]
 8007222:	f000 fcaf 	bl	8007b84 <__pow5mult>
 8007226:	9005      	str	r0, [sp, #20]
 8007228:	2101      	movs	r1, #1
 800722a:	9803      	ldr	r0, [sp, #12]
 800722c:	f000 fbe8 	bl	8007a00 <__i2b>
 8007230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007232:	0006      	movs	r6, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d100      	bne.n	800723a <_dtoa_r+0x81e>
 8007238:	e1bc      	b.n	80075b4 <_dtoa_r+0xb98>
 800723a:	001a      	movs	r2, r3
 800723c:	0001      	movs	r1, r0
 800723e:	9803      	ldr	r0, [sp, #12]
 8007240:	f000 fca0 	bl	8007b84 <__pow5mult>
 8007244:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007246:	0006      	movs	r6, r0
 8007248:	2500      	movs	r5, #0
 800724a:	2b01      	cmp	r3, #1
 800724c:	dc16      	bgt.n	800727c <_dtoa_r+0x860>
 800724e:	2500      	movs	r5, #0
 8007250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007252:	42ab      	cmp	r3, r5
 8007254:	d10e      	bne.n	8007274 <_dtoa_r+0x858>
 8007256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007258:	031b      	lsls	r3, r3, #12
 800725a:	42ab      	cmp	r3, r5
 800725c:	d10a      	bne.n	8007274 <_dtoa_r+0x858>
 800725e:	4b8d      	ldr	r3, [pc, #564]	@ (8007494 <_dtoa_r+0xa78>)
 8007260:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007262:	4213      	tst	r3, r2
 8007264:	d006      	beq.n	8007274 <_dtoa_r+0x858>
 8007266:	9b06      	ldr	r3, [sp, #24]
 8007268:	3501      	adds	r5, #1
 800726a:	3301      	adds	r3, #1
 800726c:	9306      	str	r3, [sp, #24]
 800726e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007270:	3301      	adds	r3, #1
 8007272:	930d      	str	r3, [sp, #52]	@ 0x34
 8007274:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007276:	2001      	movs	r0, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <_dtoa_r+0x872>
 800727c:	6933      	ldr	r3, [r6, #16]
 800727e:	3303      	adds	r3, #3
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	18f3      	adds	r3, r6, r3
 8007284:	6858      	ldr	r0, [r3, #4]
 8007286:	f000 fb6b 	bl	8007960 <__hi0bits>
 800728a:	2320      	movs	r3, #32
 800728c:	1a18      	subs	r0, r3, r0
 800728e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007290:	1818      	adds	r0, r3, r0
 8007292:	0002      	movs	r2, r0
 8007294:	231f      	movs	r3, #31
 8007296:	401a      	ands	r2, r3
 8007298:	4218      	tst	r0, r3
 800729a:	d100      	bne.n	800729e <_dtoa_r+0x882>
 800729c:	e081      	b.n	80073a2 <_dtoa_r+0x986>
 800729e:	3301      	adds	r3, #1
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	dd79      	ble.n	800739a <_dtoa_r+0x97e>
 80072a6:	231c      	movs	r3, #28
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	9a06      	ldr	r2, [sp, #24]
 80072ac:	18e4      	adds	r4, r4, r3
 80072ae:	18d2      	adds	r2, r2, r3
 80072b0:	9206      	str	r2, [sp, #24]
 80072b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072b4:	18d3      	adds	r3, r2, r3
 80072b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x8ae>
 80072be:	001a      	movs	r2, r3
 80072c0:	9905      	ldr	r1, [sp, #20]
 80072c2:	9803      	ldr	r0, [sp, #12]
 80072c4:	f000 fcba 	bl	8007c3c <__lshift>
 80072c8:	9005      	str	r0, [sp, #20]
 80072ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd05      	ble.n	80072dc <_dtoa_r+0x8c0>
 80072d0:	0031      	movs	r1, r6
 80072d2:	001a      	movs	r2, r3
 80072d4:	9803      	ldr	r0, [sp, #12]
 80072d6:	f000 fcb1 	bl	8007c3c <__lshift>
 80072da:	0006      	movs	r6, r0
 80072dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d061      	beq.n	80073a6 <_dtoa_r+0x98a>
 80072e2:	0031      	movs	r1, r6
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	f000 fd15 	bl	8007d14 <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	da5b      	bge.n	80073a6 <_dtoa_r+0x98a>
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	220a      	movs	r2, #10
 80072f2:	3b01      	subs	r3, #1
 80072f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80072f6:	9905      	ldr	r1, [sp, #20]
 80072f8:	2300      	movs	r3, #0
 80072fa:	9803      	ldr	r0, [sp, #12]
 80072fc:	f000 faec 	bl	80078d8 <__multadd>
 8007300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007302:	9005      	str	r0, [sp, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d100      	bne.n	800730a <_dtoa_r+0x8ee>
 8007308:	e15b      	b.n	80075c2 <_dtoa_r+0xba6>
 800730a:	2300      	movs	r3, #0
 800730c:	0039      	movs	r1, r7
 800730e:	220a      	movs	r2, #10
 8007310:	9803      	ldr	r0, [sp, #12]
 8007312:	f000 fae1 	bl	80078d8 <__multadd>
 8007316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007318:	0007      	movs	r7, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc4d      	bgt.n	80073ba <_dtoa_r+0x99e>
 800731e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007320:	2b02      	cmp	r3, #2
 8007322:	dd46      	ble.n	80073b2 <_dtoa_r+0x996>
 8007324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007326:	2b00      	cmp	r3, #0
 8007328:	d000      	beq.n	800732c <_dtoa_r+0x910>
 800732a:	e5db      	b.n	8006ee4 <_dtoa_r+0x4c8>
 800732c:	0031      	movs	r1, r6
 800732e:	2205      	movs	r2, #5
 8007330:	9803      	ldr	r0, [sp, #12]
 8007332:	f000 fad1 	bl	80078d8 <__multadd>
 8007336:	0006      	movs	r6, r0
 8007338:	0001      	movs	r1, r0
 800733a:	9805      	ldr	r0, [sp, #20]
 800733c:	f000 fcea 	bl	8007d14 <__mcmp>
 8007340:	2800      	cmp	r0, #0
 8007342:	dc00      	bgt.n	8007346 <_dtoa_r+0x92a>
 8007344:	e5ce      	b.n	8006ee4 <_dtoa_r+0x4c8>
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	9a08      	ldr	r2, [sp, #32]
 800734a:	1c5c      	adds	r4, r3, #1
 800734c:	2331      	movs	r3, #49	@ 0x31
 800734e:	7013      	strb	r3, [r2, #0]
 8007350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007352:	3301      	adds	r3, #1
 8007354:	930c      	str	r3, [sp, #48]	@ 0x30
 8007356:	e5c9      	b.n	8006eec <_dtoa_r+0x4d0>
 8007358:	2336      	movs	r3, #54	@ 0x36
 800735a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800735c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	9c06      	ldr	r4, [sp, #24]
 8007362:	e720      	b.n	80071a6 <_dtoa_r+0x78a>
 8007364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007366:	1e5d      	subs	r5, r3, #1
 8007368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800736a:	42ab      	cmp	r3, r5
 800736c:	db08      	blt.n	8007380 <_dtoa_r+0x964>
 800736e:	1b5d      	subs	r5, r3, r5
 8007370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	daf4      	bge.n	8007360 <_dtoa_r+0x944>
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737a:	1a9c      	subs	r4, r3, r2
 800737c:	2300      	movs	r3, #0
 800737e:	e712      	b.n	80071a6 <_dtoa_r+0x78a>
 8007380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007382:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007384:	1aeb      	subs	r3, r5, r3
 8007386:	18d3      	adds	r3, r2, r3
 8007388:	9314      	str	r3, [sp, #80]	@ 0x50
 800738a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800738c:	9c06      	ldr	r4, [sp, #24]
 800738e:	2500      	movs	r5, #0
 8007390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007392:	e708      	b.n	80071a6 <_dtoa_r+0x78a>
 8007394:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007396:	9905      	ldr	r1, [sp, #20]
 8007398:	e742      	b.n	8007220 <_dtoa_r+0x804>
 800739a:	2b04      	cmp	r3, #4
 800739c:	d08c      	beq.n	80072b8 <_dtoa_r+0x89c>
 800739e:	331c      	adds	r3, #28
 80073a0:	e783      	b.n	80072aa <_dtoa_r+0x88e>
 80073a2:	0013      	movs	r3, r2
 80073a4:	e7fb      	b.n	800739e <_dtoa_r+0x982>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	ddb5      	ble.n	800731e <_dtoa_r+0x902>
 80073b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d100      	bne.n	80073ba <_dtoa_r+0x99e>
 80073b8:	e107      	b.n	80075ca <_dtoa_r+0xbae>
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	dd05      	ble.n	80073ca <_dtoa_r+0x9ae>
 80073be:	0039      	movs	r1, r7
 80073c0:	0022      	movs	r2, r4
 80073c2:	9803      	ldr	r0, [sp, #12]
 80073c4:	f000 fc3a 	bl	8007c3c <__lshift>
 80073c8:	0007      	movs	r7, r0
 80073ca:	9704      	str	r7, [sp, #16]
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	d020      	beq.n	8007412 <_dtoa_r+0x9f6>
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	9803      	ldr	r0, [sp, #12]
 80073d4:	f000 fa18 	bl	8007808 <_Balloc>
 80073d8:	1e04      	subs	r4, r0, #0
 80073da:	d10c      	bne.n	80073f6 <_dtoa_r+0x9da>
 80073dc:	0022      	movs	r2, r4
 80073de:	4b2e      	ldr	r3, [pc, #184]	@ (8007498 <_dtoa_r+0xa7c>)
 80073e0:	482e      	ldr	r0, [pc, #184]	@ (800749c <_dtoa_r+0xa80>)
 80073e2:	492f      	ldr	r1, [pc, #188]	@ (80074a0 <_dtoa_r+0xa84>)
 80073e4:	f7ff fb2f 	bl	8006a46 <_dtoa_r+0x2a>
 80073e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80073ea:	0037      	movs	r7, r6
 80073ec:	e7ab      	b.n	8007346 <_dtoa_r+0x92a>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80073f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80073f4:	e7f9      	b.n	80073ea <_dtoa_r+0x9ce>
 80073f6:	0039      	movs	r1, r7
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	310c      	adds	r1, #12
 80073fc:	3202      	adds	r2, #2
 80073fe:	0092      	lsls	r2, r2, #2
 8007400:	300c      	adds	r0, #12
 8007402:	f000 ffd1 	bl	80083a8 <memcpy>
 8007406:	2201      	movs	r2, #1
 8007408:	0021      	movs	r1, r4
 800740a:	9803      	ldr	r0, [sp, #12]
 800740c:	f000 fc16 	bl	8007c3c <__lshift>
 8007410:	9004      	str	r0, [sp, #16]
 8007412:	9b08      	ldr	r3, [sp, #32]
 8007414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007416:	9306      	str	r3, [sp, #24]
 8007418:	3b01      	subs	r3, #1
 800741a:	189b      	adds	r3, r3, r2
 800741c:	2201      	movs	r2, #1
 800741e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007422:	4013      	ands	r3, r2
 8007424:	930e      	str	r3, [sp, #56]	@ 0x38
 8007426:	0031      	movs	r1, r6
 8007428:	9805      	ldr	r0, [sp, #20]
 800742a:	f7ff fa71 	bl	8006910 <quorem>
 800742e:	0039      	movs	r1, r7
 8007430:	0005      	movs	r5, r0
 8007432:	900a      	str	r0, [sp, #40]	@ 0x28
 8007434:	9805      	ldr	r0, [sp, #20]
 8007436:	f000 fc6d 	bl	8007d14 <__mcmp>
 800743a:	9a04      	ldr	r2, [sp, #16]
 800743c:	900d      	str	r0, [sp, #52]	@ 0x34
 800743e:	0031      	movs	r1, r6
 8007440:	9803      	ldr	r0, [sp, #12]
 8007442:	f000 fc83 	bl	8007d4c <__mdiff>
 8007446:	2201      	movs	r2, #1
 8007448:	68c3      	ldr	r3, [r0, #12]
 800744a:	0004      	movs	r4, r0
 800744c:	3530      	adds	r5, #48	@ 0x30
 800744e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <_dtoa_r+0xa42>
 8007454:	0001      	movs	r1, r0
 8007456:	9805      	ldr	r0, [sp, #20]
 8007458:	f000 fc5c 	bl	8007d14 <__mcmp>
 800745c:	9009      	str	r0, [sp, #36]	@ 0x24
 800745e:	0021      	movs	r1, r4
 8007460:	9803      	ldr	r0, [sp, #12]
 8007462:	f000 fa15 	bl	8007890 <_Bfree>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800746a:	1c5c      	adds	r4, r3, #1
 800746c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746e:	4313      	orrs	r3, r2
 8007470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007472:	4313      	orrs	r3, r2
 8007474:	d116      	bne.n	80074a4 <_dtoa_r+0xa88>
 8007476:	2d39      	cmp	r5, #57	@ 0x39
 8007478:	d02f      	beq.n	80074da <_dtoa_r+0xabe>
 800747a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800747c:	2b00      	cmp	r3, #0
 800747e:	dd01      	ble.n	8007484 <_dtoa_r+0xa68>
 8007480:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007482:	3531      	adds	r5, #49	@ 0x31
 8007484:	9b06      	ldr	r3, [sp, #24]
 8007486:	701d      	strb	r5, [r3, #0]
 8007488:	e532      	b.n	8006ef0 <_dtoa_r+0x4d4>
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	40240000 	.word	0x40240000
 8007490:	00000433 	.word	0x00000433
 8007494:	7ff00000 	.word	0x7ff00000
 8007498:	08008c40 	.word	0x08008c40
 800749c:	08008be8 	.word	0x08008be8
 80074a0:	000002ef 	.word	0x000002ef
 80074a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	db04      	blt.n	80074b4 <_dtoa_r+0xa98>
 80074aa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80074ac:	4313      	orrs	r3, r2
 80074ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074b0:	4313      	orrs	r3, r2
 80074b2:	d11e      	bne.n	80074f2 <_dtoa_r+0xad6>
 80074b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dde4      	ble.n	8007484 <_dtoa_r+0xa68>
 80074ba:	9905      	ldr	r1, [sp, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	9803      	ldr	r0, [sp, #12]
 80074c0:	f000 fbbc 	bl	8007c3c <__lshift>
 80074c4:	0031      	movs	r1, r6
 80074c6:	9005      	str	r0, [sp, #20]
 80074c8:	f000 fc24 	bl	8007d14 <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dc02      	bgt.n	80074d6 <_dtoa_r+0xaba>
 80074d0:	d1d8      	bne.n	8007484 <_dtoa_r+0xa68>
 80074d2:	07eb      	lsls	r3, r5, #31
 80074d4:	d5d6      	bpl.n	8007484 <_dtoa_r+0xa68>
 80074d6:	2d39      	cmp	r5, #57	@ 0x39
 80074d8:	d1d2      	bne.n	8007480 <_dtoa_r+0xa64>
 80074da:	2339      	movs	r3, #57	@ 0x39
 80074dc:	9a06      	ldr	r2, [sp, #24]
 80074de:	7013      	strb	r3, [r2, #0]
 80074e0:	0023      	movs	r3, r4
 80074e2:	001c      	movs	r4, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	2a39      	cmp	r2, #57	@ 0x39
 80074ea:	d050      	beq.n	800758e <_dtoa_r+0xb72>
 80074ec:	3201      	adds	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e4fe      	b.n	8006ef0 <_dtoa_r+0x4d4>
 80074f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dd03      	ble.n	8007500 <_dtoa_r+0xae4>
 80074f8:	2d39      	cmp	r5, #57	@ 0x39
 80074fa:	d0ee      	beq.n	80074da <_dtoa_r+0xabe>
 80074fc:	3501      	adds	r5, #1
 80074fe:	e7c1      	b.n	8007484 <_dtoa_r+0xa68>
 8007500:	9b06      	ldr	r3, [sp, #24]
 8007502:	9a06      	ldr	r2, [sp, #24]
 8007504:	701d      	strb	r5, [r3, #0]
 8007506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007508:	4293      	cmp	r3, r2
 800750a:	d02b      	beq.n	8007564 <_dtoa_r+0xb48>
 800750c:	2300      	movs	r3, #0
 800750e:	220a      	movs	r2, #10
 8007510:	9905      	ldr	r1, [sp, #20]
 8007512:	9803      	ldr	r0, [sp, #12]
 8007514:	f000 f9e0 	bl	80078d8 <__multadd>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	9005      	str	r0, [sp, #20]
 800751c:	429f      	cmp	r7, r3
 800751e:	d109      	bne.n	8007534 <_dtoa_r+0xb18>
 8007520:	0039      	movs	r1, r7
 8007522:	2300      	movs	r3, #0
 8007524:	220a      	movs	r2, #10
 8007526:	9803      	ldr	r0, [sp, #12]
 8007528:	f000 f9d6 	bl	80078d8 <__multadd>
 800752c:	0007      	movs	r7, r0
 800752e:	9004      	str	r0, [sp, #16]
 8007530:	9406      	str	r4, [sp, #24]
 8007532:	e778      	b.n	8007426 <_dtoa_r+0xa0a>
 8007534:	0039      	movs	r1, r7
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	9803      	ldr	r0, [sp, #12]
 800753c:	f000 f9cc 	bl	80078d8 <__multadd>
 8007540:	2300      	movs	r3, #0
 8007542:	0007      	movs	r7, r0
 8007544:	220a      	movs	r2, #10
 8007546:	9904      	ldr	r1, [sp, #16]
 8007548:	9803      	ldr	r0, [sp, #12]
 800754a:	f000 f9c5 	bl	80078d8 <__multadd>
 800754e:	9004      	str	r0, [sp, #16]
 8007550:	e7ee      	b.n	8007530 <_dtoa_r+0xb14>
 8007552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007554:	2401      	movs	r4, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd00      	ble.n	800755c <_dtoa_r+0xb40>
 800755a:	001c      	movs	r4, r3
 800755c:	9704      	str	r7, [sp, #16]
 800755e:	2700      	movs	r7, #0
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	191c      	adds	r4, r3, r4
 8007564:	9905      	ldr	r1, [sp, #20]
 8007566:	2201      	movs	r2, #1
 8007568:	9803      	ldr	r0, [sp, #12]
 800756a:	f000 fb67 	bl	8007c3c <__lshift>
 800756e:	0031      	movs	r1, r6
 8007570:	9005      	str	r0, [sp, #20]
 8007572:	f000 fbcf 	bl	8007d14 <__mcmp>
 8007576:	2800      	cmp	r0, #0
 8007578:	dcb2      	bgt.n	80074e0 <_dtoa_r+0xac4>
 800757a:	d101      	bne.n	8007580 <_dtoa_r+0xb64>
 800757c:	07ed      	lsls	r5, r5, #31
 800757e:	d4af      	bmi.n	80074e0 <_dtoa_r+0xac4>
 8007580:	0023      	movs	r3, r4
 8007582:	001c      	movs	r4, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	2a30      	cmp	r2, #48	@ 0x30
 800758a:	d0fa      	beq.n	8007582 <_dtoa_r+0xb66>
 800758c:	e4b0      	b.n	8006ef0 <_dtoa_r+0x4d4>
 800758e:	9a08      	ldr	r2, [sp, #32]
 8007590:	429a      	cmp	r2, r3
 8007592:	d1a6      	bne.n	80074e2 <_dtoa_r+0xac6>
 8007594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007596:	3301      	adds	r3, #1
 8007598:	930c      	str	r3, [sp, #48]	@ 0x30
 800759a:	2331      	movs	r3, #49	@ 0x31
 800759c:	7013      	strb	r3, [r2, #0]
 800759e:	e4a7      	b.n	8006ef0 <_dtoa_r+0x4d4>
 80075a0:	4b14      	ldr	r3, [pc, #80]	@ (80075f4 <_dtoa_r+0xbd8>)
 80075a2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80075a4:	9308      	str	r3, [sp, #32]
 80075a6:	4b14      	ldr	r3, [pc, #80]	@ (80075f8 <_dtoa_r+0xbdc>)
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	d001      	beq.n	80075b0 <_dtoa_r+0xb94>
 80075ac:	f7ff fa7e 	bl	8006aac <_dtoa_r+0x90>
 80075b0:	f7ff fa7e 	bl	8006ab0 <_dtoa_r+0x94>
 80075b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	dc00      	bgt.n	80075bc <_dtoa_r+0xba0>
 80075ba:	e648      	b.n	800724e <_dtoa_r+0x832>
 80075bc:	2001      	movs	r0, #1
 80075be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80075c0:	e665      	b.n	800728e <_dtoa_r+0x872>
 80075c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dc00      	bgt.n	80075ca <_dtoa_r+0xbae>
 80075c8:	e6a9      	b.n	800731e <_dtoa_r+0x902>
 80075ca:	2400      	movs	r4, #0
 80075cc:	0031      	movs	r1, r6
 80075ce:	9805      	ldr	r0, [sp, #20]
 80075d0:	f7ff f99e 	bl	8006910 <quorem>
 80075d4:	9b08      	ldr	r3, [sp, #32]
 80075d6:	3030      	adds	r0, #48	@ 0x30
 80075d8:	5518      	strb	r0, [r3, r4]
 80075da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075dc:	3401      	adds	r4, #1
 80075de:	0005      	movs	r5, r0
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	ddb6      	ble.n	8007552 <_dtoa_r+0xb36>
 80075e4:	2300      	movs	r3, #0
 80075e6:	220a      	movs	r2, #10
 80075e8:	9905      	ldr	r1, [sp, #20]
 80075ea:	9803      	ldr	r0, [sp, #12]
 80075ec:	f000 f974 	bl	80078d8 <__multadd>
 80075f0:	9005      	str	r0, [sp, #20]
 80075f2:	e7eb      	b.n	80075cc <_dtoa_r+0xbb0>
 80075f4:	08008bc4 	.word	0x08008bc4
 80075f8:	08008bcc 	.word	0x08008bcc

080075fc <_free_r>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	0005      	movs	r5, r0
 8007600:	1e0c      	subs	r4, r1, #0
 8007602:	d010      	beq.n	8007626 <_free_r+0x2a>
 8007604:	3c04      	subs	r4, #4
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	da00      	bge.n	800760e <_free_r+0x12>
 800760c:	18e4      	adds	r4, r4, r3
 800760e:	0028      	movs	r0, r5
 8007610:	f000 f8ea 	bl	80077e8 <__malloc_lock>
 8007614:	4a1d      	ldr	r2, [pc, #116]	@ (800768c <_free_r+0x90>)
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <_free_r+0x2c>
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	6014      	str	r4, [r2, #0]
 8007620:	0028      	movs	r0, r5
 8007622:	f000 f8e9 	bl	80077f8 <__malloc_unlock>
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	42a3      	cmp	r3, r4
 800762a:	d908      	bls.n	800763e <_free_r+0x42>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	1821      	adds	r1, r4, r0
 8007630:	428b      	cmp	r3, r1
 8007632:	d1f3      	bne.n	800761c <_free_r+0x20>
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	1809      	adds	r1, r1, r0
 800763a:	6021      	str	r1, [r4, #0]
 800763c:	e7ee      	b.n	800761c <_free_r+0x20>
 800763e:	001a      	movs	r2, r3
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <_free_r+0x4e>
 8007646:	42a3      	cmp	r3, r4
 8007648:	d9f9      	bls.n	800763e <_free_r+0x42>
 800764a:	6811      	ldr	r1, [r2, #0]
 800764c:	1850      	adds	r0, r2, r1
 800764e:	42a0      	cmp	r0, r4
 8007650:	d10b      	bne.n	800766a <_free_r+0x6e>
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	1809      	adds	r1, r1, r0
 8007656:	1850      	adds	r0, r2, r1
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	4283      	cmp	r3, r0
 800765c:	d1e0      	bne.n	8007620 <_free_r+0x24>
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	1841      	adds	r1, r0, r1
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	6053      	str	r3, [r2, #4]
 8007668:	e7da      	b.n	8007620 <_free_r+0x24>
 800766a:	42a0      	cmp	r0, r4
 800766c:	d902      	bls.n	8007674 <_free_r+0x78>
 800766e:	230c      	movs	r3, #12
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	e7d5      	b.n	8007620 <_free_r+0x24>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	1821      	adds	r1, r4, r0
 8007678:	428b      	cmp	r3, r1
 800767a:	d103      	bne.n	8007684 <_free_r+0x88>
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	1809      	adds	r1, r1, r0
 8007682:	6021      	str	r1, [r4, #0]
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6054      	str	r4, [r2, #4]
 8007688:	e7ca      	b.n	8007620 <_free_r+0x24>
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	2000041c 	.word	0x2000041c

08007690 <malloc>:
 8007690:	b510      	push	{r4, lr}
 8007692:	4b03      	ldr	r3, [pc, #12]	@ (80076a0 <malloc+0x10>)
 8007694:	0001      	movs	r1, r0
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	f000 f826 	bl	80076e8 <_malloc_r>
 800769c:	bd10      	pop	{r4, pc}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	20000018 	.word	0x20000018

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0f      	ldr	r6, [pc, #60]	@ (80076e4 <sbrk_aligned+0x40>)
 80076a8:	000d      	movs	r5, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	0004      	movs	r4, r0
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d102      	bne.n	80076b8 <sbrk_aligned+0x14>
 80076b2:	f000 fe67 	bl	8008384 <_sbrk_r>
 80076b6:	6030      	str	r0, [r6, #0]
 80076b8:	0029      	movs	r1, r5
 80076ba:	0020      	movs	r0, r4
 80076bc:	f000 fe62 	bl	8008384 <_sbrk_r>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d103      	bne.n	80076cc <sbrk_aligned+0x28>
 80076c4:	2501      	movs	r5, #1
 80076c6:	426d      	negs	r5, r5
 80076c8:	0028      	movs	r0, r5
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	2303      	movs	r3, #3
 80076ce:	1cc5      	adds	r5, r0, #3
 80076d0:	439d      	bics	r5, r3
 80076d2:	42a8      	cmp	r0, r5
 80076d4:	d0f8      	beq.n	80076c8 <sbrk_aligned+0x24>
 80076d6:	1a29      	subs	r1, r5, r0
 80076d8:	0020      	movs	r0, r4
 80076da:	f000 fe53 	bl	8008384 <_sbrk_r>
 80076de:	3001      	adds	r0, #1
 80076e0:	d1f2      	bne.n	80076c8 <sbrk_aligned+0x24>
 80076e2:	e7ef      	b.n	80076c4 <sbrk_aligned+0x20>
 80076e4:	20000418 	.word	0x20000418

080076e8 <_malloc_r>:
 80076e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ea:	2203      	movs	r2, #3
 80076ec:	1ccb      	adds	r3, r1, #3
 80076ee:	4393      	bics	r3, r2
 80076f0:	3308      	adds	r3, #8
 80076f2:	0005      	movs	r5, r0
 80076f4:	001f      	movs	r7, r3
 80076f6:	2b0c      	cmp	r3, #12
 80076f8:	d234      	bcs.n	8007764 <_malloc_r+0x7c>
 80076fa:	270c      	movs	r7, #12
 80076fc:	42b9      	cmp	r1, r7
 80076fe:	d833      	bhi.n	8007768 <_malloc_r+0x80>
 8007700:	0028      	movs	r0, r5
 8007702:	f000 f871 	bl	80077e8 <__malloc_lock>
 8007706:	4e37      	ldr	r6, [pc, #220]	@ (80077e4 <_malloc_r+0xfc>)
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	001c      	movs	r4, r3
 800770c:	2c00      	cmp	r4, #0
 800770e:	d12f      	bne.n	8007770 <_malloc_r+0x88>
 8007710:	0039      	movs	r1, r7
 8007712:	0028      	movs	r0, r5
 8007714:	f7ff ffc6 	bl	80076a4 <sbrk_aligned>
 8007718:	0004      	movs	r4, r0
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d15f      	bne.n	80077de <_malloc_r+0xf6>
 800771e:	6834      	ldr	r4, [r6, #0]
 8007720:	9400      	str	r4, [sp, #0]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d14a      	bne.n	80077be <_malloc_r+0xd6>
 8007728:	2c00      	cmp	r4, #0
 800772a:	d052      	beq.n	80077d2 <_malloc_r+0xea>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	0028      	movs	r0, r5
 8007730:	18e3      	adds	r3, r4, r3
 8007732:	9900      	ldr	r1, [sp, #0]
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	f000 fe25 	bl	8008384 <_sbrk_r>
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	4283      	cmp	r3, r0
 800773e:	d148      	bne.n	80077d2 <_malloc_r+0xea>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	0028      	movs	r0, r5
 8007744:	1aff      	subs	r7, r7, r3
 8007746:	0039      	movs	r1, r7
 8007748:	f7ff ffac 	bl	80076a4 <sbrk_aligned>
 800774c:	3001      	adds	r0, #1
 800774e:	d040      	beq.n	80077d2 <_malloc_r+0xea>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	19db      	adds	r3, r3, r7
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	2a00      	cmp	r2, #0
 800775c:	d133      	bne.n	80077c6 <_malloc_r+0xde>
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	e019      	b.n	8007798 <_malloc_r+0xb0>
 8007764:	2b00      	cmp	r3, #0
 8007766:	dac9      	bge.n	80076fc <_malloc_r+0x14>
 8007768:	230c      	movs	r3, #12
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	2000      	movs	r0, #0
 800776e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007770:	6821      	ldr	r1, [r4, #0]
 8007772:	1bc9      	subs	r1, r1, r7
 8007774:	d420      	bmi.n	80077b8 <_malloc_r+0xd0>
 8007776:	290b      	cmp	r1, #11
 8007778:	d90a      	bls.n	8007790 <_malloc_r+0xa8>
 800777a:	19e2      	adds	r2, r4, r7
 800777c:	6027      	str	r7, [r4, #0]
 800777e:	42a3      	cmp	r3, r4
 8007780:	d104      	bne.n	800778c <_malloc_r+0xa4>
 8007782:	6032      	str	r2, [r6, #0]
 8007784:	6863      	ldr	r3, [r4, #4]
 8007786:	6011      	str	r1, [r2, #0]
 8007788:	6053      	str	r3, [r2, #4]
 800778a:	e005      	b.n	8007798 <_malloc_r+0xb0>
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	e7f9      	b.n	8007784 <_malloc_r+0x9c>
 8007790:	6862      	ldr	r2, [r4, #4]
 8007792:	42a3      	cmp	r3, r4
 8007794:	d10e      	bne.n	80077b4 <_malloc_r+0xcc>
 8007796:	6032      	str	r2, [r6, #0]
 8007798:	0028      	movs	r0, r5
 800779a:	f000 f82d 	bl	80077f8 <__malloc_unlock>
 800779e:	0020      	movs	r0, r4
 80077a0:	2207      	movs	r2, #7
 80077a2:	300b      	adds	r0, #11
 80077a4:	1d23      	adds	r3, r4, #4
 80077a6:	4390      	bics	r0, r2
 80077a8:	1ac2      	subs	r2, r0, r3
 80077aa:	4298      	cmp	r0, r3
 80077ac:	d0df      	beq.n	800776e <_malloc_r+0x86>
 80077ae:	1a1b      	subs	r3, r3, r0
 80077b0:	50a3      	str	r3, [r4, r2]
 80077b2:	e7dc      	b.n	800776e <_malloc_r+0x86>
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	e7ef      	b.n	8007798 <_malloc_r+0xb0>
 80077b8:	0023      	movs	r3, r4
 80077ba:	6864      	ldr	r4, [r4, #4]
 80077bc:	e7a6      	b.n	800770c <_malloc_r+0x24>
 80077be:	9c00      	ldr	r4, [sp, #0]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	e7ad      	b.n	8007722 <_malloc_r+0x3a>
 80077c6:	001a      	movs	r2, r3
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	d1fb      	bne.n	80077c6 <_malloc_r+0xde>
 80077ce:	2300      	movs	r3, #0
 80077d0:	e7da      	b.n	8007788 <_malloc_r+0xa0>
 80077d2:	230c      	movs	r3, #12
 80077d4:	0028      	movs	r0, r5
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f000 f80e 	bl	80077f8 <__malloc_unlock>
 80077dc:	e7c6      	b.n	800776c <_malloc_r+0x84>
 80077de:	6007      	str	r7, [r0, #0]
 80077e0:	e7da      	b.n	8007798 <_malloc_r+0xb0>
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	2000041c 	.word	0x2000041c

080077e8 <__malloc_lock>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	4802      	ldr	r0, [pc, #8]	@ (80077f4 <__malloc_lock+0xc>)
 80077ec:	f7ff f883 	bl	80068f6 <__retarget_lock_acquire_recursive>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	20000414 	.word	0x20000414

080077f8 <__malloc_unlock>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4802      	ldr	r0, [pc, #8]	@ (8007804 <__malloc_unlock+0xc>)
 80077fc:	f7ff f87c 	bl	80068f8 <__retarget_lock_release_recursive>
 8007800:	bd10      	pop	{r4, pc}
 8007802:	46c0      	nop			@ (mov r8, r8)
 8007804:	20000414 	.word	0x20000414

08007808 <_Balloc>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	69c5      	ldr	r5, [r0, #28]
 800780c:	0006      	movs	r6, r0
 800780e:	000c      	movs	r4, r1
 8007810:	2d00      	cmp	r5, #0
 8007812:	d10e      	bne.n	8007832 <_Balloc+0x2a>
 8007814:	2010      	movs	r0, #16
 8007816:	f7ff ff3b 	bl	8007690 <malloc>
 800781a:	1e02      	subs	r2, r0, #0
 800781c:	61f0      	str	r0, [r6, #28]
 800781e:	d104      	bne.n	800782a <_Balloc+0x22>
 8007820:	216b      	movs	r1, #107	@ 0x6b
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <_Balloc+0x80>)
 8007824:	4819      	ldr	r0, [pc, #100]	@ (800788c <_Balloc+0x84>)
 8007826:	f000 fdc9 	bl	80083bc <__assert_func>
 800782a:	6045      	str	r5, [r0, #4]
 800782c:	6085      	str	r5, [r0, #8]
 800782e:	6005      	str	r5, [r0, #0]
 8007830:	60c5      	str	r5, [r0, #12]
 8007832:	69f5      	ldr	r5, [r6, #28]
 8007834:	68eb      	ldr	r3, [r5, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d013      	beq.n	8007862 <_Balloc+0x5a>
 800783a:	69f3      	ldr	r3, [r6, #28]
 800783c:	00a2      	lsls	r2, r4, #2
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	189b      	adds	r3, r3, r2
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	2800      	cmp	r0, #0
 8007846:	d118      	bne.n	800787a <_Balloc+0x72>
 8007848:	2101      	movs	r1, #1
 800784a:	000d      	movs	r5, r1
 800784c:	40a5      	lsls	r5, r4
 800784e:	1d6a      	adds	r2, r5, #5
 8007850:	0030      	movs	r0, r6
 8007852:	0092      	lsls	r2, r2, #2
 8007854:	f000 fdd0 	bl	80083f8 <_calloc_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	d00c      	beq.n	8007876 <_Balloc+0x6e>
 800785c:	6044      	str	r4, [r0, #4]
 800785e:	6085      	str	r5, [r0, #8]
 8007860:	e00d      	b.n	800787e <_Balloc+0x76>
 8007862:	2221      	movs	r2, #33	@ 0x21
 8007864:	2104      	movs	r1, #4
 8007866:	0030      	movs	r0, r6
 8007868:	f000 fdc6 	bl	80083f8 <_calloc_r>
 800786c:	69f3      	ldr	r3, [r6, #28]
 800786e:	60e8      	str	r0, [r5, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e1      	bne.n	800783a <_Balloc+0x32>
 8007876:	2000      	movs	r0, #0
 8007878:	bd70      	pop	{r4, r5, r6, pc}
 800787a:	6802      	ldr	r2, [r0, #0]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	2300      	movs	r3, #0
 8007880:	6103      	str	r3, [r0, #16]
 8007882:	60c3      	str	r3, [r0, #12]
 8007884:	e7f8      	b.n	8007878 <_Balloc+0x70>
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	08008bd1 	.word	0x08008bd1
 800788c:	08008c51 	.word	0x08008c51

08007890 <_Bfree>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	69c6      	ldr	r6, [r0, #28]
 8007894:	0005      	movs	r5, r0
 8007896:	000c      	movs	r4, r1
 8007898:	2e00      	cmp	r6, #0
 800789a:	d10e      	bne.n	80078ba <_Bfree+0x2a>
 800789c:	2010      	movs	r0, #16
 800789e:	f7ff fef7 	bl	8007690 <malloc>
 80078a2:	1e02      	subs	r2, r0, #0
 80078a4:	61e8      	str	r0, [r5, #28]
 80078a6:	d104      	bne.n	80078b2 <_Bfree+0x22>
 80078a8:	218f      	movs	r1, #143	@ 0x8f
 80078aa:	4b09      	ldr	r3, [pc, #36]	@ (80078d0 <_Bfree+0x40>)
 80078ac:	4809      	ldr	r0, [pc, #36]	@ (80078d4 <_Bfree+0x44>)
 80078ae:	f000 fd85 	bl	80083bc <__assert_func>
 80078b2:	6046      	str	r6, [r0, #4]
 80078b4:	6086      	str	r6, [r0, #8]
 80078b6:	6006      	str	r6, [r0, #0]
 80078b8:	60c6      	str	r6, [r0, #12]
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d007      	beq.n	80078ce <_Bfree+0x3e>
 80078be:	69eb      	ldr	r3, [r5, #28]
 80078c0:	6862      	ldr	r2, [r4, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	6022      	str	r2, [r4, #0]
 80078cc:	601c      	str	r4, [r3, #0]
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	08008bd1 	.word	0x08008bd1
 80078d4:	08008c51 	.word	0x08008c51

080078d8 <__multadd>:
 80078d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078da:	000f      	movs	r7, r1
 80078dc:	9001      	str	r0, [sp, #4]
 80078de:	000c      	movs	r4, r1
 80078e0:	001e      	movs	r6, r3
 80078e2:	2000      	movs	r0, #0
 80078e4:	690d      	ldr	r5, [r1, #16]
 80078e6:	3714      	adds	r7, #20
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	3001      	adds	r0, #1
 80078ec:	b299      	uxth	r1, r3
 80078ee:	4351      	muls	r1, r2
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	4353      	muls	r3, r2
 80078f4:	1989      	adds	r1, r1, r6
 80078f6:	0c0e      	lsrs	r6, r1, #16
 80078f8:	199b      	adds	r3, r3, r6
 80078fa:	0c1e      	lsrs	r6, r3, #16
 80078fc:	b289      	uxth	r1, r1
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	185b      	adds	r3, r3, r1
 8007902:	c708      	stmia	r7!, {r3}
 8007904:	4285      	cmp	r5, r0
 8007906:	dcef      	bgt.n	80078e8 <__multadd+0x10>
 8007908:	2e00      	cmp	r6, #0
 800790a:	d022      	beq.n	8007952 <__multadd+0x7a>
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	42ab      	cmp	r3, r5
 8007910:	dc19      	bgt.n	8007946 <__multadd+0x6e>
 8007912:	6861      	ldr	r1, [r4, #4]
 8007914:	9801      	ldr	r0, [sp, #4]
 8007916:	3101      	adds	r1, #1
 8007918:	f7ff ff76 	bl	8007808 <_Balloc>
 800791c:	1e07      	subs	r7, r0, #0
 800791e:	d105      	bne.n	800792c <__multadd+0x54>
 8007920:	003a      	movs	r2, r7
 8007922:	21ba      	movs	r1, #186	@ 0xba
 8007924:	4b0c      	ldr	r3, [pc, #48]	@ (8007958 <__multadd+0x80>)
 8007926:	480d      	ldr	r0, [pc, #52]	@ (800795c <__multadd+0x84>)
 8007928:	f000 fd48 	bl	80083bc <__assert_func>
 800792c:	0021      	movs	r1, r4
 800792e:	6922      	ldr	r2, [r4, #16]
 8007930:	310c      	adds	r1, #12
 8007932:	3202      	adds	r2, #2
 8007934:	0092      	lsls	r2, r2, #2
 8007936:	300c      	adds	r0, #12
 8007938:	f000 fd36 	bl	80083a8 <memcpy>
 800793c:	0021      	movs	r1, r4
 800793e:	9801      	ldr	r0, [sp, #4]
 8007940:	f7ff ffa6 	bl	8007890 <_Bfree>
 8007944:	003c      	movs	r4, r7
 8007946:	1d2b      	adds	r3, r5, #4
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	18e3      	adds	r3, r4, r3
 800794c:	3501      	adds	r5, #1
 800794e:	605e      	str	r6, [r3, #4]
 8007950:	6125      	str	r5, [r4, #16]
 8007952:	0020      	movs	r0, r4
 8007954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	08008c40 	.word	0x08008c40
 800795c:	08008c51 	.word	0x08008c51

08007960 <__hi0bits>:
 8007960:	2280      	movs	r2, #128	@ 0x80
 8007962:	0003      	movs	r3, r0
 8007964:	0252      	lsls	r2, r2, #9
 8007966:	2000      	movs	r0, #0
 8007968:	4293      	cmp	r3, r2
 800796a:	d201      	bcs.n	8007970 <__hi0bits+0x10>
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	3010      	adds	r0, #16
 8007970:	2280      	movs	r2, #128	@ 0x80
 8007972:	0452      	lsls	r2, r2, #17
 8007974:	4293      	cmp	r3, r2
 8007976:	d201      	bcs.n	800797c <__hi0bits+0x1c>
 8007978:	3008      	adds	r0, #8
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	2280      	movs	r2, #128	@ 0x80
 800797e:	0552      	lsls	r2, r2, #21
 8007980:	4293      	cmp	r3, r2
 8007982:	d201      	bcs.n	8007988 <__hi0bits+0x28>
 8007984:	3004      	adds	r0, #4
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	2280      	movs	r2, #128	@ 0x80
 800798a:	05d2      	lsls	r2, r2, #23
 800798c:	4293      	cmp	r3, r2
 800798e:	d201      	bcs.n	8007994 <__hi0bits+0x34>
 8007990:	3002      	adds	r0, #2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	db03      	blt.n	80079a0 <__hi0bits+0x40>
 8007998:	3001      	adds	r0, #1
 800799a:	4213      	tst	r3, r2
 800799c:	d100      	bne.n	80079a0 <__hi0bits+0x40>
 800799e:	2020      	movs	r0, #32
 80079a0:	4770      	bx	lr

080079a2 <__lo0bits>:
 80079a2:	6803      	ldr	r3, [r0, #0]
 80079a4:	0001      	movs	r1, r0
 80079a6:	2207      	movs	r2, #7
 80079a8:	0018      	movs	r0, r3
 80079aa:	4010      	ands	r0, r2
 80079ac:	4213      	tst	r3, r2
 80079ae:	d00d      	beq.n	80079cc <__lo0bits+0x2a>
 80079b0:	3a06      	subs	r2, #6
 80079b2:	2000      	movs	r0, #0
 80079b4:	4213      	tst	r3, r2
 80079b6:	d105      	bne.n	80079c4 <__lo0bits+0x22>
 80079b8:	3002      	adds	r0, #2
 80079ba:	4203      	tst	r3, r0
 80079bc:	d003      	beq.n	80079c6 <__lo0bits+0x24>
 80079be:	40d3      	lsrs	r3, r2
 80079c0:	0010      	movs	r0, r2
 80079c2:	600b      	str	r3, [r1, #0]
 80079c4:	4770      	bx	lr
 80079c6:	089b      	lsrs	r3, r3, #2
 80079c8:	600b      	str	r3, [r1, #0]
 80079ca:	e7fb      	b.n	80079c4 <__lo0bits+0x22>
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	d101      	bne.n	80079d6 <__lo0bits+0x34>
 80079d2:	2010      	movs	r0, #16
 80079d4:	0c1b      	lsrs	r3, r3, #16
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	2a00      	cmp	r2, #0
 80079da:	d101      	bne.n	80079e0 <__lo0bits+0x3e>
 80079dc:	3008      	adds	r0, #8
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	071a      	lsls	r2, r3, #28
 80079e2:	d101      	bne.n	80079e8 <__lo0bits+0x46>
 80079e4:	3004      	adds	r0, #4
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	079a      	lsls	r2, r3, #30
 80079ea:	d101      	bne.n	80079f0 <__lo0bits+0x4e>
 80079ec:	3002      	adds	r0, #2
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	07da      	lsls	r2, r3, #31
 80079f2:	d4e9      	bmi.n	80079c8 <__lo0bits+0x26>
 80079f4:	3001      	adds	r0, #1
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	d1e6      	bne.n	80079c8 <__lo0bits+0x26>
 80079fa:	2020      	movs	r0, #32
 80079fc:	e7e2      	b.n	80079c4 <__lo0bits+0x22>
	...

08007a00 <__i2b>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	000c      	movs	r4, r1
 8007a04:	2101      	movs	r1, #1
 8007a06:	f7ff feff 	bl	8007808 <_Balloc>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d107      	bne.n	8007a1e <__i2b+0x1e>
 8007a0e:	2146      	movs	r1, #70	@ 0x46
 8007a10:	4c05      	ldr	r4, [pc, #20]	@ (8007a28 <__i2b+0x28>)
 8007a12:	0002      	movs	r2, r0
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <__i2b+0x2c>)
 8007a16:	0020      	movs	r0, r4
 8007a18:	31ff      	adds	r1, #255	@ 0xff
 8007a1a:	f000 fccf 	bl	80083bc <__assert_func>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	6144      	str	r4, [r0, #20]
 8007a22:	6103      	str	r3, [r0, #16]
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	08008c51 	.word	0x08008c51
 8007a2c:	08008c40 	.word	0x08008c40

08007a30 <__multiply>:
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	0014      	movs	r4, r2
 8007a34:	690a      	ldr	r2, [r1, #16]
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	000d      	movs	r5, r1
 8007a3a:	b089      	sub	sp, #36	@ 0x24
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	db02      	blt.n	8007a46 <__multiply+0x16>
 8007a40:	0023      	movs	r3, r4
 8007a42:	000c      	movs	r4, r1
 8007a44:	001d      	movs	r5, r3
 8007a46:	6927      	ldr	r7, [r4, #16]
 8007a48:	692e      	ldr	r6, [r5, #16]
 8007a4a:	6861      	ldr	r1, [r4, #4]
 8007a4c:	19bb      	adds	r3, r7, r6
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68a3      	ldr	r3, [r4, #8]
 8007a52:	19ba      	adds	r2, r7, r6
 8007a54:	4293      	cmp	r3, r2
 8007a56:	da00      	bge.n	8007a5a <__multiply+0x2a>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	f7ff fed5 	bl	8007808 <_Balloc>
 8007a5e:	4684      	mov	ip, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d106      	bne.n	8007a72 <__multiply+0x42>
 8007a64:	21b1      	movs	r1, #177	@ 0xb1
 8007a66:	4662      	mov	r2, ip
 8007a68:	4b44      	ldr	r3, [pc, #272]	@ (8007b7c <__multiply+0x14c>)
 8007a6a:	4845      	ldr	r0, [pc, #276]	@ (8007b80 <__multiply+0x150>)
 8007a6c:	0049      	lsls	r1, r1, #1
 8007a6e:	f000 fca5 	bl	80083bc <__assert_func>
 8007a72:	0002      	movs	r2, r0
 8007a74:	19bb      	adds	r3, r7, r6
 8007a76:	3214      	adds	r2, #20
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	18d3      	adds	r3, r2, r3
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	0013      	movs	r3, r2
 8007a82:	9801      	ldr	r0, [sp, #4]
 8007a84:	4283      	cmp	r3, r0
 8007a86:	d328      	bcc.n	8007ada <__multiply+0xaa>
 8007a88:	0023      	movs	r3, r4
 8007a8a:	00bf      	lsls	r7, r7, #2
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	3514      	adds	r5, #20
 8007a92:	19db      	adds	r3, r3, r7
 8007a94:	00b6      	lsls	r6, r6, #2
 8007a96:	9302      	str	r3, [sp, #8]
 8007a98:	19ab      	adds	r3, r5, r6
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	0023      	movs	r3, r4
 8007aa2:	9902      	ldr	r1, [sp, #8]
 8007aa4:	3315      	adds	r3, #21
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	d305      	bcc.n	8007ab6 <__multiply+0x86>
 8007aaa:	1b0c      	subs	r4, r1, r4
 8007aac:	3c15      	subs	r4, #21
 8007aae:	08a4      	lsrs	r4, r4, #2
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	00a3      	lsls	r3, r4, #2
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	429d      	cmp	r5, r3
 8007aba:	d310      	bcc.n	8007ade <__multiply+0xae>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dd05      	ble.n	8007ace <__multiply+0x9e>
 8007ac2:	9b01      	ldr	r3, [sp, #4]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d052      	beq.n	8007b74 <__multiply+0x144>
 8007ace:	4663      	mov	r3, ip
 8007ad0:	4660      	mov	r0, ip
 8007ad2:	9a00      	ldr	r2, [sp, #0]
 8007ad4:	611a      	str	r2, [r3, #16]
 8007ad6:	b009      	add	sp, #36	@ 0x24
 8007ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ada:	c302      	stmia	r3!, {r1}
 8007adc:	e7d1      	b.n	8007a82 <__multiply+0x52>
 8007ade:	682c      	ldr	r4, [r5, #0]
 8007ae0:	b2a4      	uxth	r4, r4
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d01f      	beq.n	8007b26 <__multiply+0xf6>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	0017      	movs	r7, r2
 8007aea:	9e04      	ldr	r6, [sp, #16]
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	ce08      	ldmia	r6!, {r3}
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	466b      	mov	r3, sp
 8007af6:	8b1b      	ldrh	r3, [r3, #24]
 8007af8:	b288      	uxth	r0, r1
 8007afa:	4363      	muls	r3, r4
 8007afc:	181b      	adds	r3, r3, r0
 8007afe:	9803      	ldr	r0, [sp, #12]
 8007b00:	0c09      	lsrs	r1, r1, #16
 8007b02:	181b      	adds	r3, r3, r0
 8007b04:	9806      	ldr	r0, [sp, #24]
 8007b06:	0c00      	lsrs	r0, r0, #16
 8007b08:	4360      	muls	r0, r4
 8007b0a:	1840      	adds	r0, r0, r1
 8007b0c:	0c19      	lsrs	r1, r3, #16
 8007b0e:	1841      	adds	r1, r0, r1
 8007b10:	0c08      	lsrs	r0, r1, #16
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	0409      	lsls	r1, r1, #16
 8007b16:	4319      	orrs	r1, r3
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	9003      	str	r0, [sp, #12]
 8007b1c:	c702      	stmia	r7!, {r1}
 8007b1e:	42b3      	cmp	r3, r6
 8007b20:	d8e5      	bhi.n	8007aee <__multiply+0xbe>
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	50d0      	str	r0, [r2, r3]
 8007b26:	682c      	ldr	r4, [r5, #0]
 8007b28:	0c24      	lsrs	r4, r4, #16
 8007b2a:	d020      	beq.n	8007b6e <__multiply+0x13e>
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	0010      	movs	r0, r2
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	9e04      	ldr	r6, [sp, #16]
 8007b34:	9103      	str	r1, [sp, #12]
 8007b36:	6831      	ldr	r1, [r6, #0]
 8007b38:	6807      	ldr	r7, [r0, #0]
 8007b3a:	b289      	uxth	r1, r1
 8007b3c:	4361      	muls	r1, r4
 8007b3e:	0c3f      	lsrs	r7, r7, #16
 8007b40:	19c9      	adds	r1, r1, r7
 8007b42:	9f03      	ldr	r7, [sp, #12]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	19c9      	adds	r1, r1, r7
 8007b48:	040f      	lsls	r7, r1, #16
 8007b4a:	431f      	orrs	r7, r3
 8007b4c:	6007      	str	r7, [r0, #0]
 8007b4e:	ce80      	ldmia	r6!, {r7}
 8007b50:	6843      	ldr	r3, [r0, #4]
 8007b52:	0c3f      	lsrs	r7, r7, #16
 8007b54:	4367      	muls	r7, r4
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	0c09      	lsrs	r1, r1, #16
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	185b      	adds	r3, r3, r1
 8007b5e:	0c19      	lsrs	r1, r3, #16
 8007b60:	9103      	str	r1, [sp, #12]
 8007b62:	9902      	ldr	r1, [sp, #8]
 8007b64:	3004      	adds	r0, #4
 8007b66:	42b1      	cmp	r1, r6
 8007b68:	d8e5      	bhi.n	8007b36 <__multiply+0x106>
 8007b6a:	9905      	ldr	r1, [sp, #20]
 8007b6c:	5053      	str	r3, [r2, r1]
 8007b6e:	3504      	adds	r5, #4
 8007b70:	3204      	adds	r2, #4
 8007b72:	e7a0      	b.n	8007ab6 <__multiply+0x86>
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	e79f      	b.n	8007abc <__multiply+0x8c>
 8007b7c:	08008c40 	.word	0x08008c40
 8007b80:	08008c51 	.word	0x08008c51

08007b84 <__pow5mult>:
 8007b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b86:	2303      	movs	r3, #3
 8007b88:	0015      	movs	r5, r2
 8007b8a:	0007      	movs	r7, r0
 8007b8c:	000e      	movs	r6, r1
 8007b8e:	401a      	ands	r2, r3
 8007b90:	421d      	tst	r5, r3
 8007b92:	d008      	beq.n	8007ba6 <__pow5mult+0x22>
 8007b94:	4925      	ldr	r1, [pc, #148]	@ (8007c2c <__pow5mult+0xa8>)
 8007b96:	3a01      	subs	r2, #1
 8007b98:	0092      	lsls	r2, r2, #2
 8007b9a:	5852      	ldr	r2, [r2, r1]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	0031      	movs	r1, r6
 8007ba0:	f7ff fe9a 	bl	80078d8 <__multadd>
 8007ba4:	0006      	movs	r6, r0
 8007ba6:	10ad      	asrs	r5, r5, #2
 8007ba8:	d03d      	beq.n	8007c26 <__pow5mult+0xa2>
 8007baa:	69fc      	ldr	r4, [r7, #28]
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	d10f      	bne.n	8007bd0 <__pow5mult+0x4c>
 8007bb0:	2010      	movs	r0, #16
 8007bb2:	f7ff fd6d 	bl	8007690 <malloc>
 8007bb6:	1e02      	subs	r2, r0, #0
 8007bb8:	61f8      	str	r0, [r7, #28]
 8007bba:	d105      	bne.n	8007bc8 <__pow5mult+0x44>
 8007bbc:	21b4      	movs	r1, #180	@ 0xb4
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007c30 <__pow5mult+0xac>)
 8007bc0:	481c      	ldr	r0, [pc, #112]	@ (8007c34 <__pow5mult+0xb0>)
 8007bc2:	31ff      	adds	r1, #255	@ 0xff
 8007bc4:	f000 fbfa 	bl	80083bc <__assert_func>
 8007bc8:	6044      	str	r4, [r0, #4]
 8007bca:	6084      	str	r4, [r0, #8]
 8007bcc:	6004      	str	r4, [r0, #0]
 8007bce:	60c4      	str	r4, [r0, #12]
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	689c      	ldr	r4, [r3, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	d108      	bne.n	8007bec <__pow5mult+0x68>
 8007bda:	0038      	movs	r0, r7
 8007bdc:	4916      	ldr	r1, [pc, #88]	@ (8007c38 <__pow5mult+0xb4>)
 8007bde:	f7ff ff0f 	bl	8007a00 <__i2b>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	0004      	movs	r4, r0
 8007be6:	6098      	str	r0, [r3, #8]
 8007be8:	2300      	movs	r3, #0
 8007bea:	6003      	str	r3, [r0, #0]
 8007bec:	2301      	movs	r3, #1
 8007bee:	421d      	tst	r5, r3
 8007bf0:	d00a      	beq.n	8007c08 <__pow5mult+0x84>
 8007bf2:	0031      	movs	r1, r6
 8007bf4:	0022      	movs	r2, r4
 8007bf6:	0038      	movs	r0, r7
 8007bf8:	f7ff ff1a 	bl	8007a30 <__multiply>
 8007bfc:	0031      	movs	r1, r6
 8007bfe:	9001      	str	r0, [sp, #4]
 8007c00:	0038      	movs	r0, r7
 8007c02:	f7ff fe45 	bl	8007890 <_Bfree>
 8007c06:	9e01      	ldr	r6, [sp, #4]
 8007c08:	106d      	asrs	r5, r5, #1
 8007c0a:	d00c      	beq.n	8007c26 <__pow5mult+0xa2>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d107      	bne.n	8007c22 <__pow5mult+0x9e>
 8007c12:	0022      	movs	r2, r4
 8007c14:	0021      	movs	r1, r4
 8007c16:	0038      	movs	r0, r7
 8007c18:	f7ff ff0a 	bl	8007a30 <__multiply>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	6003      	str	r3, [r0, #0]
 8007c22:	0004      	movs	r4, r0
 8007c24:	e7e2      	b.n	8007bec <__pow5mult+0x68>
 8007c26:	0030      	movs	r0, r6
 8007c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	08008d04 	.word	0x08008d04
 8007c30:	08008bd1 	.word	0x08008bd1
 8007c34:	08008c51 	.word	0x08008c51
 8007c38:	00000271 	.word	0x00000271

08007c3c <__lshift>:
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3e:	000c      	movs	r4, r1
 8007c40:	0016      	movs	r6, r2
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	1157      	asrs	r7, r2, #5
 8007c46:	b085      	sub	sp, #20
 8007c48:	18fb      	adds	r3, r7, r3
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	6849      	ldr	r1, [r1, #4]
 8007c52:	68a3      	ldr	r3, [r4, #8]
 8007c54:	9002      	str	r0, [sp, #8]
 8007c56:	9a00      	ldr	r2, [sp, #0]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	db10      	blt.n	8007c7e <__lshift+0x42>
 8007c5c:	9802      	ldr	r0, [sp, #8]
 8007c5e:	f7ff fdd3 	bl	8007808 <_Balloc>
 8007c62:	2300      	movs	r3, #0
 8007c64:	0001      	movs	r1, r0
 8007c66:	0005      	movs	r5, r0
 8007c68:	001a      	movs	r2, r3
 8007c6a:	3114      	adds	r1, #20
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	d10c      	bne.n	8007c8a <__lshift+0x4e>
 8007c70:	21ef      	movs	r1, #239	@ 0xef
 8007c72:	002a      	movs	r2, r5
 8007c74:	4b25      	ldr	r3, [pc, #148]	@ (8007d0c <__lshift+0xd0>)
 8007c76:	4826      	ldr	r0, [pc, #152]	@ (8007d10 <__lshift+0xd4>)
 8007c78:	0049      	lsls	r1, r1, #1
 8007c7a:	f000 fb9f 	bl	80083bc <__assert_func>
 8007c7e:	3101      	adds	r1, #1
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	e7e8      	b.n	8007c56 <__lshift+0x1a>
 8007c84:	0098      	lsls	r0, r3, #2
 8007c86:	500a      	str	r2, [r1, r0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	dbfa      	blt.n	8007c84 <__lshift+0x48>
 8007c8e:	43fb      	mvns	r3, r7
 8007c90:	17db      	asrs	r3, r3, #31
 8007c92:	401f      	ands	r7, r3
 8007c94:	00bf      	lsls	r7, r7, #2
 8007c96:	0023      	movs	r3, r4
 8007c98:	201f      	movs	r0, #31
 8007c9a:	19c9      	adds	r1, r1, r7
 8007c9c:	0037      	movs	r7, r6
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	0092      	lsls	r2, r2, #2
 8007ca4:	189a      	adds	r2, r3, r2
 8007ca6:	4007      	ands	r7, r0
 8007ca8:	4206      	tst	r6, r0
 8007caa:	d029      	beq.n	8007d00 <__lshift+0xc4>
 8007cac:	3001      	adds	r0, #1
 8007cae:	1bc0      	subs	r0, r0, r7
 8007cb0:	9003      	str	r0, [sp, #12]
 8007cb2:	468c      	mov	ip, r1
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	681e      	ldr	r6, [r3, #0]
 8007cb8:	40be      	lsls	r6, r7
 8007cba:	4306      	orrs	r6, r0
 8007cbc:	4660      	mov	r0, ip
 8007cbe:	c040      	stmia	r0!, {r6}
 8007cc0:	4684      	mov	ip, r0
 8007cc2:	9e03      	ldr	r6, [sp, #12]
 8007cc4:	cb01      	ldmia	r3!, {r0}
 8007cc6:	40f0      	lsrs	r0, r6
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d8f4      	bhi.n	8007cb6 <__lshift+0x7a>
 8007ccc:	0026      	movs	r6, r4
 8007cce:	3615      	adds	r6, #21
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	42b2      	cmp	r2, r6
 8007cd4:	d304      	bcc.n	8007ce0 <__lshift+0xa4>
 8007cd6:	1b13      	subs	r3, r2, r4
 8007cd8:	3b15      	subs	r3, #21
 8007cda:	089b      	lsrs	r3, r3, #2
 8007cdc:	3301      	adds	r3, #1
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	50c8      	str	r0, [r1, r3]
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d002      	beq.n	8007cec <__lshift+0xb0>
 8007ce6:	9b01      	ldr	r3, [sp, #4]
 8007ce8:	3302      	adds	r3, #2
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	9b00      	ldr	r3, [sp, #0]
 8007cee:	9802      	ldr	r0, [sp, #8]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	0021      	movs	r1, r4
 8007cf4:	612b      	str	r3, [r5, #16]
 8007cf6:	f7ff fdcb 	bl	8007890 <_Bfree>
 8007cfa:	0028      	movs	r0, r5
 8007cfc:	b005      	add	sp, #20
 8007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d00:	cb01      	ldmia	r3!, {r0}
 8007d02:	c101      	stmia	r1!, {r0}
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d8fb      	bhi.n	8007d00 <__lshift+0xc4>
 8007d08:	e7f0      	b.n	8007cec <__lshift+0xb0>
 8007d0a:	46c0      	nop			@ (mov r8, r8)
 8007d0c:	08008c40 	.word	0x08008c40
 8007d10:	08008c51 	.word	0x08008c51

08007d14 <__mcmp>:
 8007d14:	b530      	push	{r4, r5, lr}
 8007d16:	690b      	ldr	r3, [r1, #16]
 8007d18:	6904      	ldr	r4, [r0, #16]
 8007d1a:	0002      	movs	r2, r0
 8007d1c:	1ae0      	subs	r0, r4, r3
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d10f      	bne.n	8007d42 <__mcmp+0x2e>
 8007d22:	3214      	adds	r2, #20
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	3114      	adds	r1, #20
 8007d28:	0014      	movs	r4, r2
 8007d2a:	18c9      	adds	r1, r1, r3
 8007d2c:	18d2      	adds	r2, r2, r3
 8007d2e:	3a04      	subs	r2, #4
 8007d30:	3904      	subs	r1, #4
 8007d32:	6815      	ldr	r5, [r2, #0]
 8007d34:	680b      	ldr	r3, [r1, #0]
 8007d36:	429d      	cmp	r5, r3
 8007d38:	d004      	beq.n	8007d44 <__mcmp+0x30>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	429d      	cmp	r5, r3
 8007d3e:	d200      	bcs.n	8007d42 <__mcmp+0x2e>
 8007d40:	3802      	subs	r0, #2
 8007d42:	bd30      	pop	{r4, r5, pc}
 8007d44:	4294      	cmp	r4, r2
 8007d46:	d3f2      	bcc.n	8007d2e <__mcmp+0x1a>
 8007d48:	e7fb      	b.n	8007d42 <__mcmp+0x2e>
	...

08007d4c <__mdiff>:
 8007d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4e:	000c      	movs	r4, r1
 8007d50:	b087      	sub	sp, #28
 8007d52:	9000      	str	r0, [sp, #0]
 8007d54:	0011      	movs	r1, r2
 8007d56:	0020      	movs	r0, r4
 8007d58:	0017      	movs	r7, r2
 8007d5a:	f7ff ffdb 	bl	8007d14 <__mcmp>
 8007d5e:	1e05      	subs	r5, r0, #0
 8007d60:	d110      	bne.n	8007d84 <__mdiff+0x38>
 8007d62:	0001      	movs	r1, r0
 8007d64:	9800      	ldr	r0, [sp, #0]
 8007d66:	f7ff fd4f 	bl	8007808 <_Balloc>
 8007d6a:	1e02      	subs	r2, r0, #0
 8007d6c:	d104      	bne.n	8007d78 <__mdiff+0x2c>
 8007d6e:	4b40      	ldr	r3, [pc, #256]	@ (8007e70 <__mdiff+0x124>)
 8007d70:	4840      	ldr	r0, [pc, #256]	@ (8007e74 <__mdiff+0x128>)
 8007d72:	4941      	ldr	r1, [pc, #260]	@ (8007e78 <__mdiff+0x12c>)
 8007d74:	f000 fb22 	bl	80083bc <__assert_func>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	6145      	str	r5, [r0, #20]
 8007d7c:	6103      	str	r3, [r0, #16]
 8007d7e:	0010      	movs	r0, r2
 8007d80:	b007      	add	sp, #28
 8007d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d84:	2600      	movs	r6, #0
 8007d86:	42b0      	cmp	r0, r6
 8007d88:	da03      	bge.n	8007d92 <__mdiff+0x46>
 8007d8a:	0023      	movs	r3, r4
 8007d8c:	003c      	movs	r4, r7
 8007d8e:	001f      	movs	r7, r3
 8007d90:	3601      	adds	r6, #1
 8007d92:	6861      	ldr	r1, [r4, #4]
 8007d94:	9800      	ldr	r0, [sp, #0]
 8007d96:	f7ff fd37 	bl	8007808 <_Balloc>
 8007d9a:	1e02      	subs	r2, r0, #0
 8007d9c:	d103      	bne.n	8007da6 <__mdiff+0x5a>
 8007d9e:	4b34      	ldr	r3, [pc, #208]	@ (8007e70 <__mdiff+0x124>)
 8007da0:	4834      	ldr	r0, [pc, #208]	@ (8007e74 <__mdiff+0x128>)
 8007da2:	4936      	ldr	r1, [pc, #216]	@ (8007e7c <__mdiff+0x130>)
 8007da4:	e7e6      	b.n	8007d74 <__mdiff+0x28>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	3414      	adds	r4, #20
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	18e3      	adds	r3, r4, r3
 8007db0:	0021      	movs	r1, r4
 8007db2:	9401      	str	r4, [sp, #4]
 8007db4:	003c      	movs	r4, r7
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3414      	adds	r4, #20
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	18e3      	adds	r3, r4, r3
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	60c6      	str	r6, [r0, #12]
 8007dc6:	468c      	mov	ip, r1
 8007dc8:	2000      	movs	r0, #0
 8007dca:	3314      	adds	r3, #20
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	4663      	mov	r3, ip
 8007dd2:	cb20      	ldmia	r3!, {r5}
 8007dd4:	b2a9      	uxth	r1, r5
 8007dd6:	000e      	movs	r6, r1
 8007dd8:	469c      	mov	ip, r3
 8007dda:	cc08      	ldmia	r4!, {r3}
 8007ddc:	0c2d      	lsrs	r5, r5, #16
 8007dde:	b299      	uxth	r1, r3
 8007de0:	1a71      	subs	r1, r6, r1
 8007de2:	1809      	adds	r1, r1, r0
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	1408      	asrs	r0, r1, #16
 8007de8:	1aeb      	subs	r3, r5, r3
 8007dea:	181b      	adds	r3, r3, r0
 8007dec:	1418      	asrs	r0, r3, #16
 8007dee:	b289      	uxth	r1, r1
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	4319      	orrs	r1, r3
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	c302      	stmia	r3!, {r1}
 8007df8:	9305      	str	r3, [sp, #20]
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d8e7      	bhi.n	8007dd0 <__mdiff+0x84>
 8007e00:	0039      	movs	r1, r7
 8007e02:	9c03      	ldr	r4, [sp, #12]
 8007e04:	3115      	adds	r1, #21
 8007e06:	2304      	movs	r3, #4
 8007e08:	428c      	cmp	r4, r1
 8007e0a:	d304      	bcc.n	8007e16 <__mdiff+0xca>
 8007e0c:	1be3      	subs	r3, r4, r7
 8007e0e:	3b15      	subs	r3, #21
 8007e10:	089b      	lsrs	r3, r3, #2
 8007e12:	3301      	adds	r3, #1
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	9901      	ldr	r1, [sp, #4]
 8007e18:	18cd      	adds	r5, r1, r3
 8007e1a:	9904      	ldr	r1, [sp, #16]
 8007e1c:	002e      	movs	r6, r5
 8007e1e:	18cb      	adds	r3, r1, r3
 8007e20:	001f      	movs	r7, r3
 8007e22:	9902      	ldr	r1, [sp, #8]
 8007e24:	428e      	cmp	r6, r1
 8007e26:	d311      	bcc.n	8007e4c <__mdiff+0x100>
 8007e28:	9c02      	ldr	r4, [sp, #8]
 8007e2a:	1ee9      	subs	r1, r5, #3
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	428c      	cmp	r4, r1
 8007e30:	d304      	bcc.n	8007e3c <__mdiff+0xf0>
 8007e32:	0021      	movs	r1, r4
 8007e34:	3103      	adds	r1, #3
 8007e36:	1b49      	subs	r1, r1, r5
 8007e38:	0889      	lsrs	r1, r1, #2
 8007e3a:	0088      	lsls	r0, r1, #2
 8007e3c:	181b      	adds	r3, r3, r0
 8007e3e:	3b04      	subs	r3, #4
 8007e40:	6819      	ldr	r1, [r3, #0]
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d010      	beq.n	8007e68 <__mdiff+0x11c>
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	6113      	str	r3, [r2, #16]
 8007e4a:	e798      	b.n	8007d7e <__mdiff+0x32>
 8007e4c:	4684      	mov	ip, r0
 8007e4e:	ce02      	ldmia	r6!, {r1}
 8007e50:	b288      	uxth	r0, r1
 8007e52:	4460      	add	r0, ip
 8007e54:	1400      	asrs	r0, r0, #16
 8007e56:	0c0c      	lsrs	r4, r1, #16
 8007e58:	1904      	adds	r4, r0, r4
 8007e5a:	4461      	add	r1, ip
 8007e5c:	1420      	asrs	r0, r4, #16
 8007e5e:	b289      	uxth	r1, r1
 8007e60:	0424      	lsls	r4, r4, #16
 8007e62:	4321      	orrs	r1, r4
 8007e64:	c702      	stmia	r7!, {r1}
 8007e66:	e7dc      	b.n	8007e22 <__mdiff+0xd6>
 8007e68:	9900      	ldr	r1, [sp, #0]
 8007e6a:	3901      	subs	r1, #1
 8007e6c:	9100      	str	r1, [sp, #0]
 8007e6e:	e7e6      	b.n	8007e3e <__mdiff+0xf2>
 8007e70:	08008c40 	.word	0x08008c40
 8007e74:	08008c51 	.word	0x08008c51
 8007e78:	00000237 	.word	0x00000237
 8007e7c:	00000245 	.word	0x00000245

08007e80 <__d2b>:
 8007e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e82:	2101      	movs	r1, #1
 8007e84:	0016      	movs	r6, r2
 8007e86:	001f      	movs	r7, r3
 8007e88:	f7ff fcbe 	bl	8007808 <_Balloc>
 8007e8c:	1e04      	subs	r4, r0, #0
 8007e8e:	d105      	bne.n	8007e9c <__d2b+0x1c>
 8007e90:	0022      	movs	r2, r4
 8007e92:	4b25      	ldr	r3, [pc, #148]	@ (8007f28 <__d2b+0xa8>)
 8007e94:	4825      	ldr	r0, [pc, #148]	@ (8007f2c <__d2b+0xac>)
 8007e96:	4926      	ldr	r1, [pc, #152]	@ (8007f30 <__d2b+0xb0>)
 8007e98:	f000 fa90 	bl	80083bc <__assert_func>
 8007e9c:	033b      	lsls	r3, r7, #12
 8007e9e:	007d      	lsls	r5, r7, #1
 8007ea0:	0b1b      	lsrs	r3, r3, #12
 8007ea2:	0d6d      	lsrs	r5, r5, #21
 8007ea4:	d002      	beq.n	8007eac <__d2b+0x2c>
 8007ea6:	2280      	movs	r2, #128	@ 0x80
 8007ea8:	0352      	lsls	r2, r2, #13
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d025      	beq.n	8007efe <__d2b+0x7e>
 8007eb2:	4668      	mov	r0, sp
 8007eb4:	9600      	str	r6, [sp, #0]
 8007eb6:	f7ff fd74 	bl	80079a2 <__lo0bits>
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	9900      	ldr	r1, [sp, #0]
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d01b      	beq.n	8007efa <__d2b+0x7a>
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	001e      	movs	r6, r3
 8007ec6:	1a12      	subs	r2, r2, r0
 8007ec8:	4096      	lsls	r6, r2
 8007eca:	0032      	movs	r2, r6
 8007ecc:	40c3      	lsrs	r3, r0
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	6162      	str	r2, [r4, #20]
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	9e01      	ldr	r6, [sp, #4]
 8007ed6:	61a6      	str	r6, [r4, #24]
 8007ed8:	1e73      	subs	r3, r6, #1
 8007eda:	419e      	sbcs	r6, r3
 8007edc:	3601      	adds	r6, #1
 8007ede:	6126      	str	r6, [r4, #16]
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	d014      	beq.n	8007f0e <__d2b+0x8e>
 8007ee4:	2635      	movs	r6, #53	@ 0x35
 8007ee6:	4b13      	ldr	r3, [pc, #76]	@ (8007f34 <__d2b+0xb4>)
 8007ee8:	18ed      	adds	r5, r5, r3
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	182d      	adds	r5, r5, r0
 8007eee:	601d      	str	r5, [r3, #0]
 8007ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef2:	1a36      	subs	r6, r6, r0
 8007ef4:	601e      	str	r6, [r3, #0]
 8007ef6:	0020      	movs	r0, r4
 8007ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007efa:	6161      	str	r1, [r4, #20]
 8007efc:	e7ea      	b.n	8007ed4 <__d2b+0x54>
 8007efe:	a801      	add	r0, sp, #4
 8007f00:	f7ff fd4f 	bl	80079a2 <__lo0bits>
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	2601      	movs	r6, #1
 8007f08:	6163      	str	r3, [r4, #20]
 8007f0a:	3020      	adds	r0, #32
 8007f0c:	e7e7      	b.n	8007ede <__d2b+0x5e>
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <__d2b+0xb8>)
 8007f10:	18c0      	adds	r0, r0, r3
 8007f12:	9b08      	ldr	r3, [sp, #32]
 8007f14:	6018      	str	r0, [r3, #0]
 8007f16:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <__d2b+0xbc>)
 8007f18:	18f3      	adds	r3, r6, r3
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	18e3      	adds	r3, r4, r3
 8007f1e:	6958      	ldr	r0, [r3, #20]
 8007f20:	f7ff fd1e 	bl	8007960 <__hi0bits>
 8007f24:	0176      	lsls	r6, r6, #5
 8007f26:	e7e3      	b.n	8007ef0 <__d2b+0x70>
 8007f28:	08008c40 	.word	0x08008c40
 8007f2c:	08008c51 	.word	0x08008c51
 8007f30:	0000030f 	.word	0x0000030f
 8007f34:	fffffbcd 	.word	0xfffffbcd
 8007f38:	fffffbce 	.word	0xfffffbce
 8007f3c:	3fffffff 	.word	0x3fffffff

08007f40 <__ssputs_r>:
 8007f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f42:	688e      	ldr	r6, [r1, #8]
 8007f44:	b085      	sub	sp, #20
 8007f46:	001f      	movs	r7, r3
 8007f48:	000c      	movs	r4, r1
 8007f4a:	680b      	ldr	r3, [r1, #0]
 8007f4c:	9002      	str	r0, [sp, #8]
 8007f4e:	9203      	str	r2, [sp, #12]
 8007f50:	42be      	cmp	r6, r7
 8007f52:	d830      	bhi.n	8007fb6 <__ssputs_r+0x76>
 8007f54:	210c      	movs	r1, #12
 8007f56:	5e62      	ldrsh	r2, [r4, r1]
 8007f58:	2190      	movs	r1, #144	@ 0x90
 8007f5a:	00c9      	lsls	r1, r1, #3
 8007f5c:	420a      	tst	r2, r1
 8007f5e:	d028      	beq.n	8007fb2 <__ssputs_r+0x72>
 8007f60:	2003      	movs	r0, #3
 8007f62:	6921      	ldr	r1, [r4, #16]
 8007f64:	1a5b      	subs	r3, r3, r1
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	6963      	ldr	r3, [r4, #20]
 8007f6a:	4343      	muls	r3, r0
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	0fdd      	lsrs	r5, r3, #31
 8007f70:	18ed      	adds	r5, r5, r3
 8007f72:	1c7b      	adds	r3, r7, #1
 8007f74:	181b      	adds	r3, r3, r0
 8007f76:	106d      	asrs	r5, r5, #1
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	d900      	bls.n	8007f7e <__ssputs_r+0x3e>
 8007f7c:	001d      	movs	r5, r3
 8007f7e:	0552      	lsls	r2, r2, #21
 8007f80:	d528      	bpl.n	8007fd4 <__ssputs_r+0x94>
 8007f82:	0029      	movs	r1, r5
 8007f84:	9802      	ldr	r0, [sp, #8]
 8007f86:	f7ff fbaf 	bl	80076e8 <_malloc_r>
 8007f8a:	1e06      	subs	r6, r0, #0
 8007f8c:	d02c      	beq.n	8007fe8 <__ssputs_r+0xa8>
 8007f8e:	9a01      	ldr	r2, [sp, #4]
 8007f90:	6921      	ldr	r1, [r4, #16]
 8007f92:	f000 fa09 	bl	80083a8 <memcpy>
 8007f96:	89a2      	ldrh	r2, [r4, #12]
 8007f98:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <__ssputs_r+0xbc>)
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	2380      	movs	r3, #128	@ 0x80
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	81a3      	strh	r3, [r4, #12]
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	6126      	str	r6, [r4, #16]
 8007fa6:	18f6      	adds	r6, r6, r3
 8007fa8:	6026      	str	r6, [r4, #0]
 8007faa:	003e      	movs	r6, r7
 8007fac:	6165      	str	r5, [r4, #20]
 8007fae:	1aed      	subs	r5, r5, r3
 8007fb0:	60a5      	str	r5, [r4, #8]
 8007fb2:	42be      	cmp	r6, r7
 8007fb4:	d900      	bls.n	8007fb8 <__ssputs_r+0x78>
 8007fb6:	003e      	movs	r6, r7
 8007fb8:	0032      	movs	r2, r6
 8007fba:	9903      	ldr	r1, [sp, #12]
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	f000 f9ce 	bl	800835e <memmove>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	1b9b      	subs	r3, r3, r6
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	199b      	adds	r3, r3, r6
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	b005      	add	sp, #20
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	002a      	movs	r2, r5
 8007fd6:	9802      	ldr	r0, [sp, #8]
 8007fd8:	f000 fa4d 	bl	8008476 <_realloc_r>
 8007fdc:	1e06      	subs	r6, r0, #0
 8007fde:	d1e0      	bne.n	8007fa2 <__ssputs_r+0x62>
 8007fe0:	6921      	ldr	r1, [r4, #16]
 8007fe2:	9802      	ldr	r0, [sp, #8]
 8007fe4:	f7ff fb0a 	bl	80075fc <_free_r>
 8007fe8:	230c      	movs	r3, #12
 8007fea:	2001      	movs	r0, #1
 8007fec:	9a02      	ldr	r2, [sp, #8]
 8007fee:	4240      	negs	r0, r0
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	89a2      	ldrh	r2, [r4, #12]
 8007ff4:	3334      	adds	r3, #52	@ 0x34
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	e7e9      	b.n	8007fd0 <__ssputs_r+0x90>
 8007ffc:	fffffb7f 	.word	0xfffffb7f

08008000 <_svfiprintf_r>:
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008002:	b0a1      	sub	sp, #132	@ 0x84
 8008004:	9003      	str	r0, [sp, #12]
 8008006:	001d      	movs	r5, r3
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	000f      	movs	r7, r1
 800800c:	0016      	movs	r6, r2
 800800e:	061b      	lsls	r3, r3, #24
 8008010:	d511      	bpl.n	8008036 <_svfiprintf_r+0x36>
 8008012:	690b      	ldr	r3, [r1, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10e      	bne.n	8008036 <_svfiprintf_r+0x36>
 8008018:	2140      	movs	r1, #64	@ 0x40
 800801a:	f7ff fb65 	bl	80076e8 <_malloc_r>
 800801e:	6038      	str	r0, [r7, #0]
 8008020:	6138      	str	r0, [r7, #16]
 8008022:	2800      	cmp	r0, #0
 8008024:	d105      	bne.n	8008032 <_svfiprintf_r+0x32>
 8008026:	230c      	movs	r3, #12
 8008028:	9a03      	ldr	r2, [sp, #12]
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	2001      	movs	r0, #1
 800802e:	4240      	negs	r0, r0
 8008030:	e0cf      	b.n	80081d2 <_svfiprintf_r+0x1d2>
 8008032:	2340      	movs	r3, #64	@ 0x40
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	2300      	movs	r3, #0
 8008038:	ac08      	add	r4, sp, #32
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	3320      	adds	r3, #32
 800803e:	7663      	strb	r3, [r4, #25]
 8008040:	3310      	adds	r3, #16
 8008042:	76a3      	strb	r3, [r4, #26]
 8008044:	9507      	str	r5, [sp, #28]
 8008046:	0035      	movs	r5, r6
 8008048:	782b      	ldrb	r3, [r5, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <_svfiprintf_r+0x52>
 800804e:	2b25      	cmp	r3, #37	@ 0x25
 8008050:	d148      	bne.n	80080e4 <_svfiprintf_r+0xe4>
 8008052:	1bab      	subs	r3, r5, r6
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	42b5      	cmp	r5, r6
 8008058:	d00b      	beq.n	8008072 <_svfiprintf_r+0x72>
 800805a:	0032      	movs	r2, r6
 800805c:	0039      	movs	r1, r7
 800805e:	9803      	ldr	r0, [sp, #12]
 8008060:	f7ff ff6e 	bl	8007f40 <__ssputs_r>
 8008064:	3001      	adds	r0, #1
 8008066:	d100      	bne.n	800806a <_svfiprintf_r+0x6a>
 8008068:	e0ae      	b.n	80081c8 <_svfiprintf_r+0x1c8>
 800806a:	6963      	ldr	r3, [r4, #20]
 800806c:	9a05      	ldr	r2, [sp, #20]
 800806e:	189b      	adds	r3, r3, r2
 8008070:	6163      	str	r3, [r4, #20]
 8008072:	782b      	ldrb	r3, [r5, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d100      	bne.n	800807a <_svfiprintf_r+0x7a>
 8008078:	e0a6      	b.n	80081c8 <_svfiprintf_r+0x1c8>
 800807a:	2201      	movs	r2, #1
 800807c:	2300      	movs	r3, #0
 800807e:	4252      	negs	r2, r2
 8008080:	6062      	str	r2, [r4, #4]
 8008082:	a904      	add	r1, sp, #16
 8008084:	3254      	adds	r2, #84	@ 0x54
 8008086:	1852      	adds	r2, r2, r1
 8008088:	1c6e      	adds	r6, r5, #1
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	60e3      	str	r3, [r4, #12]
 800808e:	60a3      	str	r3, [r4, #8]
 8008090:	7013      	strb	r3, [r2, #0]
 8008092:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008094:	4b54      	ldr	r3, [pc, #336]	@ (80081e8 <_svfiprintf_r+0x1e8>)
 8008096:	2205      	movs	r2, #5
 8008098:	0018      	movs	r0, r3
 800809a:	7831      	ldrb	r1, [r6, #0]
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	f7fe fc2c 	bl	80068fa <memchr>
 80080a2:	1c75      	adds	r5, r6, #1
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d11f      	bne.n	80080e8 <_svfiprintf_r+0xe8>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	06d3      	lsls	r3, r2, #27
 80080ac:	d504      	bpl.n	80080b8 <_svfiprintf_r+0xb8>
 80080ae:	2353      	movs	r3, #83	@ 0x53
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	185b      	adds	r3, r3, r1
 80080b4:	2120      	movs	r1, #32
 80080b6:	7019      	strb	r1, [r3, #0]
 80080b8:	0713      	lsls	r3, r2, #28
 80080ba:	d504      	bpl.n	80080c6 <_svfiprintf_r+0xc6>
 80080bc:	2353      	movs	r3, #83	@ 0x53
 80080be:	a904      	add	r1, sp, #16
 80080c0:	185b      	adds	r3, r3, r1
 80080c2:	212b      	movs	r1, #43	@ 0x2b
 80080c4:	7019      	strb	r1, [r3, #0]
 80080c6:	7833      	ldrb	r3, [r6, #0]
 80080c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ca:	d016      	beq.n	80080fa <_svfiprintf_r+0xfa>
 80080cc:	0035      	movs	r5, r6
 80080ce:	2100      	movs	r1, #0
 80080d0:	200a      	movs	r0, #10
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	782a      	ldrb	r2, [r5, #0]
 80080d6:	1c6e      	adds	r6, r5, #1
 80080d8:	3a30      	subs	r2, #48	@ 0x30
 80080da:	2a09      	cmp	r2, #9
 80080dc:	d950      	bls.n	8008180 <_svfiprintf_r+0x180>
 80080de:	2900      	cmp	r1, #0
 80080e0:	d111      	bne.n	8008106 <_svfiprintf_r+0x106>
 80080e2:	e017      	b.n	8008114 <_svfiprintf_r+0x114>
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7af      	b.n	8008048 <_svfiprintf_r+0x48>
 80080e8:	9b05      	ldr	r3, [sp, #20]
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	1ac0      	subs	r0, r0, r3
 80080ee:	2301      	movs	r3, #1
 80080f0:	4083      	lsls	r3, r0
 80080f2:	4313      	orrs	r3, r2
 80080f4:	002e      	movs	r6, r5
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	e7cc      	b.n	8008094 <_svfiprintf_r+0x94>
 80080fa:	9b07      	ldr	r3, [sp, #28]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	9107      	str	r1, [sp, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	db01      	blt.n	800810a <_svfiprintf_r+0x10a>
 8008106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008108:	e004      	b.n	8008114 <_svfiprintf_r+0x114>
 800810a:	425b      	negs	r3, r3
 800810c:	60e3      	str	r3, [r4, #12]
 800810e:	2302      	movs	r3, #2
 8008110:	4313      	orrs	r3, r2
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	782b      	ldrb	r3, [r5, #0]
 8008116:	2b2e      	cmp	r3, #46	@ 0x2e
 8008118:	d10c      	bne.n	8008134 <_svfiprintf_r+0x134>
 800811a:	786b      	ldrb	r3, [r5, #1]
 800811c:	2b2a      	cmp	r3, #42	@ 0x2a
 800811e:	d134      	bne.n	800818a <_svfiprintf_r+0x18a>
 8008120:	9b07      	ldr	r3, [sp, #28]
 8008122:	3502      	adds	r5, #2
 8008124:	1d1a      	adds	r2, r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	9207      	str	r2, [sp, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da01      	bge.n	8008132 <_svfiprintf_r+0x132>
 800812e:	2301      	movs	r3, #1
 8008130:	425b      	negs	r3, r3
 8008132:	9309      	str	r3, [sp, #36]	@ 0x24
 8008134:	4e2d      	ldr	r6, [pc, #180]	@ (80081ec <_svfiprintf_r+0x1ec>)
 8008136:	2203      	movs	r2, #3
 8008138:	0030      	movs	r0, r6
 800813a:	7829      	ldrb	r1, [r5, #0]
 800813c:	f7fe fbdd 	bl	80068fa <memchr>
 8008140:	2800      	cmp	r0, #0
 8008142:	d006      	beq.n	8008152 <_svfiprintf_r+0x152>
 8008144:	2340      	movs	r3, #64	@ 0x40
 8008146:	1b80      	subs	r0, r0, r6
 8008148:	4083      	lsls	r3, r0
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	3501      	adds	r5, #1
 800814e:	4313      	orrs	r3, r2
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	7829      	ldrb	r1, [r5, #0]
 8008154:	2206      	movs	r2, #6
 8008156:	4826      	ldr	r0, [pc, #152]	@ (80081f0 <_svfiprintf_r+0x1f0>)
 8008158:	1c6e      	adds	r6, r5, #1
 800815a:	7621      	strb	r1, [r4, #24]
 800815c:	f7fe fbcd 	bl	80068fa <memchr>
 8008160:	2800      	cmp	r0, #0
 8008162:	d038      	beq.n	80081d6 <_svfiprintf_r+0x1d6>
 8008164:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <_svfiprintf_r+0x1f4>)
 8008166:	2b00      	cmp	r3, #0
 8008168:	d122      	bne.n	80081b0 <_svfiprintf_r+0x1b0>
 800816a:	2207      	movs	r2, #7
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	3307      	adds	r3, #7
 8008170:	4393      	bics	r3, r2
 8008172:	3308      	adds	r3, #8
 8008174:	9307      	str	r3, [sp, #28]
 8008176:	6963      	ldr	r3, [r4, #20]
 8008178:	9a04      	ldr	r2, [sp, #16]
 800817a:	189b      	adds	r3, r3, r2
 800817c:	6163      	str	r3, [r4, #20]
 800817e:	e762      	b.n	8008046 <_svfiprintf_r+0x46>
 8008180:	4343      	muls	r3, r0
 8008182:	0035      	movs	r5, r6
 8008184:	2101      	movs	r1, #1
 8008186:	189b      	adds	r3, r3, r2
 8008188:	e7a4      	b.n	80080d4 <_svfiprintf_r+0xd4>
 800818a:	2300      	movs	r3, #0
 800818c:	200a      	movs	r0, #10
 800818e:	0019      	movs	r1, r3
 8008190:	3501      	adds	r5, #1
 8008192:	6063      	str	r3, [r4, #4]
 8008194:	782a      	ldrb	r2, [r5, #0]
 8008196:	1c6e      	adds	r6, r5, #1
 8008198:	3a30      	subs	r2, #48	@ 0x30
 800819a:	2a09      	cmp	r2, #9
 800819c:	d903      	bls.n	80081a6 <_svfiprintf_r+0x1a6>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0c8      	beq.n	8008134 <_svfiprintf_r+0x134>
 80081a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80081a4:	e7c6      	b.n	8008134 <_svfiprintf_r+0x134>
 80081a6:	4341      	muls	r1, r0
 80081a8:	0035      	movs	r5, r6
 80081aa:	2301      	movs	r3, #1
 80081ac:	1889      	adds	r1, r1, r2
 80081ae:	e7f1      	b.n	8008194 <_svfiprintf_r+0x194>
 80081b0:	aa07      	add	r2, sp, #28
 80081b2:	9200      	str	r2, [sp, #0]
 80081b4:	0021      	movs	r1, r4
 80081b6:	003a      	movs	r2, r7
 80081b8:	4b0f      	ldr	r3, [pc, #60]	@ (80081f8 <_svfiprintf_r+0x1f8>)
 80081ba:	9803      	ldr	r0, [sp, #12]
 80081bc:	f7fd fe16 	bl	8005dec <_printf_float>
 80081c0:	9004      	str	r0, [sp, #16]
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	3301      	adds	r3, #1
 80081c6:	d1d6      	bne.n	8008176 <_svfiprintf_r+0x176>
 80081c8:	89bb      	ldrh	r3, [r7, #12]
 80081ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80081cc:	065b      	lsls	r3, r3, #25
 80081ce:	d500      	bpl.n	80081d2 <_svfiprintf_r+0x1d2>
 80081d0:	e72c      	b.n	800802c <_svfiprintf_r+0x2c>
 80081d2:	b021      	add	sp, #132	@ 0x84
 80081d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d6:	aa07      	add	r2, sp, #28
 80081d8:	9200      	str	r2, [sp, #0]
 80081da:	0021      	movs	r1, r4
 80081dc:	003a      	movs	r2, r7
 80081de:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <_svfiprintf_r+0x1f8>)
 80081e0:	9803      	ldr	r0, [sp, #12]
 80081e2:	f7fe f8b1 	bl	8006348 <_printf_i>
 80081e6:	e7eb      	b.n	80081c0 <_svfiprintf_r+0x1c0>
 80081e8:	08008caa 	.word	0x08008caa
 80081ec:	08008cb0 	.word	0x08008cb0
 80081f0:	08008cb4 	.word	0x08008cb4
 80081f4:	08005ded 	.word	0x08005ded
 80081f8:	08007f41 	.word	0x08007f41

080081fc <__sflush_r>:
 80081fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081fe:	220c      	movs	r2, #12
 8008200:	5e8b      	ldrsh	r3, [r1, r2]
 8008202:	0005      	movs	r5, r0
 8008204:	000c      	movs	r4, r1
 8008206:	071a      	lsls	r2, r3, #28
 8008208:	d456      	bmi.n	80082b8 <__sflush_r+0xbc>
 800820a:	684a      	ldr	r2, [r1, #4]
 800820c:	2a00      	cmp	r2, #0
 800820e:	dc02      	bgt.n	8008216 <__sflush_r+0x1a>
 8008210:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008212:	2a00      	cmp	r2, #0
 8008214:	dd4e      	ble.n	80082b4 <__sflush_r+0xb8>
 8008216:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008218:	2f00      	cmp	r7, #0
 800821a:	d04b      	beq.n	80082b4 <__sflush_r+0xb8>
 800821c:	2200      	movs	r2, #0
 800821e:	2080      	movs	r0, #128	@ 0x80
 8008220:	682e      	ldr	r6, [r5, #0]
 8008222:	602a      	str	r2, [r5, #0]
 8008224:	001a      	movs	r2, r3
 8008226:	0140      	lsls	r0, r0, #5
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	4002      	ands	r2, r0
 800822c:	4203      	tst	r3, r0
 800822e:	d033      	beq.n	8008298 <__sflush_r+0x9c>
 8008230:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	075b      	lsls	r3, r3, #29
 8008236:	d506      	bpl.n	8008246 <__sflush_r+0x4a>
 8008238:	6863      	ldr	r3, [r4, #4]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <__sflush_r+0x4a>
 8008242:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	2300      	movs	r3, #0
 8008248:	0028      	movs	r0, r5
 800824a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800824c:	6a21      	ldr	r1, [r4, #32]
 800824e:	47b8      	blx	r7
 8008250:	89a2      	ldrh	r2, [r4, #12]
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d106      	bne.n	8008264 <__sflush_r+0x68>
 8008256:	6829      	ldr	r1, [r5, #0]
 8008258:	291d      	cmp	r1, #29
 800825a:	d846      	bhi.n	80082ea <__sflush_r+0xee>
 800825c:	4b29      	ldr	r3, [pc, #164]	@ (8008304 <__sflush_r+0x108>)
 800825e:	40cb      	lsrs	r3, r1
 8008260:	07db      	lsls	r3, r3, #31
 8008262:	d542      	bpl.n	80082ea <__sflush_r+0xee>
 8008264:	2300      	movs	r3, #0
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	04d2      	lsls	r2, r2, #19
 800826e:	d505      	bpl.n	800827c <__sflush_r+0x80>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <__sflush_r+0x7e>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d100      	bne.n	800827c <__sflush_r+0x80>
 800827a:	6560      	str	r0, [r4, #84]	@ 0x54
 800827c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800827e:	602e      	str	r6, [r5, #0]
 8008280:	2900      	cmp	r1, #0
 8008282:	d017      	beq.n	80082b4 <__sflush_r+0xb8>
 8008284:	0023      	movs	r3, r4
 8008286:	3344      	adds	r3, #68	@ 0x44
 8008288:	4299      	cmp	r1, r3
 800828a:	d002      	beq.n	8008292 <__sflush_r+0x96>
 800828c:	0028      	movs	r0, r5
 800828e:	f7ff f9b5 	bl	80075fc <_free_r>
 8008292:	2300      	movs	r3, #0
 8008294:	6363      	str	r3, [r4, #52]	@ 0x34
 8008296:	e00d      	b.n	80082b4 <__sflush_r+0xb8>
 8008298:	2301      	movs	r3, #1
 800829a:	0028      	movs	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	0002      	movs	r2, r0
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d1c6      	bne.n	8008232 <__sflush_r+0x36>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0c3      	beq.n	8008232 <__sflush_r+0x36>
 80082aa:	2b1d      	cmp	r3, #29
 80082ac:	d001      	beq.n	80082b2 <__sflush_r+0xb6>
 80082ae:	2b16      	cmp	r3, #22
 80082b0:	d11a      	bne.n	80082e8 <__sflush_r+0xec>
 80082b2:	602e      	str	r6, [r5, #0]
 80082b4:	2000      	movs	r0, #0
 80082b6:	e01e      	b.n	80082f6 <__sflush_r+0xfa>
 80082b8:	690e      	ldr	r6, [r1, #16]
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	d0fa      	beq.n	80082b4 <__sflush_r+0xb8>
 80082be:	680f      	ldr	r7, [r1, #0]
 80082c0:	600e      	str	r6, [r1, #0]
 80082c2:	1bba      	subs	r2, r7, r6
 80082c4:	9201      	str	r2, [sp, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	079b      	lsls	r3, r3, #30
 80082ca:	d100      	bne.n	80082ce <__sflush_r+0xd2>
 80082cc:	694a      	ldr	r2, [r1, #20]
 80082ce:	60a2      	str	r2, [r4, #8]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	ddee      	ble.n	80082b4 <__sflush_r+0xb8>
 80082d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082d8:	0032      	movs	r2, r6
 80082da:	001f      	movs	r7, r3
 80082dc:	0028      	movs	r0, r5
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	6a21      	ldr	r1, [r4, #32]
 80082e2:	47b8      	blx	r7
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dc07      	bgt.n	80082f8 <__sflush_r+0xfc>
 80082e8:	89a2      	ldrh	r2, [r4, #12]
 80082ea:	2340      	movs	r3, #64	@ 0x40
 80082ec:	2001      	movs	r0, #1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b21b      	sxth	r3, r3
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	4240      	negs	r0, r0
 80082f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	1836      	adds	r6, r6, r0
 80082fc:	1a1b      	subs	r3, r3, r0
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	e7e6      	b.n	80082d0 <__sflush_r+0xd4>
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	20400001 	.word	0x20400001

08008308 <_fflush_r>:
 8008308:	690b      	ldr	r3, [r1, #16]
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	0005      	movs	r5, r0
 800830e:	000c      	movs	r4, r1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <_fflush_r+0x12>
 8008314:	2500      	movs	r5, #0
 8008316:	0028      	movs	r0, r5
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	2800      	cmp	r0, #0
 800831c:	d004      	beq.n	8008328 <_fflush_r+0x20>
 800831e:	6a03      	ldr	r3, [r0, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <_fflush_r+0x20>
 8008324:	f7fe f9ac 	bl	8006680 <__sinit>
 8008328:	220c      	movs	r2, #12
 800832a:	5ea3      	ldrsh	r3, [r4, r2]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f1      	beq.n	8008314 <_fflush_r+0xc>
 8008330:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008332:	07d2      	lsls	r2, r2, #31
 8008334:	d404      	bmi.n	8008340 <_fflush_r+0x38>
 8008336:	059b      	lsls	r3, r3, #22
 8008338:	d402      	bmi.n	8008340 <_fflush_r+0x38>
 800833a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800833c:	f7fe fadb 	bl	80068f6 <__retarget_lock_acquire_recursive>
 8008340:	0028      	movs	r0, r5
 8008342:	0021      	movs	r1, r4
 8008344:	f7ff ff5a 	bl	80081fc <__sflush_r>
 8008348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800834a:	0005      	movs	r5, r0
 800834c:	07db      	lsls	r3, r3, #31
 800834e:	d4e2      	bmi.n	8008316 <_fflush_r+0xe>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	059b      	lsls	r3, r3, #22
 8008354:	d4df      	bmi.n	8008316 <_fflush_r+0xe>
 8008356:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008358:	f7fe face 	bl	80068f8 <__retarget_lock_release_recursive>
 800835c:	e7db      	b.n	8008316 <_fflush_r+0xe>

0800835e <memmove>:
 800835e:	b510      	push	{r4, lr}
 8008360:	4288      	cmp	r0, r1
 8008362:	d902      	bls.n	800836a <memmove+0xc>
 8008364:	188b      	adds	r3, r1, r2
 8008366:	4298      	cmp	r0, r3
 8008368:	d308      	bcc.n	800837c <memmove+0x1e>
 800836a:	2300      	movs	r3, #0
 800836c:	429a      	cmp	r2, r3
 800836e:	d007      	beq.n	8008380 <memmove+0x22>
 8008370:	5ccc      	ldrb	r4, [r1, r3]
 8008372:	54c4      	strb	r4, [r0, r3]
 8008374:	3301      	adds	r3, #1
 8008376:	e7f9      	b.n	800836c <memmove+0xe>
 8008378:	5c8b      	ldrb	r3, [r1, r2]
 800837a:	5483      	strb	r3, [r0, r2]
 800837c:	3a01      	subs	r2, #1
 800837e:	d2fb      	bcs.n	8008378 <memmove+0x1a>
 8008380:	bd10      	pop	{r4, pc}
	...

08008384 <_sbrk_r>:
 8008384:	2300      	movs	r3, #0
 8008386:	b570      	push	{r4, r5, r6, lr}
 8008388:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_sbrk_r+0x20>)
 800838a:	0004      	movs	r4, r0
 800838c:	0008      	movs	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7fa fe8c 	bl	80030ac <_sbrk>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d103      	bne.n	80083a0 <_sbrk_r+0x1c>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d000      	beq.n	80083a0 <_sbrk_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	46c0      	nop			@ (mov r8, r8)
 80083a4:	20000410 	.word	0x20000410

080083a8 <memcpy>:
 80083a8:	2300      	movs	r3, #0
 80083aa:	b510      	push	{r4, lr}
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d100      	bne.n	80083b2 <memcpy+0xa>
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	5ccc      	ldrb	r4, [r1, r3]
 80083b4:	54c4      	strb	r4, [r0, r3]
 80083b6:	3301      	adds	r3, #1
 80083b8:	e7f8      	b.n	80083ac <memcpy+0x4>
	...

080083bc <__assert_func>:
 80083bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083be:	0014      	movs	r4, r2
 80083c0:	001a      	movs	r2, r3
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <__assert_func+0x2c>)
 80083c4:	0005      	movs	r5, r0
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	000e      	movs	r6, r1
 80083ca:	68d8      	ldr	r0, [r3, #12]
 80083cc:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <__assert_func+0x30>)
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	d101      	bne.n	80083d6 <__assert_func+0x1a>
 80083d2:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <__assert_func+0x34>)
 80083d4:	001c      	movs	r4, r3
 80083d6:	4907      	ldr	r1, [pc, #28]	@ (80083f4 <__assert_func+0x38>)
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	9402      	str	r4, [sp, #8]
 80083dc:	002b      	movs	r3, r5
 80083de:	9600      	str	r6, [sp, #0]
 80083e0:	f000 f886 	bl	80084f0 <fiprintf>
 80083e4:	f000 f894 	bl	8008510 <abort>
 80083e8:	20000018 	.word	0x20000018
 80083ec:	08008cc5 	.word	0x08008cc5
 80083f0:	08008d00 	.word	0x08008d00
 80083f4:	08008cd2 	.word	0x08008cd2

080083f8 <_calloc_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	0c0b      	lsrs	r3, r1, #16
 80083fc:	0c15      	lsrs	r5, r2, #16
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d11e      	bne.n	8008440 <_calloc_r+0x48>
 8008402:	2d00      	cmp	r5, #0
 8008404:	d10c      	bne.n	8008420 <_calloc_r+0x28>
 8008406:	b289      	uxth	r1, r1
 8008408:	b294      	uxth	r4, r2
 800840a:	434c      	muls	r4, r1
 800840c:	0021      	movs	r1, r4
 800840e:	f7ff f96b 	bl	80076e8 <_malloc_r>
 8008412:	1e05      	subs	r5, r0, #0
 8008414:	d01b      	beq.n	800844e <_calloc_r+0x56>
 8008416:	0022      	movs	r2, r4
 8008418:	2100      	movs	r1, #0
 800841a:	f7fe f9e7 	bl	80067ec <memset>
 800841e:	e016      	b.n	800844e <_calloc_r+0x56>
 8008420:	1c2b      	adds	r3, r5, #0
 8008422:	1c0c      	adds	r4, r1, #0
 8008424:	b289      	uxth	r1, r1
 8008426:	b292      	uxth	r2, r2
 8008428:	434a      	muls	r2, r1
 800842a:	b29b      	uxth	r3, r3
 800842c:	b2a1      	uxth	r1, r4
 800842e:	4359      	muls	r1, r3
 8008430:	0c14      	lsrs	r4, r2, #16
 8008432:	190c      	adds	r4, r1, r4
 8008434:	0c23      	lsrs	r3, r4, #16
 8008436:	d107      	bne.n	8008448 <_calloc_r+0x50>
 8008438:	0424      	lsls	r4, r4, #16
 800843a:	b292      	uxth	r2, r2
 800843c:	4314      	orrs	r4, r2
 800843e:	e7e5      	b.n	800840c <_calloc_r+0x14>
 8008440:	2d00      	cmp	r5, #0
 8008442:	d101      	bne.n	8008448 <_calloc_r+0x50>
 8008444:	1c14      	adds	r4, r2, #0
 8008446:	e7ed      	b.n	8008424 <_calloc_r+0x2c>
 8008448:	230c      	movs	r3, #12
 800844a:	2500      	movs	r5, #0
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	0028      	movs	r0, r5
 8008450:	bd70      	pop	{r4, r5, r6, pc}

08008452 <__ascii_mbtowc>:
 8008452:	b082      	sub	sp, #8
 8008454:	2900      	cmp	r1, #0
 8008456:	d100      	bne.n	800845a <__ascii_mbtowc+0x8>
 8008458:	a901      	add	r1, sp, #4
 800845a:	1e10      	subs	r0, r2, #0
 800845c:	d006      	beq.n	800846c <__ascii_mbtowc+0x1a>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d006      	beq.n	8008470 <__ascii_mbtowc+0x1e>
 8008462:	7813      	ldrb	r3, [r2, #0]
 8008464:	600b      	str	r3, [r1, #0]
 8008466:	7810      	ldrb	r0, [r2, #0]
 8008468:	1e43      	subs	r3, r0, #1
 800846a:	4198      	sbcs	r0, r3
 800846c:	b002      	add	sp, #8
 800846e:	4770      	bx	lr
 8008470:	2002      	movs	r0, #2
 8008472:	4240      	negs	r0, r0
 8008474:	e7fa      	b.n	800846c <__ascii_mbtowc+0x1a>

08008476 <_realloc_r>:
 8008476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008478:	0006      	movs	r6, r0
 800847a:	000c      	movs	r4, r1
 800847c:	0015      	movs	r5, r2
 800847e:	2900      	cmp	r1, #0
 8008480:	d105      	bne.n	800848e <_realloc_r+0x18>
 8008482:	0011      	movs	r1, r2
 8008484:	f7ff f930 	bl	80076e8 <_malloc_r>
 8008488:	0004      	movs	r4, r0
 800848a:	0020      	movs	r0, r4
 800848c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800848e:	2a00      	cmp	r2, #0
 8008490:	d103      	bne.n	800849a <_realloc_r+0x24>
 8008492:	f7ff f8b3 	bl	80075fc <_free_r>
 8008496:	002c      	movs	r4, r5
 8008498:	e7f7      	b.n	800848a <_realloc_r+0x14>
 800849a:	f000 f840 	bl	800851e <_malloc_usable_size_r>
 800849e:	0007      	movs	r7, r0
 80084a0:	4285      	cmp	r5, r0
 80084a2:	d802      	bhi.n	80084aa <_realloc_r+0x34>
 80084a4:	0843      	lsrs	r3, r0, #1
 80084a6:	42ab      	cmp	r3, r5
 80084a8:	d3ef      	bcc.n	800848a <_realloc_r+0x14>
 80084aa:	0029      	movs	r1, r5
 80084ac:	0030      	movs	r0, r6
 80084ae:	f7ff f91b 	bl	80076e8 <_malloc_r>
 80084b2:	9001      	str	r0, [sp, #4]
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d101      	bne.n	80084bc <_realloc_r+0x46>
 80084b8:	9c01      	ldr	r4, [sp, #4]
 80084ba:	e7e6      	b.n	800848a <_realloc_r+0x14>
 80084bc:	002a      	movs	r2, r5
 80084be:	42bd      	cmp	r5, r7
 80084c0:	d900      	bls.n	80084c4 <_realloc_r+0x4e>
 80084c2:	003a      	movs	r2, r7
 80084c4:	0021      	movs	r1, r4
 80084c6:	9801      	ldr	r0, [sp, #4]
 80084c8:	f7ff ff6e 	bl	80083a8 <memcpy>
 80084cc:	0021      	movs	r1, r4
 80084ce:	0030      	movs	r0, r6
 80084d0:	f7ff f894 	bl	80075fc <_free_r>
 80084d4:	e7f0      	b.n	80084b8 <_realloc_r+0x42>

080084d6 <__ascii_wctomb>:
 80084d6:	0003      	movs	r3, r0
 80084d8:	1e08      	subs	r0, r1, #0
 80084da:	d005      	beq.n	80084e8 <__ascii_wctomb+0x12>
 80084dc:	2aff      	cmp	r2, #255	@ 0xff
 80084de:	d904      	bls.n	80084ea <__ascii_wctomb+0x14>
 80084e0:	228a      	movs	r2, #138	@ 0x8a
 80084e2:	2001      	movs	r0, #1
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	4240      	negs	r0, r0
 80084e8:	4770      	bx	lr
 80084ea:	2001      	movs	r0, #1
 80084ec:	700a      	strb	r2, [r1, #0]
 80084ee:	e7fb      	b.n	80084e8 <__ascii_wctomb+0x12>

080084f0 <fiprintf>:
 80084f0:	b40e      	push	{r1, r2, r3}
 80084f2:	b517      	push	{r0, r1, r2, r4, lr}
 80084f4:	4c05      	ldr	r4, [pc, #20]	@ (800850c <fiprintf+0x1c>)
 80084f6:	ab05      	add	r3, sp, #20
 80084f8:	cb04      	ldmia	r3!, {r2}
 80084fa:	0001      	movs	r1, r0
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	f000 f83c 	bl	800857c <_vfiprintf_r>
 8008504:	bc1e      	pop	{r1, r2, r3, r4}
 8008506:	bc08      	pop	{r3}
 8008508:	b003      	add	sp, #12
 800850a:	4718      	bx	r3
 800850c:	20000018 	.word	0x20000018

08008510 <abort>:
 8008510:	2006      	movs	r0, #6
 8008512:	b510      	push	{r4, lr}
 8008514:	f000 fa18 	bl	8008948 <raise>
 8008518:	2001      	movs	r0, #1
 800851a:	f7fa fd54 	bl	8002fc6 <_exit>

0800851e <_malloc_usable_size_r>:
 800851e:	1f0b      	subs	r3, r1, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	1f18      	subs	r0, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	da01      	bge.n	800852c <_malloc_usable_size_r+0xe>
 8008528:	580b      	ldr	r3, [r1, r0]
 800852a:	18c0      	adds	r0, r0, r3
 800852c:	4770      	bx	lr

0800852e <__sfputc_r>:
 800852e:	6893      	ldr	r3, [r2, #8]
 8008530:	b510      	push	{r4, lr}
 8008532:	3b01      	subs	r3, #1
 8008534:	6093      	str	r3, [r2, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	da04      	bge.n	8008544 <__sfputc_r+0x16>
 800853a:	6994      	ldr	r4, [r2, #24]
 800853c:	42a3      	cmp	r3, r4
 800853e:	db07      	blt.n	8008550 <__sfputc_r+0x22>
 8008540:	290a      	cmp	r1, #10
 8008542:	d005      	beq.n	8008550 <__sfputc_r+0x22>
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	1c58      	adds	r0, r3, #1
 8008548:	6010      	str	r0, [r2, #0]
 800854a:	7019      	strb	r1, [r3, #0]
 800854c:	0008      	movs	r0, r1
 800854e:	bd10      	pop	{r4, pc}
 8008550:	f000 f930 	bl	80087b4 <__swbuf_r>
 8008554:	0001      	movs	r1, r0
 8008556:	e7f9      	b.n	800854c <__sfputc_r+0x1e>

08008558 <__sfputs_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	0006      	movs	r6, r0
 800855c:	000f      	movs	r7, r1
 800855e:	0014      	movs	r4, r2
 8008560:	18d5      	adds	r5, r2, r3
 8008562:	42ac      	cmp	r4, r5
 8008564:	d101      	bne.n	800856a <__sfputs_r+0x12>
 8008566:	2000      	movs	r0, #0
 8008568:	e007      	b.n	800857a <__sfputs_r+0x22>
 800856a:	7821      	ldrb	r1, [r4, #0]
 800856c:	003a      	movs	r2, r7
 800856e:	0030      	movs	r0, r6
 8008570:	f7ff ffdd 	bl	800852e <__sfputc_r>
 8008574:	3401      	adds	r4, #1
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	d1f3      	bne.n	8008562 <__sfputs_r+0xa>
 800857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800857c <_vfiprintf_r>:
 800857c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800857e:	b0a1      	sub	sp, #132	@ 0x84
 8008580:	000f      	movs	r7, r1
 8008582:	0015      	movs	r5, r2
 8008584:	001e      	movs	r6, r3
 8008586:	9003      	str	r0, [sp, #12]
 8008588:	2800      	cmp	r0, #0
 800858a:	d004      	beq.n	8008596 <_vfiprintf_r+0x1a>
 800858c:	6a03      	ldr	r3, [r0, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <_vfiprintf_r+0x1a>
 8008592:	f7fe f875 	bl	8006680 <__sinit>
 8008596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008598:	07db      	lsls	r3, r3, #31
 800859a:	d405      	bmi.n	80085a8 <_vfiprintf_r+0x2c>
 800859c:	89bb      	ldrh	r3, [r7, #12]
 800859e:	059b      	lsls	r3, r3, #22
 80085a0:	d402      	bmi.n	80085a8 <_vfiprintf_r+0x2c>
 80085a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085a4:	f7fe f9a7 	bl	80068f6 <__retarget_lock_acquire_recursive>
 80085a8:	89bb      	ldrh	r3, [r7, #12]
 80085aa:	071b      	lsls	r3, r3, #28
 80085ac:	d502      	bpl.n	80085b4 <_vfiprintf_r+0x38>
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d113      	bne.n	80085dc <_vfiprintf_r+0x60>
 80085b4:	0039      	movs	r1, r7
 80085b6:	9803      	ldr	r0, [sp, #12]
 80085b8:	f000 f93e 	bl	8008838 <__swsetup_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d00d      	beq.n	80085dc <_vfiprintf_r+0x60>
 80085c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d503      	bpl.n	80085ce <_vfiprintf_r+0x52>
 80085c6:	2001      	movs	r0, #1
 80085c8:	4240      	negs	r0, r0
 80085ca:	b021      	add	sp, #132	@ 0x84
 80085cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ce:	89bb      	ldrh	r3, [r7, #12]
 80085d0:	059b      	lsls	r3, r3, #22
 80085d2:	d4f8      	bmi.n	80085c6 <_vfiprintf_r+0x4a>
 80085d4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085d6:	f7fe f98f 	bl	80068f8 <__retarget_lock_release_recursive>
 80085da:	e7f4      	b.n	80085c6 <_vfiprintf_r+0x4a>
 80085dc:	2300      	movs	r3, #0
 80085de:	ac08      	add	r4, sp, #32
 80085e0:	6163      	str	r3, [r4, #20]
 80085e2:	3320      	adds	r3, #32
 80085e4:	7663      	strb	r3, [r4, #25]
 80085e6:	3310      	adds	r3, #16
 80085e8:	76a3      	strb	r3, [r4, #26]
 80085ea:	9607      	str	r6, [sp, #28]
 80085ec:	002e      	movs	r6, r5
 80085ee:	7833      	ldrb	r3, [r6, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <_vfiprintf_r+0x7c>
 80085f4:	2b25      	cmp	r3, #37	@ 0x25
 80085f6:	d148      	bne.n	800868a <_vfiprintf_r+0x10e>
 80085f8:	1b73      	subs	r3, r6, r5
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	42ae      	cmp	r6, r5
 80085fe:	d00b      	beq.n	8008618 <_vfiprintf_r+0x9c>
 8008600:	002a      	movs	r2, r5
 8008602:	0039      	movs	r1, r7
 8008604:	9803      	ldr	r0, [sp, #12]
 8008606:	f7ff ffa7 	bl	8008558 <__sfputs_r>
 800860a:	3001      	adds	r0, #1
 800860c:	d100      	bne.n	8008610 <_vfiprintf_r+0x94>
 800860e:	e0ae      	b.n	800876e <_vfiprintf_r+0x1f2>
 8008610:	6963      	ldr	r3, [r4, #20]
 8008612:	9a05      	ldr	r2, [sp, #20]
 8008614:	189b      	adds	r3, r3, r2
 8008616:	6163      	str	r3, [r4, #20]
 8008618:	7833      	ldrb	r3, [r6, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d100      	bne.n	8008620 <_vfiprintf_r+0xa4>
 800861e:	e0a6      	b.n	800876e <_vfiprintf_r+0x1f2>
 8008620:	2201      	movs	r2, #1
 8008622:	2300      	movs	r3, #0
 8008624:	4252      	negs	r2, r2
 8008626:	6062      	str	r2, [r4, #4]
 8008628:	a904      	add	r1, sp, #16
 800862a:	3254      	adds	r2, #84	@ 0x54
 800862c:	1852      	adds	r2, r2, r1
 800862e:	1c75      	adds	r5, r6, #1
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	60e3      	str	r3, [r4, #12]
 8008634:	60a3      	str	r3, [r4, #8]
 8008636:	7013      	strb	r3, [r2, #0]
 8008638:	65a3      	str	r3, [r4, #88]	@ 0x58
 800863a:	4b59      	ldr	r3, [pc, #356]	@ (80087a0 <_vfiprintf_r+0x224>)
 800863c:	2205      	movs	r2, #5
 800863e:	0018      	movs	r0, r3
 8008640:	7829      	ldrb	r1, [r5, #0]
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	f7fe f959 	bl	80068fa <memchr>
 8008648:	1c6e      	adds	r6, r5, #1
 800864a:	2800      	cmp	r0, #0
 800864c:	d11f      	bne.n	800868e <_vfiprintf_r+0x112>
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	06d3      	lsls	r3, r2, #27
 8008652:	d504      	bpl.n	800865e <_vfiprintf_r+0xe2>
 8008654:	2353      	movs	r3, #83	@ 0x53
 8008656:	a904      	add	r1, sp, #16
 8008658:	185b      	adds	r3, r3, r1
 800865a:	2120      	movs	r1, #32
 800865c:	7019      	strb	r1, [r3, #0]
 800865e:	0713      	lsls	r3, r2, #28
 8008660:	d504      	bpl.n	800866c <_vfiprintf_r+0xf0>
 8008662:	2353      	movs	r3, #83	@ 0x53
 8008664:	a904      	add	r1, sp, #16
 8008666:	185b      	adds	r3, r3, r1
 8008668:	212b      	movs	r1, #43	@ 0x2b
 800866a:	7019      	strb	r1, [r3, #0]
 800866c:	782b      	ldrb	r3, [r5, #0]
 800866e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008670:	d016      	beq.n	80086a0 <_vfiprintf_r+0x124>
 8008672:	002e      	movs	r6, r5
 8008674:	2100      	movs	r1, #0
 8008676:	200a      	movs	r0, #10
 8008678:	68e3      	ldr	r3, [r4, #12]
 800867a:	7832      	ldrb	r2, [r6, #0]
 800867c:	1c75      	adds	r5, r6, #1
 800867e:	3a30      	subs	r2, #48	@ 0x30
 8008680:	2a09      	cmp	r2, #9
 8008682:	d950      	bls.n	8008726 <_vfiprintf_r+0x1aa>
 8008684:	2900      	cmp	r1, #0
 8008686:	d111      	bne.n	80086ac <_vfiprintf_r+0x130>
 8008688:	e017      	b.n	80086ba <_vfiprintf_r+0x13e>
 800868a:	3601      	adds	r6, #1
 800868c:	e7af      	b.n	80085ee <_vfiprintf_r+0x72>
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	1ac0      	subs	r0, r0, r3
 8008694:	2301      	movs	r3, #1
 8008696:	4083      	lsls	r3, r0
 8008698:	4313      	orrs	r3, r2
 800869a:	0035      	movs	r5, r6
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	e7cc      	b.n	800863a <_vfiprintf_r+0xbe>
 80086a0:	9b07      	ldr	r3, [sp, #28]
 80086a2:	1d19      	adds	r1, r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	9107      	str	r1, [sp, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db01      	blt.n	80086b0 <_vfiprintf_r+0x134>
 80086ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ae:	e004      	b.n	80086ba <_vfiprintf_r+0x13e>
 80086b0:	425b      	negs	r3, r3
 80086b2:	60e3      	str	r3, [r4, #12]
 80086b4:	2302      	movs	r3, #2
 80086b6:	4313      	orrs	r3, r2
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	7833      	ldrb	r3, [r6, #0]
 80086bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086be:	d10c      	bne.n	80086da <_vfiprintf_r+0x15e>
 80086c0:	7873      	ldrb	r3, [r6, #1]
 80086c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c4:	d134      	bne.n	8008730 <_vfiprintf_r+0x1b4>
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	3602      	adds	r6, #2
 80086ca:	1d1a      	adds	r2, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	9207      	str	r2, [sp, #28]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da01      	bge.n	80086d8 <_vfiprintf_r+0x15c>
 80086d4:	2301      	movs	r3, #1
 80086d6:	425b      	negs	r3, r3
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	4d32      	ldr	r5, [pc, #200]	@ (80087a4 <_vfiprintf_r+0x228>)
 80086dc:	2203      	movs	r2, #3
 80086de:	0028      	movs	r0, r5
 80086e0:	7831      	ldrb	r1, [r6, #0]
 80086e2:	f7fe f90a 	bl	80068fa <memchr>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d006      	beq.n	80086f8 <_vfiprintf_r+0x17c>
 80086ea:	2340      	movs	r3, #64	@ 0x40
 80086ec:	1b40      	subs	r0, r0, r5
 80086ee:	4083      	lsls	r3, r0
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	3601      	adds	r6, #1
 80086f4:	4313      	orrs	r3, r2
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	7831      	ldrb	r1, [r6, #0]
 80086fa:	2206      	movs	r2, #6
 80086fc:	482a      	ldr	r0, [pc, #168]	@ (80087a8 <_vfiprintf_r+0x22c>)
 80086fe:	1c75      	adds	r5, r6, #1
 8008700:	7621      	strb	r1, [r4, #24]
 8008702:	f7fe f8fa 	bl	80068fa <memchr>
 8008706:	2800      	cmp	r0, #0
 8008708:	d040      	beq.n	800878c <_vfiprintf_r+0x210>
 800870a:	4b28      	ldr	r3, [pc, #160]	@ (80087ac <_vfiprintf_r+0x230>)
 800870c:	2b00      	cmp	r3, #0
 800870e:	d122      	bne.n	8008756 <_vfiprintf_r+0x1da>
 8008710:	2207      	movs	r2, #7
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	3307      	adds	r3, #7
 8008716:	4393      	bics	r3, r2
 8008718:	3308      	adds	r3, #8
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	6963      	ldr	r3, [r4, #20]
 800871e:	9a04      	ldr	r2, [sp, #16]
 8008720:	189b      	adds	r3, r3, r2
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	e762      	b.n	80085ec <_vfiprintf_r+0x70>
 8008726:	4343      	muls	r3, r0
 8008728:	002e      	movs	r6, r5
 800872a:	2101      	movs	r1, #1
 800872c:	189b      	adds	r3, r3, r2
 800872e:	e7a4      	b.n	800867a <_vfiprintf_r+0xfe>
 8008730:	2300      	movs	r3, #0
 8008732:	200a      	movs	r0, #10
 8008734:	0019      	movs	r1, r3
 8008736:	3601      	adds	r6, #1
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	7832      	ldrb	r2, [r6, #0]
 800873c:	1c75      	adds	r5, r6, #1
 800873e:	3a30      	subs	r2, #48	@ 0x30
 8008740:	2a09      	cmp	r2, #9
 8008742:	d903      	bls.n	800874c <_vfiprintf_r+0x1d0>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0c8      	beq.n	80086da <_vfiprintf_r+0x15e>
 8008748:	9109      	str	r1, [sp, #36]	@ 0x24
 800874a:	e7c6      	b.n	80086da <_vfiprintf_r+0x15e>
 800874c:	4341      	muls	r1, r0
 800874e:	002e      	movs	r6, r5
 8008750:	2301      	movs	r3, #1
 8008752:	1889      	adds	r1, r1, r2
 8008754:	e7f1      	b.n	800873a <_vfiprintf_r+0x1be>
 8008756:	aa07      	add	r2, sp, #28
 8008758:	9200      	str	r2, [sp, #0]
 800875a:	0021      	movs	r1, r4
 800875c:	003a      	movs	r2, r7
 800875e:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <_vfiprintf_r+0x234>)
 8008760:	9803      	ldr	r0, [sp, #12]
 8008762:	f7fd fb43 	bl	8005dec <_printf_float>
 8008766:	9004      	str	r0, [sp, #16]
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	d1d6      	bne.n	800871c <_vfiprintf_r+0x1a0>
 800876e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008770:	07db      	lsls	r3, r3, #31
 8008772:	d405      	bmi.n	8008780 <_vfiprintf_r+0x204>
 8008774:	89bb      	ldrh	r3, [r7, #12]
 8008776:	059b      	lsls	r3, r3, #22
 8008778:	d402      	bmi.n	8008780 <_vfiprintf_r+0x204>
 800877a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800877c:	f7fe f8bc 	bl	80068f8 <__retarget_lock_release_recursive>
 8008780:	89bb      	ldrh	r3, [r7, #12]
 8008782:	065b      	lsls	r3, r3, #25
 8008784:	d500      	bpl.n	8008788 <_vfiprintf_r+0x20c>
 8008786:	e71e      	b.n	80085c6 <_vfiprintf_r+0x4a>
 8008788:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800878a:	e71e      	b.n	80085ca <_vfiprintf_r+0x4e>
 800878c:	aa07      	add	r2, sp, #28
 800878e:	9200      	str	r2, [sp, #0]
 8008790:	0021      	movs	r1, r4
 8008792:	003a      	movs	r2, r7
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <_vfiprintf_r+0x234>)
 8008796:	9803      	ldr	r0, [sp, #12]
 8008798:	f7fd fdd6 	bl	8006348 <_printf_i>
 800879c:	e7e3      	b.n	8008766 <_vfiprintf_r+0x1ea>
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	08008caa 	.word	0x08008caa
 80087a4:	08008cb0 	.word	0x08008cb0
 80087a8:	08008cb4 	.word	0x08008cb4
 80087ac:	08005ded 	.word	0x08005ded
 80087b0:	08008559 	.word	0x08008559

080087b4 <__swbuf_r>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	0006      	movs	r6, r0
 80087b8:	000d      	movs	r5, r1
 80087ba:	0014      	movs	r4, r2
 80087bc:	2800      	cmp	r0, #0
 80087be:	d004      	beq.n	80087ca <__swbuf_r+0x16>
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <__swbuf_r+0x16>
 80087c6:	f7fd ff5b 	bl	8006680 <__sinit>
 80087ca:	69a3      	ldr	r3, [r4, #24]
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	071b      	lsls	r3, r3, #28
 80087d2:	d502      	bpl.n	80087da <__swbuf_r+0x26>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <__swbuf_r+0x3a>
 80087da:	0021      	movs	r1, r4
 80087dc:	0030      	movs	r0, r6
 80087de:	f000 f82b 	bl	8008838 <__swsetup_r>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d003      	beq.n	80087ee <__swbuf_r+0x3a>
 80087e6:	2501      	movs	r5, #1
 80087e8:	426d      	negs	r5, r5
 80087ea:	0028      	movs	r0, r5
 80087ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	b2ef      	uxtb	r7, r5
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	6963      	ldr	r3, [r4, #20]
 80087f8:	b2ed      	uxtb	r5, r5
 80087fa:	4283      	cmp	r3, r0
 80087fc:	dc05      	bgt.n	800880a <__swbuf_r+0x56>
 80087fe:	0021      	movs	r1, r4
 8008800:	0030      	movs	r0, r6
 8008802:	f7ff fd81 	bl	8008308 <_fflush_r>
 8008806:	2800      	cmp	r0, #0
 8008808:	d1ed      	bne.n	80087e6 <__swbuf_r+0x32>
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	3001      	adds	r0, #1
 800880e:	3b01      	subs	r3, #1
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	701f      	strb	r7, [r3, #0]
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	4283      	cmp	r3, r0
 800881e:	d004      	beq.n	800882a <__swbuf_r+0x76>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	07db      	lsls	r3, r3, #31
 8008824:	d5e1      	bpl.n	80087ea <__swbuf_r+0x36>
 8008826:	2d0a      	cmp	r5, #10
 8008828:	d1df      	bne.n	80087ea <__swbuf_r+0x36>
 800882a:	0021      	movs	r1, r4
 800882c:	0030      	movs	r0, r6
 800882e:	f7ff fd6b 	bl	8008308 <_fflush_r>
 8008832:	2800      	cmp	r0, #0
 8008834:	d0d9      	beq.n	80087ea <__swbuf_r+0x36>
 8008836:	e7d6      	b.n	80087e6 <__swbuf_r+0x32>

08008838 <__swsetup_r>:
 8008838:	4b2d      	ldr	r3, [pc, #180]	@ (80088f0 <__swsetup_r+0xb8>)
 800883a:	b570      	push	{r4, r5, r6, lr}
 800883c:	0005      	movs	r5, r0
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	000c      	movs	r4, r1
 8008842:	2800      	cmp	r0, #0
 8008844:	d004      	beq.n	8008850 <__swsetup_r+0x18>
 8008846:	6a03      	ldr	r3, [r0, #32]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <__swsetup_r+0x18>
 800884c:	f7fd ff18 	bl	8006680 <__sinit>
 8008850:	220c      	movs	r2, #12
 8008852:	5ea3      	ldrsh	r3, [r4, r2]
 8008854:	071a      	lsls	r2, r3, #28
 8008856:	d423      	bmi.n	80088a0 <__swsetup_r+0x68>
 8008858:	06da      	lsls	r2, r3, #27
 800885a:	d407      	bmi.n	800886c <__swsetup_r+0x34>
 800885c:	2209      	movs	r2, #9
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	2240      	movs	r2, #64	@ 0x40
 8008862:	2001      	movs	r0, #1
 8008864:	4313      	orrs	r3, r2
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	4240      	negs	r0, r0
 800886a:	e03a      	b.n	80088e2 <__swsetup_r+0xaa>
 800886c:	075b      	lsls	r3, r3, #29
 800886e:	d513      	bpl.n	8008898 <__swsetup_r+0x60>
 8008870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008872:	2900      	cmp	r1, #0
 8008874:	d008      	beq.n	8008888 <__swsetup_r+0x50>
 8008876:	0023      	movs	r3, r4
 8008878:	3344      	adds	r3, #68	@ 0x44
 800887a:	4299      	cmp	r1, r3
 800887c:	d002      	beq.n	8008884 <__swsetup_r+0x4c>
 800887e:	0028      	movs	r0, r5
 8008880:	f7fe febc 	bl	80075fc <_free_r>
 8008884:	2300      	movs	r3, #0
 8008886:	6363      	str	r3, [r4, #52]	@ 0x34
 8008888:	2224      	movs	r2, #36	@ 0x24
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	4393      	bics	r3, r2
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	2300      	movs	r3, #0
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	2308      	movs	r3, #8
 800889a:	89a2      	ldrh	r2, [r4, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <__swsetup_r+0x86>
 80088a6:	21a0      	movs	r1, #160	@ 0xa0
 80088a8:	2280      	movs	r2, #128	@ 0x80
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	0089      	lsls	r1, r1, #2
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	400b      	ands	r3, r1
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d003      	beq.n	80088be <__swsetup_r+0x86>
 80088b6:	0021      	movs	r1, r4
 80088b8:	0028      	movs	r0, r5
 80088ba:	f000 f88f 	bl	80089dc <__smakebuf_r>
 80088be:	220c      	movs	r2, #12
 80088c0:	5ea3      	ldrsh	r3, [r4, r2]
 80088c2:	2101      	movs	r1, #1
 80088c4:	001a      	movs	r2, r3
 80088c6:	400a      	ands	r2, r1
 80088c8:	420b      	tst	r3, r1
 80088ca:	d00b      	beq.n	80088e4 <__swsetup_r+0xac>
 80088cc:	2200      	movs	r2, #0
 80088ce:	60a2      	str	r2, [r4, #8]
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	4252      	negs	r2, r2
 80088d4:	61a2      	str	r2, [r4, #24]
 80088d6:	2000      	movs	r0, #0
 80088d8:	6922      	ldr	r2, [r4, #16]
 80088da:	4282      	cmp	r2, r0
 80088dc:	d101      	bne.n	80088e2 <__swsetup_r+0xaa>
 80088de:	061a      	lsls	r2, r3, #24
 80088e0:	d4be      	bmi.n	8008860 <__swsetup_r+0x28>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	0799      	lsls	r1, r3, #30
 80088e6:	d400      	bmi.n	80088ea <__swsetup_r+0xb2>
 80088e8:	6962      	ldr	r2, [r4, #20]
 80088ea:	60a2      	str	r2, [r4, #8]
 80088ec:	e7f3      	b.n	80088d6 <__swsetup_r+0x9e>
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	20000018 	.word	0x20000018

080088f4 <_raise_r>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	0004      	movs	r4, r0
 80088f8:	000d      	movs	r5, r1
 80088fa:	291f      	cmp	r1, #31
 80088fc:	d904      	bls.n	8008908 <_raise_r+0x14>
 80088fe:	2316      	movs	r3, #22
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	2001      	movs	r0, #1
 8008904:	4240      	negs	r0, r0
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <_raise_r+0x24>
 800890e:	008a      	lsls	r2, r1, #2
 8008910:	189b      	adds	r3, r3, r2
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	2a00      	cmp	r2, #0
 8008916:	d108      	bne.n	800892a <_raise_r+0x36>
 8008918:	0020      	movs	r0, r4
 800891a:	f000 f831 	bl	8008980 <_getpid_r>
 800891e:	002a      	movs	r2, r5
 8008920:	0001      	movs	r1, r0
 8008922:	0020      	movs	r0, r4
 8008924:	f000 f81a 	bl	800895c <_kill_r>
 8008928:	e7ed      	b.n	8008906 <_raise_r+0x12>
 800892a:	2a01      	cmp	r2, #1
 800892c:	d009      	beq.n	8008942 <_raise_r+0x4e>
 800892e:	1c51      	adds	r1, r2, #1
 8008930:	d103      	bne.n	800893a <_raise_r+0x46>
 8008932:	2316      	movs	r3, #22
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	2001      	movs	r0, #1
 8008938:	e7e5      	b.n	8008906 <_raise_r+0x12>
 800893a:	2100      	movs	r1, #0
 800893c:	0028      	movs	r0, r5
 800893e:	6019      	str	r1, [r3, #0]
 8008940:	4790      	blx	r2
 8008942:	2000      	movs	r0, #0
 8008944:	e7df      	b.n	8008906 <_raise_r+0x12>
	...

08008948 <raise>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4b03      	ldr	r3, [pc, #12]	@ (8008958 <raise+0x10>)
 800894c:	0001      	movs	r1, r0
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	f7ff ffd0 	bl	80088f4 <_raise_r>
 8008954:	bd10      	pop	{r4, pc}
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	20000018 	.word	0x20000018

0800895c <_kill_r>:
 800895c:	2300      	movs	r3, #0
 800895e:	b570      	push	{r4, r5, r6, lr}
 8008960:	4d06      	ldr	r5, [pc, #24]	@ (800897c <_kill_r+0x20>)
 8008962:	0004      	movs	r4, r0
 8008964:	0008      	movs	r0, r1
 8008966:	0011      	movs	r1, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f7fa fb1c 	bl	8002fa6 <_kill>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d103      	bne.n	800897a <_kill_r+0x1e>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d000      	beq.n	800897a <_kill_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	20000410 	.word	0x20000410

08008980 <_getpid_r>:
 8008980:	b510      	push	{r4, lr}
 8008982:	f7fa fb0a 	bl	8002f9a <_getpid>
 8008986:	bd10      	pop	{r4, pc}

08008988 <__swhatbuf_r>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	000e      	movs	r6, r1
 800898c:	001d      	movs	r5, r3
 800898e:	230e      	movs	r3, #14
 8008990:	5ec9      	ldrsh	r1, [r1, r3]
 8008992:	0014      	movs	r4, r2
 8008994:	b096      	sub	sp, #88	@ 0x58
 8008996:	2900      	cmp	r1, #0
 8008998:	da0c      	bge.n	80089b4 <__swhatbuf_r+0x2c>
 800899a:	89b2      	ldrh	r2, [r6, #12]
 800899c:	2380      	movs	r3, #128	@ 0x80
 800899e:	0011      	movs	r1, r2
 80089a0:	4019      	ands	r1, r3
 80089a2:	421a      	tst	r2, r3
 80089a4:	d114      	bne.n	80089d0 <__swhatbuf_r+0x48>
 80089a6:	2380      	movs	r3, #128	@ 0x80
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	2000      	movs	r0, #0
 80089ac:	6029      	str	r1, [r5, #0]
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	b016      	add	sp, #88	@ 0x58
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	466a      	mov	r2, sp
 80089b6:	f000 f853 	bl	8008a60 <_fstat_r>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	dbed      	blt.n	800899a <__swhatbuf_r+0x12>
 80089be:	23f0      	movs	r3, #240	@ 0xf0
 80089c0:	9901      	ldr	r1, [sp, #4]
 80089c2:	021b      	lsls	r3, r3, #8
 80089c4:	4019      	ands	r1, r3
 80089c6:	4b04      	ldr	r3, [pc, #16]	@ (80089d8 <__swhatbuf_r+0x50>)
 80089c8:	18c9      	adds	r1, r1, r3
 80089ca:	424b      	negs	r3, r1
 80089cc:	4159      	adcs	r1, r3
 80089ce:	e7ea      	b.n	80089a6 <__swhatbuf_r+0x1e>
 80089d0:	2100      	movs	r1, #0
 80089d2:	2340      	movs	r3, #64	@ 0x40
 80089d4:	e7e9      	b.n	80089aa <__swhatbuf_r+0x22>
 80089d6:	46c0      	nop			@ (mov r8, r8)
 80089d8:	ffffe000 	.word	0xffffe000

080089dc <__smakebuf_r>:
 80089dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089de:	2602      	movs	r6, #2
 80089e0:	898b      	ldrh	r3, [r1, #12]
 80089e2:	0005      	movs	r5, r0
 80089e4:	000c      	movs	r4, r1
 80089e6:	b085      	sub	sp, #20
 80089e8:	4233      	tst	r3, r6
 80089ea:	d007      	beq.n	80089fc <__smakebuf_r+0x20>
 80089ec:	0023      	movs	r3, r4
 80089ee:	3347      	adds	r3, #71	@ 0x47
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	6123      	str	r3, [r4, #16]
 80089f4:	2301      	movs	r3, #1
 80089f6:	6163      	str	r3, [r4, #20]
 80089f8:	b005      	add	sp, #20
 80089fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fc:	ab03      	add	r3, sp, #12
 80089fe:	aa02      	add	r2, sp, #8
 8008a00:	f7ff ffc2 	bl	8008988 <__swhatbuf_r>
 8008a04:	9f02      	ldr	r7, [sp, #8]
 8008a06:	9001      	str	r0, [sp, #4]
 8008a08:	0039      	movs	r1, r7
 8008a0a:	0028      	movs	r0, r5
 8008a0c:	f7fe fe6c 	bl	80076e8 <_malloc_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d108      	bne.n	8008a26 <__smakebuf_r+0x4a>
 8008a14:	220c      	movs	r2, #12
 8008a16:	5ea3      	ldrsh	r3, [r4, r2]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d4ed      	bmi.n	80089f8 <__smakebuf_r+0x1c>
 8008a1c:	2203      	movs	r2, #3
 8008a1e:	4393      	bics	r3, r2
 8008a20:	431e      	orrs	r6, r3
 8008a22:	81a6      	strh	r6, [r4, #12]
 8008a24:	e7e2      	b.n	80089ec <__smakebuf_r+0x10>
 8008a26:	2380      	movs	r3, #128	@ 0x80
 8008a28:	89a2      	ldrh	r2, [r4, #12]
 8008a2a:	6020      	str	r0, [r4, #0]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	6120      	str	r0, [r4, #16]
 8008a34:	6167      	str	r7, [r4, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <__smakebuf_r+0x78>
 8008a3a:	0028      	movs	r0, r5
 8008a3c:	230e      	movs	r3, #14
 8008a3e:	5ee1      	ldrsh	r1, [r4, r3]
 8008a40:	f000 f820 	bl	8008a84 <_isatty_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d005      	beq.n	8008a54 <__smakebuf_r+0x78>
 8008a48:	2303      	movs	r3, #3
 8008a4a:	89a2      	ldrh	r2, [r4, #12]
 8008a4c:	439a      	bics	r2, r3
 8008a4e:	3b02      	subs	r3, #2
 8008a50:	4313      	orrs	r3, r2
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	9a01      	ldr	r2, [sp, #4]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	e7cc      	b.n	80089f8 <__smakebuf_r+0x1c>
	...

08008a60 <_fstat_r>:
 8008a60:	2300      	movs	r3, #0
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	4d06      	ldr	r5, [pc, #24]	@ (8008a80 <_fstat_r+0x20>)
 8008a66:	0004      	movs	r4, r0
 8008a68:	0008      	movs	r0, r1
 8008a6a:	0011      	movs	r1, r2
 8008a6c:	602b      	str	r3, [r5, #0]
 8008a6e:	f7fa fafa 	bl	8003066 <_fstat>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	d103      	bne.n	8008a7e <_fstat_r+0x1e>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d000      	beq.n	8008a7e <_fstat_r+0x1e>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	20000410 	.word	0x20000410

08008a84 <_isatty_r>:
 8008a84:	2300      	movs	r3, #0
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_isatty_r+0x20>)
 8008a8a:	0004      	movs	r4, r0
 8008a8c:	0008      	movs	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7fa faf7 	bl	8003082 <_isatty>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d103      	bne.n	8008aa0 <_isatty_r+0x1c>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d000      	beq.n	8008aa0 <_isatty_r+0x1c>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	20000410 	.word	0x20000410

08008aa8 <_init>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	46c0      	nop			@ (mov r8, r8)
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_fini>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	46c0      	nop			@ (mov r8, r8)
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr
